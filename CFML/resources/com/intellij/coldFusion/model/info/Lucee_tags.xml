<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2000-2018 JetBrains s.r.o.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<dictionary>
  <doc link="https://docs.lucee.org/reference/tags.html"/>
  <tags>
    <tag name="cf_socialplugin" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cf_socialplugin> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfabort" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Stops processing of a page at the tag location. CFML returns everything that was processed before the cfabort tag. The cfabort tag is often used with conditional logic to stop processing a page when a condition occurs.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					Define the abort type.
				]]></help>
        <values default="request">
          <value option="request"/>
          <value option="page"/>
        </values>
      </parameter>
      <parameter name="showerror" required="false" type="string">
        <help><![CDATA[
					The error to display when cfabort executes. The error message displays in the standard CFML error page.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfajaximport" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Controls the JavaScript files that are imported for use on pages that use ColdFusion AJAX tags and features.
				This tag may have a body.
				This tag has no <cfscript> support or it uses a different syntax.]]></help>
      <parameter name="scriptsrc" required="false" type="string">
        <help><![CDATA[
					Specifies the URL, relative to the web root, of the directory that contains the JavaScript files used used by Lucee.
				]]></help>
        <values/>
      </parameter>
      <parameter name="params" required="false" type="struct">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="csssrc" required="false" type="string">
        <help><![CDATA[
					Specifies the URL, relative to the web root, of the directory that contains the CSS files used by AJAX features
				]]></help>
        <values/>
      </parameter>
      <parameter name="adapter" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="tags" required="false" type="string">
        <help><![CDATA[
					A comma-delimited list of tags or tag-attribute combinations for which to import the supporting JavaScript files on this page.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfajaxproxy" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Creates a JavaScript proxy for a ColdFusion component, for use in an AJAX client. Alternatively, creates a proxy for a single CFC method, JavaScript function, or URL that is bound to one or more control attribute values.
				This tag may have a body.
				This tag has no <cfscript> support or it uses a different syntax.]]></help>
      <parameter name="jsclassname" required="false" type="string">
        <help><![CDATA[
					The name to use for the JavaScript proxy class.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onerror" required="false" type="string">
        <help><![CDATA[
					The name of a JavaScript function to invoke when a bind, specified by the bind attribute fails. The function must take two arguments: an error code and an error message.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onsuccess" required="false" type="string">
        <help><![CDATA[
					The name of a JavaScript function to invoke when a bind, specified by the bind attribute succeeds. The function must take one argument, the bind function return value. If the bind function is a CFC function, the return value is automatically converted to a JavaScript variable before being passed to the onSuccess function.
				]]></help>
        <values/>
      </parameter>
      <parameter name="extends" required="false" type="boolean">
        <help><![CDATA[
					If true force ajaxproxy to look for remote methods in the cfc extensions chain. Any remote method found will be added to the proxy object. This atrribute cannot be used with a bind attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="methods" required="false" type="string">
        <help><![CDATA[
					Comma delimited list of methods name. If exists only the method ( if remote ) specified will be exposed in the proxy object.
				]]></help>
        <values/>
      </parameter>
      <parameter name="cfc" required="false" type="string">
        <help><![CDATA[
					the CFC for which to create a proxy. You must specify a dot-delimited path to the CFC. The path can be absolute or relative to location of the CFML page. For example, if the myCFC CFC is in the cfcs subdirectory of the Luceex page, specify cfcs.myCFC. On UNIX based systems, the tag searches first for a file whos name or path corresponds to the specified name or path, but is in all lower case. If it does not find it, Luceex then searches for a file name or path that coresponds to the attribute value exactly, with identical character casing.
				]]></help>
        <values/>
      </parameter>
      <parameter name="bind" required="false" type="string">
        <help><![CDATA[
					A bind expression that specifies a CFC method, JavaScript function, or URL to call. Cannot be used with the cfc attribute.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfapplet" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Used in a cfform tag, cfapplet lets you reference custom Java applets that you have registered using the Lucee Administrator.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="height" required="false" type="number">
        <help><![CDATA[
					The height of the applet, in pixels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="notsupported" required="false" type="string">
        <help><![CDATA[
					The text to display if a page containing a Java applet-based cfform control is opened by a browser that does not support Java or has Java support disabled.
				]]></help>
        <values/>
      </parameter>
      <parameter name="align" required="false" type="string">
        <help><![CDATA[
					Alignment
				]]></help>
        <values/>
      </parameter>
      <parameter name="appletsource" required="true" type="string">
        <help><![CDATA[
					The name of the registered applet.
				]]></help>
        <values/>
      </parameter>
      <parameter name="width" required="false" type="number">
        <help><![CDATA[
					The width of the applet, in pixels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="true" type="string">
        <help><![CDATA[
					The form variable name for the applet.
				]]></help>
        <values/>
      </parameter>
      <parameter name="hspace" required="false" type="number">
        <help><![CDATA[
					Space on each side of the applet, in pixels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="paramn" required="false" type="string">
        <help><![CDATA[
					The name of a registered parameter for the applet.
				]]></help>
        <values/>
      </parameter>
      <parameter name="vspace" required="false" type="number">
        <help><![CDATA[
					Space above and below applet, in pixels.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfargument" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Allows subtag data to be saved with the base tag. Applies only to custom tags.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="default" required="false" type="any">
        <help><![CDATA[
					default value of the argument
				]]></help>
        <values/>
      </parameter>
      <parameter name="required" required="false" type="boolean">
        <help><![CDATA[
					is argument required or not
				]]></help>
        <values/>
      </parameter>
      <parameter name="passby" required="false" type="string">
        <help><![CDATA[
					should the argument passed as reference (default) or as a value
				]]></help>
        <values/>
      </parameter>
      <parameter name="hint" required="false" type="string">
        <help><![CDATA[
					hint to the argument (only used by components)
				]]></help>
        <values/>
      </parameter>
      <parameter name="displayname" required="false" type="string">
        <help><![CDATA[
					name to display (only used by components)
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="true" type="string">
        <help><![CDATA[
					The name of the argument
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					the type of the argumentany (array, binary, boolean, date, guid, numeric, query, string, struct, uuid)
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfassociate" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Allows subtag data to be saved with the base tag. Applies only to custom tags.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="basetag" required="true" type="string">
        <help><![CDATA[
					The name of the base tag.
				]]></help>
        <values/>
      </parameter>
      <parameter name="datacollection" required="false" type="string">
        <help><![CDATA[
					The name of the structure in which the base tag stores subtag data.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfauthenticate" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Authenticates a user, setting a security context for the application.
				For more information, see the descriptions of IsAuthenticated and AuthenticatedContext.
				This tag cannot have a body.
				This tag is also supported within <cfscript>
				This tag does not use any attributes.]]></help>

    </tag>
    <tag name="cfbreak" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Used to break out of a cfloop,cfwhile or cfforeach.
				This tag cannot have a body.
				This tag is also supported within <cfscript>
			]]></help>
      <parameter name="label" required="false" type="string">
        <help><![CDATA[
					used to address a specific loop instead of the nearest one.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfcache" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Speeds up page rendering when dynamic content does not have to be retrieved each time a user accesses a page.
				To accomplish this, cfcache creates temporary files that contain the static HTML returned from a page.
				You can use cfcache for simple URLs and URLs that contain URL parameters.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="metadata" required="false" type="string">
        <help><![CDATA[
					Name of the struct variable
				]]></help>
        <values/>
      </parameter>
      <parameter name="cachedirectory" required="false" type="string">
        <help><![CDATA[
					Absolute path of cache directory (alias for directory).
				]]></help>
        <values/>
      </parameter>
      <parameter name="throwonerror" required="false" type="boolean">
        <help><![CDATA[
					A Boolean value specifying whether t throw an error if the flush action encounters an error. Otherwise the action does not generate an error if it fails. If this attribute is true you can handle the error in a cfcatch block, for example, if a specified id value is invalid
				]]></help>
        <values/>
      </parameter>
      <parameter name="timespan" required="false" type="timespan">
        <help><![CDATA[
					The interval until the item is flushed from the cache. A decimal number of days, for example: .25, for one-fourth day (6 hours) 1, for one day 1.5, for one and one half days A return value from the CreateTimeSpan function, for example, "#CreateTimeSpan(0,6,0,0)#". The default action is to flush the item when it is idle for the time specified by the idleTime attribute, or cfcache action="flush" executes.
				]]></help>
        <values/>
      </parameter>
      <parameter name="directory" required="false" type="string">
        <help><![CDATA[
					Absolute path of cache directory.
				]]></help>
        <values/>
      </parameter>
      <parameter name="idletime" required="false" type="timespan">
        <help><![CDATA[
					Flushes the cached item if it is not accessed for the specified time span: A decimal number of days, for example: .25, for one-fourth day (6 hours) 1, for one day 1.5, for one and one half days A return value from the CreateTimeSpan function, for example, "#CreateTimeSpan(0,6,0,0)#".
				]]></help>
        <values/>
      </parameter>
      <parameter name="cachename" required="false" type="string">
        <help><![CDATA[
					definition of the cache used by name, when not set the "default Object Cache" defined in Lucee Administrator is used instead.
				]]></help>
        <values/>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					When required for basic authentication, a valid password.
				]]></help>
        <values/>
      </parameter>
      <parameter name="protocol" required="false" type="string">
        <help><![CDATA[
					Specifies the protocol used to create pages from cache. Either http:// or https://. The default is http://.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					name of return variable, valid with action="get"
				]]></help>
        <values/>
      </parameter>
      <parameter name="id" required="false" type="any">
        <help><![CDATA[
					Id of the cached object
				]]></help>
        <values/>
      </parameter>
      <parameter name="key" required="false" type="string">
        <help><![CDATA[
					key to access cache
				]]></help>
        <values/>
      </parameter>
      <parameter name="port" required="false" type="number">
        <help><![CDATA[
					Port number of the web server from which the URL for the cached page is requested. In the internal call from cfcache to cfhttp, Lucee resolves each URL variable in the page; this ensures that links in the page remain functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="timeout" required="false" type="any">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					For action="set", object which needs to be stored
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="false" type="string">
        <help><![CDATA[
					cache (default): server-side and client-side template caching. flush: refresh cached pages (template caching). clientcache: browser-side caching only. To cache a personalized page, use this option. servercache: server-side caching only. Not recommended. optimal: same as "cache". content: same as cache, but cache only the body of the tag, not the complete template (template caching). put: adds a key value pair to object cache (see function cachePut for more details) get: gets value matching given key from object cache (see function cacheGet for more details)
				]]></help>
        <values/>
      </parameter>
      <parameter name="expireurl" required="false" type="string">
        <help><![CDATA[
					A URL reference. Can include wildcards, for example: "*/view.cfm?id=*". Lucee flushes, from the cache, pages that match the specified URL or pattern.
				]]></help>
        <values/>
      </parameter>
      <parameter name="username" required="false" type="string">
        <help><![CDATA[
					When required for basic authentication, a valid username.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfcalendar" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				The tag <cfcalendar> is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfcase" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Handle one case of a <cfswitch>
				This tag must have a body.
				This tag is also supported within <cfscript>
			]]></help>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Specifies the character that separates multiple entries in a list of values.
				]]></help>
        <values/>
      </parameter>
      <parameter name="value" required="true" type="string">
        <help><![CDATA[
					One or more constant values that cfswitch compares to the specified expression case-insensitive comparison. If a value matches the expression, cfswitch executes the code between the cfcase start and end tags. Separate multiple values with a comma or other delimiter, as specified in the delimiters parameter. Duplicate value attributes are not allowed and causes a runtime error.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfcatch" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Defines table column header, width, alignment, and text. Used only inside a cftable.
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					name for variable, by default it is cfcatch
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					Type of catch, default:Any
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfchart" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Generates and displays a chart.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="fontitalic" required="false" type="boolean">
        <help><![CDATA[
					Yes: displays grid control text in italics
				]]></help>
        <values/>
      </parameter>
      <parameter name="showmarkers" required="false" type="boolean">
        <help><![CDATA[
					Applies to chartseries type attribute values line, curve and scatter. yes: display markers at data points
				]]></help>
        <values/>
      </parameter>
      <parameter name="xaxistitle" required="false" type="string">
        <help><![CDATA[
					text; X-axis title
				]]></help>
        <values/>
      </parameter>
      <parameter name="gridlines" required="false" type="number">
        <help><![CDATA[
					Number of grid lines to display on value axis, including axis; positive integer.
				]]></help>
        <values/>
      </parameter>
      <parameter name="yaxistype" required="false" type="string">
        <help><![CDATA[
					Currently has no effect, as Y axis is always used for data values. Valid values are category and scale
				]]></help>
        <values/>
      </parameter>
      <parameter name="sortxaxis" required="false" type="boolean">
        <help><![CDATA[
					Display column labels in alphabetic order along X-axis. Ignored if the xAxisType attribute is scale.
				]]></help>
        <values/>
      </parameter>
      <parameter name="foregroundcolor" required="false" type="string">
        <help><![CDATA[
					color for control. For a hex value, use the form: textColor = "##xxxxxx", where x = 0-9 or A-F; use two hash signs or none.
				]]></help>
        <values/>
      </parameter>
      <parameter name="databackgroundcolor" required="false" type="string">
        <help><![CDATA[
					color for control. For a hex value, use the form: textColor = "##xxxxxx", where x = 0-9 or A-F; use two hash signs or none.
				]]></help>
        <values/>
      </parameter>
      <parameter name="labelformat" required="false" type="string">
        <help><![CDATA[
					Format for Y-axis labels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="style" required="false" type="string">
        <help><![CDATA[
					XML file or string to use to specify the style of the chart.
				]]></help>
        <values/>
      </parameter>
      <parameter name="show3d" required="false" type="boolean">
        <help><![CDATA[
					Display chart with three-dimensional appearance.
				]]></help>
        <values/>
      </parameter>
      <parameter name="url" required="false" type="string">
        <help><![CDATA[
					URL to open if the user clicks item in a data series; the onClick destination page.
				]]></help>
        <values/>
      </parameter>
      <parameter name="fontbold" required="false" type="boolean">
        <help><![CDATA[
					Yes: displays grid control text in bold
				]]></help>
        <values/>
      </parameter>
      <parameter name="showxlabel" required="false" type="boolean">
        <help><![CDATA[
					yes: shows the x-axis labels
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					Page variable name. String. Generates the the graph as binary data and assigns it to the specified variable. Suppresses chart display. You can use the name value in the cffile tag to write the chart to a file.
				]]></help>
        <values/>
      </parameter>
      <parameter name="categorylabelpositions" required="false" type="string">
        <help><![CDATA[
					Label postion relative to axis: standard, up_45, up_90, down_45, down_90 or horizontal (standard) and vertical (down_90). Default is horizontal.
				]]></help>
        <values/>
      </parameter>
      <parameter name="scalefrom" required="false" type="number">
        <help><![CDATA[
					Y-axis minimum value; integer
				]]></help>
        <values/>
      </parameter>
      <parameter name="backgroundcolor" required="false" type="string">
        <help><![CDATA[
					Color of the area between the data background and the chart border, around labels and around the legend. Hexadecimal value or supported named color. For a hex value, use the form: textColor = "##xxxxxx", where x = 0-9 or A-F; use two hash signs or none.
				]]></help>
        <values/>
      </parameter>
      <parameter name="chartheight" required="false" type="number">
        <help><![CDATA[
					Chart height; integer number of pixels
				]]></help>
        <values/>
      </parameter>
      <parameter name="yaxistitle" required="false" type="string">
        <help><![CDATA[
					text; X-axis title
				]]></help>
        <values/>
      </parameter>
      <parameter name="xoffset" required="false" type="number">
        <help><![CDATA[
					Applies if show3D="yes". Number of units by which to display the chart as angled, horizontally
				]]></help>
        <values/>
      </parameter>
      <parameter name="tipstyle" required="false" type="string">
        <help><![CDATA[
					Determines the action that opens a popup window to display information about the current chart element. - mouseDown: display if the user positions the cursor at the element and clicks the mouse. Applies only to Flash format graph files (Flash not supported). - mouseOver: displays if the user positions the cursor at the element - none: suppresses display
				]]></help>
        <values/>
      </parameter>
      <parameter name="scaleto" required="false" type="number">
        <help><![CDATA[
					Y-axis max value; integer
				]]></help>
        <values/>
      </parameter>
      <parameter name="format" required="false" type="string">
        <help><![CDATA[
					File format in which to save graph.
				]]></help>
        <values/>
      </parameter>
      <parameter name="font" required="false" type="string">
        <help><![CDATA[
					Font of data in column.
				]]></help>
        <values/>
      </parameter>
      <parameter name="xaxistype" required="false" type="string">
        <help><![CDATA[
					category The axis indicates the data category. Data is sorted according to the sortXAxis attribute. - scale The axis is numeric. All cfchartdata item attribute values must numeric. The X axis is automatically sorted numerically.
				]]></help>
        <values/>
      </parameter>
      <parameter name="tipbgcolor" required="false" type="string">
        <help><![CDATA[
					color for control. For a hex value, use the form: textColor = "##xxxxxx", where x = 0-9 or A-F; use two hash signs or none.
				]]></help>
        <values/>
      </parameter>
      <parameter name="source" required="false" type="string">
        <help><![CDATA[
					variable name of the source path, if set the path to the source file is returned and no image tag is written to response strea.
				]]></help>
        <values/>
      </parameter>
      <parameter name="showlegend" required="false" type="boolean">
        <help><![CDATA[
					yes: if chart contains more than one data series, display legend
				]]></help>
        <values/>
      </parameter>
      <parameter name="chartwidth" required="false" type="number">
        <help><![CDATA[
					Chart width; integer number of pixels
				]]></help>
        <values/>
      </parameter>
      <parameter name="markersize" required="false" type="number">
        <help><![CDATA[
					Size of data point marker. in pixels. Integer.
				]]></help>
        <values/>
      </parameter>
      <parameter name="showygridlines" required="false" type="boolean">
        <help><![CDATA[
					yes: display Y-axis gridlines
				]]></help>
        <values/>
      </parameter>
      <parameter name="showborder" required="false" type="any">
        <help><![CDATA[
					Whether to display a border around the chart or not (boolean), you can also define a color (string) instead.
				]]></help>
        <values/>
      </parameter>
      <parameter name="showtooltip" required="false" type="boolean">
        <help><![CDATA[
					show the tooltip or not
				]]></help>
        <values/>
      </parameter>
      <parameter name="showxgridlines" required="false" type="boolean">
        <help><![CDATA[
					yes: display X-axis gridlines
				]]></help>
        <values/>
      </parameter>
      <parameter name="title" required="false" type="string">
        <help><![CDATA[
					Title of the chart.
				]]></help>
        <values/>
      </parameter>
      <parameter name="pieslicestyle" required="false" type="string">
        <help><![CDATA[
					Applies to chartseries type attribute value pie.
				]]></help>
        <values/>
      </parameter>
      <parameter name="yoffset" required="false" type="number">
        <help><![CDATA[
					Applies if show3D="yes". Number of units by which to display the chart as angled, horizontally.
				]]></help>
        <values/>
      </parameter>
      <parameter name="fontsize" required="false" type="number">
        <help><![CDATA[
					Size of text in column.
				]]></help>
        <values/>
      </parameter>
      <parameter name="seriesplacement" required="false" type="string">
        <help><![CDATA[
					Applies to charts that have more than one data series. Relative positions of series.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfchartdata" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Used with the cfchart and cfchartseries tags. This tag defines chart data points. Its data is submitted to the cfchartseries tag.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="item" required="true" type="string">
        <help><![CDATA[
					string; data point name
				]]></help>
        <values/>
      </parameter>
      <parameter name="value" required="true" type="number">
        <help><![CDATA[
					number or expression; data point value
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfchartseries" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Used with the cfchart and cfchartseries tags. This tag defines chart data points. Its data is submitted to the cfchartseries tag.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="valuecolumn" required="false" type="string">
        <help><![CDATA[
					Name of a column in the query specified in the query attribute; contains data values to graph.
				]]></help>
        <values/>
      </parameter>
      <parameter name="itemcolumn" required="false" type="string">
        <help><![CDATA[
					Name of a column in the query specified in the query attribute; contains the item label for a data point to graph.
				]]></help>
        <values/>
      </parameter>
      <parameter name="query" required="false" type="any">
        <help><![CDATA[
					Name of CFML query from which to get data.
				]]></help>
        <values/>
      </parameter>
      <parameter name="markerstyle" required="false" type="string">
        <help><![CDATA[
					Applies to chartseries type attribute values line, curve and scatter, and show3D attribute value no.
				]]></help>
        <values/>
      </parameter>
      <parameter name="colorlist" required="false" type="string">
        <help><![CDATA[
					Applies if chartseries type attribute = "pie". Sets pie slice colors.         Comma-delimited list of hex values or supported, named web
					        colors; see name list in the cfchart Usage section.
					        For a hex value, use the form "##xxxxxx", where x = 0-9 or
					        A-F; use two pound signs or none.
				]]></help>
        <values/>
      </parameter>
      <parameter name="seriescolor" required="false" type="string">
        <help><![CDATA[
					Color of the main element (such as the bars) of a chart. For a pie chart, the color of the first slice.         Hex value or supported named color; see name list in the
					        cfchart Usage section.
					        For a hex value, use the form "##xxxxxx", where x = 0-9 or
					        A-F; use two pound signs or none.
				]]></help>
        <values/>
      </parameter>
      <parameter name="serieslabel" required="false" type="string">
        <help><![CDATA[
					Text of data series label
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="true" type="string">
        <help><![CDATA[
					Sets the chart display style
				]]></help>
        <values/>
      </parameter>
      <parameter name="datalabelstyle" required="false" type="string">
        <help><![CDATA[
					Specifies the way in which the color is applied to the item in the series: - None = nothing is printed (default) - Value = the value of the datapoint - Rowlabel = the row's label - Columnlabel = the column's label - Pattern
				]]></help>
        <values/>
      </parameter>
      <parameter name="paintstyle" required="false" type="string">
        <help><![CDATA[
					Sets the paint display style of the data series.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfclient" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfclient> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfclientsetting" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfclientsetting> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfcol" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Defines table column header, width, alignment, and text. Used only inside a cftable.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="text" required="false" type="string">
        <help><![CDATA[
					Double-quote delimited text that determines what displays in the column. The rules for the text attribute are identical to the rules for cfoutput sections; it can consist of a combination of literal text, HTML tags, and query record set field references. You can embed hyperlinks, image references, and input controls in columns.
				]]></help>
        <values/>
      </parameter>
      <parameter name="align" required="false" type="string">
        <help><![CDATA[
					Column alignment, Left, Right, or Center.
				]]></help>
        <values/>
      </parameter>
      <parameter name="width" required="false" type="number">
        <help><![CDATA[
					The width of the column in characters (the default is 20). If the length of the data displayed exceeds the width value, the data is truncated to fit.
				]]></help>
        <values/>
      </parameter>
      <parameter name="header" required="true" type="string">
        <help><![CDATA[
					The text for the column's header.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfcollection" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Allows you to create and administer Search collections.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="language" required="false" type="string">
        <help><![CDATA[
					language the collection is based on: possible values are: english, german, russian, dutch, french, italian, norwegian, portuguese, spanish, brazilian, chinese, greek,thai ,danish, japanese, norwegian, korean
				]]></help>
        <values/>
      </parameter>
      <parameter name="path" required="false" type="string">
        <help><![CDATA[
					Absolute path to a Lucene collection.
				]]></help>
        <values/>
      </parameter>
      <parameter name="collection" required="false" type="string">
        <help><![CDATA[
					Specifies a collection name or an alias if action = "map"
				]]></help>
        <values/>
      </parameter>
      <parameter name="engine" required="false" type="string">
        <help><![CDATA[
					This attribute only exists for compatibility reasons to other CFML engines, the attribute is completely ignored by Lucee.
				]]></help>
        <values/>
      </parameter>
      <parameter name="categories" required="false" type="boolean">
        <help><![CDATA[
					Used only for creating a collection
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					Name for the query results returned by the list action.
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="false" type="string">
        <help><![CDATA[
					Specifies the action to perform.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfcomponent" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Creates and defines a component object; encloses functionality that you build in CFML and enclose within cffunction tags. This tag contains one or more cffunction tags that define methods. Code within the body of this tag, other than cffunction tags, is executed when the component is instantiated.
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="alias" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="bindingname" required="false" type="string">
        <help><![CDATA[
					Specifies the name of the binding element in the WSDL. This attribute applies only when style="document".
				]]></help>
        <values/>
      </parameter>
      <parameter name="hint" required="false" type="string">
        <help><![CDATA[
					Text that displays when you use introspection to show information about the CFC. The hint attribute value appears below the component name heading. Use this attribute to describe the purpose of the component.
				]]></help>
        <values/>
      </parameter>
      <parameter name="wsdlfile" required="false" type="string">
        <help><![CDATA[
					A properly formatted WSDL file to be used instead of WSDL generated by Lucee. This attribute applies only when style="document".
				]]></help>
        <values/>
      </parameter>
      <parameter name="mappedsuperclass" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="style" required="false" type="string">
        <help><![CDATA[
					Specifies whether a CFC used for web services uses RPC-encoded style or document-literal style
				]]></help>
        <values/>
      </parameter>
      <parameter name="output" required="false" type="boolean">
        <help><![CDATA[
					true: permits component method output - false: suppresses component method output
				]]></help>
        <values/>
      </parameter>
      <parameter name="serviceaddress" required="false" type="string">
        <help><![CDATA[
					Specifies the SOAP URL of the web service. If you don't specify this attribute, Lucee uses the URL of the CFC in the WSDL service description. Use this attribute to specify the protocol, for example, by specifying a URL that starts with https://. This attribute applies only for web services.
				]]></help>
        <values/>
      </parameter>
      <parameter name="serviceportname" required="false" type="string">
        <help><![CDATA[
					Specifies the name of the port element in the WSDL. This attribute applies only when style="document".
				]]></help>
        <values/>
      </parameter>
      <parameter name="displayname" required="false" type="string">
        <help><![CDATA[
					A string to be displayed when using introspection to show information about the CFC. The information appears on the heading, following the component name. If the style attribute is set to document, the displayname attribute is used as the name of the service element in the WSDL.
				]]></help>
        <values/>
      </parameter>
      <parameter name="synchronized" required="false" type="boolean">
        <help><![CDATA[
					If set to true all calls to an instance of a component are synchronized. This setting allows a method to be executed only by one single thread at a time.
				]]></help>
        <values/>
      </parameter>
      <parameter name="extends" required="false" type="string">
        <help><![CDATA[
					Name of parent component from which to inherit methods and properties.
				]]></help>
        <values/>
      </parameter>
      <parameter name="persistent" required="false" type="boolean">
        <help><![CDATA[
					Specifies CFC is persistent or not
				]]></help>
        <values/>
      </parameter>
      <parameter name="porttypename" required="false" type="string">
        <help><![CDATA[
					Specifies the name of the porttype element in the WSDL. This attribute applies only when style="document".
				]]></help>
        <values/>
      </parameter>
      <parameter name="namespace" required="false" type="string">
        <help><![CDATA[
					Specifies the namespace used in the WSDL when using the CFC as a document-literal style web service. If you don't specify this attribute, Lucee derives the namespace from the CFC class name. This attribute applies only when style="document".
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfcontent" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Defines the MIME type returned by the current page. Optionally, lets you specify the name of a file to be returned with the page.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="content" required="false" type="binary">
        <help><![CDATA[
					this attribute is deprecated, use variable instead
				]]></help>
        <values/>
      </parameter>
      <parameter name="range" required="false" type="boolean">
        <help><![CDATA[
					Yes or No. Yes allows download ranges, no forbids download range, default let it open for client.
				]]></help>
        <values/>
      </parameter>
      <parameter name="reset" required="false" type="boolean">
        <help><![CDATA[
					Yes or No. Yes discards output that precedes the call to cfcontent. No preserves the output that precedes the call. Defaults to Yes. The reset and file attributes are mutually exclusive. If you specify a file, the reset attribute has no effect.
				]]></help>
        <values/>
      </parameter>
      <parameter name="deletefile" required="false" type="boolean">
        <help><![CDATA[
					Yes or No. Yes deletes the file after the download operation. Defaults to No. This attribute applies only if you specify a file with the file attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="variable" required="false" type="any">
        <help><![CDATA[
					the variable name to the content to output as binary
				]]></help>
        <values/>
      </parameter>
      <parameter name="file" required="false" type="string">
        <help><![CDATA[
					The full path to the file that should be sent to the client
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					Defines the File/ MIME content type returned by the current page.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfcontinue" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Used within a cfloop tag. Returns processing to the top of a loop.
				This tag cannot have a body.
				This tag is also supported within <cfscript>
			]]></help>
      <parameter name="label" required="false" type="string">
        <help><![CDATA[
					used to address a specific loop instead of the nearest one.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfcookie" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Defines cookie variables, including expiration and security options.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="httponly" required="false" type="boolean">
        <help><![CDATA[
					If HttpOnly is set to true, this cookie is marked as HttpOnly, by adding the HttpOnly attribute to it. HttpOnly cookies are not supposed to be exposed to client-side scripting code, and may therefore help mitigate certain kinds of cross-site scripting attacks.
				]]></help>
        <values/>
      </parameter>
      <parameter name="domain" required="false" type="string">
        <help><![CDATA[
					Domain in which cookie is valid and to which cookie content can be sent from the user's system. By default, the cookie is only available to the server that set it. Use this attribute to make the cookie available to other servers.         Must start with a period. If the value is a subdomain, the
					        valid domain is all domain names that end with this string.
					        This attribute sets the available subdomains on the site
					        upon which the cookie can be used.
				]]></help>
        <values/>
      </parameter>
      <parameter name="expires" required="false" type="object">
        <help><![CDATA[
					Schedules the expiration of a cookie variable. Can be specified as a date (as in, 10/09/97), number of days (as in, 10, 100), "Now", or "Never". Using Now effectively deletes the cookie from the client browser.
				]]></help>
        <values/>
      </parameter>
      <parameter name="path" required="false" type="string">
        <help><![CDATA[
					URL, within a domain, to which the cookie applies; typically a directory. Only pages in this path can use the cookie. By default, all pages on the server that set the cookie can access the cookie.         path = "/services/login"
				]]></help>
        <values/>
      </parameter>
      <parameter name="encodevalue" required="false" type="boolean">
        <help><![CDATA[
					if set to true, Lucee url encodes the given name and value if necessary.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="true" type="string">
        <help><![CDATA[
					The name of the cookie variable.
				]]></help>
        <values/>
      </parameter>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					The value assigned to the cookie variable.
				]]></help>
        <values/>
      </parameter>
      <parameter name="secure" required="false" type="boolean">
        <help><![CDATA[
					Yes or No. Specifies that the variable must transmit securely. If the browser does not support Secure Socket Layer (SSL) security, the cookie is not sent.
				]]></help>
        <values/>
      </parameter>
      <parameter name="preservecase" required="false" type="boolean">
        <help><![CDATA[
					if set to true Lucee keep the original case for the name, otherise the name is converted to a upper case string
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfdbinfo" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Lets you retrieve information about a data source, including details about the database, tables, queries, procedures, foreign keys, indexes, and version information about the database, driver, and JDBC. This tag supports only JDBC drivers, and does not support ODBC-based drivers, including the Microsoft Access driver.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="pattern" required="false" type="string">
        <help><![CDATA[
					Specifies a filter to retrieve information about specific tables, columns, or stored procedures
				]]></help>
        <values/>
      </parameter>
      <parameter name="table" required="false" type="string">
        <help><![CDATA[
					Name of the table from which you retrieve information.
				]]></help>
        <values/>
      </parameter>
      <parameter name="dbname" required="false" type="string">
        <help><![CDATA[
					Name of the database
				]]></help>
        <values/>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					Password to connect to the database.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="true" type="string">
        <help><![CDATA[
					Name to use to refer to the result.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="true" type="string">
        <help><![CDATA[
					Type of information to get:
					<ul>
                                          <li>dbnames: database name and type tables: information to all tables</li>
                                          <li>columns: column information to a single table/view</li>
                                          <li>version: version information of the database</li>
                                          <li>procedures: information to all procedures</li>
                                          <li>procedure_columns: column information to a single procedure</li>
                                          <li>foreignkeys: information to all foreignkeys</li>
                                          <li>index: information to all indexes</li>
                                        </ul>
				]]></help>
        <values/>
      </parameter>
      <parameter name="procedure" required="false" type="string">
        <help><![CDATA[
					Name of the procedure from which you retrieve information.
				]]></help>
        <values/>
      </parameter>
      <parameter name="datasource" required="false" type="string">
        <help><![CDATA[
					Datasource to use to connect to the database.
				]]></help>
        <values/>
      </parameter>
      <parameter name="username" required="false" type="string">
        <help><![CDATA[
					User name to connect to the database.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfdefaultcase" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Handles interactions with directories.
				This tag must have a body.
				This tag is also supported within <cfscript>
				This tag does not use any attributes.]]></help>

    </tag>
    <tag name="cfdirectory" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Handles interactions with directories.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="filterdelimiters" required="false" type="string">
        <help><![CDATA[
					Optional when passing a filter pattern. This value is used as a delimiter for the patterns. Default is the pipe "|" character.
				]]></help>
        <values/>
      </parameter>
      <parameter name="mode" required="false" type="string">
        <help><![CDATA[
					Used with action = "Create" to define the permissions for a directory on UNIX and Linux platforms. Ignored on Windows. Options correspond to the octal values of the UNIX chmod command. From left to right, permissions are assigned for owner, group, and other.
				]]></help>
        <values/>
      </parameter>
      <parameter name="createpath" required="false" type="boolean">
        <help><![CDATA[
					if set to false, expects all parent directories to exist, true (default) will generate necessary directories
				]]></help>
        <values/>
      </parameter>
      <parameter name="sort" required="false" type="string">
        <help><![CDATA[
					Optional for action = "list". Ignored by all other actions. The query columns by which to sort the directory listing. Any combination of columns from query output can be specified in comma-separated list. You can specify ASC (ascending) or DESC (descending) as qualifiers for column names. ASC is the default
				]]></help>
        <values/>
      </parameter>
      <parameter name="filter" required="false" type="any">
        <help><![CDATA[
					Optional for action = "list". Ignored by all other actions. Can be either a wildcard filter, e.g. "m*", or a UDF/Closure which accepts the file/directory name and returns a boolean value to indicate whether that item should be included in the result or not.
				]]></help>
        <values/>
      </parameter>
      <parameter name="directory" required="true" type="string">
        <help><![CDATA[
					The name of the directory to perform the action against.
				]]></help>
        <values/>
      </parameter>
      <parameter name="serverpassword" required="false" type="string">
        <help><![CDATA[
					allow you to access filesystem, also when access is denied for your context
				]]></help>
        <values/>
      </parameter>
      <parameter name="recurse" required="false" type="boolean">
        <help><![CDATA[
					Whether Lucee performs the action on subdirectories
				]]></help>
        <values/>
      </parameter>
      <parameter name="listinfo" required="false" type="string">
        <help><![CDATA[
					all: includes all information in the result set. name: includes only filenames in the result set.
				]]></help>
        <values/>
      </parameter>
      <parameter name="nameconflict" required="false" type="string">
        <help><![CDATA[
					When used with action="copy" the possible values are: [Overwrite]|Error. When used with action="create" the possible values are: [Error]|Skip. Ignored for all other actions.
				]]></help>
        <values/>
      </parameter>
      <parameter name="storeacl" required="false" type="object">
        <help><![CDATA[
					An array of struct where each struct represents a permission or grant. Example: [{email="xxx@yyy.com", permission="full_control"}, {group="all", permission="read"}]
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					Required for action = "list". Ignored by all other actions. Name of output query for directory listing.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					file: includes only filenames. dir: includes only directory names. all: includes both filenames and directory names.
				]]></help>
        <values/>
      </parameter>
      <parameter name="storelocation" required="false" type="string">
        <help><![CDATA[
					Only used for S3 Resources. The location of the created bucket/object. The location can either be EU,US or US-WEST. The default location is US.
				]]></help>
        <values/>
      </parameter>
      <parameter name="destination" required="false" type="string">
        <help><![CDATA[
					Required for action = "copy". Ignored by all other actions. Path of the destination directory. If not an absolute path, it is relative to the source directory.
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="false" type="string">
        <help><![CDATA[
					Defines the action to be taken with directory(ies) specified in directory. [list|create|delete|rename]
				]]></help>
        <values/>
      </parameter>
      <parameter name="newdirectory" required="false" type="string">
        <help><![CDATA[
					Required for action = "rename". Ignored by all other actions. The new name of the directory specified in the directory attribute.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfdiv" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Creates an HTML div tag or other HTML container tag and lets you use asynchronous form submission or a bind expression to dynamically control the tag contents.
				This tag may have a body.
				This tag has no <cfscript> support or it uses a different syntax.]]></help>
      <parameter name="onbinderror" required="false" type="string">
        <help><![CDATA[
					The name of a JavaScript function to execute if evaluating a bind expression results in an error. The function must take two attributes: an HTTP status code and a message.
				]]></help>
        <values/>
      </parameter>
      <parameter name="tagname" required="false" type="string">
        <help><![CDATA[
					The HTML container tag to create.
				]]></help>
        <values/>
      </parameter>
      <parameter name="bindonload" required="false" type="boolean">
        <help><![CDATA[
					true (executes the bind attribute expression when first loading the tag. - false (does not execute the bind attribute expression until the first bound event) To use this attribute, you must also specify a bind attribute
				]]></help>
        <values/>
      </parameter>
      <parameter name="id" required="false" type="string">
        <help><![CDATA[
					The HTML ID attribute value to assign to the generated container tag.
				]]></help>
        <values/>
      </parameter>
      <parameter name="bind" required="false" type="string">
        <help><![CDATA[
					A bind expression that returns the container contents. Note: If a CFML page specified in this attribute contains tags that use AJAX features, such as cfform, cfgrid, and cfwindow, you must use a tag on the page with the tag. For more information, see cfajaximport.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfdocument" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Creates a PDF document from a text block containing CFML and HTML.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="marginbottom" required="false" type="number">
        <help><![CDATA[
					Specifies the bottom margin in inches (default) or centimeters. To specify bottom margin in centimeters, include the unit=cm attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="useragent" required="false" type="string">
        <help><![CDATA[
					Text to put in the HTTP User-Agent request header field. Used to identify the request client software.
				]]></help>
        <values/>
      </parameter>
      <parameter name="permissions" required="false" type="string">
        <help><![CDATA[
					define permissions for the file (AllowPrinting,AllowModifyContents,AllowCopy,AllowModifyAnnotations,AllowFillIn,AllowScreenReaders,AllowAssembly,AllowDegradedPrinting)
				]]></help>
        <values/>
      </parameter>
      <parameter name="filename" required="false" type="String">
        <help><![CDATA[
					name for output file, if not defined output will be written to response stream
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyuser" required="false" type="string">
        <help><![CDATA[
					When required by a proxy server, a valid username.
				]]></help>
        <values/>
      </parameter>
      <parameter name="htmlbookmark" required="false" type="boolean">
        <help><![CDATA[
					If true, it is possible to convert outlines to a list of named anchors (<a name="anchor_id">label</a>) or a headings structure (<h1>...<h6>). Transforming of HTML hyperlinks to PDF hyperlinks (if not explicitly disabled). Hyperlink jumps within the same document are supported as well
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyhost" required="false" type="string">
        <help><![CDATA[
					alias for proxyHost
				]]></help>
        <values/>
      </parameter>
      <parameter name="saveasname" required="false" type="string">
        <help><![CDATA[
					(format="PDF" only) The filename that appears in the SaveAs dialog when a user saves a PDF file written to the browser.
				]]></help>
        <values/>
      </parameter>
      <parameter name="pageheight" required="false" type="number">
        <help><![CDATA[
					used when pagetype is custom
				]]></help>
        <values/>
      </parameter>
      <parameter name="localurl" required="false" type="boolean">
        <help><![CDATA[
					Specifies whether to retrieve image files directly from the local drive
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					name of a variable to store the output in it
				]]></help>
        <values/>
      </parameter>
      <parameter name="authuser" required="false" type="string">
        <help><![CDATA[
					User name sent to the target URL for Basic Authentication. Combined with password to form a base64 encoded string that is passed in the Authenticate header. Does not provide support for Integrated Windows, NTLM, or Kerberos authentication.
				]]></help>
        <values/>
      </parameter>
      <parameter name="fontembed" required="false" type="string">
        <help><![CDATA[
					define if fonts will embedded with the file
				]]></help>
        <values/>
      </parameter>
      <parameter name="pagetype" required="false" type="string">
        <help><![CDATA[
					defined the used format for the page (,legal,letter,A4,A5,B4,B5,B4-JIS,B5-JIS and custom)
				]]></help>
        <values/>
      </parameter>
      <parameter name="encryption" required="false" type="String">
        <help><![CDATA[
					define if the output should be encrypted and how deep
				]]></help>
        <values/>
      </parameter>
      <parameter name="src" required="false" type="string">
        <help><![CDATA[
					define a url or or a relative path on the local system to a file that should be transferred to a pdf
				]]></help>
        <values/>
      </parameter>
      <parameter name="format" required="false" type="string">
        <help><![CDATA[
					format of the created file
				]]></help>
        <values/>
      </parameter>
      <parameter name="bookmark" required="false" type="boolean">
        <help><![CDATA[
					Specifies whether bookmarks are created in the document
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyport" required="false" type="number">
        <help><![CDATA[
					The port number on the proxy server from which the object is requested. Default is 80. When used with resolveURL, the URLs of retrieved documents that specify a port number are automatically resolved to preserve links in the retrieved document.
				]]></help>
        <values/>
      </parameter>
      <parameter name="backgroundvisible" required="false" type="boolean">
        <help><![CDATA[
					Specifies whether the background prints when the user prints the document
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxypassword" required="false" type="string">
        <help><![CDATA[
					When required by a proxy server, a valid password.
				]]></help>
        <values/>
      </parameter>
      <parameter name="marginright" required="false" type="number">
        <help><![CDATA[
					Specifies the right margin in inches (default) or centimeters. To specify right margin in centimeters, include the unit=cm attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="marginleft" required="false" type="number">
        <help><![CDATA[
					Specifies the left margin in inches (default) or centimeters. To specify left margin in centimeters, include the unit=cm attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="authpassword" required="false" type="string">
        <help><![CDATA[
					Password sent to the target URL for Basic Authentication. Combined with username to form a base64 encoded string that is passed in the Authenticate header. Does not provide support for Integrated Windows, NTLM, or Kerberos authentication.
				]]></help>
        <values/>
      </parameter>
      <parameter name="scale" required="false" type="number">
        <help><![CDATA[
					define a scale factor as a percentage. this option is used to reduce the size of the HTML output so that it fits on that paper. define a number less than 100.
				]]></help>
        <values/>
      </parameter>
      <parameter name="pagewidth" required="false" type="number">
        <help><![CDATA[
					used when pagetype is custom
				]]></help>
        <values/>
      </parameter>
      <parameter name="ownerpassword" required="false" type="string">
        <help><![CDATA[
					Specifies an owner password (format="PDF" only).
				]]></help>
        <values/>
      </parameter>
      <parameter name="userpassword" required="false" type="string">
        <help><![CDATA[
					Specifies a user password (format="PDF" only). Defaults to "empty" if is not set, and encyption is set to 40 bit or 128 bit.
				]]></help>
        <values/>
      </parameter>
      <parameter name="unit" required="false" type="string">
        <help><![CDATA[
					set the unit for pageheight, pagewidth, and margin...
				]]></help>
        <values/>
      </parameter>
      <parameter name="overwrite" required="false" type="boolean">
        <help><![CDATA[
					define if an existing file will be overwritten or not
				]]></help>
        <values/>
      </parameter>
      <parameter name="srcfile" required="false" type="string">
        <help><![CDATA[
					define an absolute path to a file that should be transferred to a pdf
				]]></help>
        <values/>
      </parameter>
      <parameter name="orientation" required="false" type="string">
        <help><![CDATA[
					is the orientation landscape or portrait
				]]></help>
        <values/>
      </parameter>
      <parameter name="margintop" required="false" type="number">
        <help><![CDATA[
					Specifies the top margin in inches (default) or centimeters. To specify top margin in centimeters, include the unit=cm attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="mimetype" required="false" type="string">
        <help><![CDATA[
					mimetype of the source (when attribute src or srcfile are defined)
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfdocumentitem" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Specifies action items for a PDF document created by the cfdocument tag.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="evalatprint" required="false" type="boolean">
        <help><![CDATA[
					Determines if the contents of the cfdocumentitem tag body has to be evaluated at the time of printing the document. - true: evaluates the contents of the cfdocumentitem tag body only at the time of printing the document. - false (default): evaluates the contents of the cfdocumentitem tag body immediately.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					used only for type bookmark, name of the bookmark to define.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="true" type="string">
        <help><![CDATA[
					Specifies the action: pagebreak (starts a new page at the location of the tag) header (uses the text between in the body of the tag as the running header) footer (uses the text between the the body of the tag as the running footer) bookmark (set a bookmark, use the attribute name to define the name of the bookmark)
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfdocumentsection" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Divides a PDF document into sections.
				By using this tag in conjunction with a <cfdocumentitem> tag, each section can have unique headers, footers, and page numbers.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="marginbottom" required="false" type="number">
        <help><![CDATA[
					Specifies the bottom margin in inches (default) or centimeters. To specify the bottom margin in centimeters, include the unit="cm" attribute in the parent cfdocument tag.
				]]></help>
        <values/>
      </parameter>
      <parameter name="useragent" required="false" type="string">
        <help><![CDATA[
					Text to put in the HTTP User-Agent request header field. Used to identify the request client software.
				]]></help>
        <values/>
      </parameter>
      <parameter name="marginright" required="false" type="number">
        <help><![CDATA[
					Specifies the right margin in inches (default) or centimeters. To specify the right margin in centimeters, include the unit="cm" attribute in the parent cfdocument tag.
				]]></help>
        <values/>
      </parameter>
      <parameter name="marginleft" required="false" type="number">
        <help><![CDATA[
					Specifies the left margin in inches (default) or centimeters. To specify the left margin in centimeters, include the unit="cm" attribute in the parent cfdocument tag.
				]]></help>
        <values/>
      </parameter>
      <parameter name="authpassword" required="false" type="string">
        <help><![CDATA[
					Password sent to the target URL for Basic Authentication. Combined with username to form a base64 encoded string that is passed in the Authenticate header. Does not provide support for Integrated Windows, NTLM, or Kerberos authentication.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					Bookmark name for the section
				]]></help>
        <values/>
      </parameter>
      <parameter name="authuser" required="false" type="string">
        <help><![CDATA[
					User name sent to the target URL for Basic Authentication. Combined with password to form a base64 encoded string that is passed in the Authenticate header. Does not provide support for Integrated Windows, NTLM, or Kerberos authentication.
				]]></help>
        <values/>
      </parameter>
      <parameter name="srcfile" required="false" type="string">
        <help><![CDATA[
					define an absolute path to a file that should be transferred to a pdf
				]]></help>
        <values/>
      </parameter>
      <parameter name="margintop" required="false" type="number">
        <help><![CDATA[
					Specifies the top margin in inches (default) or centimeters. To specify the top margin in centimeters, include the unit="cm" attribute in the parent cfdocument tag.
				]]></help>
        <values/>
      </parameter>
      <parameter name="src" required="false" type="string">
        <help><![CDATA[
					define a url or or a relative path on the local system to a file that should be transferred to a pdf
				]]></help>
        <values/>
      </parameter>
      <parameter name="mimetype" required="false" type="string">
        <help><![CDATA[
					mimetype of the source (when attribute src or srcfile are defined)
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfdump" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Outputs the elements, variables and values of most kinds of CFML objects. Useful for debugging. You can display the contents of simple and complex variables, objects, components, user-defined functions, and other elements.
				This tag may have a body.
				This tag has no <cfscript> support or it uses a different syntax.
			]]></help>
      <parameter name="show" required="false" type="string">
        <help><![CDATA[
					show column or keys.
				]]></help>
        <values/>
      </parameter>
      <parameter name="hide" required="false" type="string">
        <help><![CDATA[
					hide column or keys.
				]]></help>
        <values/>
      </parameter>
      <parameter name="output" required="false" type="string">
        <help><![CDATA[
					Where to send the results: browser: the result is written the the browser response stream (default). console: the result is written to the console (System.out). false: output will not be written, effectively disabling the dump.
				]]></help>
        <values/>
      </parameter>
      <parameter name="var" required="false" type="any">
        <help><![CDATA[
					Variable to display. Enclose a variable name in pound signs.
				]]></help>
        <values/>
      </parameter>
      <parameter name="abort" required="false" type="boolean">
        <help><![CDATA[
					stops further processing of request.
				]]></help>
        <values/>
      </parameter>
      <parameter name="async" required="false" type="boolean">
        <help><![CDATA[
					if true and output is not to browser, Lucee builds the output in a new thread that runs in parallel to the thread that called the dump. please note that if the calling thread modifies the data before the dump takes place, it is possible that the dump will show the modified data.
				]]></help>
        <values/>
      </parameter>
      <parameter name="metainfo" required="false" type="boolean">
        <help><![CDATA[
					Includes information about the query in the cfdump results.
				]]></help>
        <values/>
      </parameter>
      <parameter name="eval" required="false" type="string">
        <help><![CDATA[
					name of the variable to display, also used as label, when no label defined.
				]]></help>
        <values/>
      </parameter>
      <parameter name="top" required="false" type="number">
        <help><![CDATA[
					The number of rows to display.
				]]></help>
        <values/>
      </parameter>
      <parameter name="expand" required="false" type="boolean">
        <help><![CDATA[
					expands views
				]]></help>
        <values/>
      </parameter>
      <parameter name="label" required="false" type="string">
        <help><![CDATA[
					header for the dump output.
				]]></help>
        <values/>
      </parameter>
      <parameter name="showudfs" required="false" type="boolean">
        <help><![CDATA[
					show UDFs in cfdump output.
				]]></help>
        <values/>
      </parameter>
      <parameter name="keys" required="false" type="number">
        <help><![CDATA[
					For a structure, number of keys to display.
				]]></help>
        <values/>
      </parameter>
      <parameter name="format" required="false" type="string">
        <help><![CDATA[
					specify the output format of the dump, the following formats are available by default: html - the default browser output text - this is the default when outputting to console and plain text in the browser classic - classic view with html/css/javascript simple - no formatting in the output You can use your custom style by creating a corresponding file in the lucee/dump/skins folder. Check the folder for examples.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfelse" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Used with cfelse and cfelseif, cfif lets you create simple and compound conditional statements in CFML. The value in the cfif tag can be any expression.
				This tag cannot have a body.
				This tag is also supported within <cfscript>
				This tag does not use any attributes.]]></help>

    </tag>
    <tag name="cfelseif" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Used with cfelse and cfelseif, cfif lets you create simple and compound conditional statements in CFML. The value in the cfif tag can be any expression.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="condition" required="false" type="boolean">
        <help><![CDATA[
					Expression condition
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cferror" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Enables the display of customized HTML pages when errors occur. This lets you maintain a consistent look and feel within your application, even when errors occur.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="mailto" required="false" type="string">
        <help><![CDATA[
					The e-mail address of the administrator to notify of the error. The value is available to your custom error page in the MailTo property of the error object.
				]]></help>
        <values/>
      </parameter>
      <parameter name="exception" required="false" type="string">
        <help><![CDATA[
					Type of exception. Required if type = "exception" or "monitor".
				]]></help>
        <values/>
      </parameter>
      <parameter name="template" required="true" type="string">
        <help><![CDATA[
					The relative path to the custom error page.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="true" type="string">
        <help><![CDATA[
					The type of error that the custom error page handles.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfexchangecalendar" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfexchangecalendar> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfexchangeconnect" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfexchangeconnect> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfexchangecontact" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfexchangecontact> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfexchangeconversation" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfexchangeconversation> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfexchangefilter" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfexchangefilter> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfexchangefolder" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfexchangefolder> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfexchangemail" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfexchangemail> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfexchangetask" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfexchangetask> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfexecute" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Enables developers to execute a process on a server computer.
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="outputfile" required="false" type="string">
        <help><![CDATA[
					The file to which to direct the output of the program. If not specified, the output is displayed on the page from which it was called.
				]]></help>
        <values/>
      </parameter>
      <parameter name="arguments" required="false" type="any">
        <help><![CDATA[
					Command-line arguments passed to the application.
				]]></help>
        <values/>
      </parameter>
      <parameter name="variable" required="false" type="string">
        <help><![CDATA[
					Variable in which to put program output. If no output file or variable attribute is specified, output is displayed on page from which it was called.
				]]></help>
        <values/>
      </parameter>
      <parameter name="errorvariable" required="false" type="string">
        <help><![CDATA[
					Variable in which to put program error stream output. If neither errorFile nor errorVariable is specified, the error stream is discarded.
				]]></help>
        <values/>
      </parameter>
      <parameter name="errorfile" required="false" type="string">
        <help><![CDATA[
					The file to which to direct the error stream of the program. If neither errorFile nor errorVariable is specified, the error stream is discarded.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					The full pathname of the application to execute. Note: On Windows, you must specify the extension as part of the application's name. For example, myapp.exe,
				]]></help>
        <values/>
      </parameter>
      <parameter name="terminateontimeout" required="false" type="boolean">
        <help><![CDATA[
					terminate execution of process when timeout occur
				]]></help>
        <values/>
      </parameter>
      <parameter name="timeout" required="false" type="number">
        <help><![CDATA[
					Indicates how long, in seconds, the executing thread waits for the spawned process. A timeout of 0 is equivalent to the non-blocking mode of executing. A very high timeout value is equivalent to a blocking mode of execution. The default is 0; therefore, the thread spawns a process and returns without waiting for the process to terminate.If no output file is specified, and the timeout value is 0, the program output is discarded.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfexit" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Used to: Abort the processing of the currently executing CFML custom tag, exit the template within the currently executing CFML custom tag and reexecute a section of code within the currently executing CFML custom tag
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="method" required="false" type="string">
        <help><![CDATA[
					Allowed values: exittag: aborts processing of currently executing tag exittemplate: exits page of currently executing tag loop: reexecutes body of currently executing tag
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cffeed" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Reads or creates an RSS or Atom syndication feed. This tag can read various RSS and Atom 0.3 versions. It can create RSS 2.0 or Atom 1.0 feeds.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="outputfile" required="false" type="string">
        <help><![CDATA[
					Path of the file in which to write the feed as XML text. The path can be absolute, or relative to the CFML file.
				]]></help>
        <values/>
      </parameter>
      <parameter name="ignoreenclosureerror" required="false" type="boolean">
        <help><![CDATA[
					If this attribute is true, Lucee attempts to save all enclosures. If it encounters an error downloading one enclosure, it continues downloading other enclosures and writes the error information in the server log. If this attribute is false, Lucee stops downloading all enclosures and generates an error when it encounters an error downloading an enclosure. Note: Enclosure errors can occur if the specified enclosure is of a type that the web server does not allow to be downloaded. (optional, default=false)
				]]></help>
        <values/>
      </parameter>
      <parameter name="query" required="false" type="any">
        <help><![CDATA[
					A query object containing the Atom entries or RSS items in the feed. Can contain either of the following: The output of a read action. Input to a create action. The properties and query attributes combined provide complete feed information. When you specify the query attribute for a create action, you must put it in pound signs (#)
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyport" required="false" type="number">
        <help><![CDATA[
					The port to connect to on the proxy server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="overwriteenclosure" required="false" type="boolean">
        <help><![CDATA[
					Used only for the read action. Whether to overwrite files in the enclosure directory if they already exist. If you do not set this attribute to true and the cffeed tag tries to write to a file that exists, Lucee generates an error. (optional, default=false)
				]]></help>
        <values/>
      </parameter>
      <parameter name="source" required="false" type="string">
        <help><![CDATA[
					Used only for the read action. The URL of the feed or the path to the XML file that contains the feed contents. A path can be absolute, or relative to the CFML file.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxypassword" required="false" type="string">
        <help><![CDATA[
					Password required by the proxy server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="useragent" required="false" type="string">
        <help><![CDATA[
					Text to put in the HTTP User-Agent request header field. Used to identify the request client software.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyuser" required="false" type="string">
        <help><![CDATA[
					User name to provide to the proxy server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyserver" required="false" type="string">
        <help><![CDATA[
					Host name or IP address of a proxy server to which to send the request.
				]]></help>
        <values/>
      </parameter>
      <parameter name="properties" required="false" type="any">
        <help><![CDATA[
					A structure containing the feed metadata, the information about the entire feed. Can contain either of the following: The output of a read action. Input to a create action. The properties and query attributes combined provide complete feed information. When you specify the properties attribute for a create action, you must put it in pound signs (#)
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="any">
        <help><![CDATA[
					A structure that contains complete feed data: The output of a read action. The input definition of the feed to create. This structure contains complete feed information. When you specify the name attribute for a create action, you must put it in pound signs (#).
				]]></help>
        <values/>
      </parameter>
      <parameter name="timeout" required="false" type="number">
        <help><![CDATA[
					The number of seconds to wait for a response from the feed source. A value of 0 specifies that the request does not time out.
				]]></help>
        <values/>
      </parameter>
      <parameter name="overwrite" required="false" type="boolean">
        <help><![CDATA[
					Whether to overwrite the XML feed file if it already exists. If you do not set this attribute to true and the cffeed tag tries to write to a file that exists, Lucee generates an error. (optional, default=false)
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="false" type="string">
        <help><![CDATA[
					The name to use for the JavaScript proxy class. The action to take, one of the following values: create: Creates an RSS 2.0 or Atom 1.0 feed XML document and saves it in a variable, writes it to a file, or both. read (default): Parses an RSS or Atom feed from a URL or an XML file and saves it in a structure or query. You can also get query metadata in a separate structure.
				]]></help>
        <values/>
      </parameter>
      <parameter name="xmlvar" required="false" type="string">
        <help><![CDATA[
					A variable in which to save the read or created feed as XML text.
				]]></help>
        <values/>
      </parameter>
      <parameter name="enclosuredir" required="false" type="string">
        <help><![CDATA[
					Used only for the read action. Path to the directory in which to save any enclosures that are available in the feed being read. The path can be absolute or relative to the CFML file. If the directory does not exist, Lucee generates an error. If you omit this attribute, Lucee does not save enclosures. To specify the directory that contains the current page, set this attribute to .(period).
				]]></help>
        <values/>
      </parameter>
      <parameter name="columnmap" required="false" type="struct">
        <help><![CDATA[
					Used only for the create action with a query attribute. A structure specifying a mapping between the names of the columns in the object specified by the query attribute and the columns of the feed format, as described in the Query attribute section. The key for each field must be a column name listed in the Query columns section. The value of the field must be the name of the corresponding column in the query object used as input to the create action.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cffile" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Handles all interactions with files. The attributes you use with cffile depend on the value of the action attribute.
				For example, if the action = "write", use the attributes associated with writing a text file.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="charset" required="false" type="string">
        <help><![CDATA[
					Character set name for the file contents.
				]]></help>
        <values/>
      </parameter>
      <parameter name="mode" required="false" type="string">
        <help><![CDATA[
					Applies only to Solaris and HP-UX. Permissions. Octal values of UNIX chmod command. Assigned to owner, group, and other, respectively.
				]]></help>
        <values/>
      </parameter>
      <parameter name="createpath" required="false" type="boolean">
        <help><![CDATA[
					for action "append", "touch" and "write": if set to false (default), expects all parent directories to exist, true will generate necessary directories
				]]></help>
        <values/>
      </parameter>
      <parameter name="source" required="false" type="string">
        <help><![CDATA[
					Absolute pathname of file on web server. On Windows, use backward slashes; on UNIX, use forward slashes.
				]]></help>
        <values/>
      </parameter>
      <parameter name="fixnewline" required="false" type="boolean">
        <help><![CDATA[
					true: changes embedded line-ending characters in string variables to operating-system specific line endings false: (default) do not change embedded line-ending characters in string variables.
				]]></help>
        <values/>
      </parameter>
      <parameter name="variable" required="false" type="string">
        <help><![CDATA[
					Name of variable to contain contents of text file.
				]]></help>
        <values/>
      </parameter>
      <parameter name="filefield" required="false" type="string">
        <help><![CDATA[
					Name of form field used to select the file.
				]]></help>
        <values/>
      </parameter>
      <parameter name="serverpassword" required="false" type="string">
        <help><![CDATA[
					allow you to access filesystem, also when access is denied for your context
				]]></help>
        <values/>
      </parameter>
      <parameter name="output" required="false" type="any">
        <help><![CDATA[
					Content of the file to be created.
				]]></help>
        <values/>
      </parameter>
      <parameter name="strict" required="false" type="boolean">
        <help><![CDATA[
					for action "upload" and "uploadAll": if set to true (default), only mimetypes are supported.
				]]></help>
        <values/>
      </parameter>
      <parameter name="accept" required="false" type="string">
        <help><![CDATA[
					list of supported extensions or/and mimetypes.
				]]></help>
        <values/>
      </parameter>
      <parameter name="nameconflict" required="false" type="string">
        <help><![CDATA[
					Action to take if filename is the same as that of a file in the directory.
				]]></help>
        <values/>
      </parameter>
      <parameter name="storeacl" required="false" type="object">
        <help><![CDATA[
					An array of struct where each struct represents a permission or grant. Example: [{email="xxx@yyy.com", permission="full_control"}, {group="all", permission="read"}]
				]]></help>
        <values/>
      </parameter>
      <parameter name="file" required="false" type="string">
        <help><![CDATA[
					Absolute pathname of file on web server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="addnewline" required="false" type="boolean">
        <help><![CDATA[
					Yes: appends newline character to text written to file
				]]></help>
        <values/>
      </parameter>
      <parameter name="destination" required="false" type="string">
        <help><![CDATA[
					Absolute pathname of directory or file on web server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="true" type="string">
        <help><![CDATA[
					Type of file manipulation that the tag performs. info FileInfo move FileMove rename copy FileCopy delete FileDelete read FileRead readbinary FileReadBinary write FileWrite append FileAppend upload FileUpload uploadall FileUploadAll touch FileTouch
				]]></help>
        <values/>
      </parameter>
      <parameter name="result" required="false" type="string">
        <help><![CDATA[
					Name of the result value (default:cffile)
				]]></help>
        <values/>
      </parameter>
      <parameter name="attributes" required="false" type="string">
        <help><![CDATA[
					One attribute (Windows) or a comma-delimited list of attributes (other platforms) to set on the file. If omitted, the file's attributes are maintained.
				]]></help>
        <values/>
      </parameter>
      <parameter name="cachedwithin" required="false" type="object">
        <help><![CDATA[
					possible values are: String "request": If original content was created within the current request, cached content data is used. a timespan (created with function CreateTimeSpan): If original content date falls within the time span, cached content data is used. To use cached data, the tag must be called with the exact same arguments. Only used by action "read" and "readbinary"
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cffileupload" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cffileupload> tag is not supported by Lucee. Use <cffile> instead
			]]></help>

    </tag>
    <tag name="cffinally" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Used inside a cftry tag. Code in the cffinally block is processed after the main cftry code and, if an exception occurs, the cfcatch code. The cffinally block code always executes, whether or not there is an exception.
				This tag must have a body.
				This tag is also supported within <cfscript>
				This tag does not use any attributes.]]></help>

    </tag>
    <tag name="cfflush" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Flushes currently available data to the client.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="interval" required="false" type="number">
        <help><![CDATA[
					Flush the output each time at least the specified number of bytes become available. HTML headers, and any data that is already available when you make this call, are not included in the count.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfform" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Builds a form with CFML custom control tags that provide more functionality than standard HTML form input elements (XML and Flash type not supported).
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="skin" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="onmouseover" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="acceptcharset" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onmousemove" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="scriptsrc" required="false" type="string">
        <help><![CDATA[
					Specifies the URL, relative to the web root, of the directory that contains the cfform.js file with the client-side JavaScript used by this tag and its child tags. For XML format forms, this directory is also the default directory for XSLT skins.
				]]></help>
        <values/>
      </parameter>
      <parameter name="enablecab" required="false" type="boolean">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="style" required="false" type="string">
        <help><![CDATA[
					Styles to apply to the form. In HTML or XML format, Lucee passes the style attribute to the browser or XML. In Flash format, must be a style specification in CSS format (XML and Flash type no supported).
				]]></help>
        <values/>
      </parameter>
      <parameter name="codebase" required="false" type="string">
        <help><![CDATA[
					URL for a downloadable JRE plugin (for Internet explorer only). Default is /CFIDE/classes/cf-j2re-win.cab.
				]]></help>
        <values/>
      </parameter>
      <parameter name="passthrough" required="false" type="any">
        <help><![CDATA[
					Used for HTML attributes that are not explicitly supported by cfform. If you specify an attribute and value, they are passed to the HTML code that is generated for the cfinput tag.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onreset" required="false" type="string">
        <help><![CDATA[
					JavaScript to execute when the user clicks a reset button.
				]]></help>
        <values/>
      </parameter>
      <parameter name="width" required="false" type="string">
        <help><![CDATA[
					The width of the form. Use a number to specify pixels, In Flash, you can use a percentage value to specify a percentage of the available width.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onmousedown" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="dir" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="accept" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="archive" required="false" type="string">
        <help><![CDATA[
					URL for a downloadable Java classes for controls.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					A name for the form you are creating.
				]]></help>
        <values/>
      </parameter>
      <parameter name="enctype" required="false" type="string">
        <help><![CDATA[
					The MIME type used to encode data sent by the POST method. The default value is application/x-www-form-urlencoded. It is recommended that you accept the default value. This attribute is included for compatibility with the HTML form tag.
				]]></help>
        <values/>
      </parameter>
      <parameter name="class" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="timeout" required="false" type="number">
        <help><![CDATA[
					Integer number of seconds for which to keep the form data in the Flash cache on the server. A value of 0 prevents the data from being cached.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onclick" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="format" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="preloader" required="false" type="boolean">
        <help><![CDATA[
					Specifies whether to display a progress bar when loading the Flash form. Default is: true.
				]]></help>
        <values/>
      </parameter>
      <parameter name="method" required="false" type="string">
        <help><![CDATA[
					other than post will ignored
				]]></help>
        <values/>
      </parameter>
      <parameter name="height" required="false" type="string">
        <help><![CDATA[
					The height of the form. Use a number to specify pixels, In Flash, you can use a percentage value to specify a percentage of the available width. The displayed height might be less than the specified size.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onerror" required="false" type="string">
        <help><![CDATA[
					The name of a JavaScript function that runs if a form submission fails.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onmouseup" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onkeydown" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="wmode" required="false" type="string">
        <help><![CDATA[
					Specifies how the Flash form appears relative to other displayable content that occupies the same space on an HTML page. - window: The Flash form is the topmost layer on the page and obscures anything that would share the space, such as drop-down dynamic HTML lists. - transparent: The Flash form honors the z-index of dhtml so you can float items above it. If the Flash form is above any item, transparent regions in the form show the content that is below it. - opaque: The Flash form honors the z-index of dhtml so you can float items above it. If the Flash form is above any item, it blocks any content that is below it. Default is: window.
				]]></help>
        <values/>
      </parameter>
      <parameter name="accessible" required="false" type="boolean">
        <help><![CDATA[
					Specifies whether to include support screen readers in the Flash form. Screen reader support adds approximately 80KB to the SWF file sent to the client. Default is: false.
				]]></help>
        <values/>
      </parameter>
      <parameter name="preservedata" required="false" type="boolean">
        <help><![CDATA[
					Optional. "Yes" or "No." Specifies whether to display the data that was entered into cfform controls in the action page. "Yes" resets the value of the control to the value submitted when the form is submitted to itself. This works as expected for the cftextinput and cfslider controls. This attribute can be used only if the form and action are on a single page, or if the action page has a form that contains controls with the same names as the corresponding controls on the form page.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onsubmit" required="false" type="string">
        <help><![CDATA[
					JavaScript function to execute after other input validation returns. Use this attribute to execute JavaScript for preprocessing data before the form is submitted
				]]></help>
        <values/>
      </parameter>
      <parameter name="lang" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="id" required="false" type="string">
        <help><![CDATA[
					HTML id passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onmouseout" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onload" required="false" type="string">
        <help><![CDATA[
					JavaScript to execute when the form loads.
				]]></help>
        <values/>
      </parameter>
      <parameter name="target" required="false" type="string">
        <help><![CDATA[
					The name of the window or window frame to which the form output is sent.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onkeyup" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onkeypress" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="false" type="string">
        <help><![CDATA[
					The name of the page that executed when the form is submitted for processing.
				]]></help>
        <values/>
      </parameter>
      <parameter name="title" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="ondblclick" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfformgroup" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfformgroup> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfformitem" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfformitem> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfforward" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Leads the request to a different page. This tag acts like the tag cflocation except that the relocation is done directly on the server.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="template" required="true" type="string">
        <help><![CDATA[
					template path to forward to
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfftp" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Lets users implement File Transfer Protocol (FTP) operations.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="failifexists" required="false" type="boolean">
        <help><![CDATA[
					throw a error if local file already exist or overwrite it
				]]></help>
        <values/>
      </parameter>
      <parameter name="item" required="false" type="string">
        <help><![CDATA[
					item on the server
				]]></help>
        <values/>
      </parameter>
      <parameter name="retrycount" required="false" type="number">
        <help><![CDATA[
					retry count
				]]></help>
        <values/>
      </parameter>
      <parameter name="server" required="false" type="string">
        <help><![CDATA[
					The Server to connect
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyuser" required="false" type="string">
        <help><![CDATA[
					When required by a proxy server, a valid username.
				]]></help>
        <values/>
      </parameter>
      <parameter name="localfile" required="false" type="string">
        <help><![CDATA[
					File on the current machine
				]]></help>
        <values/>
      </parameter>
      <parameter name="fingerprint" required="false" type="string">
        <help><![CDATA[
					the ssh fingerprint
				]]></help>
        <values/>
      </parameter>
      <parameter name="asciiextensionlist" required="false" type="string">
        <help><![CDATA[
					Delimited list of file extensions that force ASCII transfer mode, if transferMode = "auto".
				]]></help>
        <values/>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					The Password for the connection
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					name of the query for list directory
				]]></help>
        <values/>
      </parameter>
      <parameter name="timeout" required="false" type="number">
        <help><![CDATA[
					timeout for the connection
				]]></help>
        <values/>
      </parameter>
      <parameter name="result" required="false" type="string">
        <help><![CDATA[
					Name of the result value (default:cfftp)
				]]></help>
        <values/>
      </parameter>
      <parameter name="stoponerror" required="false" type="boolean">
        <help><![CDATA[
					define if execution halt on error or not
				]]></help>
        <values/>
      </parameter>
      <parameter name="connection" required="false" type="string">
        <help><![CDATA[
					the name for the connection, used to cache the connection
				]]></help>
        <values/>
      </parameter>
      <parameter name="username" required="false" type="string">
        <help><![CDATA[
					The Username for the connection
				]]></help>
        <values/>
      </parameter>
      <parameter name="passphrase" required="false" type="string">
        <help><![CDATA[
					the passphrase that protects ssh private key
				]]></help>
        <values/>
      </parameter>
      <parameter name="new" required="false" type="string">
        <help><![CDATA[
					new name for file or directory
				]]></help>
        <values/>
      </parameter>
      <parameter name="remotefile" required="false" type="string">
        <help><![CDATA[
					File on the Server
				]]></help>
        <values/>
      </parameter>
      <parameter name="existing" required="false" type="string">
        <help><![CDATA[
					source or existing file or directory to rename
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyport" required="false" type="number">
        <help><![CDATA[
					The port number on the proxy server from which the object is requested. Default is 80. When used with resolveURL, the URLs of retrieved documents that specify a port number are automatically resolved to preserve links in the retrieved document.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxypassword" required="false" type="string">
        <help><![CDATA[
					When required by a proxy server, a valid password.
				]]></help>
        <values/>
      </parameter>
      <parameter name="directory" required="false" type="string">
        <help><![CDATA[
					remote directory to list
				]]></help>
        <values/>
      </parameter>
      <parameter name="recurse" required="false" type="boolean">
        <help><![CDATA[
					delete content of the directory
				]]></help>
        <values/>
      </parameter>
      <parameter name="transfermode" required="false" type="string">
        <help><![CDATA[
					ASCII, binary or auto mode
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyserver" required="false" type="string">
        <help><![CDATA[
					Host name or IP address of a proxy server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="key" required="false" type="string">
        <help><![CDATA[
					the ssh private key
				]]></help>
        <values/>
      </parameter>
      <parameter name="port" required="false" type="number">
        <help><![CDATA[
					server port of the connection
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="true" type="string">
        <help><![CDATA[
					the action that should be execute
				]]></help>
        <values/>
      </parameter>
      <parameter name="secure" required="false" type="boolean">
        <help><![CDATA[
					Secure connection (sftp|shh) or not.
				]]></help>
        <values/>
      </parameter>
      <parameter name="passive" required="false" type="boolean">
        <help><![CDATA[
					enable passive mode
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cffunction" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Defines a function call
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="access" required="false" type="string">
        <help><![CDATA[
					This attribute is used only for a component. The client security context from which the method can be invoked
				]]></help>
        <values/>
      </parameter>
      <parameter name="hint" required="false" type="string">
        <help><![CDATA[
					Hint of the Function
				]]></help>
        <values/>
      </parameter>
      <parameter name="returnformat" required="false" type="string">
        <help><![CDATA[
					The format in which to return values to a remote caller. Possible values are [wddx], json, plain (text), serialize (cfml, cfm), xml, and java.
				]]></help>
        <values/>
      </parameter>
      <parameter name="returntype" required="false" type="string">
        <help><![CDATA[
					String; a type name; data type of the function return value
				]]></help>
        <values/>
      </parameter>
      <parameter name="localmode" required="false" type="string">
        <help><![CDATA[
					Defines how the local scope of this function is invoked when a variable with no scope definition is used. Accepted values include: classic (default): The local scope is only invoked when the key already exists in it. modern: The local scope is always invoked.
				]]></help>
        <values/>
      </parameter>
      <parameter name="output" required="false" type="boolean">
        <help><![CDATA[
					This attribute is used only for a component. yes: the function is processed as if it were within a cfoutput tag no: the function is processed as if it were within a cfsilent tag
				]]></help>
        <values/>
      </parameter>
      <parameter name="securejson" required="false" type="boolean">
        <help><![CDATA[
					A Boolean value that specifies whether to add a security prefix in front of any value that the function returns in JSON-format in response to a remote call.
				]]></help>
        <values/>
      </parameter>
      <parameter name="displayname" required="false" type="string">
        <help><![CDATA[
					Display Name of the Function
				]]></help>
        <values/>
      </parameter>
      <parameter name="bufferoutput" required="false" type="boolean">
        <help><![CDATA[
					this attribute is only used when output of the function is set to false. if this attribute is set to true (default) the output written to the body of the function is buffered and in case of an exception also outputted. if set to false the content to body is ignored and not disabled when a failure in the body of the tag occur.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="true" type="string">
        <help><![CDATA[
					A string; a component method that is used within the cfcomponent tag.
				]]></help>
        <values/>
      </parameter>
      <parameter name="abstract" required="false" type="boolean">
        <help><![CDATA[
					is the function abstract or not, abstract functions are only allowed inside interface or component tags
				]]></help>
        <values/>
      </parameter>
      <parameter name="verifyclient" required="false" type="boolean">
        <help><![CDATA[
					A Boolean value that specifies whether to require remote function calls to include an encrypted security token. For use with AJAX applications only.
				]]></help>
        <values/>
      </parameter>
      <parameter name="roles" required="false" type="string">
        <help><![CDATA[
					This attribute is used only for a component. If this attribute is omitted, all roles can invoke the method.
				]]></help>
        <values/>
      </parameter>
      <parameter name="description" required="false" type="string">
        <help><![CDATA[
					Supplies a short text description of the function.
				]]></help>
        <values/>
      </parameter>
      <parameter name="cachedwithin" required="false" type="object">
        <help><![CDATA[
					possible values are: String "request": If original content was created within the current request, cached content data isused. a timespan (created with function CreateTimeSpan): If original content date falls within the time span, cached content data isused. To use cached data, the function must be called with the exact same arguments.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfgraph" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Displays a graphical representation of data.
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="itemcolumn" required="false" type="string">
        <help><![CDATA[
					Query column that contains the item label for the corresponding data point. The item labels appear in the chart legend.
				]]></help>
        <values/>
      </parameter>
      <parameter name="query" required="false" type="string">
        <help><![CDATA[
					Name of the query containing the data to graph. Required if you do not use cfgraphdata tags in the cfgraph tag body to specify the data values.
				]]></help>
        <values/>
      </parameter>
      <parameter name="gridlines" required="false" type="number">
        <help><![CDATA[
					An integer that specifies the number of grid lines to display on the chart between the top and bottom lines.
				]]></help>
        <values/>
      </parameter>
      <parameter name="graphheight" required="false" type="number">
        <help><![CDATA[
					Height of the graph, in pixels. Default is 240.
				]]></help>
        <values/>
      </parameter>
      <parameter name="valuelabelfont" required="false" type="string">
        <help><![CDATA[
					The font used to display data values.
				]]></help>
        <values/>
      </parameter>
      <parameter name="linewidth" required="false" type="number">
        <help><![CDATA[
					Specifies whether to fill the area below the line with the line color to create an area graph.
				]]></help>
        <values/>
      </parameter>
      <parameter name="fill" required="false" type="number">
        <help><![CDATA[
					Width of the graph line, in pixels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="bordercolor" required="false" type="string">
        <help><![CDATA[
					Border color.
				]]></help>
        <values/>
      </parameter>
      <parameter name="showitemlabel" required="false" type="boolean">
        <help><![CDATA[
					Specifies whether to put item labels on the horizontal axis of bar charts and the vertical axis of HorizontalBar charts.
				]]></help>
        <values/>
      </parameter>
      <parameter name="url" required="false" type="string">
        <help><![CDATA[
					A URL to load when the user clicks any data point on the chart.
				]]></help>
        <values/>
      </parameter>
      <parameter name="titlefont" required="false" type="string">
        <help><![CDATA[
					The font used to display the title.
				]]></help>
        <values/>
      </parameter>
      <parameter name="scalefrom" required="false" type="number">
        <help><![CDATA[
					The minimum value of the graph value axis (the vertical axis for Bar charts, the horizontal axis for HorizontalBar charts).
				]]></help>
        <values/>
      </parameter>
      <parameter name="borderwidth" required="false" type="string">
        <help><![CDATA[
					Border thickness, in pixels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="legendfont" required="false" type="string">
        <help><![CDATA[
					The font used to display the legend.
				]]></help>
        <values/>
      </parameter>
      <parameter name="backgroundcolor" required="false" type="string">
        <help><![CDATA[
					Color of the chart background.
				]]></help>
        <values/>
      </parameter>
      <parameter name="barspacing" required="false" type="number">
        <help><![CDATA[
					Spacing between bars in the chart, in pixels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="scaleto" required="false" type="number">
        <help><![CDATA[
					The maximum value of the graph value axis.
				]]></help>
        <values/>
      </parameter>
      <parameter name="valuecolumn" required="false" type="string">
        <help><![CDATA[
					Query column that contains the data values. Required if you do not use cfgraphdata tags in the cfgraph tag body to specify the data values.
				]]></help>
        <values/>
      </parameter>
      <parameter name="valuelocation" required="false" type="string">
        <help><![CDATA[
					Where value labels are placed.
				]]></help>
        <values/>
      </parameter>
      <parameter name="showlegend" required="false" type="string">
        <help><![CDATA[
					The placement of the legend that identifies colors with the data labels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="colorlist" required="false" type="string">
        <help><![CDATA[
					Comma delimited list of colors to use for each data point.
				]]></help>
        <values/>
      </parameter>
      <parameter name="showvaluelabel" required="false" type="boolean">
        <help><![CDATA[
					Specifies whether values are displayed for the data points.
				]]></help>
        <values/>
      </parameter>
      <parameter name="linecolor" required="false" type="string">
        <help><![CDATA[
					The color used to draw the data line.
				]]></help>
        <values/>
      </parameter>
      <parameter name="itemlabelsize" required="false" type="number">
        <help><![CDATA[
					The size of the item labels, in points.
				]]></help>
        <values/>
      </parameter>
      <parameter name="urlcolumn" required="false" type="string">
        <help><![CDATA[
					Query column containing URL information to load when the user clicks the corresponding data point.
				]]></help>
        <values/>
      </parameter>
      <parameter name="valuelabelsize" required="false" type="number">
        <help><![CDATA[
					The size the value text, in points.
				]]></help>
        <values/>
      </parameter>
      <parameter name="graphwidth" required="false" type="number">
        <help><![CDATA[
					Width of the graph, in pixels. Default is 320.
				]]></help>
        <values/>
      </parameter>
      <parameter name="itemlabelorientation" required="false" type="string">
        <help><![CDATA[
					Orientation of item labels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="fileformat" required="false" type="string">
        <help><![CDATA[
					File type to be used for the output displayed in the browser.
				]]></help>
        <values/>
      </parameter>
      <parameter name="itemlabelfont" required="false" type="string">
        <help><![CDATA[
					The font used for the item labels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="true" type="string">
        <help><![CDATA[
					Type of chart to display.
				]]></help>
        <values/>
      </parameter>
      <parameter name="title" required="false" type="string">
        <help><![CDATA[
					Title to display centered above the chart, or below the chart if the legend is above the chart.
				]]></help>
        <values/>
      </parameter>
      <parameter name="depth" required="false" type="number">
        <help><![CDATA[
					Depth of 3D chart appearance, in pixels.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfgraphdata" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Specifies a data point to be displayed by a cfgraph tag.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="item" required="false" type="string">
        <help><![CDATA[
					The item label for the data point. The item labels appear on the horizontal axis of Line and Bar charts, the vertical axis of Horizontal Bar charts, and in the legend of Pie charts.
				]]></help>
        <values/>
      </parameter>
      <parameter name="color" required="false" type="string">
        <help><![CDATA[
					The color to use when graphing the data point. The default is to use the values from the cfgraph tag colorlist attribute or the built-in default list of colors. Line graphs ignore this attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="url" required="false" type="string">
        <help><![CDATA[
					A URL to load when the user clicks the data point. This attribute works with Pie, Bar, and HorizontalBar charts. This attribute has an effect only if the graph is in Flash file format.
				]]></help>
        <values/>
      </parameter>
      <parameter name="value" required="true" type="string">
        <help><![CDATA[
					Value to be represented by the data point.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfgrid" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfgrid> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfgridcolumn" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfgridcolumn> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfgridrow" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfgridrow> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfgridupdate" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfgridupdate> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfheader" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Generates custom HTTP response headers to return to the client.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="charset" required="false" type="string">
        <help><![CDATA[
					The character encoding in which to encode the header value. For more information on character encodings, see: http://www.w3.org/International/O-charset.html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="statustext" required="false" type="string">
        <help><![CDATA[
					Text that explains the status code. This attribute is used in conjunction with the statusCode attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="statuscode" required="false" type="number">
        <help><![CDATA[
					A number that sets the HTTP status code.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					A name for the header.
				]]></help>
        <values/>
      </parameter>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					A value for the HTTP header. This attribute is used in conjunction with the name attribute.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfhtmlbody" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Writes the text specified in the text attribute to the 'body' section of a generated HTML page. The cfhtmlbody tag can be useful for embedding JavaScript code, or placing other HTML tags that should go at the bottom of the page just before the closing body tag.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="text" required="false" type="string">
        <help><![CDATA[
					The text to add to the 'head' area of an HTML page. Everything inside the quotation marks is placed in the 'head' section
				]]></help>
        <values/>
      </parameter>
      <parameter name="variable" required="false" type="string">
        <help><![CDATA[
					Name of variable to contain the text for htmlbody.
				]]></help>
        <values/>
      </parameter>
      <parameter name="id" required="false" type="string">
        <help><![CDATA[
					ID of the snippet that is added, used to ensure that the same snippet will not be added more than once.
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="false" type="string">
        <help><![CDATA[
					possible actions are: append (default): append text to the html head read: return the text already set to html head reset: reset/remove text already set to hrml head write: write text to html head, overwrite already existing text in html head flush: writes the buffer in the html head to the response stream
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfhtmlhead" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Writes the text specified in the text attribute to the 'head' section of a generated HTML page. The cfhtmlhead tag can be useful for embedding JavaScript code, or placing other HTML tags such, as META, LINK, TITLE, or BASE in an HTML page header.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="text" required="false" type="string">
        <help><![CDATA[
					The text to add to the 'head' area of an HTML page. Everything inside the quotation marks is placed in the 'head' section
				]]></help>
        <values/>
      </parameter>
      <parameter name="variable" required="false" type="string">
        <help><![CDATA[
					Name of variable to contain the text for htmlhead.
				]]></help>
        <values/>
      </parameter>
      <parameter name="id" required="false" type="string">
        <help><![CDATA[
					ID of the snippet that is added, used to ensure that the same snippet will not be added more than once.
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="false" type="string">
        <help><![CDATA[
					possible actions are: append (default): append text to the html head read: return the text already set to html head reset: reset/remove text already set to hrml head write: write text to html head, overwrite already existing text in html head flush: writes the buffer in the html head to the response stream
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfhtmltopdf" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfhtmltopdf> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfhtmltopdfitem" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfhtmltopdfitem> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfhttp" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Lets you execute HTTP POST and GET operations on files.
				Using cfhttp, you can execute standard GET operations and create a query object from a text file. POST operations lets you upload MIME file types to a server, or post cookie, formfield, URL, file, or CGI variables directly to a specified server.
				This tag may have a body.
				This tag is also supported within <cfscript>
			]]></help>
      <parameter name="workstation" required="false" type="string">
        <help><![CDATA[
					The workstation the authentication request is originating from. Essentially, the computer name for this machine. this attribute is only used when authenication type is "NTLM"
				]]></help>
        <values/>
      </parameter>
      <parameter name="charset" required="false" type="string">
        <help><![CDATA[
					set the charset for the call.
				]]></help>
        <values/>
      </parameter>
      <parameter name="getasbinary" required="false" type="string">
        <help><![CDATA[
					false: If CFML does not recognize the response body type as text, convert it to a CFML object. auto: If CFML does not recognize the response body type as text, convert it to CFML Binary type data. true: always convert the response body content into CFML Binary type data, even if CFML recognizes the response body type as text.
				]]></help>
        <values/>
      </parameter>
      <parameter name="throwonerror" required="false" type="boolean">
        <help><![CDATA[
					Boolean indicating whether to throw an exception that can be caught by using the cftry and cfcatch tags. The default is NO.
				]]></help>
        <values/>
      </parameter>
      <parameter name="domain" required="false" type="string">
        <help><![CDATA[
					The domain to authenticate within. this attribute is only used when authenication type is "NTLM"
				]]></help>
        <values/>
      </parameter>
      <parameter name="useragent" required="false" type="string">
        <help><![CDATA[
					User agent request header.
				]]></help>
        <values/>
      </parameter>
      <parameter name="addtoken" required="false" type="boolean">
        <help><![CDATA[
					if yes add urltoken as cookie
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyuser" required="false" type="string">
        <help><![CDATA[
					When required by a proxy server, a valid username.
				]]></help>
        <values/>
      </parameter>
      <parameter name="clientcertpassword" required="false" type="string">
        <help><![CDATA[
					Password used to decrypt the client certificate.
				]]></help>
        <values/>
      </parameter>
      <parameter name="compression" required="false" type="string">
        <help><![CDATA[
					Informs the target webserver to disable compression for the response. Possible values are: true (default): compression enabled false: compression disabled none (deprecated): use "false" instead
				]]></help>
        <values/>
      </parameter>
      <parameter name="url" required="true" type="string">
        <help><![CDATA[
					Full URL of the host name or IP address of the server on which the file resides. The URL must be an absolute URL, including the protocol (http or https) and hostname. It may optionally contain a port number. Port numbers specified in the url attribute override the port attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="columns" required="false" type="string">
        <help><![CDATA[
					Specifies the column names for a query when creating a query as a result of a cfhttp GET.
				]]></help>
        <values/>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					When required by a server, a valid password.
				]]></help>
        <values/>
      </parameter>
      <parameter name="file" required="false" type="string">
        <help><![CDATA[
					The filename to be used for the file that is accessed. For GET operations, defaults to the name specified in url. Enter path information in the path attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="firstrowasheaders" required="false" type="boolean">
        <help><![CDATA[
					sets if first row of csv is file
				]]></help>
        <values/>
      </parameter>
      <parameter name="textqualifier" required="false" type="string">
        <help><![CDATA[
					Required for creating a query. Indicates the start and finish of a column. Should be appropriately escaped when embedded in a column. For example, if the qualifier is a double quotation mark, it should be escaped as """". If there is no text qualifier in the file, specify it as " ". Default is the double quotation mark (").
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					The name to assign to a query if the a query is constructed from a file.
				]]></help>
        <values/>
      </parameter>
      <parameter name="timeout" required="false" type="any">
        <help><![CDATA[
					A value, in seconds. When a URL timeout is specified in the browser, the timeout attribute setting takes precedence over the Lucee Administrator timeout. The server then uses the lesser of the URL timeout and the timeout passed in the timeout attribute, so that the request always times out before or at the same time as the page times out. If there is no URL timeout specified, Lucee takes the lesser of the Lucee Administrator timeout and the timeout passed in the timeout attribute. If there is no timeout set on the URL in the browser, no timeout set in the Lucee Administrator, and no timeout set with the timeout attribute, Lucee waits indefinitely for the cfhttp request to process.
				]]></help>
        <values/>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					Used only when creating a query from an http request that returns data in a CSV format. This value specifies the Field delimiter for the CSV data. Only the first character is used. Default is a comma.
				]]></help>
        <values/>
      </parameter>
      <parameter name="multipart" required="false" type="boolean">
        <help><![CDATA[
					Tells Lucee to send all data specified by cfhttpparam type="formField" tags as multipart form data, with a Content-Type of multipart/form-data.
				]]></help>
        <values/>
      </parameter>
      <parameter name="username" required="false" type="string">
        <help><![CDATA[
					When required by a server, a valid username.
				]]></help>
        <values/>
      </parameter>
      <parameter name="result" required="false" type="string">
        <help><![CDATA[
					return variable name, default "cfhttp"
				]]></help>
        <values/>
      </parameter>
      <parameter name="encodeurl" required="false" type="boolean">
        <help><![CDATA[
					if set to true (default value) URL encodes the value of the attribute "URL" if necessary (no double encoding is happeing). This setting has no influence on the values from httpparam type="url", for this use the attribute "encoded" from httpparam
				]]></help>
        <values/>
      </parameter>
      <parameter name="method" required="false" type="string">
        <help><![CDATA[
					GET or POST. Use GET to download a text or binary file or to create a query from the contents of a text file. Use POST to send information to a server page or a CGI program for processing. POST requires the use of a cfhttpparam tag.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyport" required="false" type="number">
        <help><![CDATA[
					The port number on the proxy server from which the object is requested. Default is 80. When used with resolveURL, the URLs of retrieved documents that specify a port number are automatically resolved to preserve links in the retrieved document.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxypassword" required="false" type="string">
        <help><![CDATA[
					When required by a proxy server, a valid password.
				]]></help>
        <values/>
      </parameter>
      <parameter name="clientcert" required="false" type="string">
        <help><![CDATA[
					The full path to a PKCS12 format file that contains the client certificate for the request.
				]]></help>
        <values/>
      </parameter>
      <parameter name="preauth" required="false" type="boolean">
        <help><![CDATA[
					if set to true (default), Lucee sends the basic authentication (username password) always (Preemptive Basic Authentication), if set to false the authentication is only send when the server ask for it (status code 401).
				]]></help>
        <values/>
      </parameter>
      <parameter name="path" required="false" type="string">
        <help><![CDATA[
					The path to the directory in which a file is to be stored. If a path is not specified in a POST or GET operation, a variable is created (cfhttp.fileContent) that you can use to display the results of the POST operation in a cfoutput.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyserver" required="false" type="string">
        <help><![CDATA[
					Host name or IP address of a proxy server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="authtype" required="false" type="string">
        <help><![CDATA[
					authentication type for a request with username and password, valid values are "BASIC" (default) and "NTLM"
				]]></help>
        <values/>
      </parameter>
      <parameter name="multiparttype" required="false" type="string">
        <help><![CDATA[
					This attribute has been deprecated, use instead the attribute "multipart".
				]]></help>
        <values/>
      </parameter>
      <parameter name="port" required="false" type="number">
        <help><![CDATA[
					The port number on the server from which the object is requested. Default is 80. When used with resolveURL, the URLs of retrieved documents that specify a port number are automatically resolved to preserve links in the retrieved document. If a port number is specified in the url attribute, the port value overrides the value of the port attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="cachedwithin" required="false" type="object">
        <help><![CDATA[
					possible values are: String "request": If original content was created within the current request, cached content data isused. a timespan (created with function CreateTimeSpan): If original content date falls within the time span, cached content data isused. To use cached data, the tag must be called with the exact same arguments.
				]]></help>
        <values/>
      </parameter>
      <parameter name="redirect" required="false" type="boolean">
        <help><![CDATA[
					Boolean indicating whether to redirect execution or stop execution. The default is Yes. If set to No and throwOnError = "yes", execution stops if cfhttp fails, and the status code and associated error message are returned in the variable cfhttp.statuscode. To see where execution would have been redirected, use the variable cfhttp.responseHeader[LOCATION]. The key LOCATION identifies the path of redirection. Lucee will follow up to five redirections on a request. if this limit is exceeded, Lucee behaves as if redirect = "no".
				]]></help>
        <values/>
      </parameter>
      <parameter name="resolveurl" required="false" type="boolean">
        <help><![CDATA[
					Yes or No. Default is No. For GET and POST operations, if Yes, page reference returned into the fileContent internal variable has its internal URLs fully resolved, including port number, so that links remain intact.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfhttpparam" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Required for <cfhttp> POST operations, cfhttpparam is used to specify the parameters necessary to a cfhttp POST.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="encoded" required="false" type="boolean">
        <help><![CDATA[
					Applies to type "cgi" and "url", ignored for all other types. Specifies whether to URL encode the the values defined with the tag, but only if necessary (no double encoding).
				]]></help>
        <values/>
      </parameter>
      <parameter name="file" required="false" type="string">
        <help><![CDATA[
					Required for type = "File".
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					A variable name for the data being passed.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					valid values are: header: specifies an HTTP header. CGI: specifies an HTTP header. encodes the value depending on the attribute "encoded body: specifies the body of the HTTP request. XML: identifies the request as having a content-type of text/xml. Specifies that the value attribute contains the body of the HTTP request. Used to send XML to the destination URL. file: tells Lucee to send the contents of the specified file. URL: specifies a URL query string name-value pair to append to the cfhttp url attribute. form,formField: specifies a form field to send. cookie: specifies a cookie to send as an HTTP header.
				]]></help>
        <values/>
      </parameter>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					Specifies the value of the URL, FormField, Cookie, File, or CGI variable being passed.
				]]></help>
        <values/>
      </parameter>
      <parameter name="mimetype" required="false" type="string">
        <help><![CDATA[
					Applies to File type; invalid for all other types. Specifies the MIME media type of the file contents. The content type can include an identifier for the character encoding of the file; for example, text/html; charset=ISO-8859-1 indicates that the file is HTML text in the ISO Latin-1 character encoding.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfif" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Used with cfelse and cfelseif, cfif lets you create simple and compound conditional statements in CFML. The value in the cfif tag can be any expression.
				This tag must have a body.
				This tag is also supported within <cfscript>
				<cfif isdefined('arguments.id')>
			]]></help>
      <parameter name="condition" required="false" type="boolean">
        <help><![CDATA[
					condition o the expression
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfimage" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Lets you resize and add labels to GIF and JPEG format images.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="height" required="false" type="string">
        <help><![CDATA[
					Height in pixels of the image. For the resize attribute, you also can specify the height as a percentage. When you resize an image, if you specify a value for the width.
				]]></help>
        <values/>
      </parameter>
      <parameter name="angle" required="false" type="number">
        <help><![CDATA[
					Angle in degrees to rotate the image.
				]]></help>
        <values/>
      </parameter>
      <parameter name="text" required="false" type="string">
        <help><![CDATA[
					Text string displayed in the CAPTCHA image. Use capital letters for better readability. Do not include spaces because users cannot detect them in the resulting CAPTCHA image.
				]]></help>
        <values/>
      </parameter>
      <parameter name="quality" required="false" type="number">
        <help><![CDATA[
					Quality of the JPEG destination file. Applies only to files with an extension of JPG or JPEG. Valid values are fractions that range from 0 through 1 (the lower the number, the lower the quality).
				]]></help>
        <values/>
      </parameter>
      <parameter name="source" required="false" type="any">
        <help><![CDATA[
					source file
				]]></help>
        <values/>
      </parameter>
      <parameter name="difficulty" required="false" type="string">
        <help><![CDATA[
					Level of complexity of the CAPTCHA text. Specify one of the following levels of text distortion: low, medium, high
				]]></help>
        <values/>
      </parameter>
      <parameter name="color" required="false" type="string">
        <help><![CDATA[
					Border color. Hexadecimal value or supported named color. For a hexadecimal value, use the form "#xxxxxx" or "xxxxxx", where x = 0-9 or A-F; use two number signs or none.
				]]></help>
        <values/>
      </parameter>
      <parameter name="passthrough" required="false" type="string">
        <help><![CDATA[
					HTML attributes that are not explicitly supported by cfimage. If you specify an attribute and value, they are passed to the tag "img".
				]]></help>
        <values/>
      </parameter>
      <parameter name="width" required="false" type="string">
        <help><![CDATA[
					Width in pixels of the image.
				]]></help>
        <values/>
      </parameter>
      <parameter name="isbase64" required="false" type="boolean">
        <help><![CDATA[
					Specifies whether the source is a Base64 string
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					Name of the image variable to create. The read action requires a name attribute. The border, resize, and rotate actions require a name attribute or a destination attribute. You can specify both.
				]]></help>
        <values/>
      </parameter>
      <parameter name="fonts" required="false" type="string">
        <help><![CDATA[
					One or more valid fonts to use for the CAPTCHA text. Separate multiple fonts with commas. Lucee supports only the system fonts that the JDK can recognize. For example, TTF fonts in the Windows directory are supported on Windows.
				]]></help>
        <values/>
      </parameter>
      <parameter name="base64" required="false" type="boolean">
        <help><![CDATA[
					should action "writetobrowser" embed the source of the image as base64 encoded string, default is false.
				]]></help>
        <values/>
      </parameter>
      <parameter name="overwrite" required="false" type="boolean">
        <help><![CDATA[
					If the destination file already exists, Lucee generates an error if the overwrite action is not set to yes.
				]]></help>
        <values/>
      </parameter>
      <parameter name="destination" required="false" type="string">
        <help><![CDATA[
					Absolute or relative pathname where the image output is written. The image format is determined by the file extension. The convert and write actions require a destination attribute. The border, captcha, resize, and rotate actions require a name attribute or a destination attribute. You can specify both. If you do not enter a destination, the CAPTCHA image is placed inline in the HTML output and displayed in the web browser.
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="false" type="string">
        <help><![CDATA[
					Action to execute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="thickness" required="false" type="number">
        <help><![CDATA[
					Border thickness in pixels. The border is added to the outside edge of the source image, increasing the image area accordingly.
				]]></help>
        <values/>
      </parameter>
      <parameter name="structname" required="false" type="string">
        <help><![CDATA[
					Name of the structure to be created.
				]]></help>
        <values/>
      </parameter>
      <parameter name="format" required="false" type="string">
        <help><![CDATA[
					Format of the image displayed in the browser. If you do not specify a format, the image is displayed in PNG format.
				]]></help>
        <values/>
      </parameter>
      <parameter name="fontsize" required="false" type="number">
        <help><![CDATA[
					font size of the text in the CAPTCHA image.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfimap" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Retrieves and deletes e-mail messages from an IMAPmail server.
				This tag works exactly the same way as the <cfmail> tag. It has the same attributes.
				The Internet Message Access Protocol or IMAP is one of two of the most prevalent Internet standard protocols for e-mail retrieval, the other being POP3. Virtually all modern e-mail clients and servers support both protocols as a means of transferring e-mail messages from a server, such as those used by Gmail, to a client, such as Mozilla Thunderbird and Microsoft Outlook.
				Many implementations of webmail use IMAP to retrieve e-mail messages from a server and display them within a web browser, making the use of this protocol transparent to the user.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="newfolder" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="attachmentpath" required="false" type="string">
        <help><![CDATA[
					Allows attachments to be written to the specified directory when action = "getAll". If an invalid attachmentPath is specified, no attachment files are written to the server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="server" required="false" type="string">
        <help><![CDATA[
					Host name biff.upperlip.com or IP address 192.1.2.225 of the Imap server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="uid" required="false" type="string">
        <help><![CDATA[
					Specifies the unique ID or a comma-delimited list of Uids to retrieve or delete. If you set invalid Uids, then they are ignored.
				]]></help>
        <values/>
      </parameter>
      <parameter name="messagenumber" required="false" type="string">
        <help><![CDATA[
					Can be a comma-separated list of the message ids
				]]></help>
        <values/>
      </parameter>
      <parameter name="recurse" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="folder" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="generateuniquefilenames" required="false" type="boolean">
        <help><![CDATA[
					Boolean indicating whether to generate unique filenames for the files attached to an e-mail message to avoid naming conflicts when the files are saved. Default is NO.
				]]></help>
        <values/>
      </parameter>
      <parameter name="startrow" required="false" type="number">
        <help><![CDATA[
					Specifies the first row number to be retrieved. Default is 1. This attribute is ignored if messageNumber is specified.
				]]></help>
        <values/>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					Password that corresponds to user name.
				]]></help>
        <values/>
      </parameter>
      <parameter name="maxrows" required="false" type="number">
        <help><![CDATA[
					Sets the number of messages returned, starting with the number in the startRow attribute. This attribute is ignored if messageNumber is specified.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					Name for the index query.
				]]></help>
        <values/>
      </parameter>
      <parameter name="port" required="false" type="number">
        <help><![CDATA[
					Defaults to the standard Imap port, 143.
				]]></help>
        <values/>
      </parameter>
      <parameter name="timeout" required="false" type="number">
        <help><![CDATA[
					Specifies the maximum time, in seconds, to wait for mail processing. Defaults is 60 seconds.
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="false" type="string">
        <help><![CDATA[
					Specifies the mail action.
				]]></help>
        <values/>
      </parameter>
      <parameter name="debug" required="false" type="boolean">
        <help><![CDATA[
					this attribute is deprecated and ignored, log control happens via the logging framwork directly.
				]]></help>
        <values/>
      </parameter>
      <parameter name="secure" required="false" type="boolean">
        <help><![CDATA[
					enables SSL for pop requests
				]]></help>
        <values/>
      </parameter>
      <parameter name="username" required="false" type="string">
        <help><![CDATA[
					If no user name is specified, the Imap connection is anonymous.
				]]></help>
        <values/>
      </parameter>
      <parameter name="connection" required="false" type="string">
        <help><![CDATA[
					label for a connection.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfimapfilter" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfimapfilter> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfimport" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				To import a JSP Taglibrary or a CFML Custom Tag Directory
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="prefix" required="false" type="string">
        <help><![CDATA[
					Prefix by which to access the imported custom CFML tags JSP tags. If you import a CFML custom tag directory and specify an empty value, "", for this attribute, you can call the custom tags without using a prefix. You must specify and use a prefix for a JSP tag library.
				]]></help>
        <values/>
      </parameter>
      <parameter name="path" required="false" type="string">
        <help><![CDATA[
					path of CFC to be imported
				]]></help>
        <values/>
      </parameter>
      <parameter name="taglib" required="false" type="string">
        <help><![CDATA[
					Path to a custom tag libraray or a jsp tld
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfinclude" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Lets you embed references to pages in CFML. You can embed cfinclude tags recursively. For an additional method of encapsulating CFML
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="runonce" required="false" type="boolean">
        <help><![CDATA[
					if set to true, the given template is only included once within the current request.
				]]></help>
        <values/>
      </parameter>
      <parameter name="template" required="true" type="string">
        <help><![CDATA[
					A logical path to an existing page.
				]]></help>
        <values/>
      </parameter>
      <parameter name="cachedwithin" required="false" type="object">
        <help><![CDATA[
					possible values are: String "request": If original content was created within the current request, cached content data isused. a timespan (created with function CreateTimeSpan): If original content date falls within the time span, cached content data isused. To use cached data, the function must be called with the exact same arguments.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfindex" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Populates collections with indexed data.
				The <cfindex> and <cfsearch> tags encapsulate the indexing and searching utilities. Collections can be populated from text files in a directory you specify, or from a query generated by a query. Before you can populate a collection, you must create the collection using either the <cfcollection> tag or the Lucee Administrator.
				Use <cfsearch> to search collections populated via cfindex.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="throwontimeout" required="false" type="boolean">
        <help><![CDATA[
					Specifies how timeout conditions are handled. If the value is true, an exception is enerated to provide notification of the timeout. If the value is No, execution continues. Default is no.
				]]></help>
        <values/>
      </parameter>
      <parameter name="prefix" required="false" type="string">
        <help><![CDATA[
					Specifies the location of files to index when the computer that contains the K2 Search Service is not the computer on which you installed Lucee, and when you index files with the type attribute set to path.
				]]></help>
        <values/>
      </parameter>
      <parameter name="language" required="false" type="string">
        <help><![CDATA[
					language used to index
				]]></help>
        <values/>
      </parameter>
      <parameter name="query" required="false" type="string">
        <help><![CDATA[
					Specifies the name of the query against which the collection is generated.
				]]></help>
        <values/>
      </parameter>
      <parameter name="custom3" required="false" type="string">
        <help><![CDATA[
					A custom field you can use to store data during an indexing operation. Usage is the same as for custom1.
				]]></help>
        <values/>
      </parameter>
      <parameter name="custom1" required="false" type="string">
        <help><![CDATA[
					A custom field you can use to store data during an indexing operation. Specify a query column name for type and a query name.
				]]></help>
        <values/>
      </parameter>
      <parameter name="recurse" required="false" type="boolean">
        <help><![CDATA[
					Yes or No. Yes specifies, if type = "Path", that directories below the path specified in key are included in the indexing operation.
				]]></help>
        <values/>
      </parameter>
      <parameter name="urlpath" required="false" type="string">
        <help><![CDATA[
					Specifies the URL path for files if type = "file" and type = "path". When the collection is searched with cfsearch, the pathname is automatically be prepended to filenames and returned as the url attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="status" required="false" type="string">
        <help><![CDATA[
					The name of the structure into which Lucee returns status information.
				]]></help>
        <values/>
      </parameter>
      <parameter name="collection" required="true" type="string">
        <help><![CDATA[
					Specifies a collection name. If you are indexing an external collection external = "Yes", specify the collection name, including fully qualified path.
				]]></help>
        <values/>
      </parameter>
      <parameter name="categorytree" required="false" type="string">
        <help><![CDATA[
					A string value that specifies a hierarchical category or category tree for searching. It is a series of categories separated by forward slashes ("/"). You can specify only one category tree.
				]]></help>
        <values/>
      </parameter>
      <parameter name="external" required="false" type="boolean">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="extensions" required="false" type="string">
        <help><![CDATA[
					Specifies the comma-separated list of file extensions that Lucee uses to index files if type = "Path". Default is HTM, HTML, CFM, CFML, DBM, DBML. An entry of "*." returns files with no extension
				]]></help>
        <values/>
      </parameter>
      <parameter name="category" required="false" type="string">
        <help><![CDATA[
					A string value that specifies one or more search categories for which to index the data. You can define multiple categories, separated by commas, for a single index.
				]]></help>
        <values/>
      </parameter>
      <parameter name="key" required="false" type="string">
        <help><![CDATA[
					Absolute path and filename, if type = "file" - Absolute path, if type = "path" - A query column name (typically, the primary key column name), if type = "custom" - A query column name, if type = any other value     This attribute is required for the actions listed, unless
					    you intend for its value to be an empty string.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					name of the variable generated by action "list" to return the query containing all indexes of a collection.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					Specifies the type of entity being indexed. Default is CUSTOM.
				]]></help>
        <values/>
      </parameter>
      <parameter name="custom4" required="false" type="string">
        <help><![CDATA[
					A custom field you can use to store data during an indexing operation. Usage is the same as for custom1.
				]]></help>
        <values/>
      </parameter>
      <parameter name="custom2" required="false" type="string">
        <help><![CDATA[
					A custom field you can use to store data during an indexing operation. Usage is the same as for custom1.
				]]></help>
        <values/>
      </parameter>
      <parameter name="timeout" required="false" type="number">
        <help><![CDATA[
					the timeout in seconds for a single request of type url
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="true" type="string">
        <help><![CDATA[
					Specifies the index action.
				]]></help>
        <values/>
      </parameter>
      <parameter name="title" required="false" type="string">
        <help><![CDATA[
					Title for collection; Query column name for type and a valid query name; Permits searching collections by title or displaying a separate title from the key
				]]></help>
        <values/>
      </parameter>
      <parameter name="body" required="false" type="string">
        <help><![CDATA[
					ASCII text to index Query column name(s), if name is specified in query You can specify columns in a delimited list. For example: emp_name, dept_name, location"
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfinput" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Used inside cfform to place radio buttons, checkboxes, or text boxes. Provides input validation for the specified control type.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="onmouseover" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="range" required="false" type="string">
        <help><![CDATA[
					Enter a minimum and maximum value range, separated by a comma. Valid only for numeric data.
				]]></help>
        <values/>
      </parameter>
      <parameter name="border" required="false" type="string">
        <help><![CDATA[
					passed through to input tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="datasrc" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="formaction" required="false" type="string">
        <help><![CDATA[
					HTML attribute: Overrides the form's action attribute. Must be a valid URL that defines where to send the data when the form is submitted (for type="submit" and type="image")
				]]></help>
        <values/>
      </parameter>
      <parameter name="onmousemove" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="maxlength" required="false" type="number">
        <help><![CDATA[
					The maximum length of text entered, if n type is Text.
				]]></help>
        <values/>
      </parameter>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					HTML attribute: Refers to a datalist containing predefined options for the input field
				]]></help>
        <values/>
      </parameter>
      <parameter name="min" required="false" type="string">
        <help><![CDATA[
					HTML attribute: Specifies the input field's minimum value. Use together with the "max" attribute to create a range of legal values
				]]></help>
        <values/>
      </parameter>
      <parameter name="tooltip" required="false" type="string">
        <help><![CDATA[
					Flash only: Text to display when the mouse pointer hovers over the control.
				]]></help>
        <values/>
      </parameter>
      <parameter name="style" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="autosuggest" required="false" type="string">
        <help><![CDATA[
					Specifies entry completion suggestions to display as the user types into a text input. The user can select a suggestion to complete the text entry. The valid value can be either of the following: A string consisting of the suggestion values separated by the delimiter specified by the delimiter attribute. A bind expression that gets the suggestion values based on the current input text. Valid only for cfinput type="text".
				]]></help>
        <values/>
      </parameter>
      <parameter name="passthrough" required="false" type="any">
        <help><![CDATA[
					HTML attributes that are not explicitly supported by cfinput. If you specify an attribute and value, they are passed to the HTML code generated for the cfinput tag.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onvalidate" required="false" type="string">
        <help><![CDATA[
					The name of a JavaScript function used to validate user input. The form object, input object, and input object value are passed to the specified routine, which should return true if validation succeeds and false otherwise. If used, the validate attribute is ignored.
				]]></help>
        <values/>
      </parameter>
      <parameter name="bindonload" required="false" type="boolean">
        <help><![CDATA[
					A Boolean value that specifies whether to execute the bind attribute expression when first loading the form. Ignored if there is no bind attribute. Valid only for cfinput type="text".
				]]></help>
        <values/>
      </parameter>
      <parameter name="width" required="false" type="string">
        <help><![CDATA[
					Applies to most Flash types, HTML image type on some browsers. The width of the control, in pixels. For Flash forms, Lucee ignores this attribute if you also specify a size attribute value.
				]]></help>
        <values/>
      </parameter>
      <parameter name="autosuggestminlength" required="false" type="number">
        <help><![CDATA[
					The minimum number of characters required in the text box before invoking a bind expression to return items for suggestion. Valid only for cfinput type="text".
				]]></help>
        <values/>
      </parameter>
      <parameter name="dir" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="accept" required="false" type="string">
        <help><![CDATA[
					passed through to input tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="alt" required="false" type="string">
        <help><![CDATA[
					passed through to input tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="mask" required="false" type="string">
        <help><![CDATA[
					A mask pattern that controls the character pattern that users can enter, or that the form sends to Lucee. In HTML and Flash for type=text use: A = [A-Za-z] X = [A-Za-z0-9] 9 = [0-9] ? = Any character all other = the literal character In Flash for type=datefield use: D = day; can use 0-2 mask characters. M = month; can use 0-4 mask characters. Y = year; can use 0, 2, or 4 characters. E = day in week; can use 0-4 characters.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onfocus" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="class" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					An initial value for the form input element.
				]]></help>
        <values/>
      </parameter>
      <parameter name="autocomplete" required="false" type="string">
        <help><![CDATA[
					HTML attribute: Specifies the types of files that can be submitted through a file upload (only for type="file")
				]]></help>
        <values/>
      </parameter>
      <parameter name="checked" required="false" type="string">
        <help><![CDATA[
					Selects a control. No value is required. Applies if type=radio or checkbox. Default: false
				]]></help>
        <values/>
      </parameter>
      <parameter name="tabindex" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="formenctype" required="false" type="string">
        <help><![CDATA[
					HTML attribute: Overrides the form's enctype attribute. Specifies how form-data should be encoded before sending it to the server (for type="submit" and type="image")
				]]></help>
        <values/>
      </parameter>
      <parameter name="formnovalidate" required="false" type="string">
        <help><![CDATA[
					HTML attribute: Overrides the form's novalidate attribute. If present the input field should not be validated when submitted
				]]></help>
        <values/>
      </parameter>
      <parameter name="onchange" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="required" required="false" type="boolean">
        <help><![CDATA[
					Enter Yes or No. Default is No.
				]]></help>
        <values/>
      </parameter>
      <parameter name="validateat" required="false" type="string">
        <help><![CDATA[
					How to do the validation; one or more of the following: onSubmit, onServer or onBlur. onBlur and onSubmit are identical in Flash forms. For multiple values, use a comma-delimited list. Default: onSubmit
				]]></help>
        <values/>
      </parameter>
      <parameter name="monthnames" required="false" type="string">
        <help><![CDATA[
					A comma-delimited list of the month names that are displayed at the top of the calendar.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onselect" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="placeholder" required="false" type="string">
        <help><![CDATA[
					HTML attribute: Specifies a hint to help users fill out the input field
				]]></help>
        <values/>
      </parameter>
      <parameter name="size" required="false" type="string">
        <help><![CDATA[
					The size of the input control. Ignored if type is Radio or Checkbox.
				]]></help>
        <values/>
      </parameter>
      <parameter name="formtarget" required="false" type="string">
        <help><![CDATA[
					HTML attribute: Overrides the form's target attribute. Specifies the target window used when the form is submitted (for type="submit" and type="image")
				]]></help>
        <values/>
      </parameter>
      <parameter name="id" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onmouseout" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="notab" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onkeypress" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="title" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="firstdayofweek" required="false" type="number">
        <help><![CDATA[
					Integer in the range 0-6 specifying the first day of the week in the calendar, 0 indicates Sunday, 6 indicates Saturday. Default is: 0
				]]></help>
        <values/>
      </parameter>
      <parameter name="readonly" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="message" required="false" type="string">
        <help><![CDATA[
					Message text to appear if validation fails.
				]]></help>
        <values/>
      </parameter>
      <parameter name="sourcefortooltip" required="false" type="string">
        <help><![CDATA[
					The URL of a page to display as a tool tip. The page can include HTML markup to control the format, and the tip can include images. If you specify this attribute, an animated icon appears with the text "Loading..." while the tip is being loaded.
				]]></help>
        <values/>
      </parameter>
      <parameter name="multiple" required="false" type="string">
        <help><![CDATA[
					HTML attribute: If present the user is allowed more than one value
				]]></help>
        <values/>
      </parameter>
      <parameter name="daynames" required="false" type="string">
        <help><![CDATA[
					A comma-delimited list that sets the names of the weekdays displayed in the calendar. Sunday is the first day and the rest of the weekday names follow in the normal order. Default is: S,M,T,W,Th,F,S
				]]></help>
        <values/>
      </parameter>
      <parameter name="align" required="false" type="string">
        <help><![CDATA[
					passed through to input tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="formmethod" required="false" type="string">
        <help><![CDATA[
					HTML attribute: Overrides the form's method attribute. Defines the HTTP method for sending data to the action URL (for type="submit" and type="image")
				]]></help>
        <values/>
      </parameter>
      <parameter name="form" required="false" type="string">
        <help><![CDATA[
					HTML attribute: Specifies one ore more forms the input field belongs to
				]]></help>
        <values/>
      </parameter>
      <parameter name="datafld" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onbinderror" required="false" type="string">
        <help><![CDATA[
					The name of a JavaScript function to execute if evaluating a bind expression, including an autosuggest bind expression, results in an error. The function must take two attributes: an HTTP status code and a message.
				]]></help>
        <values/>
      </parameter>
      <parameter name="showautosuggestloadingicon" required="false" type="boolean">
        <help><![CDATA[
					A Boolean value that specifies whether to display an animated icon when loading an autosuggest value for a text input.
				]]></help>
        <values/>
      </parameter>
      <parameter name="step" required="false" type="string">
        <help><![CDATA[
					HTML attribute: Specifies the legal number intervals for the input field
				]]></help>
        <values/>
      </parameter>
      <parameter name="disabled" required="false" type="string">
        <help><![CDATA[
					Disables user input, making the control read-only. To disable input, specify disabled without an attribute or disabled="true". To enable input, omit the attribute or specify disabled="false".
				]]></help>
        <values/>
      </parameter>
      <parameter name="ismap" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="autosuggestbinddelay" required="false" type="number">
        <help><![CDATA[
					The minimum time between autosuggest bind expression invocations, in seconds. Use this attribute to limit the number of requests that are sent to the server when a user types. Valid only for cfinput type="text"
				]]></help>
        <values/>
      </parameter>
      <parameter name="onmousedown" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="true" type="string">
        <help><![CDATA[
					A name for the form input element.
				]]></help>
        <values/>
      </parameter>
      <parameter name="bind" required="false" type="string">
        <help><![CDATA[
					A Flash bind expression that populates the field with information from other form fields.
				]]></help>
        <values/>
      </parameter>
      <parameter name="label" required="false" type="string">
        <help><![CDATA[
					Label to put next to the control on a Flash or XML form. Not used for button, hidden, image, reset, or submit types.
				]]></help>
        <values/>
      </parameter>
      <parameter name="accesskey" required="false" type="string">
        <help><![CDATA[
					passed through to input tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					The delimiter to use to separate entries in a static autosuggest list. This attribute is meaningful only if the autosuggest attribute is a string of delimited values.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onclick" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="src" required="false" type="string">
        <help><![CDATA[
					Applies to Flash button, reset, submit, and image types, and the HTML image type. URL of an image to use on the button. Flash does not support GIF images.
				]]></help>
        <values/>
      </parameter>
      <parameter name="max" required="false" type="string">
        <help><![CDATA[
					HTML attribute: Specifies the input field's maximum value. Use together with the "min" attribute to create a range of legal values
				]]></help>
        <values/>
      </parameter>
      <parameter name="autofocus" required="false" type="string">
        <help><![CDATA[
					Specifies that the input field should have focus on page load (not for type="hidden")
				]]></help>
        <values/>
      </parameter>
      <parameter name="height" required="false" type="string">
        <help><![CDATA[
					Applies to most Flash types, HTML image type on some browsers. The height of the control, in pixels. The displayed height might be less than the specified size.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onerror" required="false" type="string">
        <help><![CDATA[
					The name of a JavaScript function you want to execute in the event of a failed validation.
				]]></help>
        <values/>
      </parameter>
      <parameter name="enabled" required="false" type="string">
        <help><![CDATA[
					Flash only: Boolean value specifying whether the control is enabled. A disabled control appears in light gray. The inverse of the disabled attribute. Flash only. Default: true
				]]></help>
        <values/>
      </parameter>
      <parameter name="pattern" required="false" type="string">
        <help><![CDATA[
					The JavaScript regular expression pattern to use to validate the input. Required only if you specify validate = "regular_expression".
				]]></help>
        <values/>
      </parameter>
      <parameter name="onmouseup" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onkeydown" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="typeahead" required="false" type="boolean">
        <help><![CDATA[
					A Boolean value that specifies whether the autosuggest feature should automatically complete a user's entry with the first result in the suggestion list. Valid only for cfinput type="text".
				]]></help>
        <values/>
      </parameter>
      <parameter name="dataformatas" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="visible" required="false" type="string">
        <help><![CDATA[
					Flash only: Boolean value specifying whether to show the control. Space that would be occupied by an invisible control is blank. Default: true
				]]></help>
        <values/>
      </parameter>
      <parameter name="maxresultsdisplayed" required="false" type="number">
        <help><![CDATA[
					The maximum number suggestions to display in the autosuggest list. Valid only for cfinput type="text".
				]]></help>
        <values/>
      </parameter>
      <parameter name="bindattribute" required="false" type="string">
        <help><![CDATA[
					Specifies the HTML tag attribute whose value is set by the bind attribute. You can only specify attributes in the browser's HTML DOM tree, not Lucee-specific attributes. Ignored if there is no bind attribute. Valid only for cfinput type="text".
				]]></help>
        <values/>
      </parameter>
      <parameter name="lang" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onblur" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					The input control type to create: button: push button. checkbox: check box. file: file selector; not supported in Flash. hidden: invisible control. image: clickable button with an image. password: password entry control; hides input values. radio: radio button. reset: form reset button. submit: form submission button. text: text entry box. datefield: Flash only; date entry field with an expanding calendar for selecting dates.
				]]></help>
        <values/>
      </parameter>
      <parameter name="hspace" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onkeyup" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="usemap" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="validate" required="false" type="string">
        <help><![CDATA[
					date: verifies format mm/dd/yy. eurodate: verifies date format dd/mm/yyyy. time: verifies time format hh:mm:ss. float: verifies floating point format. integer: verifies integer format. telephone: verifies telephone format ###-###-####. The separator can be a blank. Area code and exchange must begin with digit 1 - 9. zipcode: verifies, in U.S. formats only, 5- or 9-digit format #####-####. The separator can be a blank. creditcard: strips blanks and dashes; verifies number using mod10 algorithm. Number must have 13-16 digits. social_security_number: verifies format ###-##-####. The separator can be a blank. regular_expression: matches input against pattern attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="ondblclick" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfinsert" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Inserts records in data sources.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="tablequalifier" required="false" type="string">
        <help><![CDATA[
					For data sources that support table qualifiers, use this field to specify the qualifier for the table. The purpose of table qualifiers varies across drivers. For SQL Server and Oracle, the qualifier refers to the name of the database that contains the table. For the Intersolv dBase driver, the qualifier refers to the directory where the DBF files are located.
				]]></help>
        <values/>
      </parameter>
      <parameter name="tablename" required="true" type="string">
        <help><![CDATA[
					Name of the table you want the form fields inserted in.
				]]></help>
        <values/>
      </parameter>
      <parameter name="tableowner" required="false" type="string">
        <help><![CDATA[
					For data sources that support table ownership such as SQL Server, Oracle, and Sybase SQL Anywhere, use this field to specify the owner of the table.
				]]></help>
        <values/>
      </parameter>
      <parameter name="formfields" required="false" type="string">
        <help><![CDATA[
					A comma-separated list of form fields to insert. If this attribute is not specified, all fields in the form are included in the operation.
				]]></help>
        <values/>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					If specified, password overrides the password value specified in the ODBC setup.
				]]></help>
        <values/>
      </parameter>
      <parameter name="datasource" required="false" type="string">
        <help><![CDATA[
					Name of the data source that contains your table.
				]]></help>
        <values/>
      </parameter>
      <parameter name="username" required="false" type="string">
        <help><![CDATA[
					If specified, username overrides the username value specified in the ODBC setup.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfinterface" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Defines an interface that consists of a set of signatures for functions.
				The interface does not include the full function definitions; instead, you implement the functions in a Component. The interfaces that you define by using this tag can make up the structure of a reusable application framework.
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="hint" required="false" type="string">
        <help><![CDATA[
					Text to be displayed when using introspection to show information about the interface. The hint attribute value follows the syntax line in the function description.
				]]></help>
        <values/>
      </parameter>
      <parameter name="displayname" required="false" type="string">
        <help><![CDATA[
					A value to be displayed when using introspection to show a descriptive name for the interface.
				]]></help>
        <values/>
      </parameter>
      <parameter name="extends" required="false" type="string">
        <help><![CDATA[
					A comma-delimited list of one or more interfaces that this interface extends. Any CFC that implements an interface must also implement all the functions in the interfaces specified by this property. If an interface extends another interface, and the child interface specifies a function with the same name as one in the parent interface, both functions must have the same attributes; otherwise generates an error.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfinvoke" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Invokes component methods from within a page or component.
				Use this tag to reference a WSDL file and consume a web service from within a block of CFML code.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="serviceport" required="false" type="string">
        <help><![CDATA[
					The port name for the web service. This value is case-sensitive and corresponds to the port element's name attribute under the service element. Specify this attribute if the web service contains multiple ports. Default: first port found in the WSDL.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyport" required="false" type="number">
        <help><![CDATA[
					The port to use on The proxy server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxypassword" required="false" type="string">
        <help><![CDATA[
					The user's password on the proxy server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyuser" required="false" type="string">
        <help><![CDATA[
					The user ID to send to the proxy server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyserver" required="false" type="string">
        <help><![CDATA[
					The proxy server required to access the webservice URL.
				]]></help>
        <values/>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					Overrides password specified in Administrator > Web Services
				]]></help>
        <values/>
      </parameter>
      <parameter name="webservice" required="false" type="string">
        <help><![CDATA[
					The URL of the WSDL file for the web service.
				]]></help>
        <values/>
      </parameter>
      <parameter name="timeout" required="false" type="number">
        <help><![CDATA[
					The timeout for the web service request, in seconds
				]]></help>
        <values/>
      </parameter>
      <parameter name="username" required="false" type="string">
        <help><![CDATA[
					Overrides username specified in Administrator > Web Services
				]]></help>
        <values/>
      </parameter>
      <parameter name="returnvariable" required="false" type="string">
        <help><![CDATA[
					Name of a variable for the invocation result.
				]]></help>
        <values/>
      </parameter>
      <parameter name="method" required="false" type="string">
        <help><![CDATA[
					Name of a method. For a web service, the name of an operation.
				]]></help>
        <values/>
      </parameter>
      <parameter name="component" required="false" type="any">
        <help><![CDATA[
					String or component object; a reference to a component, or component to instantiate.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfinvokeargument" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Argument for the Invoke Tag
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="omit" required="false" type="boolean">
        <help><![CDATA[
					Enables you to omit a parameter when invoking a web service
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="true" type="string">
        <help><![CDATA[
					name of the argument
				]]></help>
        <values/>
      </parameter>
      <parameter name="value" required="true" type="any">
        <help><![CDATA[
					value of the argument
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cflayout" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				This tag may have a body.
				This tag has no <cfscript> support or it uses a different syntax.
			]]></help>
      <parameter name="tabheight" required="false" type="numeric">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="style" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="tabsadd" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="tabsload" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="tabsremove" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="tabsdisable" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="true" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="jslib" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="tabsenable" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="tabsselect" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cflayoutarea" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				This tag may have a body.
				This tag has no <cfscript> support or it uses a different syntax.
			]]></help>
      <parameter name="selected" required="false" type="Boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="source" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="refreshonactivate" required="false" type="Boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="onbinderror" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="style" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="disabled" required="false" type="Boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="title" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="overflow" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfldap" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Provides an interface to LDAP Lightweight Directory Access Protocol directory servers like the Microsoft Active Directory.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="returnasbinary" required="false" type="string">
        <help><![CDATA[
					A comma-delimited list of columns that are to be returned as binary values.
				]]></help>
        <values/>
      </parameter>
      <parameter name="sort" required="false" type="string">
        <help><![CDATA[
					Indicates the attribute or attributes by which to sort query results. Use a comma to separate attributes.
				]]></help>
        <values/>
      </parameter>
      <parameter name="filter" required="false" type="string">
        <help><![CDATA[
					Search criteria for action = "Query". List attributes in the form: "(attribute operator value)" Example: "(sn = Smith)"
				]]></help>
        <values/>
      </parameter>
      <parameter name="server" required="true" type="string">
        <help><![CDATA[
					Host name "biff.upperlip.com" or IP address "192.1.2.225" of the LDAP server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="start" required="false" type="string">
        <help><![CDATA[
					Specifies the distinguished name of the entry to be used to start the search.
				]]></help>
        <values/>
      </parameter>
      <parameter name="rebind" required="false" type="boolean">
        <help><![CDATA[
					If you set rebind to Yes, cfldap attempts to rebind the referral callback and reissue the query by the referred address using the original credentials. The default is No, which means referred connections are anonymous.
				]]></help>
        <values/>
      </parameter>
      <parameter name="dn" required="false" type="string">
        <help><![CDATA[
					Specifies the distinguished name for update actions.
				]]></help>
        <values/>
      </parameter>
      <parameter name="startrow" required="false" type="number">
        <help><![CDATA[
					Used in conjunction with action = "Query". Specifies the first row of the LDAP query to insert into the query. The default is 1.
				]]></help>
        <values/>
      </parameter>
      <parameter name="separator" required="false" type="string">
        <help><![CDATA[
					Specifies the character that cfldap uses to separate attribute values in multi-value attributes. This character is used by the query, add, and modify action attributes, and by cfldap to output multi-value attributes. The default character is the comma (,).
				]]></help>
        <values/>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					used when username is defined
				]]></help>
        <values/>
      </parameter>
      <parameter name="maxrows" required="false" type="number">
        <help><![CDATA[
					Specifies the maximum number of entries for LDAP queries.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					The name you assign to the LDAP query.
				]]></help>
        <values/>
      </parameter>
      <parameter name="filterfile" required="false" type="string">
        <help><![CDATA[
					this attribute is deprecated and no longer supported.
				]]></help>
        <values/>
      </parameter>
      <parameter name="referral" required="false" type="number">
        <help><![CDATA[
					Number of hops allowed in a referral. A value of 0 disables referred addresses for LDAP; no data is returned.
				]]></help>
        <values/>
      </parameter>
      <parameter name="port" required="false" type="number">
        <help><![CDATA[
					Port defaults to the standard LDAP port, 389.
				]]></help>
        <values/>
      </parameter>
      <parameter name="scope" required="false" type="string">
        <help><![CDATA[
					Specifies the scope of the search from the entry specified in the Start attribute for action = "Query".
				]]></help>
        <values/>
      </parameter>
      <parameter name="timeout" required="false" type="number">
        <help><![CDATA[
					Specifies the maximum amount of time, in seconds, to wait for LDAP processing. Defaults to 60 seconds.
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="false" type="string">
        <help><![CDATA[
					Specifies the LDAP action.
				]]></help>
        <values/>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					Specifies the character that cfldap uses to separate multiple attribute name/value pairs when more than one attribute is specified in the attribute attribute or the attribute that you want to use has the default delimiter character, which is the semicolon (;), such as mgrpmsgrejecttext;lang-en. The delimiter character is used by the query, add, and modify action attributes, and is used by cfldap to output multi-value attributes
				]]></help>
        <values/>
      </parameter>
      <parameter name="modifytype" required="false" type="string">
        <help><![CDATA[
					Indicates whether to add, delete, or replace an attribute in a multi-value list of attributes.
				]]></help>
        <values/>
      </parameter>
      <parameter name="attributes" required="false" type="string">
        <help><![CDATA[
					Required if action = "Query", "Add", "ModifyDN", or "Modify" For queries: comma-delimited list of attributes to return. For queries, to get all attributes, specify "*".         If action = "add" or "modify", you can specify a list of update
					        columns. Separate attributes with a semicolon.
					        If action = "ModifyDN", CFML passes attributes to the
					        LDAP server without syntax checking.
				]]></help>
        <values/>
      </parameter>
      <parameter name="secure" required="false" type="string">
        <help><![CDATA[
					The type of security to use
				]]></help>
        <values/>
      </parameter>
      <parameter name="username" required="false" type="string">
        <help><![CDATA[
					If no user name is specified, the LDAP connection is anonymous.
				]]></help>
        <values/>
      </parameter>
      <parameter name="sortcontrol" required="false" type="string">
        <help><![CDATA[
					Specifies how to sort query results.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cflocation" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Opens a CFML page or HTML file. For example, you might use cflocation to specify a standard message or response that you use in several applications. Use the addToken attribute to verify client requests.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="addtoken" required="false" type="boolean">
        <help><![CDATA[
					Yes or No. clientManagement must be enabled, see cfapplication. Yes appends client variable information to the URL you specify in the url.
				]]></help>
        <values/>
      </parameter>
      <parameter name="url" required="true" type="string">
        <help><![CDATA[
					The URL of the HTML file or CFML page to open.
				]]></help>
        <values/>
      </parameter>
      <parameter name="statuscode" required="false" type="number">
        <help><![CDATA[
					statuscode used for the redirect (301 or 302)
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cflock" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Provides two types of locks to ensure the integrity of shared data: Exclusive lock and Read-only lock.
				An exclusive lock single-threads access to the CFML constructs in its body. Single-threaded access implies that the body of the tag can be executed by at most one request at a time. A request executing inside a cflock tag has an "exclusive lock" on the tag. No other requests can start executing inside the tag while a request has an exclusive lock. Lucee issues exclusive locks on a first-come, first-served basis.
				A read-only lock allows multiple requests to access the CFML constructs inside its body concurrently. Therefore, read-only locks should be used only when the shared data is read only and not modified. If another request already has an exclusive lock on the shared data, the request waits for the exclusive lock to be released.
				This tag must have a body.
				This tag is also supported within <cfscript>
				https://www.youtube.com/watch?time_continue=4&v=x_TUx6EJ9nY
			]]></help>
      <parameter name="throwontimeout" required="false" type="boolean">
        <help><![CDATA[
					Yes or No. Specifies how timeout conditions are handled. If the value is Yes, an exception is generated to provide notification of the timeout. If the value is No, execution continues past the cfclock tag. Default is Yes.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					Specifies the name of the lock. Only one request can execute inside a cflock tag with a given name. Therefore, providing the name attribute allows for synchronizing access to resources from different parts of an application. Lock names are global to a server. They are shared between applications and user sessions, but not across clustered servers. This attribute is mutually exclusive with the scope attribute. Therefore, do not specify the scope attribute and the name attribute in a tag. The value of name cannot be an empty string.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					readOnly or Exclusive. Specifies the type of lock: read-only or exclusive. Default is Exclusive. A read-only lock allows more than one request to read shared data. An exclusive lock allows only one request to read or write to shared data.
				]]></help>
        <values/>
      </parameter>
      <parameter name="scope" required="false" type="string">
        <help><![CDATA[
					Specifies the scope as one of the following: Application, Server, or Session. This attribute is mutually exclusive with the name attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="timeout" required="false" type="object">
        <help><![CDATA[
					Specifies the maximum amount of time, in seconds, to wait to obtain a lock. If a lock can be obtained within the specified period, execution continues inside the body of the tag. Otherwise, the behavior depends on the value of the throwOnTimeout attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="result" required="false" type="string">
        <help><![CDATA[
					Specifies a name for the structure in which cflock returns the statusCode and ExecutionTime variables. Default variable is is "cflock".
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cflog" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Writes a message to a log file.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="date" required="false" type="boolean">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="charset" required="false" type="string">
        <help><![CDATA[
					Character set name for the file contents.
				]]></help>
        <values/>
      </parameter>
      <parameter name="text" required="false" type="string">
        <help><![CDATA[
					The message to log
				]]></help>
        <values/>
      </parameter>
      <parameter name="application" required="false" type="boolean">
        <help><![CDATA[
					Specifies whether to log the application name if one has been specified in a cfapplication tag.
				]]></help>
        <values/>
      </parameter>
      <parameter name="log" required="false" type="string">
        <help><![CDATA[
					Specifies the log to which to write the message. This reference can be defined in the Lucee Administrator. Ignored if you specify a file attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="exception" required="false" type="any">
        <help><![CDATA[
					An exception to log
				]]></help>
        <values/>
      </parameter>
      <parameter name="async" required="false" type="boolean">
        <help><![CDATA[
					only works in combination with the attribute "file", if set to true the file is written in a separate thread.
				]]></help>
        <values/>
      </parameter>
      <parameter name="time" required="false" type="boolean">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="file" required="false" type="string">
        <help><![CDATA[
					Define instead a log reference in the Lucee Administrator and use the name of the genrated log with the attribute log. Specify only the main part of the filename. For example, to log to the Testing.log file, specify "Testing". The file must be located in the default log directory. You cannot specify a directory path. If the file does not exist, it is created automatically, with the suffix .log.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					the following is the log type (level) in decreasing order of severity: fatal: Severe errors that cause premature termination. error: Other runtime errors or unexpected conditions. warn,warning: Use of deprecated APIs, poor use of API, 'almost' errors, other runtime situations that are undesirable or unexpected, but not necessarily "wrong". info,information (default): Interesting runtime events. debug: Detailed information on the flow through the system. trace: Most detailed information.
				]]></help>
        <values/>
      </parameter>
      <parameter name="thread" required="false" type="boolean">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cflogin" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				A container for user login and authentication code.
				Lucee runs the code in this tag if a user is not already logged in.
				You put code in the tag that authenticates the user and identifies the user with a set of roles. Used with <cfloginuser> tag.
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="cookiedomain" required="false" type="string">
        <help><![CDATA[
					Domain of the cookie that is used to mark a user as logged in. Use this attribute to enable a user login cookie to work with multiple clustered servers in the same domain.
				]]></help>
        <values/>
      </parameter>
      <parameter name="applicationtoken" required="false" type="string">
        <help><![CDATA[
					The login that applies to the application. To let users log in to only one application, specify a unique value for that application. To let users log in to multiple applications, specify the same value for those applications. If you do not set a value for the applicationtoken attribute, the default value is CFAUTHORIZATION_applicationname.
				]]></help>
        <values/>
      </parameter>
      <parameter name="idletimeout" required="false" type="number">
        <help><![CDATA[
					Time interval, in seconds, after which Lucee logs off the user.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfloginuser" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Identifies an authenticated user to Lucee. Specifies the user ID and roles. Used within a <cflogin> tag.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="password" required="true" type="string">
        <help><![CDATA[
					The Password of the User
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="true" type="string">
        <help><![CDATA[
					The Name of the User
				]]></help>
        <values/>
      </parameter>
      <parameter name="roles" required="true" type="any">
        <help><![CDATA[
					The Roles of the user in comma separated form.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cflogout" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Logs the current user out. Removes knowledge of the user ID, password, and roles from the server. If you do not use this tag, the user is automatically logged out when the session ends.
				This tag cannot have a body.
				This tag is also supported within <cfscript>
				This tag does not use any attributes.]]></help>

    </tag>
    <tag name="cfloop" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Looping is a very powerful programming technique that lets you repeat a set of instructions or display output repeatedly until one or more conditions are met. cfloop supports five types of loops.
				This tag must have a body.
				This tag is also supported within <cfscript>
			]]></help>
      <parameter name="condition" required="false" type="string">
        <help><![CDATA[
					Condition that controls the loop.
				]]></help>
        <values/>
      </parameter>
      <parameter name="item" required="false" type="string">
        <help><![CDATA[
					Key for the collection
				]]></help>
        <values/>
      </parameter>
      <parameter name="query" required="false" type="object">
        <help><![CDATA[
					Query that controls the loop. this can be a variable name or the query itself.
				]]></help>
        <values/>
      </parameter>
      <parameter name="charset" required="false" type="string">
        <help><![CDATA[
					charset for read the file
				]]></help>
        <values/>
      </parameter>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					struct to loop over
				]]></help>
        <values/>
      </parameter>
      <parameter name="times" required="false" type="numeric">
        <help><![CDATA[
					used for a simple loop that is looping n times
				]]></help>
        <values/>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Character(s) that separates items in list
				]]></help>
        <values/>
      </parameter>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					A list, variable, or file name; contains a list
				]]></help>
        <values/>
      </parameter>
      <parameter name="startline" required="false" type="number">
        <help><![CDATA[
					start line
				]]></help>
        <values/>
      </parameter>
      <parameter name="to" required="false" type="number">
        <help><![CDATA[
					Ending value of index.
				]]></help>
        <values/>
      </parameter>
      <parameter name="step" required="false" type="number">
        <help><![CDATA[
					Step by which to increment or decrement the index value.
				]]></help>
        <values/>
      </parameter>
      <parameter name="collection" required="false" type="any">
        <help><![CDATA[
					Collection to loop over
				]]></help>
        <values/>
      </parameter>
      <parameter name="endrow" required="false" type="number">
        <help><![CDATA[
					Last row of query that is included in the loop. You cannot use this attribute together with the attribute maxRows.
				]]></help>
        <values/>
      </parameter>
      <parameter name="startrow" required="false" type="number">
        <help><![CDATA[
					First row of query that is included in the loop.
				]]></help>
        <values/>
      </parameter>
      <parameter name="index" required="false" type="string">
        <help><![CDATA[
					Index value. Lucee sets it to from value and increments or decrements by step value, until it equals to value.
				]]></help>
        <values/>
      </parameter>
      <parameter name="file" required="false" type="string">
        <help><![CDATA[
					file path
				]]></help>
        <values/>
      </parameter>
      <parameter name="maxrows" required="false" type="number">
        <help><![CDATA[
					Specifies the maximum number of rows to display in the output section. You cannot use this attribute together with the attribute endrow.
				]]></help>
        <values/>
      </parameter>
      <parameter name="groupcasesensitive" required="false" type="boolean">
        <help><![CDATA[
					Boolean indicating whether to group with regard to case or not. The default value is NO; case is considered while grouping. If the query attribute specifies a query object that was generated by a case-insensitive SQL query, set the groupCaseSensitive attribute to NO to keep the recordset intact.
				]]></help>
        <values/>
      </parameter>
      <parameter name="from" required="false" type="number">
        <help><![CDATA[
					Beginning value of index.
				]]></help>
        <values/>
      </parameter>
      <parameter name="endline" required="false" type="number">
        <help><![CDATA[
					end line
				]]></help>
        <values/>
      </parameter>
      <parameter name="label" required="false" type="string">
        <help><![CDATA[
					used to address this loop from a "break" or "continue" statement (instead of the nearest one).
				]]></help>
        <values/>
      </parameter>
      <parameter name="characters" required="false" type="number">
        <help><![CDATA[
					The number of characters to read during each iteration of the loop from the file specified in the file attribute. If the value of the characters attribute is more than the number of characters in the file, Lucee uses the number of characters in the file.
				]]></help>
        <values/>
      </parameter>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					An array.
				]]></help>
        <values/>
      </parameter>
      <parameter name="group" required="false" type="string">
        <help><![CDATA[
					Specifies the query column to use when you group sets of records together to send as an e-mail message. For example, if you send a set of billing statements to customers, you might group on "Customer_ID." The group attribute, which is case sensitive, eliminates adjacent duplicates when the data is sorted by the specified field. See the Usage section for exceptions.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfmail" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Sends e-mail messages by an SMTP server.
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="query" required="false" type="string">
        <help><![CDATA[
					The name of the cfquery from which to draw data for message(s) to send. Specify this attribute to send more than one mail message, or to send the results of a query within a message.
				]]></help>
        <values/>
      </parameter>
      <parameter name="charset" required="false" type="string">
        <help><![CDATA[
					Character encoding of the mail message
				]]></help>
        <values/>
      </parameter>
      <parameter name="mimeattach" required="false" type="string">
        <help><![CDATA[
					Specifies the path of the file to be attached to the e-mail message. An attached file is MIME-encoded.
				]]></help>
        <values/>
      </parameter>
      <parameter name="server" required="false" type="string">
        <help><![CDATA[
					The address of the SMTP server to use for sending messages. If no server is specified, the server name specified in the Lucee Administrator is used.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyuser" required="false" type="string">
        <help><![CDATA[
					When required by a proxy server, a valid username.
				]]></help>
        <values/>
      </parameter>
      <parameter name="async" required="false" type="boolean">
        <help><![CDATA[
					if set to true, the mail is sent asynchronously by the Lucee Task manager (with multiple tries), if set to false the mail is sent in the same thread that executes the request, which is useful for troubleshooting because you get an error message if there is one. This setting overrides the setting with the same name in the Lucee Administrator. This attribute replaces the old "spoolenable" attribute which is still supported as an alias.
				]]></help>
        <values/>
      </parameter>
      <parameter name="startrow" required="false" type="number">
        <help><![CDATA[
					Specifies the row in the query to start from.
				]]></help>
        <values/>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					A password to send to SMTP servers that require authentication. Requires a username attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="maxrows" required="false" type="number">
        <help><![CDATA[
					Specifies the maximum number of e-mail messages to send.
				]]></help>
        <values/>
      </parameter>
      <parameter name="sendtime" required="false" type="datetime">
        <help><![CDATA[
					Set a future date time to send an email in the future via the spooler.
				]]></help>
        <values/>
      </parameter>
      <parameter name="from" required="true" type="object">
        <help><![CDATA[
					The sender of the e-mail message.
				]]></help>
        <values/>
      </parameter>
      <parameter name="timeout" required="false" type="number">
        <help><![CDATA[
					The number of seconds to wait before timing out the connection to the SMTP server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="username" required="false" type="string">
        <help><![CDATA[
					A user name to send to SMTP servers that require authentication. Requires a password attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="listener" required="false" type="any">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyport" required="false" type="number">
        <help><![CDATA[
					The port number on the proxy server from which the object is requested. Default is 80. When used with resolveURL, the URLs of retrieved documents that specify a port number are automatically resolved to preserve links in the retrieved document.
				]]></help>
        <values/>
      </parameter>
      <parameter name="usetls" required="false" type="boolean">
        <help><![CDATA[
					Whether to use Transport Level Security.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxypassword" required="false" type="string">
        <help><![CDATA[
					When required by a proxy server, a valid password.
				]]></help>
        <values/>
      </parameter>
      <parameter name="remove" required="false" type="boolean">
        <help><![CDATA[
					remove all attachments from filesystem after the mail is successfully sent
				]]></help>
        <values/>
      </parameter>
      <parameter name="wraptext" required="false" type="number">
        <help><![CDATA[
					Specifies the maximum line length, in characters of the mail text. If a line has more than the specified number of characters, replaces the last white space character, such as a tab or space, preceding the specified position with a line break. If there are no white space characters, inserts a line break at the specified position. A common value for this attribute is 72.
				]]></help>
        <values/>
      </parameter>
      <parameter name="subject" required="true" type="string">
        <help><![CDATA[
					The subject of the mail message. This field may be driven dynamically on a message-by-message basis
				]]></help>
        <values/>
      </parameter>
      <parameter name="failto" required="false" type="object">
        <help><![CDATA[
					Address to which mailing systems should send delivery failure notifications. Sets the mail envelope Return-Path value.
				]]></help>
        <values/>
      </parameter>
      <parameter name="to" required="false" type="object">
        <help><![CDATA[
					The name of the e-mail message recipient.
				]]></help>
        <values/>
      </parameter>
      <parameter name="mailerid" required="false" type="string">
        <help><![CDATA[
					Specifies a mailer ID to be passed in the X-Mailer SMTP header, which identifies the mailer application.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyserver" required="false" type="string">
        <help><![CDATA[
					Host name or IP address of a proxy server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="priority" required="false" type="String">
        <help><![CDATA[
					The message priority level. Can be one of the following values: * An integer in the range 1-5; 1 represents the highest priority. * One of the following string values, which correspond to the numeric values: highest or urgent, high, normal, low, and lowest or non-urgent.
				]]></help>
        <values/>
      </parameter>
      <parameter name="usessl" required="false" type="boolean">
        <help><![CDATA[
					Whether to use Secure Sockets Layer.
				]]></help>
        <values/>
      </parameter>
      <parameter name="cc" required="false" type="object">
        <help><![CDATA[
					Indicates addresses to copy the e-mail message to; "cc" stands for "carbon copy."
				]]></help>
        <values/>
      </parameter>
      <parameter name="groupcasesensitive" required="false" type="boolean">
        <help><![CDATA[
					Boolean indicating whether to group with regard to case or not. The default value is NO; case is considered while grouping. If the query attribute specifies a query object that was generated by a case-insensitive SQL query, set the groupCaseSensitive attribute to NO to keep the recordset intact.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					Specifies extended type attributes for the message.
				]]></help>
        <values/>
      </parameter>
      <parameter name="port" required="false" type="number">
        <help><![CDATA[
					The TCP/IP port on which the SMTP server listens for requests. This is normally 25.
				]]></help>
        <values/>
      </parameter>
      <parameter name="replyto" required="false" type="object">
        <help><![CDATA[
					Address(es) to which the recipient is directed to send replies.
				]]></help>
        <values/>
      </parameter>
      <parameter name="group" required="false" type="string">
        <help><![CDATA[
					Specifies the query column to use when you group sets of records together to send as an e-mail message. For example, if you send a set of billing statements to customers, you might group on "Customer_ID." The group attribute, which is case sensitive, eliminates adjacent duplicates when the data is sorted by the specified field. See the Usage section for exceptions.
				]]></help>
        <values/>
      </parameter>
      <parameter name="bcc" required="false" type="object">
        <help><![CDATA[
					Indicates addresses to copy the e-mail message to, without listing them in the message header. "bcc" stands for "blind carbon copy."
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfmailparam" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Can either attach a file or add a header to a message. It is nested within a [tag-mail] tag. You can use more than one cfmailparam tag within a cfmail tag.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="content" required="false" type="any">
        <help><![CDATA[
					send given value as attachment
				]]></help>
        <values/>
      </parameter>
      <parameter name="remove" required="false" type="boolean">
        <help><![CDATA[
					remove attachment from filesystem after the mail is successfully sent
				]]></help>
        <values/>
      </parameter>
      <parameter name="filename" required="false" type="string">
        <help><![CDATA[
					file name used for the file attached with the attribute "file", if not set the name of the file itself is used.
				]]></help>
        <values/>
      </parameter>
      <parameter name="contentid" required="false" type="string">
        <help><![CDATA[
					The Identifier for the attached file. This ID should be globally unique and is used to identify the file in an IMG or other tag in the mail body that references the file content.
				]]></help>
        <values/>
      </parameter>
      <parameter name="disposition" required="false" type="string">
        <help><![CDATA[
					How the attached file is to be handled. Can be one of the following: attachment: presents the file as an attachment. inline: displays the file contents in the message.
				]]></help>
        <values/>
      </parameter>
      <parameter name="file" required="false" type="string">
        <help><![CDATA[
					Attaches the specified file to the message. This attribute is mutually exclusive with the name attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					Specifies the name of the header. Header names are case insensitive. This attribute is mutually exclusive with the file attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					The MIME media type of the part.
				]]></help>
        <values/>
      </parameter>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					Indicates the value of the header.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfmailpart" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Specifies one part of a multipart e-mail message. Can only be used in the cfmail tag. You can use more than one cfmailpart tag within a cfmail tag
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="charset" required="false" type="string">
        <help><![CDATA[
					The character encoding in which the part text is encoded
				]]></help>
        <values/>
      </parameter>
      <parameter name="wraptext" required="false" type="number">
        <help><![CDATA[
					Specifies the maximum line length, in characters of the mail text
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="true" type="string">
        <help><![CDATA[
					The MIME media type of the part
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfmap" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				This tag may have a body.
				This tag has no <cfscript> support or it uses a different syntax.
			]]></help>
      <parameter name="height" required="false" type="numeric">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="centerlongitude" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="zoomcontrol" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="onerror" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="overview" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="markercolor" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="showcentermarker" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="continuouszoom" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="markerwindowcontent" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="markericon" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="onnotfound" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="centerlatitude" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="typecontrol" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="tip" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="zoomlevel" required="false" type="numeric">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="width" required="false" type="numeric">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="showscale" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="centeraddress" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="onload" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="doubleclickzoom" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfmapitem" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				This tag may have a body.
				This tag has no <cfscript> support or it uses a different syntax.
			]]></help>
      <parameter name="longitude" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="markercolor" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="markerwindowcontent" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="markericon" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="latitude" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="tip" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="address" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfmediaplayer" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				This tag may have a body.
				This tag has no <cfscript> support or it uses a different syntax.
			]]></help>
      <parameter name="controlbar" required="false" type="boolean">
        <help><![CDATA[
					A Boolean value that specifies if you want to display the control panel for the media player
				]]></help>
        <values/>
      </parameter>
      <parameter name="height" required="false" type="numeric">
        <help><![CDATA[
					Height of the media player, in pixels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="hidetitle" required="false" type="boolean">
        <help><![CDATA[
					If true, displays the title.
				]]></help>
        <values/>
      </parameter>
      <parameter name="quality" required="false" type="string">
        <help><![CDATA[
					The quality of the media playback (only used for flash fallback)
				]]></help>
        <values/>
      </parameter>
      <parameter name="source" required="true" type="any">
        <help><![CDATA[
					The URL (absolute or relative to the current page) to the movie files, supported formats are (mp4,ogg,webm). not every Browser supports the same format, define as many formats possible. You can define the urls as string list or as array
				]]></help>
        <values/>
      </parameter>
      <parameter name="align" required="false" type="string">
        <help><![CDATA[
					Specifies the horizontal alignment of the media player. You can select from left, right, and center.
				]]></help>
        <values/>
      </parameter>
      <parameter name="bgcolor" required="false" type="string">
        <help><![CDATA[
					The background color of the media player specified as a Hexadecimal value or or a recognized color name, for example red.
				]]></help>
        <values/>
      </parameter>
      <parameter name="style" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="fullscreencontrol" required="false" type="boolean">
        <help><![CDATA[
					Whether full screen is enabled
				]]></help>
        <values/>
      </parameter>
      <parameter name="oncomplete" required="false" type="string">
        <help><![CDATA[
					Custom JavaScript function to run when the FLV file has finished playing.
				]]></help>
        <values/>
      </parameter>
      <parameter name="wmode" required="false" type="string">
        <help><![CDATA[
					Specifies the absolute positioning and layering capabilities in your browser
				]]></help>
        <values/>
      </parameter>
      <parameter name="width" required="false" type="numeric">
        <help><![CDATA[
					Width of the media player, in pixels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="printjscontrols" required="false" type="boolean">
        <help><![CDATA[
					it set to true, all possible JS Controls ar printed after the video.
				]]></help>
        <values/>
      </parameter>
      <parameter name="autoplay" required="false" type="boolean">
        <help><![CDATA[
					A Boolean value that specifies if the media player must automatically play the FLV file on loading the CFM page
				]]></help>
        <values/>
      </parameter>
      <parameter name="image" required="false" type="string">
        <help><![CDATA[
					image displayed when movie is stopped
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					Name of the media player. the name attribute is required when you invoke JavaScript functions.
				]]></help>
        <values/>
      </parameter>
      <parameter name="load" required="false" type="boolean">
        <help><![CDATA[
					if set to true, start loading before play was pressed.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onload" required="false" type="string">
        <help><![CDATA[
					Custom JavaScript function to run on loading of the player component.
				]]></help>
        <values/>
      </parameter>
      <parameter name="hideborder" required="false" type="boolean">
        <help><![CDATA[
					A Boolean value that specifies if you want a border for the media player panel
				]]></help>
        <values/>
      </parameter>
      <parameter name="title" required="false" type="string">
        <help><![CDATA[
					Title for the video, if not set, the video file name is used.
				]]></help>
        <values/>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					delimiter used to separate urls in source attribute, default is comma
				]]></help>
        <values/>
      </parameter>
      <parameter name="onstart" required="false" type="string">
        <help><![CDATA[
					Custom JavaScript function to run when the FLV file starts playing.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfmenu" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfmenu> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfmenuitem" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfmenuitem> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfmessagebox" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfmessagebox> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfmodule" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Invokes a custom tag for use in cfml templates. The cfmodule tag can help deal with custom tag name conflicts and differs from the use of <cfinclude> in that it does not share or affect the scope of the caller. Use the template attribute to name a template that contains the custom tag definition, including its path. Individual attributes or an attributeCollection may be passed as tag attributes, which will be exclusive to the scope of the module template called.
				This tag may have a body.
				This tag is also supported within <cfscript>
				This tag does not use any attributes.
			]]></help>

    </tag>
    <tag name="cfntauthenticate" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfntauthenticate> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfoauth" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfoauth> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfobject" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Lets you call methods in COM, CORBA, and JAVA objects.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="proxyport" required="false" type="number">
        <help><![CDATA[
					The port to use on the proxy server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxypassword" required="false" type="string">
        <help><![CDATA[
					The user's password on the proxy server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="context" required="false" type="string">
        <help><![CDATA[
					inproc local remote In Windows, if not specified, uses Registry setting.
				]]></help>
        <values/>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					if specified a classpath, use as delimiter for the entries, default is comma.
				]]></help>
        <values/>
      </parameter>
      <parameter name="server" required="false" type="string">
        <help><![CDATA[
					Server name, using Universal Naming Convention (UNC) or Domain Name Serve (DNS) convention, in one of these forms: * \\lanserver
					* lanserver
					* http://www.servername.com
					* www.servername.com
					* 127.0.0.1
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyuser" required="false" type="string">
        <help><![CDATA[
					The user ID to send to the proxy server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="locale" required="false" type="string">
        <help><![CDATA[
					Sets arguments for a call to init_orb. Use this attribute only for VisiBroker ORBs. It is available on C++, Version 3.2. The value must be in the form: locale = " -ORBagentAddr 199.99.129.33 -ORBagentPort 19000" Each type-value pair must start with a hyphen.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyserver" required="false" type="string">
        <help><![CDATA[
					The proxy server required to access the web service URL.
				]]></help>
        <values/>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					The password to use to access the web service. If the webservice attribute specifies a web service name configured in the Lucee Administrator, overrides any password specified in the Administrator entry.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="true" type="string">
        <help><![CDATA[
					name for the instantiated component.
				]]></help>
        <values/>
      </parameter>
      <parameter name="webservice" required="false" type="string">
        <help><![CDATA[
					The absolute URL of the web service.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					The object type. You can omit this attribute or specify component. Lucee automatically sets the type to component.
				]]></help>
        <values/>
      </parameter>
      <parameter name="class" required="false" type="string">
        <help><![CDATA[
					Component ProgID for the object to invoke. When using Java stubs to connect to the COM object, the class must be the ProgID of the COM object.
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="false" type="string">
        <help><![CDATA[
					create: instantiates a COM object (typically, a DLL) before invoking methods or properties. connect: connects to a COM object (typically, an EXE) running on server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="username" required="false" type="string">
        <help><![CDATA[
					The user name to use to access the web service. If the webservice attribute specifies a web service configured name in the Lucee Administrator, overrides any user name specified in the Administrator entry.
				]]></help>
        <values/>
      </parameter>
      <parameter name="component" required="false" type="string">
        <help><![CDATA[
					Name of component to instantiate.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfobjectcache" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Flushes an object cache or returns the current size.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="filter" required="false" type="object">
        <help><![CDATA[
					filter for the elements to delete
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					cache type to manipulate function include object query resource template
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="result" required="false" type="string">
        <help><![CDATA[
					name for variables for action size
				]]></help>
        <values/>
      </parameter>
      <parameter name="filterignorecase" required="false" type="string">
        <help><![CDATA[
					filter for the elements to delete
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfoutput" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Displays the results of a database query or other operation. To nest cfoutput tags, see the "Usage" section.
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="query" required="false" type="object">
        <help><![CDATA[
					The name of the cfquery from which to draw data for the output section or the query itself.
				]]></help>
        <values/>
      </parameter>
      <parameter name="endrow" required="false" type="number">
        <help><![CDATA[
					Last row of query that is included. You cannot use this attribute together with the attribute maxRows.
				]]></help>
        <values/>
      </parameter>
      <parameter name="startrow" required="false" type="number">
        <help><![CDATA[
					Specifies the row from which to start output.
				]]></help>
        <values/>
      </parameter>
      <parameter name="maxrows" required="false" type="number">
        <help><![CDATA[
					Specifies the maximum number of rows to display in the output section. You cannot use this attribute together with the attribute endRow.
				]]></help>
        <values/>
      </parameter>
      <parameter name="groupcasesensitive" required="false" type="boolean">
        <help><![CDATA[
					Boolean indicating whether to group by case. The default value is YES; case is considered while grouping. If the query attribute specifies a query object that was generated by a case-insensitive SQL query, set the groupCaseSensitive attribute to NO to keep the recordset intact.
				]]></help>
        <values/>
      </parameter>
      <parameter name="encodefor" required="false" type="string">
        <help><![CDATA[
					encode for what, valid values are: css: for output inside Cascading Style Sheets (CSS) dn: for output in LDAP Distinguished Names html: for output inside HTML html_attr: for output inside HTML Attributes javascript: for output inside Javascript ldap: for output in LDAP queries url: for output in URL vbscript: for output inside vbscript xml: for output inside XML xml_attr: for output inside XML Attributes xpath: for output in XPath
				]]></help>
        <values/>
      </parameter>
      <parameter name="group" required="false" type="string">
        <help><![CDATA[
					Specifies the query column to use when you group sets of records together. Use this attribute if you have retrieved a record set ordered on a certain query column. For example, if a record set is ordered according to "CustomerID" in the cfquery tag, you can group the output on "CustomerID." The group attribute, which is case sensitive, eliminates adjacent duplicates when the data is sorted by the specified field. See the groupCaseSensitive attribute for information about specifying a case insensitive grouping.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfpageencoding" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				A string literal; the character encoding to use to read the page. The value may be enclosed in single or double quotation marks, or none.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="charset" required="true" type="string">
        <help><![CDATA[
					A string literal; the character encoding to use to read the page. The value may be enclosed in single or double quotation marks, or none.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfparam" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Tests for a parameter's existence, tests its data type, and provides a default value if one is not assigned.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="default" required="false" type="any">
        <help><![CDATA[
					Default value to set the parameter to if it does not exist.
				]]></help>
        <values/>
      </parameter>
      <parameter name="pattern" required="false" type="string">
        <help><![CDATA[
					define a regular expression pattern, to check value against
				]]></help>
        <values/>
      </parameter>
      <parameter name="maxlength" required="false" type="int">
        <help><![CDATA[
					define the maxlength of a value for this types: email, url and string
				]]></help>
        <values/>
      </parameter>
      <parameter name="min" required="false" type="number">
        <help><![CDATA[
					define the smallest size of a numeric value, used for type range
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="true" type="string">
        <help><![CDATA[
					The name of the parameter to test, such as Client.Email or Cookie.BackgroundColor. If you omit the DEFAULT attribute, an error occurs if the specified parameter does not exist
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					The type of parameter that is required. The default is 'any' and valid values are: any: any type of value array: an array of values binary: a binary value boolean: a Boolean value creditcard: a 13-16 digit number conforming to the mod10 algorithm date or time: a date-time value email: a valid e-mail address eurodate: a date-time value. Any date part must be in the format dd/mm/yy. The format can use /, -, or . characters as delimiters float or numeric: a numeric value guid: a Universally Unique Identifier of the form "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX" where X is a hexadecimal number integer: an integer query: a query object range: a numeric range, specified by the min and max attributes regex or regular_expression: matches input against pattern attribute ssn or social_security_number: a U.S. social security number string: a string value or single character struct: a structure telephone: a standard U.S. telephone number url: an http, https, ftp, file, mailto, or news URL uuid: a ColdFusion Universally Unique Identifier, formatted XXXXXXXX-XXXX-XXXX-XXXXXXXXXXXXXXX, where X is a hexadecimal number. See CreateUUID usdate: a U.S. date of the format mm/dd/yy, with 1-2 digit days and months, 1-4 digit years variableName: a string formatted according to ColdFusion variable naming conventions xml: XML objects and XML strings zipcode: U.S., 5- or 9-digit format ZIP codes
				]]></help>
        <values/>
      </parameter>
      <parameter name="max" required="false" type="number">
        <help><![CDATA[
					define the biggest size of a numeric value, used for type range
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfpdf" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Manipulates existing PDF documents.
				The following list describes some of the tasks you can perform with the cfpdf tag:
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="copyfrom" required="false" type="any">
        <help><![CDATA[
					Pathname of the PDF document from which to use the first page as a watermark
				]]></help>
        <values/>
      </parameter>
      <parameter name="bottommargin" required="false" type="numeric">
        <help><![CDATA[
					bottom margin of the text in footer
				]]></help>
        <values/>
      </parameter>
      <parameter name="align" required="false" type="string">
        <help><![CDATA[
					Aligns the header and footer in PDF: left right center
				]]></help>
        <values/>
      </parameter>
      <parameter name="permissions" required="false" type="string">
        <help><![CDATA[
					type of permissions on the PDF document
				]]></help>
        <values/>
      </parameter>
      <parameter name="info" required="false" type="struct">
        <help><![CDATA[
					Structure variable for relevant information
				]]></help>
        <values/>
      </parameter>
      <parameter name="newuserpassword" required="false" type="string">
        <help><![CDATA[
					Password used to open PDF document
				]]></help>
        <values/>
      </parameter>
      <parameter name="pages" required="false" type="string">
        <help><![CDATA[
					Page or pages in the source PDF document on which to perform the action. You can specify multiple pages and page ranges as follows: "1,6-9,56-89,100, 110-120".
				]]></help>
        <values/>
      </parameter>
      <parameter name="ddxfile" required="false" type="string">
        <help><![CDATA[
					Pathname of the DDX file, or a string with DDX instructions
				]]></help>
        <values/>
      </parameter>
      <parameter name="topmargin" required="false" type="numeric">
        <help><![CDATA[
					top margin of the text in header
				]]></help>
        <values/>
      </parameter>
      <parameter name="showonprint" required="false" type="boolean">
        <help><![CDATA[
					Specify whether to print the watermark with the PDF document
				]]></help>
        <values/>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					Owner or user password of the source PDF document, if the document is password-protected.
				]]></help>
        <values/>
      </parameter>
      <parameter name="isbase64" required="false" type="boolean">
        <help><![CDATA[
					Valid only when the image attribute is specified. Specifies whether the image used as a watermark is in Base64 format
				]]></help>
        <values/>
      </parameter>
      <parameter name="leftmargin" required="false" type="numeric">
        <help><![CDATA[
					left margin of the text in header/footer
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					PDF document variable name
				]]></help>
        <values/>
      </parameter>
      <parameter name="numberformat" required="false" type="string">
        <help><![CDATA[
					Specify the numbering format for PDF pages in the header/footer. possible values are: LOWERCASEROMAN UPPERCASEROMAN NUMERIC
				]]></help>
        <values/>
      </parameter>
      <parameter name="encrypt" required="false" type="string">
        <help><![CDATA[
					Encryption type for the PDF output file
				]]></help>
        <values/>
      </parameter>
      <parameter name="destination" required="false" type="string">
        <help><![CDATA[
					Pathname of the modified PDF document. If the destination file exists, you must set the overwrite attribute to yes. If the destination file does not exist, CFML creates the file, if the parent directory exists.
				]]></help>
        <values/>
      </parameter>
      <parameter name="stoponerror" required="false" type="boolean">
        <help><![CDATA[
					Valid only if the directory attribute is specified. If the specified directory contains files other then readable PDF files, Lucee either stops merge process or continues.
				]]></help>
        <values/>
      </parameter>
      <parameter name="opacity" required="false" type="number">
        <help><![CDATA[
					Opacity of the watermark. Valid values are integers in the range 0 (transparent) through 10 (opaque).
				]]></help>
        <values/>
      </parameter>
      <parameter name="format" required="false" type="string">
        <help><![CDATA[
					File type of thumbnail image output
				]]></help>
        <values/>
      </parameter>
      <parameter name="rightmargin" required="false" type="numeric">
        <help><![CDATA[
					right margin of the text in header/footer
				]]></help>
        <values/>
      </parameter>
      <parameter name="text" required="false" type="string">
        <help><![CDATA[
					text for header or footer, you can add he following place holders within the text: _PAGELABEL: add current page label _LASTPAGELABEL: add last page label _PAGENUMBER: add current page number _LASTPAGENUMBER: add last page number
				]]></help>
        <values/>
      </parameter>
      <parameter name="transparent" required="false" type="boolean">
        <help><![CDATA[
					(format="png" only) Specifies whether the image background is transparent or opaque
				]]></help>
        <values/>
      </parameter>
      <parameter name="position" required="false" type="string">
        <help><![CDATA[
					Position on the page where the watermark is placed. The position represents the top-left corner of the watermark. Specify the x and y coordinates; for example "50,30".
				]]></help>
        <values/>
      </parameter>
      <parameter name="inputfiles" required="false" type="struct">
        <help><![CDATA[
					Structure that maps the PDF source files to the input variables in the DDX file, or a string of elements and their pathname.
				]]></help>
        <values/>
      </parameter>
      <parameter name="source" required="false" type="any">
        <help><![CDATA[
					PDF document used as the source.
				]]></help>
        <values/>
      </parameter>
      <parameter name="version" required="false" type="number">
        <help><![CDATA[
					Version of the PDF used to write the document
				]]></help>
        <values/>
      </parameter>
      <parameter name="filter" required="false" type="string">
        <help><![CDATA[
					file filter, used with attribute directory
				]]></help>
        <values/>
      </parameter>
      <parameter name="directory" required="false" type="string">
        <help><![CDATA[
					Directory of the PDF documents to merge. You must specify either the directory attribute or the source attribute. If you specify the directory attribute, CFML orders the documents by filename in descending order, by default. To change the order of the files, use the order attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="imageprefix" required="false" type="string">
        <help><![CDATA[
					prefix used for each image thumbnail file generated. The image filenames use the format: imagePrefix_page_n.format.
				]]></help>
        <values/>
      </parameter>
      <parameter name="saveoption" required="false" type="string">
        <help><![CDATA[
					Save options for the PDF output
				]]></help>
        <values/>
      </parameter>
      <parameter name="order" required="false" type="string">
        <help><![CDATA[
					Order in which the PDF documents in the directory are merged
				]]></help>
        <values/>
      </parameter>
      <parameter name="outputfiles" required="false" type="struct">
        <help><![CDATA[
					Structure that contains the output files in the DDX file or string as keys and the pathname to the result file as the value.
				]]></help>
        <values/>
      </parameter>
      <parameter name="scale" required="false" type="number">
        <help><![CDATA[
					Size of the thumbnail relative to the source page. The value represents a percentage from 1 through 100.
				]]></help>
        <values/>
      </parameter>
      <parameter name="newownerpassword" required="false" type="string">
        <help><![CDATA[
					Password used to set permissions on a PDF document
				]]></help>
        <values/>
      </parameter>
      <parameter name="resolution" required="false" type="string">
        <help><![CDATA[
					Image quality used to generate thumbnail images
				]]></help>
        <values/>
      </parameter>
      <parameter name="flatten" required="false" type="boolean">
        <help><![CDATA[
					Applies to forms created in Acrobat only (not forms created in LiveCycle); specifies whether interactivity is turned off
				]]></help>
        <values/>
      </parameter>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					Image used as a watermark. You can specify a pathname, a variable that contains an image file, or an image variable
				]]></help>
        <values/>
      </parameter>
      <parameter name="foreground" required="false" type="boolean">
        <help><![CDATA[
					Placement of the watermark on the page
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					used for action "extractText", defines the format type of the extraction, valid values are: string,xml
				]]></help>
        <values/>
      </parameter>
      <parameter name="overwrite" required="false" type="boolean">
        <help><![CDATA[
					Specifies whether PDF output overwrites the destination file
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="false" type="string">
        <help><![CDATA[
					action to take
				]]></help>
        <values/>
      </parameter>
      <parameter name="rotation" required="false" type="number">
        <help><![CDATA[
					Degree of rotation of the watermark image on the page.
				]]></help>
        <values/>
      </parameter>
      <parameter name="ascending" required="false" type="boolean">
        <help><![CDATA[
					Order in which the PDF files are sorted
				]]></help>
        <values/>
      </parameter>
      <parameter name="keepbookmark" required="false" type="boolean">
        <help><![CDATA[
					Specifies whether bookmarks from the source PDF documents are retained in the merged document
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfpdfform" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				The <cfpdfform> tag is not supported natively by Lucee.
				This functionality is avialable though via 3rd party extensions: * Ortus PDF Lucee Extension
			]]></help>

    </tag>
    <tag name="cfpdfformparam" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				The <cfpdfformparam> tag is not supported natively by Lucee.
				This functionality is available via 3rd party extensions: * Ortus PDF Lucee Extension
			]]></help>

    </tag>
    <tag name="cfpdfparam" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Provides additional information for the cfpdf tag.
				The cfpdfparam tag applies only to the merge action of the <cfpdf> tag and is always a child tag of the cfpdf tag.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="source" required="true" type="any">
        <help><![CDATA[
					Source PDF file to merge. You can specify a PDF variable, a cfdocument variable, or the pathname to a file.
				]]></help>
        <values/>
      </parameter>
      <parameter name="pages" required="false" type="string">
        <help><![CDATA[
					age or pages of the PDF source file to merge. You can specify a range of pages, for example, "1-5 ", or a comma-separated list of pages, for example, "1-5,9-10,18".
				]]></help>
        <values/>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					User or owner password, if the source PDF file is password-protected.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfpdfsubform" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfpdfsubform> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfpod" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfpod> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfpop" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Retrieves and deletes e-mail messages from a POP mail server.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="attachmentpath" required="false" type="string">
        <help><![CDATA[
					Allows attachments to be written to the specified directory when action = "getAll". If an invalid attachmentPath is specified, no attachment files are written to the server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="server" required="false" type="string">
        <help><![CDATA[
					Host name biff.upperlip.com or IP address 192.1.2.225 of the POP server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="uid" required="false" type="string">
        <help><![CDATA[
					UID or a comma-delimited list of UIDs to get or delete. Invalid UIDs are ignored.
				]]></help>
        <values/>
      </parameter>
      <parameter name="messagenumber" required="false" type="string">
        <help><![CDATA[
					Can be a comma-separated list of the message ids
				]]></help>
        <values/>
      </parameter>
      <parameter name="generateuniquefilenames" required="false" type="boolean">
        <help><![CDATA[
					Boolean indicating whether to generate unique filenames for the files attached to an e-mail message to avoid naming conflicts when the files are saved. Default is NO.
				]]></help>
        <values/>
      </parameter>
      <parameter name="startrow" required="false" type="number">
        <help><![CDATA[
					Specifies the first row number to be retrieved. Default is 1. This attribute is ignored if messageNumber is specified.
				]]></help>
        <values/>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					Password that corresponds to user name.
				]]></help>
        <values/>
      </parameter>
      <parameter name="maxrows" required="false" type="number">
        <help><![CDATA[
					Sets the number of messages returned, starting with the number in the startRow attribute. This attribute is ignored if messageNumber is specified.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					Name for the index query.
				]]></help>
        <values/>
      </parameter>
      <parameter name="port" required="false" type="number">
        <help><![CDATA[
					Defaults to the standard POP port, 110.
				]]></help>
        <values/>
      </parameter>
      <parameter name="timeout" required="false" type="number">
        <help><![CDATA[
					Specifies the maximum time, in seconds, to wait for mail processing. Defaults is 60 seconds.
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="false" type="string">
        <help><![CDATA[
					Specifies the mail action. getHeaderOnly: returns message header information only getAll: returns message header information, message text, and attachments if attachmentPath is specified delete: deletes messages on POP server
				]]></help>
        <values/>
      </parameter>
      <parameter name="debug" required="false" type="boolean">
        <help><![CDATA[
					this attribute is deprecated and ignored, log control happens via the logging framework directly.
				]]></help>
        <values/>
      </parameter>
      <parameter name="secure" required="false" type="boolean">
        <help><![CDATA[
					enables SSL for pop requests
				]]></help>
        <values/>
      </parameter>
      <parameter name="username" required="false" type="string">
        <help><![CDATA[
					If no user name is specified, the POP connection is anonymous.
				]]></help>
        <values/>
      </parameter>
      <parameter name="connection" required="false" type="string">
        <help><![CDATA[
					label for a connection.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfpresentation" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfpresentation> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfpresentationslide" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfpresentationslide> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfpresenter" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfpresenter> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfprint" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfprint> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfprocessingdirective" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Suppresses extra white space and other output, produced by CFML within the tag's scope.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="executionlog" required="false" type="boolean">
        <help><![CDATA[
					Boolean indicating whether to write execution log or not.
				]]></help>
        <values/>
      </parameter>
      <parameter name="pageencoding" required="false" type="string">
        <help><![CDATA[
					A string literal; the character encoding to use to read the page. The value may be enclosed in single or double quotation marks, or none.
				]]></help>
        <values/>
      </parameter>
      <parameter name="suppresswhitespace" required="false" type="boolean">
        <help><![CDATA[
					Boolean indicating whether to suppress the white space and other output generated by the CFML tags within the cfprocessingdirective block.
				]]></help>
        <values/>
      </parameter>
      <parameter name="preservecase" required="false" type="boolean">
        <help><![CDATA[
					declare how variable keys defined by dot notation are handled. If set to false converts all struct keys defined with "dot notation" to upper case. Example: - sct.dotNotation --> keyname: "DOTNOTATION" - sct["bracketNotation"] --> keyname: "bracketNotation" If set to true keep all struct keys defined with "dot notation" in original case (according to the "bracket notation"). Example: sct.dotNotation --> keyname: "dotNotation" sct["bracketNotation"] --> keyname: "bracketNotation"
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfprocparam" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Specifies parameter information, including type, name, value, and length. The cfprocparam tag is nested within a <cfstoredproc> tag.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="maxlength" required="false" type="number">
        <help><![CDATA[
					Maximum length of the parameter.
				]]></help>
        <values/>
      </parameter>
      <parameter name="variable" required="false" type="string">
        <help><![CDATA[
					The variable name that you use to reference the value that the output parameter represents after the call is made to the stored procedure.
				]]></help>
        <values/>
      </parameter>
      <parameter name="scale" required="false" type="number">
        <help><![CDATA[
					Number of decimal places of the parameter.
				]]></help>
        <values/>
      </parameter>
      <parameter name="null" required="false" type="boolean">
        <help><![CDATA[
					Indicates whether the parameter is passed as a null. If you specify Yes, the tag ignores the value attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="cfsqltype" required="false" type="string">
        <help><![CDATA[
					This attribute has been deprecated, use instead the attribute "sqltype" that has exact the same functionality.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					Indicates whether the passed variable is an input, output or input/output variable. Default is IN. The value IN passes the parameter by value. Values OUT and INOUT pass parameters as bound variables.
				]]></help>
        <values/>
      </parameter>
      <parameter name="dbvarname" required="false" type="string">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					Corresponds to the actual value that Lucee passes to the stored procedure.
				]]></help>
        <values/>
      </parameter>
      <parameter name="sqltype" required="false" type="string">
        <help><![CDATA[
					The SQL type that the parameter (any type) will be bound to.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfprocresult" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Specifies a result set name that other tags, such as cfoutput and cftable, use to access the result set. It also lets you optionally identify which of the stored procedure's result sets to return. The cfprocresult tag is nested within a cfstoredproc tag.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="maxrows" required="false" type="number">
        <help><![CDATA[
					Specifies the maximum number of rows returned in the result set. The default is to return all rows in the result set.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="true" type="string">
        <help><![CDATA[
					Name for the query result set.
				]]></help>
        <values/>
      </parameter>
      <parameter name="resultset" required="false" type="number">
        <help><![CDATA[
					Identifies the desired result set if the stored procedure returns multiple result sets. Default is 1.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfprogressbar" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfprogressbar> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfproperty" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Defines components as complex types that are used for web services authoring. The attributes of this tag are exposed as component metadata and are subject to inheritance rules.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="default" required="false" type="string">
        <help><![CDATA[
					This sets the default value on the property when the object is created.
				]]></help>
        <values/>
      </parameter>
      <parameter name="access" required="false" type="string">
        <help><![CDATA[
					The client security context from which the method can be invoked
				]]></help>
        <values/>
      </parameter>
      <parameter name="required" required="false" type="boolean">
        <help><![CDATA[
					Whether the parameter is required
				]]></help>
        <values/>
      </parameter>
      <parameter name="hint" required="false" type="string">
        <help><![CDATA[
					Text to be displayed when using introspection to show information about the CFC. This attribute can be useful for describing the purpose of the parameter.
				]]></help>
        <values/>
      </parameter>
      <parameter name="displayname" required="false" type="string">
        <help><![CDATA[
					A value to be displayed when using introspection to show information about the CFC. The value appears in parentheses following the property name.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="true" type="string">
        <help><![CDATA[
					A string; a property name. Must be a static value.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					A string; a property type name; data type.
				]]></help>
        <values/>
      </parameter>
      <parameter name="getter" required="false" type="boolean">
        <help><![CDATA[
					Specifies whether to generate getter methods or not
				]]></help>
        <values/>
      </parameter>
      <parameter name="setter" required="false" type="boolean">
        <help><![CDATA[
					Specifies whether to generate setter methods or not
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfquery" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Passes SQL statements to a data source. Not limited to queries.
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="connectstring" required="false" type="string">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="nestinglevel" required="false" type="numeric">
        <help><![CDATA[
					the level for the current pagesource
				]]></help>
        <values/>
      </parameter>
      <parameter name="dbtype" required="false" type="string">
        <help><![CDATA[
					support the following values: - query: for doing a query on a existing query object - hql: for doing a query on orm
				]]></help>
        <values/>
      </parameter>
      <parameter name="providerdsn" required="false" type="string">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="dbname" required="false" type="string">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					If specified, password overrides the password value specified in the data source setup.
				]]></help>
        <values/>
      </parameter>
      <parameter name="maxrows" required="false" type="number">
        <help><![CDATA[
					Specifies the maximum number of rows to return in the record set.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					The name query. Must begin with a letter and may consist of letters, numbers, and the underscore character, spaces are not allowed. The query name is used later in the page to reference the query's record set.
				]]></help>
        <values/>
      </parameter>
      <parameter name="timeout" required="false" type="any">
        <help><![CDATA[
					The maximum number of seconds for the query to execute before returning an error indicating that the query has timed-out. This attribute is not supported by most ODBC drivers. timeout is supported by the SQL Server 6.x or above driver. The minimum and maximum allowable values vary, depending on the driver.
				]]></help>
        <values/>
      </parameter>
      <parameter name="debug" required="false" type="boolean">
        <help><![CDATA[
					Used for debugging queries. Specifying this attribute causes the SQL statement submitted to the data source and the number of records returned from the query to be returned.
				]]></help>
        <values/>
      </parameter>
      <parameter name="datasource" required="false" type="any">
        <help><![CDATA[
					The name of the data source from which this query should retrieve data.
				]]></help>
        <values/>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					the timezone used to convert a date object to a timestamp (string), this value is needed when your database runs in another timezone and you are not using cfqueryparam to to insert dates.
				]]></help>
        <values/>
      </parameter>
      <parameter name="ormoptions" required="false" type="struct">
        <help><![CDATA[
					Object parameter for the entity.
				]]></help>
        <values/>
      </parameter>
      <parameter name="blockfactor" required="false" type="number">
        <help><![CDATA[
					Specifies the maximum number of rows to fetch at a time from the server. The range is 1, default to 100. This parameter applies to ORACLE native database drivers and to ODBC drivers. Certain ODBC drivers may dynamically reduce the block factor at runtime.
				]]></help>
        <values/>
      </parameter>
      <parameter name="username" required="false" type="string">
        <help><![CDATA[
					If specified, username overrides the username value specified in the data source setup.
				]]></help>
        <values/>
      </parameter>
      <parameter name="result" required="false" type="string">
        <help><![CDATA[
					Specifies a name for the structure in which cfquery returns the result variables. SQL: The SQL statement that was executed. (string) Cached: If the query was cached. (boolean) SqlParameters: An ordered Array of cfqueryparam values. (array) RecordCount: Total number of records in the query. (numeric) ColumnList: Column list, comma separated. (numeric) ExecutionTime: Execution time for the SQL request. (numeric)
				]]></help>
        <values/>
      </parameter>
      <parameter name="tags" required="false" type="any">
        <help><![CDATA[
					tags stored with the cache.
				]]></help>
        <values/>
      </parameter>
      <parameter name="provider" required="false" type="string">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="unique" required="false" type="boolean">
        <help><![CDATA[
					Specifies if the object parameter is unique, used only for dbtype=orm or hql
				]]></help>
        <values/>
      </parameter>
      <parameter name="cachedafter" required="false" type="datetime">
        <help><![CDATA[
					This is the age of which the query data can be
				]]></help>
        <values/>
      </parameter>
      <parameter name="returntype" required="false" type="string">
        <help><![CDATA[
					one of the following values: query: default for all dbtype expect "hql", returns a query object array_of_entity: works only with dbtype "hql" and is also the default value for dbtype "hql" array: converts the query object into an array of structs struct: converts the query object into a struct using the columnKey attribute as a primary key
				]]></help>
        <values/>
      </parameter>
      <parameter name="columnkey" required="false" type="string">
        <help><![CDATA[
					When return type is set to "struct", the value of this column is used as key in the struct for every record.
				]]></help>
        <values/>
      </parameter>
      <parameter name="params" required="false" type="object">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="dbserver" required="false" type="string">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="psq" required="false" type="boolean">
        <help><![CDATA[
					preserve single quote or not
				]]></help>
        <values/>
      </parameter>
      <parameter name="cachename" required="false" type="string">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="lazy" required="false" type="boolean">
        <help><![CDATA[
					If "lazy" is set to true (default "false") Lucee does not initially load all the data from the datasource. When "true" the data is only loaded when requested, this means the data is dependant on the datasource connection. If the datasource connection has been lost for some reason and the data has not yet been requested, Lucee throws an error if you try to access the data. The "lazy" attribute only works if the following attributes are not used: cachewithin, cacheafter and result.
				]]></help>
        <values/>
      </parameter>
      <parameter name="cachedwithin" required="false" type="object">
        <help><![CDATA[
					possible values are: String "request": If original query was created within the current request, cached query data isused. a timespan (created with function CreateTimeSpan): If original query date falls within the time span, cached query data isused. To use cached data, the current query must use the same SQL statement, data source, query name, user name, and password.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfqueryparam" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Checks the data type of a query parameter.
				The cfqueryparam tag is nested within a <cfquery> tag. It is embedded within the query SQL statement. If you specify its optional parameters, cfqueryparam also performs data validation.
				It's use is essential for performance and security
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="maxlength" required="false" type="number">
        <help><![CDATA[
					Maximum length of the parameter. The default value is the length of the string specified in the value attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="list" required="false" type="boolean">
        <help><![CDATA[
					Yes or No. Indicates that the parameter value of the value attribute is a list of values, separated by a separator character. The default is No
				]]></help>
        <values/>
      </parameter>
      <parameter name="scale" required="false" type="number">
        <help><![CDATA[
					Number of decimal places of the parameter. The default value is zero.
				]]></help>
        <values/>
      </parameter>
      <parameter name="separator" required="false" type="string">
        <help><![CDATA[
					Specifies the character that separates values in the list of parameter values in the value attribute. The default is a comma. If you specify a list of values for the value attribute, you must also specify the list attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="null" required="false" type="boolean">
        <help><![CDATA[
					Yes or No. Indicates whether the parameter is passed as a null. If Yes, the tag ignores the value attribute. The default is No.
				]]></help>
        <values/>
      </parameter>
      <parameter name="cfsqltype" required="false" type="string">
        <help><![CDATA[
					This attribute has been deprecated, use instead the attribute "sqltype" that has exact the same functionality.
				]]></help>
        <values/>
      </parameter>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					Specifies the actual value that Lucee passes to the right of the comparison operator in a where clause.
				]]></help>
        <values/>
      </parameter>
      <parameter name="sqltype" required="false" type="string">
        <help><![CDATA[
					The SQL type that the parameter (any type) will be bound to.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfregistry" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Reads, writes, and deletes keys and values in the system registry. The cfregistry tag is supported on all platforms, including Linux, Solaris, and HP-UX.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="sort" required="false" type="string">
        <help><![CDATA[
					Sorts query column data (case-insensitive). Sorts on Entry, Type, and Value columns as text. Specify a combination of columns from query output, in a comma-delimited list. For example: sort = "value desc, entry asc" asc: ascending (a to z) sort order desc: descending (z to a) sort order
				]]></help>
        <values/>
      </parameter>
      <parameter name="variable" required="false" type="string">
        <help><![CDATA[
					Variable into which to put value.
				]]></help>
        <values/>
      </parameter>
      <parameter name="entry" required="false" type="string">
        <help><![CDATA[
					Registry value to access.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					Name of record set to contain returned keys and values.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					string: return string values dWord: return DWord values key: return keys any: return keys and values
				]]></help>
        <values/>
      </parameter>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					Value data to set. If you omit this attribute, cfregistry creates default value, as follows: string: creates an empty string: "" dWord: creates a value of 0 (zero)
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="true" type="string">
        <help><![CDATA[
					action to the registry
				]]></help>
        <values/>
      </parameter>
      <parameter name="branch" required="true" type="string">
        <help><![CDATA[
					Name of a registry branch.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfreport" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfreport> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfreportparam" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfreportparam> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfrethrow" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Rethrows the currently active exception. Preserves the exception's cfcatch.type and <cfcatch>. agContext information.
				This tag cannot have a body.
				This tag is also supported within <cfscript>
				This tag does not use any attributes.]]></help>

    </tag>
    <tag name="cfretry" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				used to jump from a [[tag-catch] block, back to the beginning of the <cftry> block.
				This tag cannot have a body.
				This tag is also supported within <cfscript>
				This tag does not use any attributes.
			]]></help>

    </tag>
    <tag name="cfreturn" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Returns result values from a component method. Contains an expression returned as result of the function.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="expr" required="false" type="any">
        <help><![CDATA[
					An expression; the result of the function from which this tag is called.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfsavecontent" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Saves the generated content inside the tag body in a variable.
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="append" required="false" type="boolean">
        <help><![CDATA[
					if true, the saved content will be appended to an already existing variable instead of overwriting it.
				]]></help>
        <values/>
      </parameter>
      <parameter name="variable" required="true" type="string">
        <help><![CDATA[
					The name of the variable in which to save the generated content inside the tag.
				]]></help>
        <values/>
      </parameter>
      <parameter name="trim" required="false" type="boolean">
        <help><![CDATA[
					trim result
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfschedule" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Provides a programmatic interface to the scheduling engine. You can run a specified page at scheduled intervals with the option to write out static HTML pages. This lets you offer users access to pages that publish data, such as reports, without forcing users to wait while a database transaction is performed in order to populate the data on the page.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="operation" required="false" type="string">
        <help><![CDATA[
					The type of operation the scheduler performs when executing this task. HTTPRequest: make a http(s) request to the url provided
				]]></help>
        <values/>
      </parameter>
      <parameter name="hidden" required="false" type="boolean">
        <help><![CDATA[
					if set to true the scheduled task is not displayed in the Lucee Administrator.
				]]></help>
        <values/>
      </parameter>
      <parameter name="requesttimeout" required="false" type="any">
        <help><![CDATA[
					Customizes the requestTimeOut for the task operation. Can be used to extend the default timeout for operations that require more time to execute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyuser" required="false" type="string">
        <help><![CDATA[
					User name to provide to the proxy server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="serverpassword" required="false" type="string">
        <help><![CDATA[
					allow you to access filesystem, also when access is denied for your context
				]]></help>
        <values/>
      </parameter>
      <parameter name="url" required="false" type="string">
        <help><![CDATA[
					Required when action = 'update'. The URL to be executed.
				]]></help>
        <values/>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					Password if URL is protected.
				]]></help>
        <values/>
      </parameter>
      <parameter name="endtime" required="false" type="any">
        <help><![CDATA[
					The time when the scheduled task ends. Enter a value in seconds.
				]]></help>
        <values/>
      </parameter>
      <parameter name="file" required="false" type="string">
        <help><![CDATA[
					Required with publish ='Yes' A valid filename for the published file.
				]]></help>
        <values/>
      </parameter>
      <parameter name="result" required="false" type="string">
        <help><![CDATA[
					return variable name of action list
				]]></help>
        <values/>
      </parameter>
      <parameter name="username" required="false" type="string">
        <help><![CDATA[
					Username if URL is protected.
				]]></help>
        <values/>
      </parameter>
      <parameter name="publish" required="false" type="boolean">
        <help><![CDATA[
					Specifies whether the result should be saved to a file.
				]]></help>
        <values/>
      </parameter>
      <parameter name="task" required="false" type="string">
        <help><![CDATA[
					The name of the task to delete, update, or run.
				]]></help>
        <values/>
      </parameter>
      <parameter name="starttime" required="false" type="any">
        <help><![CDATA[
					Required when creating tasks with action = 'update'. Enter a value in seconds. The time when scheduling of the task starts.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyport" required="false" type="any">
        <help><![CDATA[
					The port number on the proxy server from which the task is being requested. Default is 80. When used with resolveURL, the URLs of retrieved documents that specify a port number are automatically resolved to preserve links in the retrieved document.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxypassword" required="false" type="string">
        <help><![CDATA[
					Password to provide to the proxy server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="enddate" required="false" type="any">
        <help><![CDATA[
					The date when the scheduled task ends.
				]]></help>
        <values/>
      </parameter>
      <parameter name="interval" required="false" type="string">
        <help><![CDATA[
					Required when creating tasks with action = 'update'. Interval at which task should be scheduled. Can be set in seconds or as Once, Daily, Weekly, and Monthly. The default interval is one hour. The minimum interval is one minute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="startdate" required="false" type="any">
        <help><![CDATA[
					Required when action ='update'. The date when scheduling of the task should start.
				]]></help>
        <values/>
      </parameter>
      <parameter name="path" required="false" type="string">
        <help><![CDATA[
					Required with publish ='Yes' The path location for the published file.
				]]></help>
        <values/>
      </parameter>
      <parameter name="proxyserver" required="false" type="string">
        <help><![CDATA[
					Host name or IP address of a proxy server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="paused" required="false" type="boolean">
        <help><![CDATA[
					if set to true the scheduled task is paused.
				]]></help>
        <values/>
      </parameter>
      <parameter name="port" required="false" type="any">
        <help><![CDATA[
					The port number on the server from which the task is being scheduled. Default is 80. When used with resolveURL, the URLs of retrieved documents that specify a port number are automatically resolved to preserve links in the retrieved document.
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="true" type="string">
        <help><![CDATA[
					delete: deletes the specified task update: updates an existing task or creates a new task, if one with the name specified by the task attribute does not exist run: executes the specified task list: list all scheduled tasks defined pause: pause execution of the defined scheduled task resume: resume execution of a paused scheduled task
				]]></help>
        <values/>
      </parameter>
      <parameter name="readonly" required="false" type="boolean">
        <help><![CDATA[
					if set to true the scheduled task can not be modified or deleted in the Lucee Administrator.
				]]></help>
        <values/>
      </parameter>
      <parameter name="autodelete" required="false" type="boolean">
        <help><![CDATA[
					if set to true, the scheduled task get deleted when there is no possible future execution.
				]]></help>
        <values/>
      </parameter>
      <parameter name="resolveurl" required="false" type="boolean">
        <help><![CDATA[
					Specifies whether to resolve links in the result page to absolute references.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfscript" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Encloses a code segment containing cfscript.
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="language" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfsearch" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Executes searches against data indexed
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="language" required="false" type="string">
        <help><![CDATA[
					Deprecated. This attribute is now ignored and the language of the collection is used to perform the search.
				]]></help>
        <values/>
      </parameter>
      <parameter name="previouscriteria" required="false" type="string">
        <help><![CDATA[
					The name of a result set from an existing set of search results. Lucene searches the result set for criteria without regard to the previous search score or rank. Use this attribute to implement searching within result sets.
				]]></help>
        <values/>
      </parameter>
      <parameter name="suggestions" required="false" type="string">
        <help><![CDATA[
					Specifies whether Lucene returns spelling suggestions for possibly misspelled words.
				]]></help>
        <values/>
      </parameter>
      <parameter name="status" required="false" type="string">
        <help><![CDATA[
					Specifies the name of the structure variable into which Lucee places search information, including alternative criteria suggestions (spelling corrections).
				]]></help>
        <values/>
      </parameter>
      <parameter name="startrow" required="false" type="number">
        <help><![CDATA[
					Specifies the first row number to be retrieved. Default is 1.
				]]></help>
        <values/>
      </parameter>
      <parameter name="criteria" required="false" type="string">
        <help><![CDATA[
					Specifies the criteria for the search following the syntactic rules specified by type.
				]]></help>
        <values/>
      </parameter>
      <parameter name="collection" required="true" type="string">
        <help><![CDATA[
					The logical collection name that is the target of the search operation or an external collection with fully qualified path.
				]]></help>
        <values/>
      </parameter>
      <parameter name="categorytree" required="false" type="string">
        <help><![CDATA[
					The location in a hierarchical category tree at which to start the search. Lucee searches at and below this level. If specified, and the collection does not have categories enabled, Lucee throws an exception. Can be used in addition to category attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="external" required="false" type="boolean">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="contextbytes" required="false" type="number">
        <help><![CDATA[
					The maximum number of bytes Lucene returns in the context summary. Default: 300
				]]></help>
        <values/>
      </parameter>
      <parameter name="category" required="false" type="string">
        <help><![CDATA[
					A list of categories, separated by commas, to which the search is limited. If specified, and the collection does not have categories enabled, Lucee         throws an exception.
				]]></help>
        <values/>
      </parameter>
      <parameter name="maxrows" required="false" type="number">
        <help><![CDATA[
					Specifies the maximum number of entries for index queries. If omitted, all rows are returned.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="true" type="string">
        <help><![CDATA[
					A name for the search query.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					Specifies the criteria type for the search.
				]]></help>
        <values/>
      </parameter>
      <parameter name="contexthighlightbegin" required="false" type="string">
        <help><![CDATA[
					The HTML to prepend to search terms in the context summary. Use this attribute in conjunction with contextHighlightEnd to highlight search terms in the context summary. Default:
				]]></help>
        <values/>
      </parameter>
      <parameter name="contextpassages" required="false" type="number">
        <help><![CDATA[
					The number of passages/sentences Lucene returns in the context summary (that is, the context column of the results). Default: 3
				]]></help>
        <values/>
      </parameter>
      <parameter name="contexthighlightend" required="false" type="string">
        <help><![CDATA[
					The HTML to prepend to search terms in the context summary. Use this attribute in conjunction with contextHighlightEnd to highlight search terms in the context summary. Default:
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfselect" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Used inside cfform, cfselect lets you construct a drop-down list box form control. You can populate the drop-down list box from a query, or using the option tag. Use option elements to populate lists. The syntax for the option tag is the same as for its HTML counterpart.
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="onmouseover" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="query" required="false" type="string">
        <help><![CDATA[
					Name of the query to be used to populate the drop-down list box.
				]]></help>
        <values/>
      </parameter>
      <parameter name="message" required="false" type="string">
        <help><![CDATA[
					Message that displays if required = 'Yes' and no selection is made.
				]]></help>
        <values/>
      </parameter>
      <parameter name="queryposition" required="false" type="string">
        <help><![CDATA[
					If you populate the options list with a query and use HTML option child tags to specify additional entries, determines the location of the items from the query relative to the items from the option tags: - above: Put the query items above the options items. - below: Put the query items below the options items. Default: above
				]]></help>
        <values/>
      </parameter>
      <parameter name="multiple" required="false" type="string">
        <help><![CDATA[
					Yes or No. Yes permits selection of multiple elements in the drop-down list box. The default is No.
				]]></help>
        <values/>
      </parameter>
      <parameter name="datasrc" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onmousemove" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="tooltip" required="false" type="string">
        <help><![CDATA[
					Flash only: Text to display when the mouse pointer hovers over the control.
				]]></help>
        <values/>
      </parameter>
      <parameter name="style" required="false" type="string">
        <help><![CDATA[
					Lucee passes the style attribute to the browser.
				]]></help>
        <values/>
      </parameter>
      <parameter name="datafld" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="display" required="false" type="string">
        <help><![CDATA[
					The query column displayed. Defaults to the value of value. Used with the query attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="casesensitive" required="false" type="boolean">
        <help><![CDATA[
					is compare for selected case sensitive or not
				]]></help>
        <values/>
      </parameter>
      <parameter name="passthrough" required="false" type="any">
        <help><![CDATA[
					HTML attributes that are not explicitly supported by cfselect. If you specify an attribute and its value, the attribute and its value are passed to the HTML code that is generated for the cfselect tag.
				]]></help>
        <values/>
      </parameter>
      <parameter name="disabled" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="width" required="false" type="number">
        <help><![CDATA[
					The width of the control, in pixels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onmousedown" required="false" type="string">
        <help><![CDATA[
					JavaScript to run when the user releases a mouse button in the control.
				]]></help>
        <values/>
      </parameter>
      <parameter name="dir" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="true" type="string">
        <help><![CDATA[
					Name of the form you are creating.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onfocus" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="class" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					The query column value for the list element. Used with the query attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="label" required="false" type="string">
        <help><![CDATA[
					Label to put next to the control on a Flash or XML-format form.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onclick" required="false" type="string">
        <help><![CDATA[
					JavaScript to run when the user clicks the control.
				]]></help>
        <values/>
      </parameter>
      <parameter name="tabindex" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="height" required="false" type="number">
        <help><![CDATA[
					The height of the control, in pixels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="selected" required="false" type="string">
        <help><![CDATA[
					A value matching at least one entry in value to preselect the entry in the drop-down list box.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onchange" required="false" type="string">
        <help><![CDATA[
					JavaScript to run when the control changes due to user action.
				]]></help>
        <values/>
      </parameter>
      <parameter name="required" required="false" type="boolean">
        <help><![CDATA[
					Yes or No. If Yes, a list element must be selected when the form is submitted, and the size of the drop-down list must be at least two. Default is No.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onerror" required="false" type="string">
        <help><![CDATA[
					The name of a valid JavaScript function to execute in the event of a failed validation.
				]]></help>
        <values/>
      </parameter>
      <parameter name="enabled" required="false" type="boolean">
        <help><![CDATA[
					Flash only: Boolean value specifying whether to show the control. Space that would be occupied by an invisible control is blank. Default: true
				]]></help>
        <values/>
      </parameter>
      <parameter name="onmouseup" required="false" type="string">
        <help><![CDATA[
					JavaScript to run when the user presses a mouse button in the control.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onkeydown" required="false" type="string">
        <help><![CDATA[
					JavaScript to run when the user depresses a keyboard key in the control.
				]]></help>
        <values/>
      </parameter>
      <parameter name="dataformatas" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="visible" required="false" type="boolean">
        <help><![CDATA[
					Flash only: Boolean value specifying whether to show the control. Space that would be occupied by an invisible control is blank. Default: true
				]]></help>
        <values/>
      </parameter>
      <parameter name="size" required="false" type="number">
        <help><![CDATA[
					Number of entries in the drop-down list.
				]]></help>
        <values/>
      </parameter>
      <parameter name="lang" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onblur" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="id" required="false" type="string">
        <help><![CDATA[
					ID for form input element.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onmouseout" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onkeyup" required="false" type="string">
        <help><![CDATA[
					JavaScript to run when the user releases a keyboard key in the control.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onkeypress" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="editable" required="false" type="boolean">
        <help><![CDATA[
					Boolean value specifying whether you can edit the contents of the control.
				]]></help>
        <values/>
      </parameter>
      <parameter name="title" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
      <parameter name="group" required="false" type="string">
        <help><![CDATA[
					Query column to use to group the items in the drop-down list into a two-level hierarchical list.
				]]></help>
        <values/>
      </parameter>
      <parameter name="ondblclick" required="false" type="string">
        <help><![CDATA[
					passed through to form tag created, only used for type html.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfservlet" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				This tag has been obsoleted and removed from the language. It is non-functional.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="code" required="true" type="string">
        <help><![CDATA[
					This attribute has been obsoleted and removed from the language. It is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="writeoutput" required="false" type="boolean">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="timeout" required="false" type="number">
        <help><![CDATA[
					This attribute has been obsoleted and removed from the language. It is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="debug" required="false" type="boolean">
        <help><![CDATA[
					This attribute has been obsoleted and removed from the language. It is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="jrunproxy" required="false" type="string">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfservletparam" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				This tag has been deprecated and is non-functional.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="variable" required="false" type="string">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="true" type="string">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfset" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Define a CFML variable. If the variable exists, cfset resets it to the specified value.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="noname" required="false" type="any">
        <help><![CDATA[
					Content of the tag set
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfsetting" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Controls various aspects of page processing, such as the output of HTML code in pages. One benefit of this option is managing whitespace that can occur in output pages served by CFML.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="enablecfoutputonly" required="false" type="any">
        <help><![CDATA[
					Yes or No. When set to Yes, cfsetting blocks output of HTML that resides outside cfoutput tags.
				]]></help>
        <values/>
      </parameter>
      <parameter name="requesttimeout" required="false" type="number">
        <help><![CDATA[
					number of seconds. Time limit, after which CFML processes the page as an unresponsive thread. Overrides the timeout set in the Lucee Administrator.
				]]></help>
        <values/>
      </parameter>
      <parameter name="showdebugoutput" required="false" type="boolean">
        <help><![CDATA[
					Yes or No. When set to No, showDebugOutput suppresses debugging information that would otherwise display at the end of the generated page.Default is Yes.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfsharepoint" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfsharepoint> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfsilent" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Suppresses all output that is produced by the CFML within the tag's scope.
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="bufferoutput" required="false" type="boolean">
        <help><![CDATA[
					if set to true (default) the output written to the body of the tag is buffered and in case of an exception also outputted. if set to false the content to body is ignored and not disabled when a failure in the body of the tag occur.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfsleep" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Pauses the execution of the page for a given interval
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="time" required="true" type="number">
        <help><![CDATA[
					Expressed in milli seconds.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfslider" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Used inside cfform, cfslider lets you place a slider control in a CFML form. A slider control is like a sliding volume control. The slider groove is the area over which the slider moves.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="textcolor" required="false" type="string">
        <help><![CDATA[
					Slider label text color. Valid entries are: black, magenta, cyan, orange, darkgray, pink, gray, white, lightgray, yellow.
				]]></help>
        <values/>
      </parameter>
      <parameter name="message" required="false" type="string">
        <help><![CDATA[
					Message text to appear if validation fails.
				]]></help>
        <values/>
      </parameter>
      <parameter name="range" required="false" type="string">
        <help><![CDATA[
					The values of the left and right slider range. The slider value displays as the slider is moved. Separate values by a comma.
				]]></help>
        <values/>
      </parameter>
      <parameter name="notsupported" required="false" type="string">
        <help><![CDATA[
					The text to display if a page containing a Java applet-based cfform control is opened by a browser that does not support Java or has Java support disabled.
				]]></help>
        <values/>
      </parameter>
      <parameter name="align" required="false" type="string">
        <help><![CDATA[
					Alignment value.
				]]></help>
        <values/>
      </parameter>
      <parameter name="bold" required="false" type="boolean">
        <help><![CDATA[
					Enter Yes for bold label text, No for medium text. Default is No.
				]]></help>
        <values/>
      </parameter>
      <parameter name="lookandfeel" required="false" type="string">
        <help><![CDATA[
					A stylistic choice for the slider.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onvalidate" required="false" type="string">
        <help><![CDATA[
					The name of a valid JavaScript function used to validate user input; in this case, a change to the default slider value.
				]]></help>
        <values/>
      </parameter>
      <parameter name="width" required="false" type="number">
        <help><![CDATA[
					Width of the slider control, in pixels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="true" type="string">
        <help><![CDATA[
					A name for the cfslider control.
				]]></help>
        <values/>
      </parameter>
      <parameter name="tickmarkmajor" required="false" type="boolean">
        <help><![CDATA[
					Yes to render major tickmarks in the slider scale.
				]]></help>
        <values/>
      </parameter>
      <parameter name="value" required="false" type="number">
        <help><![CDATA[
					The starting slider setting. Must be within the values specified in range. Defaults to the minimum value specified in range.
				]]></help>
        <values/>
      </parameter>
      <parameter name="label" required="false" type="string">
        <help><![CDATA[
					A label that displays with the slider control.
				]]></help>
        <values/>
      </parameter>
      <parameter name="font" required="false" type="string">
        <help><![CDATA[
					Font name for label text.
				]]></help>
        <values/>
      </parameter>
      <parameter name="tickmarkimages" required="false" type="string">
        <help><![CDATA[
					image used for tickmarks
				]]></help>
        <values/>
      </parameter>
      <parameter name="height" required="false" type="number">
        <help><![CDATA[
					Height of the slider control, in pixels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="tickmarkminor" required="false" type="boolean">
        <help><![CDATA[
					Yes to render minor tickmarks in the slider scale.
				]]></help>
        <values/>
      </parameter>
      <parameter name="onerror" required="false" type="string">
        <help><![CDATA[
					The name of a valid JavaScript function to execute in the event of a failed validation.
				]]></help>
        <values/>
      </parameter>
      <parameter name="bgcolor" required="false" type="string">
        <help><![CDATA[
					Background color of slider label. See textColor for color options.
				]]></help>
        <values/>
      </parameter>
      <parameter name="vertical" required="false" type="boolean">
        <help><![CDATA[
					Yes renders the slider in the browser vertically. No renders the slider horizontally. This is the default.
				]]></help>
        <values/>
      </parameter>
      <parameter name="scale" required="false" type="number">
        <help><![CDATA[
					Unsigned integer. Defines the slider scale within the value of range.
				]]></help>
        <values/>
      </parameter>
      <parameter name="italic" required="false" type="boolean">
        <help><![CDATA[
					Yes for italicized label text, No for normal text. Default is No.
				]]></help>
        <values/>
      </parameter>
      <parameter name="hspace" required="false" type="number">
        <help><![CDATA[
					Horizontal margin spacing to the left and right of slider control, in pixels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="vspace" required="false" type="number">
        <help><![CDATA[
					Vertical margin spacing above and below slider control, in pixels.
				]]></help>
        <values/>
      </parameter>
      <parameter name="tickmarklabels" required="false" type="string">
        <help><![CDATA[
					label used for tickmarks
				]]></help>
        <values/>
      </parameter>
      <parameter name="fontsize" required="false" type="number">
        <help><![CDATA[
					Font size for label text measured in points.
				]]></help>
        <values/>
      </parameter>
      <parameter name="refreshlabel" required="false" type="boolean">
        <help><![CDATA[
					Yes or No. If Yes, the label is not refreshed when the slider is moved. Default is Yes.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfspreadsheet" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfspreadsheet> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfsprydataset" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfsprydataset> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfstatic" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				defines a static constructor within components
				This tag must have a body.
				This tag is also supported within <cfscript>
				This tag does not use any attributes.
			]]></help>

    </tag>
    <tag name="cfstopwatch" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Measures the time taken, in milliseconds, for the code between the start tag and end tag to execute.
				This tag must have a body.
				This tag is also supported within <cfscript>
			]]></help>
      <parameter name="variable" required="false" type="string">
        <help><![CDATA[
					The name of the variable which will contain the value of the time taken.
				]]></help>
        <values/>
      </parameter>
      <parameter name="label" required="false" type="string">
        <help><![CDATA[
					The label for the stopwatch, used in debugging output.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfstoredproc" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Executes stored procedures by an ODBC or native connection to a server database. It specifies database connection information and identifies the stored procedure.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="cachedafter" required="false" type="datetime">
        <help><![CDATA[
					This is the age of which the query data can be
				]]></help>
        <values/>
      </parameter>
      <parameter name="cachename" required="false" type="string">
        <help><![CDATA[
					This attribute has been deprecated and is non-functional.
				]]></help>
        <values/>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					If specified, password overrides the password value specified in the data source setup.
				]]></help>
        <values/>
      </parameter>
      <parameter name="returncode" required="false" type="boolean">
        <help><![CDATA[
					Yes or No. Specifies whether the tag populates cfstoredproc.statusCode with the status code returned by the stored procedure. Default is No.
				]]></help>
        <values/>
      </parameter>
      <parameter name="procedure" required="true" type="string">
        <help><![CDATA[
					The name of the stored procedure on the database server.
				]]></help>
        <values/>
      </parameter>
      <parameter name="timeout" required="false" type="number">
        <help><![CDATA[
					timeout for the stored procedure.
				]]></help>
        <values/>
      </parameter>
      <parameter name="debug" required="false" type="boolean">
        <help><![CDATA[
					Yes or No. Specifies whether debug info will be listed on each statement. Default is No.
				]]></help>
        <values/>
      </parameter>
      <parameter name="datasource" required="false" type="string">
        <help><![CDATA[
					The name data source that points to the database that contains the stored procedure.
				]]></help>
        <values/>
      </parameter>
      <parameter name="result" required="false" type="string">
        <help><![CDATA[
					Specifies a name for the structure in which cfstoredproc returns the statusCode and ExecutionTime variables.
				]]></help>
        <values/>
      </parameter>
      <parameter name="blockfactor" required="false" type="number">
        <help><![CDATA[
					Specifies the maximum number of rows to fetch at a time from the server. The range is 1 which is the default to 100. The ODBC driver may dynamically reduce the block factor at runtime.
				]]></help>
        <values/>
      </parameter>
      <parameter name="username" required="false" type="string">
        <help><![CDATA[
					If specified, username overrides the username value specified in the data source setup.
				]]></help>
        <values/>
      </parameter>
      <parameter name="cachedwithin" required="false" type="object">
        <help><![CDATA[
					possible values are: String "request": If original query was created within the current request, cached query data isused. a timespan (created with function CreateTimeSpan): If original query date falls within the time span, cached query data isused. To use cached data, the current query must use the same SQL statement, data source, query name, user name, and password.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfswitch" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Used with <cfcase> and <cfdefaultcase>. Evaluates a passed expression and passes control to the <cfcase> tag that matches the expression result. You can optionally code a <cfdefaultcase> tag, which receives control if there is no matching <cfcase> tag value.
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="expression" required="true" type="string">
        <help><![CDATA[
					Any CFML expression that yields a scalar value. CFML converts integers, real numbers, Booleans, and dates to numeric values.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cftable" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Builds a table in a CFML page. Use the cfcol tag to define table column and row characteristics. The cftable tag renders data either as preformatted text, or, with the HTMLTable attribute, as an HTML table. Use cftable to create tables if you don't want to write HTML table tag code, or if your data can be well presented as preformatted text.
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="query" required="true" type="string">
        <help><![CDATA[
					Name of the cfquery from which to draw data.
				]]></help>
        <values/>
      </parameter>
      <parameter name="border" required="false" type="boolean">
        <help><![CDATA[
					Adds a border to the table. Use only when you specify the HTMLTable attribute for the table.
				]]></help>
        <values/>
      </parameter>
      <parameter name="colspacing" required="false" type="number">
        <help><![CDATA[
					Number of spaces to insert between columns 'default is 2'.
				]]></help>
        <values/>
      </parameter>
      <parameter name="colheaders" required="false" type="boolean">
        <help><![CDATA[
					Displays headers for each column, as specified in the cfcol tag.
				]]></help>
        <values/>
      </parameter>
      <parameter name="startrow" required="false" type="number">
        <help><![CDATA[
					Specifies the query row from which to start processing.
				]]></help>
        <values/>
      </parameter>
      <parameter name="maxrows" required="false" type="number">
        <help><![CDATA[
					Maximum number of rows to display in the table.
				]]></help>
        <values/>
      </parameter>
      <parameter name="htmltable" required="false" type="boolean">
        <help><![CDATA[
					Renders the table as an HTML 3.0 table.
				]]></help>
        <values/>
      </parameter>
      <parameter name="headerlines" required="false" type="number">
        <help><![CDATA[
					Number of lines to use for the table header. The default is 2, which leaves one line between the headers and the first row of the table.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cftextarea" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cftextarea> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cftextinput" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Lets you place a single-line text entry box in a cfform. The tag also gives you control over font characteristics.
				This tag is also supported within <cfscript>
				This tag does not use any attributes.]]></help>

    </tag>
    <tag name="cfthread" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				The cfthread tag enables you to create threads, independent streams of code execution, in your application. You use this tag to run or end a thread, temporarily stop thread execution, or join together multiple threads.
				This tag may have a body.
				This tag is also supported within <cfscript>
				https://www.youtube.com/watch?v=oGUZRrcg9KE
			]]></help>
      <parameter name="duration" required="false" type="number">
        <help><![CDATA[
					(sleep) The number of milliseconds for which to suspend thread processing. (required)
				]]></help>
        <values/>
      </parameter>
      <parameter name="retryinterval" required="false" type="any">
        <help><![CDATA[
					when type task, this attribute define a execution plan for additional tries of execution. you can define a single rule or multiple rules as array        Example single rule:
					       #{interval:createTimeSpan(0,0,0,5),tries:5}#
					       in this case Lucee replay the thread for a maximum of 5 times, when the execution fails, Lucee waits for 5 seconds before doing the next try.
					       Example multiple rules:
					       #[{interval:createTimeSpan(0,0,0,5),tries:5},{interval:createTimeSpan(0,0,0,10),tries:5}]#
					       in this case Lucee replay the thread for maximum of 10 times, when the execution fails, 5 times every 5 seconds, then 5 times every 10 seconds.
				]]></help>
        <values/>
      </parameter>
      <parameter name="priority" required="false" type="string">
        <help><![CDATA[
					The priority level at which to run the thread. The following values are valid: HIGH, LOW, NORMAL Higher priority threads get more processing time than lower priority threads. Page-level code, the code that is outside of cfthread tags, always has NORMAL priority. (optional, default=NORMAL)
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					The name of the thread to which the action applies: terminate The name of the thread to stop. join The name of the thread or threads to join to the current thread. run The name to use to identify the thread being created. To specify multiple threads, use a comma-delimited list.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					Type of the thread: deamon (default) - executes as deamon of the current thread task - executed by the task manager
				]]></help>
        <values/>
      </parameter>
      <parameter name="timeout" required="false" type="number">
        <help><![CDATA[
					The number of milliseconds that the current thread waits for the thread or threads being joined to finish. If any thread does not finish by the specified time, the current thread proceeds. If the attribute value is 0, the default, the current thread continues waiting until all joining threads finish. If the current thread is the page thread, the page continues waiting until the threads are joined, even if you specify a page timeout. (optional, default=0)
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="false" type="string">
        <help><![CDATA[
					The action to take, one of the following values: join - Makes the current thread wait until the thread or threads specified in the name attribute complete processing, or until the period specified in the timeout attribute passes, before continuing processing. If you don't specify a timeout and thread you are joining to doesn't finish, the current thread also cannot finish processing. run - Creates a thread and starts it processing. sleep - Suspends the current threads processing for the time specified by the duration attribute. This action is useful if one thread must wait for another thread to do processing without joining the threads. terminate - Stops processing of the thread specified in the name attribute. If you terminate a thread, the thread scope includes an ERROR metadata structure with information about the termination.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfthrow" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				The cfthrow tag raises a developer-specified exception that can be caught with cfcatch tag having any of the following type specifications - cfcatch type = 'custom_type', cfcatch type = 'Application' 'cfcatch' type = 'Any'
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="message" required="false" type="any">
        <help><![CDATA[
					A message that describes the exceptional event.
				]]></help>
        <values/>
      </parameter>
      <parameter name="detail" required="false" type="string">
        <help><![CDATA[
					A detailed description of the event. The CFML server appends the position of the error to this description; the server uses this parameter if an error is not caught by your code.
				]]></help>
        <values/>
      </parameter>
      <parameter name="errorcode" required="false" type="string">
        <help><![CDATA[
					A custom error code that you supply.
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					A custom type or the predefined type Application. Do not enter any other predefined types because they are not generated by CFML applications. If you specify the exception type Application, you need not specify a type for cfcatch, because the Application type is the default cfcatch type
				]]></help>
        <values/>
      </parameter>
      <parameter name="contextlevel" required="false" type="numeric">
        <help><![CDATA[
					entry context level
				]]></help>
        <values/>
      </parameter>
      <parameter name="object" required="false" type="any">
        <help><![CDATA[
					a native java exception Object, if this attribute is defined all other will be ignored
				]]></help>
        <values/>
      </parameter>
      <parameter name="extendedinfo" required="false" type="string">
        <help><![CDATA[
					extended information to the exception.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cftimer" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Displays execution time for a specified section of CFML code.
				Lucee displays the timing information along with any output produced by the timed code.
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					debug: displays timing information in a table in the debug output under the heading "CFTimer Times". There is a column for Label, Time (in ms), and Template. The default label is an empty string. comment: displays timing information as an inline HTML comment following the closing </cftimer>. Uses the format <!-- [label]: [elapsed time in ms] -->. The default label is an empty string. inline: displays timing information as inline HTML following the closing </cftimer>. Uses the format [label]: [elapsed time in ms]. The default label is an empty string. outline: wraps the <cftimer> block with a <fieldset> element, then displays timing information as a <legend> element rendered just before the closing </fieldset>. Uses the format <legend align="top">[label]: [elapsed time in ms]</legend>. The <fieldset> element is given a class of cftimer. The default label is an empty string. Default: debug
				]]></help>
        <values/>
      </parameter>
      <parameter name="label" required="false" type="string">
        <help><![CDATA[
					Label to display with timing information. Default: " "
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cftooltip" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cftooltip> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cftrace" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Displays and logs debugging data about the state of an application at the time the cftrace tag executes.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="caller" required="false" type="struct">
        <help><![CDATA[
					scope used for var evaluation, if not defined the current scope is used.
				]]></help>
        <values/>
      </parameter>
      <parameter name="text" required="false" type="string">
        <help><![CDATA[
					User-defined string, which can include simple variable, but not complex variables such as arrays. Outputs to cflog text attribute
				]]></help>
        <values/>
      </parameter>
      <parameter name="follow" required="false" type="boolean">
        <help><![CDATA[
					If true, Lucee follows the object defined in the [var] attribute and will log any changes to it. Ignored when attribute [var] is not defined.
				]]></help>
        <values/>
      </parameter>
      <parameter name="var" required="false" type="string">
        <help><![CDATA[
					The name of a simple or complex variable to display.         Useful for displaying a temporary value, or a value that
					        does not display on any CFM page.
				]]></help>
        <values/>
      </parameter>
      <parameter name="abort" required="false" type="boolean">
        <help><![CDATA[
					Calls cfabort tag when the tag is executed
				]]></help>
        <values/>
      </parameter>
      <parameter name="category" required="false" type="string">
        <help><![CDATA[
					User-defined string for identifying trace groups
				]]></help>
        <values/>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					Corresponds to the cflog type attribute; displays an appropriate icon. Information Warning Error Fatal
				]]></help>
        <values/>
      </parameter>
      <parameter name="inline" required="false" type="boolean">
        <help><![CDATA[
					Displays trace code in line on the page in the location of the cftrace tag, addition to the debugging information output.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cftransaction" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Groups multiple queries into a single unit. The cftransaction tag provides commit and rollback processing.
				This tag must have a body.
				This tag is also supported within <cfscript>

				update address set login_address = where id =
			]]></help>
      <parameter name="isolation" required="false" type="string">
        <help><![CDATA[
					ODBC lock type.
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="false" type="string">
        <help><![CDATA[
					begin: The start of the block of code to execute. commit: Commits a pending transaction. rollback: Rolls back a pending transaction. setsavepoint: Saves a specific state within a transaction
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cftree" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cftree> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cftreeitem" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cftreeitem> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cftry" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Used with one or more cfcatch tags, the cftry tag lets you catch and process exceptions in CFML pages. Exceptions include events that disrupt the normal flow of instructions in a CFML page, such as failed database operations, missing include files, and developer-specified events.
				This tag must have a body.
				This tag is also supported within <cfscript>
				This tag does not use any attributes.
			]]></help>

    </tag>
    <tag name="cfupdate" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Updates existing records in data sources.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="tablequalifier" required="false" type="string">
        <help><![CDATA[
					For data sources that support table qualifiers, use this field to specify the qualifier for the table. The purpose of table qualifiers varies across drivers. For SQL Server and Oracle, the qualifier refers to the name of the database that contains the table. For the Intersolv dBase driver, the qualifier refers to the directory where the DBF files are located.
				]]></help>
        <values/>
      </parameter>
      <parameter name="tablename" required="true" type="string">
        <help><![CDATA[
					Name of the table you want to update.
				]]></help>
        <values/>
      </parameter>
      <parameter name="tableowner" required="false" type="string">
        <help><![CDATA[
					For data sources that support table ownership, for example, SQL Server, Oracle, and Sybase SQL Anywhere, use this field to specify the owner of the table.
				]]></help>
        <values/>
      </parameter>
      <parameter name="formfields" required="false" type="string">
        <help><![CDATA[
					A comma-separated list of form fields to update. If this attribute is not specified, all fields in the form are included in the operation.
				]]></help>
        <values/>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					If specified, password overrides the password value specified in the ODBC setup.
				]]></help>
        <values/>
      </parameter>
      <parameter name="datasource" required="false" type="string">
        <help><![CDATA[
					Name of the data source that contains a table.
				]]></help>
        <values/>
      </parameter>
      <parameter name="username" required="false" type="string">
        <help><![CDATA[
					If specified, username overrides the username value specified in the ODBC setup.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfvideo" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				play a video
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="audiosamplerate" required="false" type="string">
        <help><![CDATA[
					audio sampling rate, default same as input or part of defined quality
				]]></help>
        <values/>
      </parameter>
      <parameter name="framerate" required="false" type="number">
        <help><![CDATA[
					how many frames are used per second (alias for fps)
				]]></help>
        <values/>
      </parameter>
      <parameter name="quality" required="false" type="string">
        <help><![CDATA[
					alias for profile
				]]></help>
        <values/>
      </parameter>
      <parameter name="source1" required="false" type="string">
        <help><![CDATA[
					"left" source video to read in for concatenation
				]]></help>
        <values/>
      </parameter>
      <parameter name="videobitratetolerance" required="false" type="string">
        <help><![CDATA[
					video bitrate tolerance of variable bitrate, default same as input or part of defined quality (example: 10kbps, 10mbps, 10bps)
				]]></help>
        <values/>
      </parameter>
      <parameter name="aspectratio" required="false" type="string">
        <help><![CDATA[
					aspect ratio (16:9,4:3)
				]]></help>
        <values/>
      </parameter>
      <parameter name="copyright" required="false" type="string">
        <help><![CDATA[
					copyright meta data of the destination video
				]]></help>
        <values/>
      </parameter>
      <parameter name="width" required="false" type="string">
        <help><![CDATA[
					width of destination video
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					name of the destination video
				]]></help>
        <values/>
      </parameter>
      <parameter name="comment" required="false" type="string">
        <help><![CDATA[
					comment meta data of the destination video
				]]></help>
        <values/>
      </parameter>
      <parameter name="destination" required="false" type="string">
        <help><![CDATA[
					directory of the destination video to create
				]]></help>
        <values/>
      </parameter>
      <parameter name="debug" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="videobitratemin" required="false" type="string">
        <help><![CDATA[
					minimal video bitrate of variable bitrate, default same as input or part of defined quality (example: 10kbps, 10mbps, 10bps)
				]]></help>
        <values/>
      </parameter>
      <parameter name="audiocodec" required="false" type="string">
        <help><![CDATA[
					force audio codec
				]]></help>
        <values/>
      </parameter>
      <parameter name="videocodec" required="false" type="string">
        <help><![CDATA[
					force video codec
				]]></help>
        <values/>
      </parameter>
      <parameter name="result" required="false" type="string">
        <help><![CDATA[
					name of struct that hold action info (default:cfvideo)
				]]></help>
        <values/>
      </parameter>
      <parameter name="buffersize" required="false" type="number">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="max" required="false" type="string">
        <help><![CDATA[
					maximum length of destination video, you can defines max frame (10f) or max time (1145ms,3.123s)
				]]></help>
        <values/>
      </parameter>
      <parameter name="height" required="false" type="string">
        <help><![CDATA[
					height of destination video
				]]></help>
        <values/>
      </parameter>
      <parameter name="data" required="false" type="struct">
        <help><![CDATA[
					for internal use only
				]]></help>
        <values/>
      </parameter>
      <parameter name="videobitrate" required="false" type="string">
        <help><![CDATA[
					video bitrate, default same as input or part of defined quality (example: 10kbps, 10mbps, 10bps)
				]]></help>
        <values/>
      </parameter>
      <parameter name="source" required="false" type="string">
        <help><![CDATA[
					source video to read in
				]]></help>
        <values/>
      </parameter>
      <parameter name="videobitratemax" required="false" type="string">
        <help><![CDATA[
					maximum video bitrate of variable bitrate, default same as input or part of defined quality (example: 10kbps, 10mbps, 10bps)
				]]></help>
        <values/>
      </parameter>
      <parameter name="start" required="false" type="string">
        <help><![CDATA[
					offset of destination video based on source, you can defines frames (10f) or time (1145ms,3.123s)
				]]></help>
        <values/>
      </parameter>
      <parameter name="fps" required="false" type="number">
        <help><![CDATA[
					how many frames are used per second
				]]></help>
        <values/>
      </parameter>
      <parameter name="audiobitrate" required="false" type="string">
        <help><![CDATA[
					audio bitrate, default same as input or part of defined quality (example: 10kbps, 10mbps, 10bps)
				]]></help>
        <values/>
      </parameter>
      <parameter name="nameconflict" required="false" type="string">
        <help><![CDATA[
					Action to take if filename is the same as that of a file in the directory. (error,skip,overwrite,makeunique)
				]]></help>
        <values/>
      </parameter>
      <parameter name="execution" required="false" type="string">
        <help><![CDATA[
					values can be "quality" or "performance"
				]]></help>
        <values/>
      </parameter>
      <parameter name="author" required="false" type="string">
        <help><![CDATA[
					author meta data of the destination video
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="true" type="string">
        <help><![CDATA[
					Type of video manipulation that the tag performs.
				]]></help>
        <values/>
      </parameter>
      <parameter name="title" required="false" type="string">
        <help><![CDATA[
					title meta data of the destination video
				]]></help>
        <values/>
      </parameter>
      <parameter name="profile" required="false" type="string">
        <help><![CDATA[
					standard profile definition (declared in video.xml)
				]]></help>
        <values/>
      </parameter>
      <parameter name="source2" required="false" type="string">
        <help><![CDATA[
					"right" source video to read in for concatenation
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfvideoplayer" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				The tag CFVIDEOPLAYER allows you to display a video in flash (flv) format. It includes the complete functionality to display the player with the necessary html code. Read more on the multimedia functionality.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="background" required="false" type="string">
        <help><![CDATA[
					alias for bgcolor
				]]></help>
        <values/>
      </parameter>
      <parameter name="showplay" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="foregroundcolor" required="false" type="string">
        <help><![CDATA[
					alias for fgcolor
				]]></help>
        <values/>
      </parameter>
      <parameter name="autostart" required="false" type="boolean">
        <help><![CDATA[
					Set this to true in the player to automatically start playing when the page loads
				]]></help>
        <values/>
      </parameter>
      <parameter name="passthrough" required="false" type="struct">
        <help><![CDATA[
					attribute to pass natively vales to player
				]]></help>
        <values/>
      </parameter>
      <parameter name="width" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="overstretch" required="false" type="string">
        <help><![CDATA[
					Sets how to stretch images/movies to make them fit the display. Set this to true to stretch them proportionally to fill the display, fit to stretch them disproportionally and none to keep original dimensions
				]]></help>
        <values/>
      </parameter>
      <parameter name="linktarget" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="playlistsize" required="false" type="number">
        <help><![CDATA[
					size of the playlist, if playlist is right of display this is the width otherwise the height
				]]></help>
        <values/>
      </parameter>
      <parameter name="backgroundcolor" required="false" type="string">
        <help><![CDATA[
					alias for bgcolor
				]]></help>
        <values/>
      </parameter>
      <parameter name="debug" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="fgcolor" required="false" type="string">
        <help><![CDATA[
					foreground color
				]]></help>
        <values/>
      </parameter>
      <parameter name="lightcolor" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="height" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="screencolor" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="bgcolor" required="false" type="string">
        <help><![CDATA[
					background color
				]]></help>
        <values/>
      </parameter>
      <parameter name="showpause" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="download" required="false" type="boolean">
        <help><![CDATA[
					Set this to true to show a download button in the player controlbar
				]]></help>
        <values/>
      </parameter>
      <parameter name="allowfullscreen" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="linkfromdisplay" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="id" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="target" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="foreground" required="false" type="string">
        <help><![CDATA[
					alias for fgcolor
				]]></help>
        <values/>
      </parameter>
      <parameter name="playlistthumbnails" required="false" type="boolean">
        <help><![CDATA[
					using Thumbnails in playlist or not
				]]></help>
        <values/>
      </parameter>
      <parameter name="video" required="false" type="string">
        <help><![CDATA[
					path to Movie File (flv/mp4)
				]]></help>
        <values/>
      </parameter>
      <parameter name="showtimeline" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="playlist" required="false" type="string">
        <help><![CDATA[
					define if and where the playlist will be displayed
				]]></help>
        <values/>
      </parameter>
      <parameter name="preview" required="false" type="string">
        <help><![CDATA[
					set this to the path of a preview image.
				]]></help>
        <values/>
      </parameter>
      <parameter name="group" required="false" type="boolean">
        <help><![CDATA[
					if multiple video are defined, you have to define if this videos should be break a part or played as a single video
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfvideoplayerparam" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				play a video
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="show" required="false" type="string">
        <help><![CDATA[
					Defines whether the video should be displayed or not.
				]]></help>
        <values/>
      </parameter>
      <parameter name="flash" required="false" type="string">
        <help><![CDATA[
					Path to the SWF file. Can be a URL or local file.
				]]></help>
        <values/>
      </parameter>
      <parameter name="image" required="false" type="string">
        <help><![CDATA[
					This is just an alias for the attribute preview.
				]]></help>
        <values/>
      </parameter>
      <parameter name="index" required="false" type="number">
        <help><![CDATA[
					Layer in which the video is displayed. (not supported yet)
				]]></help>
        <values/>
      </parameter>
      <parameter name="link" required="false" type="string">
        <help><![CDATA[
					Displays a tiny image and allows linking to any target. (HTML link, Ajax etc.)
				]]></help>
        <values/>
      </parameter>
      <parameter name="video" required="false" type="string">
        <help><![CDATA[
					Path to the FLV file. Can be a URL or local file.
				]]></help>
        <values/>
      </parameter>
      <parameter name="author" required="false" type="string">
        <help><![CDATA[
					Name of the author.
				]]></help>
        <values/>
      </parameter>
      <parameter name="title" required="false" type="string">
        <help><![CDATA[
					Title of the video. Displayed in the playlist as the title.
				]]></help>
        <values/>
      </parameter>
      <parameter name="preview" required="false" type="string">
        <help><![CDATA[
					Path to a preview image for playlist and main video display. Can be URL or local file.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfwddx" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Serializes and de-serializes CFML data structures to the XML-based WDDX format.
				Generates JavaScript statements to instantiate JavaScript objects equivalent to the contents of a WDDX packet or some CFML data structures.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="xmlconform" required="false" type="boolean">
        <help><![CDATA[
					if set to true generate valid xml, if set to false (default) the xml generated is compatible to other engines, but not valid xml (use for example single quotes for attribute values)
				]]></help>
        <values/>
      </parameter>
      <parameter name="toplevelvariable" required="false" type="string">
        <help><![CDATA[
					The name of the top-level JavaScript object created by the deserialization process. The object created is an instance of the WddxRecordset object, explained in WddxRecordset Object.
				]]></help>
        <values/>
      </parameter>
      <parameter name="output" required="false" type="string">
        <help><![CDATA[
					The name of the variable to hold the output of the operation. This attribute is required for action = 'WDDX2CFML'. For all other actions, if this attribute is not provided, the result of the WDDX processing is outputted in the HTML stream.
				]]></help>
        <values/>
      </parameter>
      <parameter name="usetimezoneinfo" required="false" type="boolean">
        <help><![CDATA[
					Indicates whether to output time-zone information when serializing CFML to WDDX. If time-zone information is taken into account, the hour-minute offset, as represented in the ISO8601 format, is calculated in the date-time output. If time-zone information is not taken into account, the local time is output. The default is Yes.
				]]></help>
        <values/>
      </parameter>
      <parameter name="input" required="true" type="any">
        <help><![CDATA[
					The value to be processed.
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="true" type="string">
        <help><![CDATA[
					Specifies the action taken by the cfwddx tag.
				]]></help>
        <values/>
      </parameter>
      <parameter name="validate" required="false" type="boolean">
        <help><![CDATA[
					Applies if action = "wddx2cfml" or "wddx2js". Yes: validates WDDX input with an XML parser using WDDX DTD. If parser processes input without error, packet is deserialized. Otherwise, an error is thrown. No: no input validation
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfwebsocket" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="false">
      <help><![CDATA[
				The <cfwebsocket> tag is not supported by Lucee.
			]]></help>

    </tag>
    <tag name="cfwhile" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Simplification of the tag cfloop-condition, analog to the cfscript "while" loop.
				This tag must have a body.
				This tag is also supported within <cfscript>
			]]></help>
      <parameter name="condition" required="false" type="boolean">
        <help><![CDATA[
					condition o the expression
				]]></help>
        <values/>
      </parameter>
      <parameter name="label" required="false" type="string">
        <help><![CDATA[
					used to address this loop from a "break" or "continue" statement (instead of the nearest one).
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfwindow" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Creates a pop-up window in the browser. Does not create a separate browser pop-up instance.
				This tag may have a body.
				This tag has no <cfscript> support or it uses a different syntax.
			]]></help>
      <parameter name="height" required="false" type="numeric">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="refreshonshow" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="source" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="minwidth" required="false" type="numeric">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="draggable" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="y" required="false" type="numeric">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="onbinderror" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="buttons" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="width" required="false" type="numeric">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="x" required="false" type="numeric">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="resizable" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="modal" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="initshow" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="jslib" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="title" required="false" type="string">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
      <parameter name="minheight" required="false" type="numeric">
        <help><![CDATA[

				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfx_" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Creates a CFX Tag
				This tag is also supported within <cfscript>
				This tag does not use any attributes.]]></help>

    </tag>
    <tag name="cfxml" endtagrequired="true" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Creates a CFML XML document object that contains the markup in the tag body. This tag can include XML and CFML tags. Lucee processes the CFML code in the tag body, then assigns the resulting text to an XML document object variable.
				This tag must have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="variable" required="true" type="string">
        <help><![CDATA[
					name of an xml variable
				]]></help>
        <values/>
      </parameter>
      <parameter name="validator" required="false" type="string">
        <help><![CDATA[
					Any of the following: A string containing a DTD or Schema The name of a DTD or Schema file The URL of a DTD or Schema file; valid protocol identifiers include http, https, ftp, and file
				]]></help>
        <values/>
      </parameter>
      <parameter name="casesensitive" required="false" type="boolean">
        <help><![CDATA[
					if set to true maintains the case of document elements and attributes
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfzip" endtagrequired="false" single="false" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				Manipulates ZIP and Java Archive (JAR) files.
				In addition to the basic zip and unzip functions, use the cfzip tag to delete entries from an archive, filter files, read files in binary format, list the contents of an archive, and specify an entry path used in an executable JAR file.
				This tag may have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="prefix" required="false" type="string">
        <help><![CDATA[
					String added as a prefix to the ZIP or JAR entry. The string is the name of a subdirectory in which the entries are added.
				]]></help>
        <values/>
      </parameter>
      <parameter name="filterdelimiters" required="false" type="string">
        <help><![CDATA[
					Optional when passing a filter pattern. This value is used as a delimiter for the patterns. Default is the pipe "|" character.
				]]></help>
        <values/>
      </parameter>
      <parameter name="charset" required="false" type="string">
        <help><![CDATA[
					The character set used to translate the ZIP or JAR entry into a text string. Examples of character sets are: JIS RFC1345 UTF-16 (optional, default=encoding of the host machine)
				]]></help>
        <values/>
      </parameter>
      <parameter name="source" required="false" type="string">
        <help><![CDATA[
					Source directory to be zipped. Not required if cfzipparam is specified.
				]]></help>
        <values/>
      </parameter>
      <parameter name="filter" required="false" type="any">
        <help><![CDATA[
					Optional filter. Can be either a wildcard filter, e.g. "m*", or a UDF/Closure which accepts the file/directory name and returns a boolean value to indicate whether that item should be included in the result or not.
				]]></help>
        <values/>
      </parameter>
      <parameter name="variable" required="false" type="string">
        <help><![CDATA[
					Variable in which the read content is stored.
				]]></help>
        <values/>
      </parameter>
      <parameter name="recurse" required="false" type="boolean">
        <help><![CDATA[
					Specifies whether the action applies to subdirectories: yes: includes subdirectories. no: does not include subdirectories. (optional, default=yes)
				]]></help>
        <values/>
      </parameter>
      <parameter name="storepath" required="false" type="boolean">
        <help><![CDATA[
					zip: Specifies whether pathnames are stored in the ZIP or JAR file: yes: pathnames of entries are stored in the ZIP or JAR file. no: pathnames of the entries are not stored in the ZIP or JAR file. All the files are placed at the root level. In case of a name conflict, the last file in the iteration is added. unzip: Specifies whether files are stored at the entrypath: yes: the files are extracted to the entrypath. no: the entrypath is ignored and all the files are extracted at the root level. (optional, default= yes)
				]]></help>
        <values/>
      </parameter>
      <parameter name="showdirectory" required="false" type="boolean">
        <help><![CDATA[
					yes: lists the directories. no: does not list directories. (optional, default= no)
				]]></help>
        <values/>
      </parameter>
      <parameter name="file" required="false" type="string">
        <help><![CDATA[
					Absolute pathname of the file on which the action is performed. For example, the full pathname of the ZIP file: c:\temp\log.zip.
				]]></help>
        <values/>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					Record set name in which the result of the list action is stored. The record set columns are: name: filename of the entry in the JAR file. For example, if the entry is help/docs/index.htm, the name is index.htm. directory: directory containing the entry. For the example above, the directory is help/docs. You can obtain the full entry name by concatenating directory and name. If an entry is at the root level, the directory is empty (''). size: uncompressed size of the entry, in bytes. compressedSize: compressed size of the entry, in bytes. type: type of entry (directory or file). dateLastModified: last modified date of the entry, cfdate object. comment: any comment, if present, for the entry. crc: crc-32 checksum of the uncompressed entry data.
				]]></help>
        <values/>
      </parameter>
      <parameter name="entrypath" required="false" type="string">
        <help><![CDATA[
					Pathname on which the action is performed.
				]]></help>
        <values/>
      </parameter>
      <parameter name="overwrite" required="false" type="boolean">
        <help><![CDATA[
					unzip: Specifies whether to overwrite the extracted files: yes: if the extracted file already exists at the destination specified, the file is overwritten. no: if the extracted file already exists at the destination specified, the file is not overwritten and that entry is not extracted. The remaining entries are extracted. zip: Specifies whether to overwrite the contents of a ZIP or JAR file: yes: overwrites all of the content in the ZIP or JAR file if it exists. no: updates existing entries and adds new entries to the ZIP or JAR file if it exists. (optional, default=no)
				]]></help>
        <values/>
      </parameter>
      <parameter name="destination" required="false" type="string">
        <help><![CDATA[
					Destination directory where the ZIP or JAR file is extracted.
				]]></help>
        <values/>
      </parameter>
      <parameter name="action" required="false" type="string">
        <help><![CDATA[
					The action to take.
				]]></help>
        <values/>
      </parameter>
    </tag>
    <tag name="cfzipparam" endtagrequired="false" single="true" xmlstyle="false" supportedByLucee="true">
      <help><![CDATA[
				The cfzipparam tag is always a child tag of the cfzip tag. see tag <cfzip> for more details.
				This tag cannot have a body.
				This tag is also supported within <cfscript>]]></help>
      <parameter name="prefix" required="false" type="string">
        <help><![CDATA[
					String added as a prefix to the ZIP or JAR entry. Used only when cfzip action="zip".
				]]></help>
        <values/>
      </parameter>
      <parameter name="content" required="false" type="any">
        <help><![CDATA[
					Content written to the ZIP or JAR entry. Used only when cfzip action="zip". Valid content data types are binary and string. If you specify the content attribute, you must specify the entrypath attribute.
				]]></help>
        <values/>
      </parameter>
      <parameter name="filterdelimiters" required="false" type="string">
        <help><![CDATA[
					Optional when passing a filter pattern. This value is used as a delimiter for the patterns. Default is the pipe "|" character.
				]]></help>
        <values/>
      </parameter>
      <parameter name="charset" required="false" type="string">
        <help><![CDATA[
					Converts string content into binary data before putting it into a ZIP or JAR file. Used only when cfzip action="zip" and the cfzipparam content is a string. Examples of character sets are: JIS RFC1345 UTF-16 (optional, default=encoding of the host machine)
				]]></help>
        <values/>
      </parameter>
      <parameter name="source" required="false" type="string">
        <help><![CDATA[
					Source directory or file. Used only when cfzip action="zip". Specified file(s) are added to the ZIP or JAR file: If you specify source attribute for the cfzip tag, the cfzipparam source is relative to it. If you do not specify a source attribute for the cfzip tag, the cfzipparam source must be an absolute path.
				]]></help>
        <values/>
      </parameter>
      <parameter name="filter" required="false" type="any">
        <help><![CDATA[
					Optional filter. Can be either a wildcard filter, e.g. "m*", or a UDF/Closure which accepts the file/directory name and returns a boolean value to indicate whether that item should be included in the result or not.
				]]></help>
        <values/>
      </parameter>
      <parameter name="recurse" required="false" type="boolean">
        <help><![CDATA[
					Recurse the directory to be zipped, unzipped, or deleted, as specified by the cfzip parent tag. (optional, default=yes)
				]]></help>
        <values/>
      </parameter>
      <parameter name="entrypath" required="false" type="string">
        <help><![CDATA[
					Pathname used: For cfzip action="zip", it is the entrypath used. This is valid only when the source is a file. The entrypath creates a subdirectory within the ZIP or JAR file. For cfzip action="unzip", it is the pathname to unzip. For cfzip action="delete", it is the pathname to delete from the ZIP or JAR file.
				]]></help>
        <values/>
      </parameter>
    </tag>
  </tags>

  <functions>
    <function name="Abs" returns="Number">
      <help><![CDATA[
				Absolute-value function. The absolute value of a number is the number without its sign.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					Number to find the absolute value of
				]]></help>
      </parameter>
    </function>
    <function name="ACos" returns="Number">
      <help><![CDATA[
				Returns the angle whose cosine is the value passed as the argument.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					The value to be converted into an angle. Must be between -1 and 1.
				]]></help>
      </parameter>
    </function>
    <function name="AddSOAPRequestHeader" returns="Boolean">
      <help><![CDATA[
				Adds a SOAP header to a web service request before making the request.
			]]></help>
      <parameter name="webservice" required="false" type="object">
        <help><![CDATA[
					A web service object as returned from the cfobject tag or the CreateObject function.
				]]></help>
      </parameter>
      <parameter name="namespace" required="false" type="string">
        <help><![CDATA[
					A String that is the namespace for the header.
				]]></help>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					A String that is the name of the header
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="object">
        <help><![CDATA[
					the value for the SOAP header; this can be a CFML XML value.
				]]></help>
      </parameter>
      <parameter name="mustUnderstand" required="false" type="boolean">
        <help><![CDATA[
					Sets the SOAP mustunderstand value for this header.
				]]></help>
      </parameter>
    </function>
    <function name="AddSOAPResponseHeader" returns="Boolean">
      <help><![CDATA[
				Adds a SOAP response header to a web service response. Call only from within a CFC web service function that is processing a request as a SOAP web service.
			]]></help>
      <parameter name="namespace" required="false" type="string">
        <help><![CDATA[
					A String that is the namespace for the header.
				]]></help>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					A String that is the name of the header
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="object">
        <help><![CDATA[
					the value for the SOAP header; this can be a XML value.
				]]></help>
      </parameter>
      <parameter name="mustUnderstand" required="false" type="boolean">
        <help><![CDATA[
					Sets the SOAP mustunderstand value for this header.
				]]></help>
      </parameter>
    </function>
    <function name="AjaxLink" returns="void">
      <help><![CDATA[
				Causes an HTML href attribute to display link results in the current Ajax container.
			]]></help>

    </function>
    <function name="AjaxOnLoad" returns="void">
      <help><![CDATA[
				Causes the specified JavaScript function to run when the page loads.
			]]></help>
      <parameter name="functionname" required="false" type="any">
        <help><![CDATA[
					The name of the function to run when the page loads.
				]]></help>
      </parameter>
    </function>
    <function name="ApplicationStartTime" returns="date">
      <help><![CDATA[
				Provides information about the time when the current application scope was created.
			]]></help>

    </function>
    <function name="ApplicationStop" returns="void">
      <help><![CDATA[
				Stops the current application context and causes the application to restart on the next request.
			]]></help>

    </function>
    <function name="Array" returns="Array">
      <help><![CDATA[
				Creates a new array populated with any arguments that have been passed to the function. We recommend using inline array notation over this method, e.g.<code>anArray = [ 1, 2, 3 ]</code>.
			]]></help>

    </function>
    <function name="ArrayAppend" returns="Boolean">
      <help><![CDATA[
				Appends an array element to an array.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					The array to which the element should be appended.
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					The element to append. Can be any type.
				]]></help>
      </parameter>
      <parameter name="merge" required="false" type="boolean">
        <help><![CDATA[
					This argument only applies when the value is an array.
				]]></help>
      </parameter>
    </function>
    <function name="ArrayAvg" returns="Number">
      <help><![CDATA[
				Calculates the average of the values in an array. All elements in the array must contain values that can be automatically converted to numeric.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					The array to calculate the average values from
				]]></help>
      </parameter>
    </function>
    <function name="ArrayClear" returns="Boolean">
      <help><![CDATA[
				Removes all elements from an array.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					Name of an array
				]]></help>
      </parameter>
    </function>
    <function name="ArrayContains" returns="Number">
      <help><![CDATA[
				Returns the position of the first element in the array that matches the item that we are searching for, or 0 if the item is not found.
			]]></help>
      <parameter name="haystack" required="false" type="array">
        <help><![CDATA[
					The array in which to search for the item
				]]></help>
      </parameter>
      <parameter name="needle" required="false" type="object">
        <help><![CDATA[
					The item that we are looking for in the array
				]]></help>
      </parameter>
      <parameter name="substringMatch" required="false" type="boolean">
        <help><![CDATA[
					If set to true then a substring match will also return an array position. This will only work with simple values. Passing true with complex objects will throw an exception.
				]]></help>
      </parameter>
    </function>
    <function name="ArrayContainsNoCase" returns="Number">
      <help><![CDATA[
				Returns the position of the first element in the array whose string value contains the substring passed (not case sensitive), or 0 if no such element is found.
			]]></help>
      <parameter name="haystack" required="false" type="array">
        <help><![CDATA[
					The array in which to search for the substring
				]]></help>
      </parameter>
      <parameter name="needle" required="false" type="object">
        <help><![CDATA[
					The substring to search for (not case sensitive)
				]]></help>
      </parameter>
    </function>
    <function name="ArrayDelete" returns="Boolean">
      <help><![CDATA[
				Deletes specified object from given array
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					The array to delete from
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="object">
        <help><![CDATA[
					The value to delete
				]]></help>
      </parameter>
      <parameter name="scope" required="false" type="string">
        <help><![CDATA[
					one: replaces the first occurrence (default) all: replaces all occurrences
				]]></help>
      </parameter>
    </function>
    <function name="ArrayDeleteAt" returns="Boolean">
      <help><![CDATA[
				Deletes an element from an array and resizes the array so that the deleted element doesn't leave a gap.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					The array that the element will be deleted from.
				]]></help>
      </parameter>
      <parameter name="position" required="false" type="number">
        <help><![CDATA[
					The numeric position of the element. Remember that CFML arrays start at 1 not 0.
				]]></help>
      </parameter>
    </function>
    <function name="arraydeletenocase" returns="Boolean">
      <help><![CDATA[
				Deletes specified object from given array, in case of a string the case of the string does not matter.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					The array to delete from
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="object">
        <help><![CDATA[
					The value to delete
				]]></help>
      </parameter>
      <parameter name="scope" required="false" type="string">
        <help><![CDATA[
					one: replaces the first occurrence (default) all: replaces all occurrences
				]]></help>
      </parameter>
    </function>
    <function name="ArrayEach" returns="void">
      <help><![CDATA[
				call the given UDF/Closure with every value in the array.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					array to take values from
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					A closure function (UDF) with the following signature:
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="ArrayEvery" returns="Boolean">
      <help><![CDATA[
				This function calls a given closure/function with every element in a given array and returns true, if all of the closure calls returns true.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					array to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					function/closure that implements the following constructor [function(any value[, numeric index,array array]):boolean].
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="ArrayFilter" returns="Array">
      <help><![CDATA[
				This function creates a new Array that returns all the values from an array that match the given filter.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					array to filter values from
				]]></help>
      </parameter>
      <parameter name="filter" required="false" type="function">
        <help><![CDATA[
					filter can be a function/closure that implements the following constructor [function(any arg):boolean].
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="ArrayFind" returns="Number">
      <help><![CDATA[
				These functions searches the array for the specified object.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					The array to search in
				]]></help>
      </parameter>
      <parameter name="value_or_closure" required="false" type="any">
        <help><![CDATA[
					The value to find or a closure/function that gets every value of the array as input and returns true if the given value is right.
				]]></help>
      </parameter>
    </function>
    <function name="ArrayFindAll" returns="Array">
      <help><![CDATA[
				These functions searches the array for the specified object and return the positions of all occurrence of this values.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					The array to search in
				]]></help>
      </parameter>
      <parameter name="value_or_closure" required="false" type="any">
        <help><![CDATA[
					The value to find or a closure/function that gets every value of the array as input and returns true if the given value is right.
				]]></help>
      </parameter>
    </function>
    <function name="ArrayFindAllNoCase" returns="Array">
      <help><![CDATA[
				These functions searches the array for the specified object and return the positions of all occurrence of this values.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					The array to search in
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					The value to find
				]]></help>
      </parameter>
    </function>
    <function name="ArrayFindNoCase" returns="Number">
      <help><![CDATA[
				Performs a case-insensitive search in the array for the specified object. Returns the index of the object found, or 0 if the object was not found.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					The array to search in
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					The value to find
				]]></help>
      </parameter>
    </function>
    <function name="ArrayFirst" returns="void">
      <help><![CDATA[
				Returns the first item from an array. Throws an error if the array is empty.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					The array to obtain the first Item from
				]]></help>
      </parameter>
    </function>
    <function name="ArrayIndexExists" returns="Boolean">
      <help><![CDATA[
				Returns whether there exists an item in the array at the selected index.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					The array to search
				]]></help>
      </parameter>
      <parameter name="index" required="false" type="number">
        <help><![CDATA[
					The index which to check
				]]></help>
      </parameter>
    </function>
    <function name="ArrayInsertAt" returns="Boolean">
      <help><![CDATA[
				Inserts a value at the specified position in the array. If the element is inserted before the end of the array, Lucee shifts the positions of all elements with a higher index to make room.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					The array which will have the new element inserted.
				]]></help>
      </parameter>
      <parameter name="position" required="false" type="number">
        <help><![CDATA[
					The numerical index in the array where the new element will be inserted. Must be less than or equal to the length of the array. Remember CFML arrays start at 1 not 0.
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					value to insert
				]]></help>
      </parameter>
    </function>
    <function name="ArrayIsDefined" returns="Boolean">
      <help><![CDATA[
				Returns whether there exists an item in the array at the selected index.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					The array to search
				]]></help>
      </parameter>
      <parameter name="index" required="false" type="number">
        <help><![CDATA[
					The index which to check
				]]></help>
      </parameter>
    </function>
    <function name="ArrayIsEmpty" returns="Boolean">
      <help><![CDATA[
				Determines if the array is empty.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					Name of an array
				]]></help>
      </parameter>
    </function>
    <function name="ArrayLast" returns="void">
      <help><![CDATA[
				Returns the last element of an array
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					an array
				]]></help>
      </parameter>
    </function>
    <function name="ArrayLen" returns="Number">
      <help><![CDATA[
				Returns the length of a given array
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					array to check
				]]></help>
      </parameter>
    </function>
    <function name="ArrayMap" returns="Array">
      <help><![CDATA[
				Calls the given closure with every element in the given array.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					array to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					filter can be a function/closure that implements the following constructor
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="ArrayMax" returns="Number">
      <help><![CDATA[
				Returns the largest numeric value in an array. If the array parameter value is an empty array, returns zero. All elements must contain values that can be automatically converted to numeric values.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					Name of an array
				]]></help>
      </parameter>
    </function>
    <function name="ArrayMedian" returns="Number">
      <help><![CDATA[
				Calculates the Median value of items in an array. All elements in the array must contain values that can be converted to numeric.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					The array of which to calculate the Median value
				]]></help>
      </parameter>
    </function>
    <function name="ArrayMerge" returns="Array">
      <help><![CDATA[
				This function creates a new array with data from the two passed arrays. To add all the data from one array into another without creating a new array see the built in function ArrayAppend(arr1, arr2, true).
			]]></help>
      <parameter name="array1" required="false" type="array">
        <help><![CDATA[
					first array
				]]></help>
      </parameter>
      <parameter name="array2" required="false" type="array">
        <help><![CDATA[
					second array
				]]></help>
      </parameter>
      <parameter name="leaveIndex" required="false" type="boolean">
        <help><![CDATA[
					defines whether the merged arrays will maintain their index values or if the second array will simply append to the first one. If both arrays contain the same index and you specified the parameter leaveIndex to true, the corresponding index in the resulting array will always contain the value of the index of the first array.
				]]></help>
      </parameter>
    </function>
    <function name="ArrayMid" returns="Array">
      <help><![CDATA[
				Extracts a sub array from an array.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					array to substract data from
				]]></help>
      </parameter>
      <parameter name="start" required="false" type="number">
        <help><![CDATA[
					The position of the first element to retrieve.
				]]></help>
      </parameter>
      <parameter name="count" required="false" type="number">
        <help><![CDATA[
					The number of elements to retrieve. If not set, all elements until the end of the array will be returned.
				]]></help>
      </parameter>
    </function>
    <function name="ArrayMin" returns="Number">
      <help><![CDATA[
				Returns the smallest numeric value in an array. If the array parameter value is an empty array, returns zero. All elements must contain values that can be automatically converted to numeric values.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					Name of an array
				]]></help>
      </parameter>
    </function>
    <function name="ArrayNew" returns="Array">
      <help><![CDATA[
				create a new array. shorthand syntax is [].
			]]></help>
      <parameter name="dimension" required="false" type="number">
        <help><![CDATA[
					Number of dimensions in new array: 1, 2, or 3
				]]></help>
      </parameter>
      <parameter name="synchronized" required="false" type="boolean">
        <help><![CDATA[
					is the array synchronized or not (aka thread safe)
				]]></help>
      </parameter>
    </function>
    <function name="ArrayPrepend" returns="Boolean">
      <help><![CDATA[
				Inserts an array element at the beginning of an array and shifts the positions of the existing elements to make room.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					Name of an array
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					value to prepend
				]]></help>
      </parameter>
    </function>
    <function name="ArrayReduce" returns="void">
      <help><![CDATA[
				Iterates over every entry of the given array and calls the closure with every element. This function will reduce the array to a single value and will return the value.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					array to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					function/closure that implements the following constructor [function(any result, object value, [, numericindex [, array]]):any].
				]]></help>
      </parameter>
      <parameter name="initialValue" required="false" type="object">
        <help><![CDATA[
					inital value passed as part of the first closure call
				]]></help>
      </parameter>
    </function>
    <function name="ArrayResize" returns="Boolean">
      <help><![CDATA[
				Resets an array to a specified minimum number of elements. This can improve performance, if used to size an array to its expected maximum. For more than 500 elements, use ArrayResize immediately after using the ArrayNew tag.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					Name of an array
				]]></help>
      </parameter>
      <parameter name="minimum_size" required="false" type="number">
        <help><![CDATA[
					minimum size of the array
				]]></help>
      </parameter>
    </function>
    <function name="ArrayReverse" returns="Array">
      <help><![CDATA[
				Returns a new array, with all the elements reversed
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					the array to reverse
				]]></help>
      </parameter>
    </function>
    <function name="ArraySet" returns="Boolean">
      <help><![CDATA[
				In an one-dimensional array, sets the elements in a specified index range to a value.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					Name of an array.
				]]></help>
      </parameter>
      <parameter name="start_pos" required="false" type="number">
        <help><![CDATA[
					Starting index position of range to set.
				]]></help>
      </parameter>
      <parameter name="end_pos" required="false" type="number">
        <help><![CDATA[
					Ending index position of range to set. If this value is greater than array length, Lucee adds elements to array.
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					Value to which to set each element in the range.
				]]></help>
      </parameter>
    </function>
    <function name="ArraySlice" returns="Array">
      <help><![CDATA[
				Returns a new array, from the start position up to the count of elements
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					array to slice
				]]></help>
      </parameter>
      <parameter name="offset" required="false" type="number">
        <help><![CDATA[
					start position in the original array to slice
				]]></help>
      </parameter>
      <parameter name="length" required="false" type="number">
        <help><![CDATA[
					number of elements to slice from offset
				]]></help>
      </parameter>
    </function>
    <function name="ArraySome" returns="Boolean">
      <help><![CDATA[
				This function calls a given closure/function with every element in a given array and returns true, if one of the closure calls returns true.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					array to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					function/closure that implements the following constructor [function(any value[, numeric index,array array]):boolean].
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="ArraySort" returns="Boolean">
      <help><![CDATA[
				Sorts array elements numerically or alphanumerically.
			]]></help>
      <parameter name="array" required="false" type="object">
        <help><![CDATA[
					Name of an array
				]]></help>
      </parameter>
      <parameter name="sorttype_or_closure" required="false" type="object">
        <help><![CDATA[
					value can be a string or a closure/function.
				]]></help>
      </parameter>
      <parameter name="sort_order" required="false" type="string">
        <help><![CDATA[
					sort direction:
				]]></help>
      </parameter>
      <parameter name="locale_sensitive" required="false" type="boolean">
        <help><![CDATA[
					if true it does a locale sensitive sorting.
				]]></help>
      </parameter>
    </function>
    <function name="ArraySum" returns="Number">
      <help><![CDATA[
				The sum of values in an array. If the array parameter value is an empty array, returns zero.
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					Name of an array
				]]></help>
      </parameter>
    </function>
    <function name="ArraySwap" returns="Boolean">
      <help><![CDATA[
				Swaps array values of an array at specified positions. This function is more efficient than multiple cfset tags
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					Array to Swap
				]]></help>
      </parameter>
      <parameter name="position1" required="false" type="number">
        <help><![CDATA[
					Position of first element to swap
				]]></help>
      </parameter>
      <parameter name="position2" required="false" type="number">
        <help><![CDATA[
					Position of second element to swap
				]]></help>
      </parameter>
    </function>
    <function name="ArrayToList" returns="String">
      <help><![CDATA[
				Transform the array to a list of elements delimiter by the given string
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					Name of array
				]]></help>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					Character or multicharacter string to separate list elements. The default value is comma.
				]]></help>
      </parameter>
    </function>
    <function name="ArrayToStruct" returns="Struct">
      <help><![CDATA[
				Transform the array to a struct, the index of the array is the key of the struct
			]]></help>
      <parameter name="array" required="false" type="array">
        <help><![CDATA[
					array to translate
				]]></help>
      </parameter>
    </function>
    <function name="Asc" returns="Number">
      <help><![CDATA[
				Determines the value of a character.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string
				]]></help>
      </parameter>
      <parameter name="position" required="false" type="number">
        <help><![CDATA[
					Position of the character
				]]></help>
      </parameter>
    </function>
    <function name="ASin" returns="Number">
      <help><![CDATA[
				Determines the arcsine of a number. The arcsine is the angle whose sine is number.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					Sine of an angle. The value must be between -1 and 1, inclusive.
				]]></help>
      </parameter>
    </function>
    <function name="Atn" returns="Number">
      <help><![CDATA[
				Arctangent function. The arctangent is the angle whose tangent is number.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					Tangent of an angle. Must be between -1 and 1.
				]]></help>
      </parameter>
    </function>
    <function name="Beat" returns="Number">
      <help><![CDATA[
				Outputs the <a href="https://en.wikipedia.org/wiki/Swatch_Internet_Time">swatch internet time</a> (or "beat time") of the passed local time.
			]]></help>
      <parameter name="time" required="false" type="any">
        <help><![CDATA[
					The local time to get beat time from
				]]></help>
      </parameter>
    </function>
    <function name="BinaryDecode" returns="void">
      <help><![CDATA[
				Converts a string to a binary object. Used to convert binary data that has been encoded into string format back into binary data.
			]]></help>
      <parameter name="encoded_binary" required="false" type="string">
        <help><![CDATA[
					A string containing encoded binary data.
				]]></help>
      </parameter>
      <parameter name="binaryencoding" required="false" type="string">
        <help><![CDATA[
					A string specifying the algorithm used to encode the original binary data into a string; must be one of the following:
				]]></help>
      </parameter>
    </function>
    <function name="BinaryEncode" returns="String">
      <help><![CDATA[
				Converts binary data to a string.
			]]></help>
      <parameter name="binary" required="false" type="binary">
        <help><![CDATA[
					A variable containing the binary data to encode.
				]]></help>
      </parameter>
      <parameter name="encoding" required="false" type="string">
        <help><![CDATA[
					A string that specifies the encoding method to use to represent the data; one of the following:
				]]></help>
      </parameter>
    </function>
    <function name="BitAnd" returns="Number">
      <help><![CDATA[
				Performs a bitwise logical AND operation.
			]]></help>
      <parameter name="number1" required="false" type="number">
        <help><![CDATA[
					an integer
				]]></help>
      </parameter>
      <parameter name="number2" required="false" type="number">
        <help><![CDATA[
					an integer
				]]></help>
      </parameter>
    </function>
    <function name="BitMaskClear" returns="Number">
      <help><![CDATA[
				Performs a bitwise mask clear operation.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					an integer
				]]></help>
      </parameter>
      <parameter name="start" required="false" type="number">
        <help><![CDATA[
					Integer, in the range 0-31, inclusive; start bit for mask
				]]></help>
      </parameter>
      <parameter name="length" required="false" type="number">
        <help><![CDATA[
					Integer, in the range 0-31, inclusive; length of mask
				]]></help>
      </parameter>
    </function>
    <function name="BitMaskRead" returns="Number">
      <help><![CDATA[
				Performs a bitwise mask read operation.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					an integer to mask
				]]></help>
      </parameter>
      <parameter name="start" required="false" type="number">
        <help><![CDATA[
					Integer, in the range 0-31, inclusive; start bit for read
				]]></help>
      </parameter>
      <parameter name="length" required="false" type="number">
        <help><![CDATA[
					Integer, in the range 0-31, inclusive; length of mask
				]]></help>
      </parameter>
    </function>
    <function name="BitMaskSet" returns="Number">
      <help><![CDATA[
				Performs a bitwise mask set operation.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					an integer
				]]></help>
      </parameter>
      <parameter name="mask" required="false" type="number">
        <help><![CDATA[
					integer mask
				]]></help>
      </parameter>
      <parameter name="start" required="false" type="number">
        <help><![CDATA[
					Integer, in the range 0-31, inclusive; start bit for mask
				]]></help>
      </parameter>
      <parameter name="length" required="false" type="number">
        <help><![CDATA[
					Integer, in the range 0-31, inclusive; length of mask
				]]></help>
      </parameter>
    </function>
    <function name="BitNot" returns="Number">
      <help><![CDATA[
				Performs a bitwise logical NOT operation.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					an integer
				]]></help>
      </parameter>
    </function>
    <function name="BitOr" returns="Number">
      <help><![CDATA[
				Performs a bitwise logical OR operation.
			]]></help>
      <parameter name="number1" required="false" type="number">
        <help><![CDATA[
					an integer
				]]></help>
      </parameter>
      <parameter name="number2" required="false" type="number">
        <help><![CDATA[
					an integer
				]]></help>
      </parameter>
    </function>
    <function name="BitSHLN" returns="Number">
      <help><![CDATA[
				Performs a bitwise shift-left, no-rotation operation.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					an integer
				]]></help>
      </parameter>
      <parameter name="count" required="false" type="number">
        <help><![CDATA[
					Integer, in the range 0-31, inclusive; number of bits to shift the number
				]]></help>
      </parameter>
    </function>
    <function name="BitSHRN" returns="Number">
      <help><![CDATA[
				Performs a bitwise shift-right, no-rotation operation.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					an integer
				]]></help>
      </parameter>
      <parameter name="count" required="false" type="number">
        <help><![CDATA[
					Integer, in the range 0-31, inclusive. Number of bits to shift the number
				]]></help>
      </parameter>
    </function>
    <function name="BitXor" returns="Number">
      <help><![CDATA[
				Performs a bitwise logical XOR operation.
			]]></help>
      <parameter name="number1" required="false" type="number">
        <help><![CDATA[
					an integer
				]]></help>
      </parameter>
      <parameter name="number2" required="false" type="number">
        <help><![CDATA[
					an integer
				]]></help>
      </parameter>
    </function>
    <function name="BooleanFormat" returns="String">
      <help><![CDATA[
				True, for a non-zero value; False, otherwise.
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					a value that can be casted to a boolean
				]]></help>
      </parameter>
    </function>
    <function name="BundleInfo" returns="Struct">
      <help><![CDATA[
				if the given object is loaded by an OSGi bundle, this function is returning information about that bundle
			]]></help>
      <parameter name="object" required="false" type="any">
        <help><![CDATA[
					object to get bundle info for it
				]]></help>
      </parameter>
    </function>
    <function name="CacheClear" returns="Number">
      <help><![CDATA[
				Flushes the cache
			]]></help>
      <parameter name="filterOrTags" required="false" type="any">
        <help><![CDATA[
					You can define 2 different things here:
				]]></help>
      </parameter>
      <parameter name="cacheName" required="false" type="string">
        <help><![CDATA[
					definition of the cache used by name, when not set the "default Object Cache" defined in Lucee Administrator is used instead.
				]]></help>
      </parameter>
    </function>
    <function name="CacheCount" returns="Number">
      <help><![CDATA[
				Returns the amount (integer) of keys stored in the cache.
			]]></help>
      <parameter name="cacheName" required="false" type="string">
        <help><![CDATA[
					definition of the cache used by name, when not set the "default Object Cache" defined in Lucee Administrator is used instead.
				]]></help>
      </parameter>
    </function>
    <function name="CacheDelete" returns="void">
      <help><![CDATA[
				Deletes a single element from the cache.
			]]></help>
      <parameter name="id" required="false" type="string">
        <help><![CDATA[
					the id of the element to delete, can also contain a "," (not used as separator)
				]]></help>
      </parameter>
      <parameter name="throwOnError" required="false" type="boolean">
        <help><![CDATA[
					define if the functions throws an exception when the element does not exist (default is false).
				]]></help>
      </parameter>
      <parameter name="cacheName" required="false" type="string">
        <help><![CDATA[
					definition of the cache used by name, when not set the "default Object Cache" defined in Lucee Administrator is used instead.
				]]></help>
      </parameter>
    </function>
    <function name="CacheGet" returns="void">
      <help><![CDATA[
				Gets an object that is stored in the cache.
			]]></help>
      <parameter name="id" required="false" type="string">
        <help><![CDATA[
					name of the element to return
				]]></help>
      </parameter>
      <parameter name="throwWhenNotExist" required="false" type="object">
        <help><![CDATA[
					define if the functions throws an exception when the element does not exist (default is false).
				]]></help>
      </parameter>
      <parameter name="cacheName" required="false" type="string">
        <help><![CDATA[
					definition of the cache used by name, when not set the "default Object Cache" defined in Lucee Administrator is used instead.
				]]></help>
      </parameter>
    </function>
    <function name="CacheGetAll" returns="Struct">
      <help><![CDATA[
				this function return a structure containing all elements inside the cache.
			]]></help>
      <parameter name="filter" required="false" type="string">
        <help><![CDATA[
					key filter for the elements, the filter follow the same rules as for cfdirectory-filter.
				]]></help>
      </parameter>
      <parameter name="cacheName" required="false" type="string">
        <help><![CDATA[
					definition of the cache used by name, when not set the "default Object Cache" defined in Lucee Administrator is used instead.
				]]></help>
      </parameter>
    </function>
    <function name="CacheGetAllIds" returns="Array">
      <help><![CDATA[
				this function return an array containing all keys inside the cache.
			]]></help>
      <parameter name="filter" required="false" type="string">
        <help><![CDATA[
					key filter for the elements, the filter follow the same rules as for cfdirectory-filter.
				]]></help>
      </parameter>
      <parameter name="cacheName" required="false" type="string">
        <help><![CDATA[
					definition of the cache used by name, when not set the "default Object Cache" defined in Lucee Administrator is used instead.
				]]></help>
      </parameter>
    </function>
    <function name="CacheGetDefaultCacheName" returns="String">
      <help><![CDATA[
				return the default cache name for a specific type
			]]></help>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					cache type
				]]></help>
      </parameter>
    </function>
    <function name="CacheGetMetadata" returns="Struct">
      <help><![CDATA[
				returns a structure with some Metadata regarding the cache elements (keys returned depends on the Cache type used).
			]]></help>
      <parameter name="id" required="false" type="string">
        <help><![CDATA[
					name of the element you need metadat for
				]]></help>
      </parameter>
      <parameter name="cacheName" required="false" type="string">
        <help><![CDATA[
					definition of the cache used by name, when not set the "default Object Cache" defined in Lucee Administrator is used instead.
				]]></help>
      </parameter>
    </function>
    <function name="CacheGetProperties" returns="Array">
      <help><![CDATA[
				Gets the cache properties for the object cache, the page cache, or both. The information is application-specific.
			]]></help>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					define which cache instances information are returned
				]]></help>
      </parameter>
    </function>
    <function name="CacheIdExists" returns="Boolean">
      <help><![CDATA[
				Returns true/false whether the cache contains an element with the certain id.
			]]></help>
      <parameter name="id" required="false" type="string">
        <help><![CDATA[
					key to check
				]]></help>
      </parameter>
      <parameter name="cacheName" required="false" type="string">
        <help><![CDATA[
					definition of the cache used by name, when not set the "default Object Cache" defined in Lucee Administrator is used instead.
				]]></help>
      </parameter>
    </function>
    <function name="CacheKeyExists" returns="Boolean">
      <help><![CDATA[
				this function is deprecated, use instead <a href="/reference/functions/cacheidexists.html">CacheIdExists</a>.
			]]></help>
      <parameter name="key" required="false" type="string">
        <help><![CDATA[
					key to check
				]]></help>
      </parameter>
      <parameter name="cacheName" required="false" type="string">
        <help><![CDATA[
					definition of the cache used by name, when not set the "default Object Cache" defined in Lucee Administrator is used instead.
				]]></help>
      </parameter>
    </function>
    <function name="CachePut" returns="void">
      <help><![CDATA[
				Stores an object in the cache, with a life time and an idle time.
			]]></help>
      <parameter name="id" required="false" type="string">
        <help><![CDATA[
					The id for the cache object.
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="object">
        <help><![CDATA[
					The value of the object.
				]]></help>
      </parameter>
      <parameter name="timeSpan" required="false" type="timespan">
        <help><![CDATA[
					The interval until the object is flushed from the cache, as a decimal number of days. One way to set the value is to use the return value from the CreateTimeSpan function. The default is to not time out the object.
				]]></help>
      </parameter>
      <parameter name="idleTime" required="false" type="timespan">
        <help><![CDATA[
					A decimal number of days after which the object is flushed from the cache if it is not accessed during that time. One way to set the value is to use the return value from the CreateTimeSpan function.
				]]></help>
      </parameter>
      <parameter name="cacheName" required="false" type="string">
        <help><![CDATA[
					definition of the cache used by name, when not set the "default Object Cache" defined in Lucee Administrator is used instead.
				]]></help>
      </parameter>
    </function>
    <function name="CacheRegionExists" returns="Boolean">
      <help><![CDATA[
				this function exists solely for the purpose of compatibility with other CFML Engines.
			]]></help>
      <parameter name="cacheName" required="false" type="string">
        <help><![CDATA[
					the name of the cache connection to check (also known as Region in other CFML engines).
				]]></help>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					the password for the web administrator is required to interact with Cache Connections. you can optionally set it for your Application in Application.cfc using the variable [this.webAdminPassword].
				]]></help>
      </parameter>
    </function>
    <function name="CacheRegionNew" returns="void">
      <help><![CDATA[
				This function exists solely for the purpose of compatibility with other CFML Engines.
			]]></help>
      <parameter name="cacheName" required="false" type="string">
        <help><![CDATA[
					the name of the cache connection to create (also known as Region in other CFML engines).
				]]></help>
      </parameter>
      <parameter name="properties" required="false" type="any">
        <help><![CDATA[
					a structure specifying the cache properties
				]]></help>
      </parameter>
      <parameter name="throwOnError" required="false" type="any">
        <help><![CDATA[
					specifies whether the function should throw an exception if a cache connection with that name already exists (default is true)
				]]></help>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					the password for the web administrator is required to interact with Cache Connections. you can optionally set it for your Application in Application.cfc using the variable [this.webAdminPassword].
				]]></help>
      </parameter>
    </function>
    <function name="CacheRegionRemove" returns="void">
      <help><![CDATA[
				this function exists solely for the purpose of compatibility with other CFML Engines.
			]]></help>
      <parameter name="cacheName" required="false" type="string">
        <help><![CDATA[
					the name of the cache connection to remove (also known as Region in other CFML engines).
				]]></help>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					the password for the web administrator is required to interact with Cache Connections. you can optionally set it for your Application in Application.cfc using the variable [this.webAdminPassword].
				]]></help>
      </parameter>
    </function>
    <function name="CacheRemove" returns="void">
      <help><![CDATA[
				removes elements from cache defined with argument ids.
			]]></help>
      <parameter name="ids" required="false" type="object">
        <help><![CDATA[
					This can be a string list of multiple elements or an array containing the keys
				]]></help>
      </parameter>
      <parameter name="throwOnError" required="false" type="boolean">
        <help><![CDATA[
					define if the functions throws an exception when the element does not exist (default is false)
				]]></help>
      </parameter>
      <parameter name="cacheName" required="false" type="string">
        <help><![CDATA[
					definition of the cache used by name, when not set the "default Object Cache" defined in Lucee Administrator is used instead.
				]]></help>
      </parameter>
    </function>
    <function name="CacheRemoveAll" returns="Number">
      <help><![CDATA[
				this function is deprecated, use instead cacheClear. Removes all elements from the cache
			]]></help>
      <parameter name="cacheName" required="false" type="string">
        <help><![CDATA[
					definition of the cache used by name, when not set the "default Object Cache" defined in Lucee Administrator is used instead.
				]]></help>
      </parameter>
    </function>
    <function name="CacheSetProperties" returns="void">
      <help><![CDATA[
				This function is not supported by Lucee, because we consider it a security risk, as you can modify cache configuration without a password, you can use tag cfadmin instead.
			]]></help>
      <parameter name="propsSruct" required="false" type="struct">
        <help><![CDATA[
					A structure specifying the cache properties plus identifying information
				]]></help>
      </parameter>
    </function>
    <function name="CallStackDump" returns="void">
      <help><![CDATA[
				dump the context (stacktrace) of the current position.
			]]></help>
      <parameter name="output" required="false" type="string">
        <help><![CDATA[
					Where to send the results of cfdump. The following values are valid:
				]]></help>
      </parameter>
    </function>
    <function name="CallStackGet" returns="void">
      <help><![CDATA[
				return the context (stacktrace) of the current position.
			]]></help>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					the type of the returned value, possible values are: [array], string, html, json
				]]></help>
      </parameter>
    </function>
    <function name="Canonicalize" returns="String">
      <help><![CDATA[
				Canonicalization is simply the operation of reducing a possibly encoded string down to its simplest form.
			]]></help>
      <parameter name="input" required="false" type="string">
        <help><![CDATA[
					the input string to encode
				]]></help>
      </parameter>
      <parameter name="restrictMultiple" required="false" type="boolean">
        <help><![CDATA[
					true if checking for multiple encoding is desired, false otherwise.
				]]></help>
      </parameter>
      <parameter name="restrictMixed" required="false" type="boolean">
        <help><![CDATA[
					true if checking for mixed encoding is desired, false otherwise
				]]></help>
      </parameter>
    </function>
    <function name="Ceiling" returns="Number">
      <help><![CDATA[
				Determines the closest integer that is greater than a specified number.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					A real number
				]]></help>
      </parameter>
    </function>
    <function name="Cfusion_decrypt" returns="String">
      <help><![CDATA[
				Decrypts the given string, alias for function call decrypt(string,key,"cfmx_compat","hex")
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					string to decrypt
				]]></help>
      </parameter>
      <parameter name="key" required="false" type="string">
        <help><![CDATA[
					key to use for decryption
				]]></help>
      </parameter>
    </function>
    <function name="Cfusion_encrypt" returns="String">
      <help><![CDATA[
				Encrypts the given string, alias for function call encrypt(string,key,"cfmx_compat","hex")
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					string to encrypt
				]]></help>
      </parameter>
      <parameter name="key" required="false" type="string">
        <help><![CDATA[
					key to use for encryption
				]]></help>
      </parameter>
    </function>
    <function name="CharsetDecode" returns="void">
      <help><![CDATA[
				Converts as string to a binary representation.
			]]></help>
      <parameter name="encoded_binary" required="false" type="string">
        <help><![CDATA[
					A string containing data to encode in binary format.
				]]></help>
      </parameter>
      <parameter name="encoding" required="false" type="string">
        <help><![CDATA[
					A string specifying encoding of the input data.
				]]></help>
      </parameter>
    </function>
    <function name="CharsetEncode" returns="String">
      <help><![CDATA[
				Uses the specified encoding to convert binary data to a string.
			]]></help>
      <parameter name="binary" required="false" type="binary">
        <help><![CDATA[
					A variable containing binary data to decode into text.
				]]></help>
      </parameter>
      <parameter name="encoding" required="false" type="string">
        <help><![CDATA[
					The character encoding that was used to encode the string into binary format.
				]]></help>
      </parameter>
    </function>
    <function name="Chr" returns="String">
      <help><![CDATA[
				Returns the character represented by the ascii value
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					A value (a number in the range 0 - 65535, inclusive)
				]]></help>
      </parameter>
    </function>
    <function name="CJustify" returns="String">
      <help><![CDATA[
				Returns the given string justified to the center, padding out the words with spaces accordingly
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					May be empty. If it is a variable that is defined as a number, the function processes it as a string.
				]]></help>
      </parameter>
      <parameter name="length" required="false" type="number">
        <help><![CDATA[
					A positive integer. Length of field.
				]]></help>
      </parameter>
    </function>
    <function name="CollectionEach" returns="void">
      <help><![CDATA[
				call the given UDF/Closure with every entry (key/value) in the given collection.
			]]></help>
      <parameter name="collection" required="false" type="object">
        <help><![CDATA[
					collection to take values from
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					UDF/Closure that call with the entries from struct
				]]></help>
      </parameter>
    </function>
    <function name="CollectionEvery" returns="Boolean">
      <help><![CDATA[
				This function calls a given closure/function with every element in a given collection and returns true, if all of the closure calls returns true.
			]]></help>
      <parameter name="collection" required="false" type="object">
        <help><![CDATA[
					collection to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					function/closure that implements the following constructor [function(... depends on the given collection ...):boolean].
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="CollectionFilter" returns="void">
      <help><![CDATA[
				This function creates a new collection that returns all entries from an collection that match the given filter.
			]]></help>
      <parameter name="collection" required="false" type="object">
        <help><![CDATA[
					collection to filter entries from
				]]></help>
      </parameter>
      <parameter name="filter" required="false" type="function">
        <help><![CDATA[
					filter can be a function/closure that implements the following constructor [function(... depending on given collection ...):boolean].
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="CollectionMap" returns="void">
      <help><![CDATA[
				Calls the given closure with every element in the given collection. the function returns an array or struct (depending on the input) that contains all values returned by the closure.
			]]></help>
      <parameter name="collection" required="false" type="object">
        <help><![CDATA[
					collection to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					UDF/Closure that is called with every value in the collection
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="CollectionReduce" returns="void">
      <help><![CDATA[
				Iterates over every entry of the collection and calls the closure with every element. This function will reduce the array to a single value and will return the value.
			]]></help>
      <parameter name="collection" required="false" type="object">
        <help><![CDATA[
					collection to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					function/closure that implements the following constructor [function(... depending on the given collection ...):any].
				]]></help>
      </parameter>
      <parameter name="initialValue" required="false" type="object">
        <help><![CDATA[
					inital value passed as part of the first closure call
				]]></help>
      </parameter>
    </function>
    <function name="CollectionSome" returns="Boolean">
      <help><![CDATA[
				This function calls a given closure/function with every element in a given collection and returns true, if one of the closure calls returns true.
			]]></help>
      <parameter name="collection" required="false" type="object">
        <help><![CDATA[
					collection to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					function/closure that implements the following constructor [function(... depends on the given collection ...):boolean].
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="Compare" returns="Number">
      <help><![CDATA[
				Performs a case-sensitive comparison of two strings. Returns:
			]]></help>
      <parameter name="string1" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
      <parameter name="string2" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
    </function>
    <function name="CompareNoCase" returns="Number">
      <help><![CDATA[
				Performs a case-insensitive comparison of two strings. An indicator of the difference: A negative number, if string1 is less than string2 0, if string1 is equal to string2 A positive number, if string1 is greater than string2
			]]></help>
      <parameter name="string1" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
      <parameter name="string2" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
    </function>
    <function name="ComponentCacheClear" returns="void">
      <help><![CDATA[
				flush the component path cache
			]]></help>

    </function>
    <function name="ComponentCacheList" returns="Struct">
      <help><![CDATA[
				list elements in the component path cache
			]]></help>

    </function>
    <function name="ComponentInfo" returns="Struct">
      <help><![CDATA[
				this function is deprecated, use function getMetadata instead.
			]]></help>
      <parameter name="component" required="false" type="component">
        <help><![CDATA[
					component to return info for it
				]]></help>
      </parameter>
    </function>
    <function name="Compress" returns="Boolean">
      <help><![CDATA[
				Compress given source to different formats.
			]]></help>
      <parameter name="format" required="false" type="string">
        <help><![CDATA[
					Format to compress (bzip,gzip,tar,tbz (tar bzip),tgz (tar gzip) and zip)
				]]></help>
      </parameter>
      <parameter name="source" required="false" type="string">
        <help><![CDATA[
					source file or directory to compress
				]]></help>
      </parameter>
      <parameter name="target" required="false" type="string">
        <help><![CDATA[
					name of the target compressed file
				]]></help>
      </parameter>
      <parameter name="includeBaseFolder" required="false" type="boolean">
        <help><![CDATA[
					take the folder or only content of folder
				]]></help>
      </parameter>
      <parameter name="mode" required="false" type="string">
        <help><![CDATA[
					mode of the values
				]]></help>
      </parameter>
    </function>
    <function name="ContractPath" returns="String">
      <help><![CDATA[
				Does the opposite of <code>expandPath</code>. Tries to match a given absolute path to mappings in the environment and will return a path that is contracted by the shortest matched mapping. If there are no matches, Lucee returns the absolute path it was given.
			]]></help>
      <parameter name="path" required="false" type="string">
        <help><![CDATA[
					An absolute path.
				]]></help>
      </parameter>
      <parameter name="placeholder" required="false" type="boolean">
        <help><![CDATA[
					A boolean indicating whether Lucee placeholder names should be prefixed to the path.
				]]></help>
      </parameter>
    </function>
    <function name="Cos" returns="Number">
      <help><![CDATA[
				Calculates the cosine of an angle that is entered in radians. A number; the cosine of the angle.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					Angle, in radians, for which to calculate the cosine
				]]></help>
      </parameter>
    </function>
    <function name="CreateDate" returns="DateTime">
      <help><![CDATA[
				Creates a CFML date object from the given year, month and day.
			]]></help>
      <parameter name="year" required="false" type="number">
        <help><![CDATA[
					Integer in the range 0-9999. Integers in the range 0-29 are converted to 2000-2029. Integers in the range 30-99 are converted to 1930-1999. You cannot specify dates before AD 100.
				]]></help>
      </parameter>
      <parameter name="month" required="false" type="number">
        <help><![CDATA[
					Integer in the range 1-12
				]]></help>
      </parameter>
      <parameter name="day" required="false" type="number">
        <help><![CDATA[
					Integer in the range 1-31
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="CreateDateTime" returns="DateTime">
      <help><![CDATA[
				Creates a CFML date/time object from the given year, month, day, hour, minute and second.
			]]></help>
      <parameter name="year" required="false" type="number">
        <help><![CDATA[
					Integer in the range 0-9999. Integers in the range 0-29 are converted to 2000-2029. Integers in the range 30-99 are converted to 1930-1999. You cannot specify dates before AD 100.
				]]></help>
      </parameter>
      <parameter name="month" required="false" type="number">
        <help><![CDATA[
					Integer in the range 1-12
				]]></help>
      </parameter>
      <parameter name="day" required="false" type="number">
        <help><![CDATA[
					Integer in the range 1-31
				]]></help>
      </parameter>
      <parameter name="hour" required="false" type="number">
        <help><![CDATA[
					Integer in the range 0-23
				]]></help>
      </parameter>
      <parameter name="minute" required="false" type="number">
        <help><![CDATA[
					Integer in the range 0-59
				]]></help>
      </parameter>
      <parameter name="second" required="false" type="number">
        <help><![CDATA[
					Integer in the range 0-59
				]]></help>
      </parameter>
      <parameter name="millisecond" required="false" type="number">
        <help><![CDATA[
					Integer in the range 0-999
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="CreateDynamicProxy" returns="void">
      <help><![CDATA[
				Wrap the given component with a Java class that implements the given interfaces.
			]]></help>
      <parameter name="cfc" required="false" type="object">
        <help><![CDATA[
					component or component name
				]]></help>
      </parameter>
      <parameter name="interfaces" required="false" type="object">
        <help><![CDATA[
					Array or list of strings containing interface paths.
				]]></help>
      </parameter>
    </function>
    <function name="CreateGUID" returns="String">
      <help><![CDATA[
				A globally unique identifier or GUID is a special type of identifier used in software applications to provide an unique reference number.
			]]></help>

    </function>
    <function name="CreateObject" returns="void">
      <help><![CDATA[
				The CreateObject function takes different arguments depending on the value of the first argument:
			]]></help>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					one of the following:
				]]></help>
      </parameter>
      <parameter name="classname" required="false" type="string">
        <help><![CDATA[
					the usage of this argument depend on type defined with argument "type":
				]]></help>
      </parameter>
      <parameter name="context" required="false" type="object">
        <help><![CDATA[
					the usage of this argument depend on type defined with argument "type":
				]]></help>
      </parameter>
      <parameter name="delimiterOrVersion" required="false" type="object">
        <help><![CDATA[
					the usage of this argument depend on type defined with argument "type":
				]]></help>
      </parameter>
    </function>
    <function name="CreateODBCDate" returns="DateTime">
      <help><![CDATA[
				Creates an ODBC date object.
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					timezone to use
				]]></help>
      </parameter>
    </function>
    <function name="CreateODBCDateTime" returns="DateTime">
      <help><![CDATA[
				Creates an ODBC date-time object; for example, <code>{ts '2015-08-07 14:33:03'}</code>.
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
    </function>
    <function name="CreateODBCTime" returns="DateTime">
      <help><![CDATA[
				Creates an ODBC time object.
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
    </function>
    <function name="CreateTime" returns="DateTime">
      <help><![CDATA[
				Creates a CFML time object from the given hour, minute and second.
			]]></help>
      <parameter name="hour" required="false" type="number">
        <help><![CDATA[
					Number in the range 0-23
				]]></help>
      </parameter>
      <parameter name="minute" required="false" type="number">
        <help><![CDATA[
					Number in the range 0-59
				]]></help>
      </parameter>
      <parameter name="second" required="false" type="number">
        <help><![CDATA[
					Number in the range 0-59
				]]></help>
      </parameter>
      <parameter name="millisecond" required="false" type="number">
        <help><![CDATA[
					Number in the range 0-999
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="CreateTimeSpan" returns="timespan">
      <help><![CDATA[
				Creates a timespan object that defines a time period.
			]]></help>
      <parameter name="days" required="false" type="number">
        <help><![CDATA[
					number of days in time period
				]]></help>
      </parameter>
      <parameter name="hours" required="false" type="number">
        <help><![CDATA[
					number of hours in time period
				]]></help>
      </parameter>
      <parameter name="minutes" required="false" type="number">
        <help><![CDATA[
					number of minutes in time period
				]]></help>
      </parameter>
      <parameter name="seconds" required="false" type="number">
        <help><![CDATA[
					number of seconds in time period
				]]></help>
      </parameter>
      <parameter name="milliseconds" required="false" type="number">
        <help><![CDATA[
					number of milliseconds in time period
				]]></help>
      </parameter>
    </function>
    <function name="CreateUniqueId" returns="String">
      <help><![CDATA[
				Creates a Unique Identifier. Only unique for this instance, but shorter than an UUId.
			]]></help>

    </function>
    <function name="CreateUUID" returns="String">
      <help><![CDATA[
				Creates a Universally Unique Identifier (UUID).
			]]></help>

    </function>
    <function name="CSRFGenerateToken" returns="String">
      <help><![CDATA[
				Provides a random token and stores it in the session. You can also provide a specific key to store in the session.
			]]></help>
      <parameter name="key" required="false" type="string">
        <help><![CDATA[
					A random token is generated for the key provided.
				]]></help>
      </parameter>
      <parameter name="forceNew" required="false" type="boolean">
        <help><![CDATA[
					If set to true, a new token is generated every time the function is called.
				]]></help>
      </parameter>
    </function>
    <function name="CSRFVerifyToken" returns="Boolean">
      <help><![CDATA[
				Validates the given token against the same stored in the session for a specific key.
			]]></help>
      <parameter name="token" required="false" type="string">
        <help><![CDATA[
					Token that to be validated against the token stored in the session.
				]]></help>
      </parameter>
      <parameter name="key" required="false" type="string">
        <help><![CDATA[
					The key against which the token be searched.
				]]></help>
      </parameter>
    </function>
    <function name="CtCacheClear" returns="void">
      <help><![CDATA[
				flush the customtag path cache
			]]></help>

    </function>
    <function name="CtCacheList" returns="Struct">
      <help><![CDATA[
				list elements in the customtag path cache
			]]></help>

    </function>
    <function name="DatasourceFlushMetaCache" returns="Boolean">
      <help><![CDATA[
				Flush the meta data stored for a certain datasource used for stored procedures, this is only supported for Oracle datasources
			]]></help>
      <parameter name="datasourceName" required="false" type="string">
        <help><![CDATA[
					name of the datasource to flush, when not defined all caches are flushed
				]]></help>
      </parameter>
    </function>
    <function name="DateAdd" returns="DateTime">
      <help><![CDATA[
				Adds units of time to a date object.
			]]></help>
      <parameter name="datepart" required="false" type="string">
        <help><![CDATA[
					One of the following units:
				]]></help>
      </parameter>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					Number of units of datepart to add to date (positive, to get dates in the future; negative, to get dates in the past). Number must be an integer.
				]]></help>
      </parameter>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
    </function>
    <function name="DateCompare" returns="Number">
      <help><![CDATA[
				Compares two dates to a given optional resolution.
			]]></help>
      <parameter name="date1" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="date2" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="datepart" required="false" type="string">
        <help><![CDATA[
					Precision of the comparison:
				]]></help>
      </parameter>
    </function>
    <function name="DateConvert" returns="void">
      <help><![CDATA[
				Converts a date to the given locale.
			]]></help>

    </function>
    <function name="DateDiff" returns="Number">
      <help><![CDATA[
				Determines the integer number of units by which date1 is less than date2.
			]]></help>
      <parameter name="datepart" required="false" type="string">
        <help><![CDATA[
					The specific units in which to count:
				]]></help>
      </parameter>
      <parameter name="date1" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="date2" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
    </function>
    <function name="DateFormat" returns="String">
      <help><![CDATA[
				Formats a date object to a given string output.
			]]></help>
      <parameter name="date" required="false" type="any">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="mask" required="false" type="string">
        <help><![CDATA[
					Date formatting mask:
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="DatePart" returns="Number">
      <help><![CDATA[
				Extracts the given date part from the date object.
			]]></help>
      <parameter name="datepart" required="false" type="string">
        <help><![CDATA[
					Date part type:
				]]></help>
      </parameter>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="DateTimeFormat" returns="String">
      <help><![CDATA[
				Formats a date object to a given string output.
			]]></help>
      <parameter name="datetime" required="false" type="any">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="mask" required="false" type="string">
        <help><![CDATA[
					Date time formatting mask (case sensitive):
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="Day" returns="Number">
      <help><![CDATA[
				Determines the day of the month in a date object; the ordinal for the day of the month, ranging from 1 to 31.
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="DayOfWeek" returns="Number">
      <help><![CDATA[
				Returns the integer index of the day of the week for the given date. The index starts at 1 for <em>sunday</em> and continues up to 7 for <em>saturday</em>. i.e.
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="DayOfWeekAsString" returns="String">
      <help><![CDATA[
				Determines the day of the week as a string from 1-7.
			]]></help>
      <parameter name="day_of_week" required="false" type="number">
        <help><![CDATA[
					Integer, in the range 1 (Sunday) - 7 (Saturday).
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
    </function>
    <function name="DayOfWeekShortAsString" returns="String">
      <help><![CDATA[
				Returns the string representation of the given day index in short form.
			]]></help>
      <parameter name="day_of_week" required="false" type="number">
        <help><![CDATA[
					Integer, in the range 1 (Sunday) - 7 (Saturday).
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
    </function>
    <function name="DayOfYear" returns="Number">
      <help><![CDATA[
				Determines the day of the year, in a date.
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="DaysInMonth" returns="Number">
      <help><![CDATA[
				Determines the number of days in a month.
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="DaysInYear" returns="Number">
      <help><![CDATA[
				Determines the number of days in a year.
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					Dateobject
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="dbpoolclear" returns="Boolean">
      <help><![CDATA[
				clears all existing datasource connection
			]]></help>
      <parameter name="datasource" required="false" type="string">
        <help><![CDATA[
					specific datasource to clear, if not set all datasources get removed.
				]]></help>
      </parameter>
    </function>
    <function name="DE" returns="String">
      <help><![CDATA[
				Postpones evaluation of a string as an expression, when it is passed as a parameter to the IIf or Evaluate functions. Escapes any double quotation marks in the parameter and wraps the result in double quotation marks.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					String to evaluate, after delay
				]]></help>
      </parameter>
    </function>
    <function name="DecimalFormat" returns="String">
      <help><![CDATA[
				Converts a number to a decimal-formatted string.
			]]></help>
      <parameter name="number" required="false" type="any">
        <help><![CDATA[
					Number to format
				]]></help>
      </parameter>
    </function>
    <function name="DecodeForHtml" returns="String">
      <help><![CDATA[
				Decodes the given encoded string.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					string to decode
				]]></help>
      </parameter>
    </function>
    <function name="DecodeFromURL" returns="String">
      <help><![CDATA[
				Decodes a string that has been encoded in the URL using the encodeForURL. this function is deprecated, use function ESAPIDecode('url',...) instead.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					string to encode
				]]></help>
      </parameter>
    </function>
    <function name="DecrementValue" returns="Number">
      <help><![CDATA[
				this function is deprecated, use instead the -- operator;Decrements the current number by one
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					Number to decrement
				]]></help>
      </parameter>
    </function>
    <function name="Decrypt" returns="String">
      <help><![CDATA[
				Decrypts a string that is encrypted with the Encrypt function.
			]]></help>
      <parameter name="encrypted_string" required="false" type="string">
        <help><![CDATA[
					String to decrypt.
				]]></help>
      </parameter>
      <parameter name="key" required="false" type="string">
        <help><![CDATA[
					Key or seed used to encrypt the string.
				]]></help>
      </parameter>
      <parameter name="algorithm" required="false" type="string">
        <help><![CDATA[
					The algorithm to use to decrypt the string. Must be the same as the algorithm used to encrypt the string.
				]]></help>
      </parameter>
      <parameter name="encoding" required="false" type="string">
        <help><![CDATA[
					The binary encoding used to represent the data as a string. Must be the same as the algorithm used to encrypt the string.
				]]></help>
      </parameter>
      <parameter name="IVorSalt" required="false" type="any">
        <help><![CDATA[
					Initialization Vector for algorithms with Feedback Mode that is not ECB, or Salt for Password Based Encryption algorithms
				]]></help>
      </parameter>
      <parameter name="iterations" required="false" type="number">
        <help><![CDATA[
					number of Iterations for Password Based Encryption algorithms (ignored for all other algorithms). NIST recommends a minimum value of 1000.
				]]></help>
      </parameter>
    </function>
    <function name="DecryptBinary" returns="void">
      <help><![CDATA[
				Decrypts the given binary with the optional parameters
			]]></help>
      <parameter name="binaryData" required="false" type="any">
        <help><![CDATA[
					Binary data to decrypt.
				]]></help>
      </parameter>
      <parameter name="key" required="false" type="string">
        <help><![CDATA[
					Key or seed used to encrypt the string.
				]]></help>
      </parameter>
      <parameter name="algorithm" required="false" type="string">
        <help><![CDATA[
					The algorithm to use to decrypt the string. Must be the same as the algorithm used to encrypt the string.
				]]></help>
      </parameter>
      <parameter name="IVorSalt" required="false" type="any">
        <help><![CDATA[
					Initialization Vector for algorithms with Feedback Mode that is not ECB, or Salt for Password Based Encryption algorithms
				]]></help>
      </parameter>
      <parameter name="iterations" required="false" type="number">
        <help><![CDATA[
					number of Iterations for Password Based Encryption algorithms (ignored for all other algorithms). NIST recommends a minimum value of 1000.
				]]></help>
      </parameter>
    </function>
    <function name="DeleteClientVariable" returns="Boolean">
      <help><![CDATA[
				Removes the element represented by the key from the [client] scope
			]]></help>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					Name of a client variable to delete, surrounded by double-quotation marks
				]]></help>
      </parameter>
    </function>
    <function name="DeserializeJSON" returns="void">
      <help><![CDATA[
				Converts a JSON (JavaScript Object Notation) string data representation into CFML data, such as a struct or array.
			]]></help>
      <parameter name="JSONVar" required="false" type="string">
        <help><![CDATA[
					A string that contains a valid JSON construct, or variable that represents one.
				]]></help>
      </parameter>
      <parameter name="strictMapping" required="false" type="boolean">
        <help><![CDATA[
					A Boolean value that specifies whether to convert the JSON strictly
				]]></help>
      </parameter>
    </function>
    <function name="DirectoryCopy" returns="void">
      <help><![CDATA[
				Copies the contents of a directory to a destination directory.
			]]></help>
      <parameter name="source" required="false" type="string">
        <help><![CDATA[
					Pathname of directory from which you copy content.
				]]></help>
      </parameter>
      <parameter name="destination" required="false" type="string">
        <help><![CDATA[
					Path of the destination directory. If not an absolute path, it is relative to the source directory.
				]]></help>
      </parameter>
      <parameter name="recurse" required="false" type="boolean">
        <help><![CDATA[
					If true, copies the subdirectories, otherwise only the files in the source directory.
				]]></help>
      </parameter>
      <parameter name="filter" required="false" type="any">
        <help><![CDATA[
					Filter to be used to filter the data copied:
				]]></help>
      </parameter>
      <parameter name="createPath" required="false" type="boolean">
        <help><![CDATA[
					if set to false, expects all parent directories to exist, true (default) will generate necessary directories
				]]></help>
      </parameter>
    </function>
    <function name="DirectoryCreate" returns="void">
      <help><![CDATA[
				Creates new directory for specified path
			]]></help>
      <parameter name="path" required="false" type="string">
        <help><![CDATA[
					Absolute path of the directory to be created
				]]></help>
      </parameter>
      <parameter name="createPath" required="false" type="boolean">
        <help><![CDATA[
					Create parent directory when not exist
				]]></help>
      </parameter>
      <parameter name="ignoreExists" required="false" type="boolean">
        <help><![CDATA[
					Pass false (default) to throw an error if the directory already exists, or true to skip the create operation without an error
				]]></help>
      </parameter>
    </function>
    <function name="DirectoryDelete" returns="void">
      <help><![CDATA[
				Deltes directory for given path
			]]></help>
      <parameter name="path" required="false" type="string">
        <help><![CDATA[
					Absolute path of the directory to be deleted
				]]></help>
      </parameter>
      <parameter name="recurse" required="false" type="boolean">
        <help><![CDATA[
					delete content of the directory
				]]></help>
      </parameter>
    </function>
    <function name="DirectoryExists" returns="Boolean">
      <help><![CDATA[
				Determines whether a directory exists.
			]]></help>
      <parameter name="path" required="false" type="string">
        <help><![CDATA[
					An absolute path. Alternatively, you can specify IP address as in the following example: DirectoryExists("//12.3.123.123/c_drive/test");
				]]></help>
      </parameter>
      <parameter name="allowRealPath" required="false" type="object">
        <help><![CDATA[
					boolean that defines if relative paths are interpreted or not
				]]></help>
      </parameter>
    </function>
    <function name="DirectoryList" returns="void">
      <help><![CDATA[
				Lists the directory and returns the list of files under it as array or query
			]]></help>
      <parameter name="path" required="false" type="string">
        <help><![CDATA[
					The absolute path of the directory for which to list the contents. Alternatively, you can specify IP address as in the following example: DirectoryList("//12.3.123.123/c_drive/test");.
				]]></help>
      </parameter>
      <parameter name="recurse" required="false" type="boolean">
        <help><![CDATA[
					Whether Lucee performs the action on subdirectories: If true, contents of all subdirectories are also listed.
				]]></help>
      </parameter>
      <parameter name="listInfo" required="false" type="string">
        <help><![CDATA[
					name: returns an array of names of files and directories. path: returns an array of paths of files and directories. query: returns a query.
				]]></help>
      </parameter>
      <parameter name="filter" required="false" type="any">
        <help><![CDATA[
					Filter to be used to filter the results:
				]]></help>
      </parameter>
      <parameter name="sort" required="false" type="string">
        <help><![CDATA[
					Query columns by which to sort a directory listing. Delimited list of columns from query output. To qualify a column, use one of the following values: asc: ascending (a to z) sort order. dec: descending (z to a) sort order.
				]]></help>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					type of the result returned:
				]]></help>
      </parameter>
    </function>
    <function name="DirectoryRename" returns="void">
      <help><![CDATA[
				Renames given directory
			]]></help>
      <parameter name="oldPath" required="false" type="string">
        <help><![CDATA[
					Absolute path of the directory to be renamed
				]]></help>
      </parameter>
      <parameter name="newPath" required="false" type="string">
        <help><![CDATA[
					new name for the directory
				]]></help>
      </parameter>
      <parameter name="createPath" required="false" type="boolean">
        <help><![CDATA[
					if set to false, expects all parent directories to exist, true (default) will generate necessary directories
				]]></help>
      </parameter>
    </function>
    <function name="DollarFormat" returns="String">
      <help><![CDATA[
				Formats a string in U.S. format. (For other currencies, use LSCurrencyFormat)
			]]></help>
      <parameter name="number" required="false" type="string">
        <help><![CDATA[
					Number to format
				]]></help>
      </parameter>
    </function>
    <function name="Dump" returns="void">
      <help><![CDATA[
				Outputs the elements, variables and values of most kinds of CFML objects. Useful for debugging. You can display the contents of simple and complex variables, objects, components, user-defined functions, and other elements.
			]]></help>
      <parameter name="var" required="false" type="object">
        <help><![CDATA[
					Variable to display.
				]]></help>
      </parameter>
      <parameter name="expand" required="false" type="boolean">
        <help><![CDATA[
					expands views
				]]></help>
      </parameter>
      <parameter name="format" required="false" type="string">
        <help><![CDATA[
					specify the output format of the dump, the following formats are supported:
				]]></help>
      </parameter>
      <parameter name="hide" required="false" type="string">
        <help><![CDATA[
					hide column or keys.
				]]></help>
      </parameter>
      <parameter name="keys" required="false" type="numeric">
        <help><![CDATA[
					For a structure, number of keys to display.
				]]></help>
      </parameter>
      <parameter name="label" required="false" type="string">
        <help><![CDATA[
					header for the dump output.
				]]></help>
      </parameter>
      <parameter name="metainfo" required="false" type="boolean">
        <help><![CDATA[
					Includes information about the query in the cfdump results.
				]]></help>
      </parameter>
      <parameter name="output" required="false" type="string">
        <help><![CDATA[
					Where to send the results:
				]]></help>
      </parameter>
      <parameter name="show" required="false" type="string">
        <help><![CDATA[
					show column or keys.
				]]></help>
      </parameter>
      <parameter name="showUDFs" required="false" type="boolean">
        <help><![CDATA[
					show UDFs in cfdump output.
				]]></help>
      </parameter>
      <parameter name="top" required="false" type="numeric">
        <help><![CDATA[
					The number of rows to display.
				]]></help>
      </parameter>
      <parameter name="abort" required="false" type="boolean">
        <help><![CDATA[
					stops further processing of the request.
				]]></help>
      </parameter>
      <parameter name="eval" required="false" type="string">
        <help><![CDATA[
					name of the variable to display, also used as label, when no label defined.
				]]></help>
      </parameter>
    </function>
    <function name="Duplicate" returns="void">
      <help><![CDATA[
				Returns a new duplicated version of the given object, removing all references to the old one
			]]></help>
      <parameter name="object" required="false" type="any">
        <help><![CDATA[
					Name of a variable to duplicate
				]]></help>
      </parameter>
      <parameter name="deepcopy" required="false" type="boolean">
        <help><![CDATA[
					If set to true (default) the child elements are also cloned. If false, child elements retain a reference to their corresponding element in the original object. Note: deeply cloned elements that are not native Lucee objects (i.e. Java objects) may change data type when they can be converted to a native CFML object.
				]]></help>
      </parameter>
    </function>
    <function name="Each" returns="void">
      <help><![CDATA[
				call the given UDF/Closure with every entry (key/value) in the given collection.
			]]></help>
      <parameter name="collection" required="false" type="object">
        <help><![CDATA[
					collection to take values from
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					UDF/Closure that call with the entries from struct
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="Echo" returns="Boolean">
      <help><![CDATA[
				Writes the given string to the main response buffer regardless of conditions established by the <a href="/reference/tags/setting.html">&lt;cfsetting&gt;</a> tag.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string to write to the buffer.
				]]></help>
      </parameter>
    </function>
    <function name="Empty" returns="Boolean">
      <help><![CDATA[
				This function is deprecated, use instead <code>IsEmpty</code>. This function returns <code>true</code> if a value exists and is not "empty". The following things are considered to be empty:
			]]></help>
      <parameter name="variable" required="false" type="variablestring">
        <help><![CDATA[
					Alias: variableName, object
				]]></help>
      </parameter>
    </function>
    <function name="EncodeForCSS" returns="String">
      <help><![CDATA[
				Encodes the given string for safe output in CSS to stop Cross Site Scripting attacks. this function is deprecated, use function ESAPIEncode('css',...) instead.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					string to encode
				]]></help>
      </parameter>
      <parameter name="canonicalize" required="false" type="boolean">
        <help><![CDATA[
					If set to true, canonicalization happens before encoding. If set to false, the given input string will just be encoded. The default value for canonicalize is false.
				]]></help>
      </parameter>
    </function>
    <function name="EncodeForDN" returns="String">
      <help><![CDATA[
				Encodes the given string for safe output in LDAP Distinguished Names. this function is deprecated, use function ESAPIEncode('dn',...) instead.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					string to encode
				]]></help>
      </parameter>
      <parameter name="canonicalize" required="false" type="boolean">
        <help><![CDATA[
					If set to true, canonicalization happens before encoding. If set to false, the given input string will just be encoded. The default value for canonicalize is false. When this parameter is not specified, canonicalization will not happen. By default, when canonicalization is performed, both mixed and multiple encodings will be allowed. To use any other combinations you should canonicalize using canonicalize method and then do encoding.
				]]></help>
      </parameter>
    </function>
    <function name="EncodeForHTML" returns="String">
      <help><![CDATA[
				Encodes the given string for safe output in HTML to stop Cross Site Scripting attacks.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					string to encode
				]]></help>
      </parameter>
      <parameter name="canonicalize" required="false" type="boolean">
        <help><![CDATA[
					If set to true, canonicalization happens before encoding.
				]]></help>
      </parameter>
    </function>
    <function name="EncodeForHTMLAttribute" returns="String">
      <help><![CDATA[
				Encodes the given string for safe output in HTML to stop Cross Site Scripting attacks. this function is deprecated, use function ESAPIEncode('html_attr',...) instead.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					string to encode
				]]></help>
      </parameter>
      <parameter name="canonicalize" required="false" type="boolean">
        <help><![CDATA[
					If set to true, canonicalization happens before encoding. If set to false, the given input string will just be encoded. The default value for canonicalize is false. When this parameter is not specified, canonicalization will not happen. By default, when canonicalization is performed, both mixed and multiple encodings will be allowed. To use any other combinations you should canonicalize using canonicalize method and then do encoding.
				]]></help>
      </parameter>
    </function>
    <function name="EncodeForJavaScript" returns="String">
      <help><![CDATA[
				Encodes the given string for safe output in JavaScript to stop Cross Site Scripting attacks. this function is deprecated, use function ESAPIEncode('javascript',...) instead.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					string to encode
				]]></help>
      </parameter>
      <parameter name="canonicalize" required="false" type="boolean">
        <help><![CDATA[
					If set to true, canonicalization happens before encoding. If set to false, the given input string will just be encoded. The default value for canonicalize is false. When this parameter is not specified, canonicalization will not happen. By default, when canonicalization is performed, both mixed and multiple encodings will be allowed. To use any other combinations you should canonicalize using canonicalize method and then do encoding.
				]]></help>
      </parameter>
    </function>
    <function name="EncodeForLDAP" returns="String">
      <help><![CDATA[
				Encodes the given string for safe output in LDAP queries. this function is deprecated, use function ESAPIEncode('ldap',...) instead.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					string to encode
				]]></help>
      </parameter>
      <parameter name="canonicalize" required="false" type="boolean">
        <help><![CDATA[
					If set to true, canonicalization happens before encoding. If set to false, the given input string will just be encoded. The default value for canonicalize is false. When this parameter is not specified, canonicalization will not happen. By default, when canonicalization is performed, both mixed and multiple encodings will be allowed. To use any other combinations you should canonicalize using canonicalize method and then do encoding.
				]]></help>
      </parameter>
    </function>
    <function name="EncodeForURL" returns="String">
      <help><![CDATA[
				Encodes the given string for safe output in an URL.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					string to encode
				]]></help>
      </parameter>
      <parameter name="canonicalize" required="false" type="boolean">
        <help><![CDATA[
					If set to true, canonicalization happens before encoding. If set to false, the given input string will just be encoded. The default value for canonicalize is false. When this parameter is not specified, canonicalization will not happen. By default, when canonicalization is performed, both mixed and multiple encodings will be allowed. To use any other combinations you should canonicalize using canonicalize method and then do encoding.
				]]></help>
      </parameter>
    </function>
    <function name="EncodeForXML" returns="String">
      <help><![CDATA[
				Encodes the given string for safe output in XML to stop Cross Site Scripting attacks. this function is deprecated, use function ESAPIEncode('xml',...) instead.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					string to encode
				]]></help>
      </parameter>
      <parameter name="canonicalize" required="false" type="boolean">
        <help><![CDATA[
					If set to true, canonicalization happens before encoding. If set to false, the given input string will just be encoded. The default value for canonicalize is false. When this parameter is not specified, canonicalization will not happen. By default, when canonicalization is performed, both mixed and multiple encodings will be allowed. To use any other combinations you should canonicalize using canonicalize method and then do encoding.
				]]></help>
      </parameter>
    </function>
    <function name="EncodeForXMLAttribute" returns="String">
      <help><![CDATA[
				Encodes the given string for safe output in XMLAttribute to stop Cross Site Scripting attacks. this function is deprecated, use function ESAPIEncode('xml_attr',...) instead.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					string to encode
				]]></help>
      </parameter>
      <parameter name="canonicalize" required="false" type="boolean">
        <help><![CDATA[
					If set to true, canonicalization happens before encoding. If set to false, the given input string will just be encoded. The default value for canonicalize is false. When this parameter is not specified, canonicalization will not happen. By default, when canonicalization is performed, both mixed and multiple encodings will be allowed. To use any other combinations you should canonicalize using canonicalize method and then do encoding.
				]]></help>
      </parameter>
    </function>
    <function name="EncodeForXPath" returns="String">
      <help><![CDATA[
				Encodes the given string for safe use in an XPath Query. this function is deprecated, use function ESAPIEncode('xpath',...) instead.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					string to encode
				]]></help>
      </parameter>
      <parameter name="canonicalize" required="false" type="boolean">
        <help><![CDATA[
					If set to true, canonicalization happens before encoding. If set to false, the given input string will just be encoded. The default value for canonicalize is false. When this parameter is not specified, canonicalization will not happen. By default, when canonicalization is performed, both mixed and multiple encodings will be allowed. To use any other combinations you should canonicalize using canonicalize method and then do encoding.
				]]></help>
      </parameter>
    </function>
    <function name="Encrypt" returns="String">
      <help><![CDATA[
				Encrypts a string. Uses a symmetric key-based algorithm, in which the same key is used to encrypt and decrypt a string.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					String to encrypt.
				]]></help>
      </parameter>
      <parameter name="key" required="false" type="string">
        <help><![CDATA[
					Key or seed used to encrypt the string.
				]]></help>
      </parameter>
      <parameter name="algorithm" required="false" type="string">
        <help><![CDATA[
					The algorithm to use to decrypt the string. Must be the same as the algorithm used to encrypt the string.
				]]></help>
      </parameter>
      <parameter name="encoding" required="false" type="string">
        <help><![CDATA[
					The binary encoding used to represent the data as a string. Must be the same as the algorithm used to encrypt the string.
				]]></help>
      </parameter>
      <parameter name="IVorSalt" required="false" type="any">
        <help><![CDATA[
					Initialization Vector for algorithms with Feedback Mode that is not ECB, or Salt for Password Based Encryption algorithms
				]]></help>
      </parameter>
      <parameter name="iterations" required="false" type="number">
        <help><![CDATA[
					number of Iterations for Password Based Encryption algorithms (ignored for all other algorithms). NIST recommends a minimum value of 1000.
				]]></help>
      </parameter>
    </function>
    <function name="EncryptBinary" returns="void">
      <help><![CDATA[
				Encrypts binary data using a specific algorithm and encoding method.
			]]></help>
      <parameter name="bytes" required="false" type="any">
        <help><![CDATA[
					Binary data to encrypt.
				]]></help>
      </parameter>
      <parameter name="key" required="false" type="string">
        <help><![CDATA[
					Key or seed used to encrypt the string.
				]]></help>
      </parameter>
      <parameter name="algorithm" required="false" type="string">
        <help><![CDATA[
					The algorithm to use to decrypt the string. Must be the same as the algorithm used to encrypt the string.
				]]></help>
      </parameter>
      <parameter name="IVorSalt" required="false" type="any">
        <help><![CDATA[
					Initialization Vector for algorithms with Feedback Mode that is not ECB, or Salt for Password Based Encryption algorithms
				]]></help>
      </parameter>
      <parameter name="iterations" required="false" type="number">
        <help><![CDATA[
					number of Iterations for Password Based Encryption algorithms (ignored for all other algorithms). NIST recommends a minimum value of 1000.
				]]></help>
      </parameter>
    </function>
    <function name="EntityDelete" returns="void">
      <help><![CDATA[
				Deletes the record from the database for the specified entity. EntityDelete(entity)
			]]></help>
      <parameter name="name" required="false" type="object">
        <help><![CDATA[
					Name of the entity being deleted.
				]]></help>
      </parameter>
    </function>
    <function name="EntityLoad" returns="void">
      <help><![CDATA[
				Loads and returns an array of entities of the specified entityname.
			]]></help>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					Name of the entity to be loaded.
				]]></help>
      </parameter>
      <parameter name="idOrFilter" required="false" type="any">
        <help><![CDATA[
					The primary key value of the entity that must be loaded or Key-value pair (Struct) of property names and values.
				]]></help>
      </parameter>
      <parameter name="uniqueOrOrder" required="false" type="any">
        <help><![CDATA[
					when the second argument is an id then this argument defines the boolean "unique" otherwise it defines the order.
				]]></help>
      </parameter>
      <parameter name="options" required="false" type="any">
        <help><![CDATA[
					The following options to customize the output (only used when second argument is "id"):
				]]></help>
      </parameter>
    </function>
    <function name="EntityLoadByExample" returns="void">
      <help><![CDATA[
				Loads and returns an array of objects that match the sample entity.
			]]></help>
      <parameter name="sampleEntity" required="false" type="object">
        <help><![CDATA[
					Name of the sample entity that is used to match and filter similar entities to load.
				]]></help>
      </parameter>
      <parameter name="unique" required="false" type="boolean">
        <help><![CDATA[
					If unique is set to true, then the entity is returned.
				]]></help>
      </parameter>
    </function>
    <function name="EntityLoadByPK" returns="void">
      <help><![CDATA[
				Loads and returns an array of objects for given primary key.
			]]></help>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					Name of the entity to be loaded.
				]]></help>
      </parameter>
      <parameter name="id" required="false" type="string">
        <help><![CDATA[
					The primary key value of the entity that must be loaded
				]]></help>
      </parameter>
      <parameter name="unique" required="false" type="boolean">
        <help><![CDATA[
					If unique is set to true, then the entity is returned. If you are sure that only one record exists that matches this filtercriteria, then you can specify unique=true, so that a single entity is returned instead of an array. If you set unique=true and multiple records are returned, then an exception occurs.
				]]></help>
      </parameter>
    </function>
    <function name="EntityMerge" returns="void">
      <help><![CDATA[
				Attaches given enity to current ORM session
			]]></help>
      <parameter name="entity" required="false" type="any">
        <help><![CDATA[
					The entity that must be attached to the ORM session.
				]]></help>
      </parameter>
    </function>
    <function name="EntityNameArray" returns="Array">
      <help><![CDATA[
				return all loaded entities as array
			]]></help>

    </function>
    <function name="EntityNameList" returns="String">
      <help><![CDATA[
				return all loaded entities as string list
			]]></help>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					delimter used for the list
				]]></help>
      </parameter>
    </function>
    <function name="EntityNew" returns="void">
      <help><![CDATA[
				Creates a new instance of the persistent CFC with the entity name that you provide.
			]]></help>
      <parameter name="entityName" required="false" type="string">
        <help><![CDATA[
					Name of the instance being created.
				]]></help>
      </parameter>
      <parameter name="properties" required="false" type="struct">
        <help><![CDATA[
					a struct containing data to populate the entity properties.
				]]></help>
      </parameter>
    </function>
    <function name="EntityReload" returns="void">
      <help><![CDATA[
				Reloads data for an entity that is already loaded.
			]]></help>
      <parameter name="entity" required="false" type="object">
        <help><![CDATA[
					name of the entity
				]]></help>
      </parameter>
    </function>
    <function name="EntitySave" returns="void">
      <help><![CDATA[
				Saves or updates data of the entity and all related entities to the database.
			]]></help>
      <parameter name="entity" required="false" type="object">
        <help><![CDATA[
					Name of the entity that must be saved in the database.
				]]></help>
      </parameter>
      <parameter name="forceInsert" required="false" type="boolean">
        <help><![CDATA[
					If true, then Lucee always tries to insert the entity as a new record.
				]]></help>
      </parameter>
    </function>
    <function name="EntityToQuery" returns="Query">
      <help><![CDATA[
				Converts the input entity object or the input array of entity objects to a query object.
			]]></help>
      <parameter name="entity" required="false" type="object">
        <help><![CDATA[
					entity or array of entities
				]]></help>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					name of the entities
				]]></help>
      </parameter>
    </function>
    <function name="ESAPIDecode" returns="String">
      <help><![CDATA[
				Decodes a string that has been encoded with ESAPIEncode.
			]]></help>
      <parameter name="decodeFrom" required="false" type="string">
        <help><![CDATA[
					given value is encoded as:
				]]></help>
      </parameter>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					string to encode
				]]></help>
      </parameter>
    </function>
    <function name="ESAPIEncode" returns="String">
      <help><![CDATA[
				Encodes the given string for safe output to stop Cross Site Scripting attacks.
			]]></help>
      <parameter name="encodeFor" required="false" type="string">
        <help><![CDATA[
					encode for what, valid values are:
				]]></help>
      </parameter>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					string to encode
				]]></help>
      </parameter>
      <parameter name="canonicalize" required="false" type="boolean">
        <help><![CDATA[
					If set to true, canonicalization happens before encoding. If set to false, the given input string will just be encoded. The default value for canonicalize is false.
				]]></help>
      </parameter>
    </function>
    <function name="Evaluate" returns="void">
      <help><![CDATA[
				Evaluates one or more string expressions, dynamically, from left to right. (The results of an evaluation on the left can have meaning in an expression to the right.) Returns the result of evaluating the rightmost expression.
			]]></help>

    </function>
    <function name="Exp" returns="Number">
      <help><![CDATA[
				Calculates the exponent whose base is e that represents number.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					Exponent to apply to the base e
				]]></help>
      </parameter>
    </function>
    <function name="ExpandPath" returns="String">
      <help><![CDATA[
				Creates an absolute, platform-appropriate path that is equivalent to the value of relative_path, appended to the base path.
			]]></help>
      <parameter name="relative_path" required="false" type="string">
        <help><![CDATA[
					Relative or absolute directory reference or filename, within the current directory, (.\ and ..\) to convert to an absolute path.
				]]></help>
      </parameter>
    </function>
    <function name="Extract" returns="Boolean">
      <help><![CDATA[
				extract data out of a compressed file
			]]></help>
      <parameter name="format" required="false" type="string">
        <help><![CDATA[
					Format to extract (bzip,gzip,tar,tbz (tar bzip),tgz (tar gzip) and zip)
				]]></help>
      </parameter>
      <parameter name="source" required="false" type="string">
        <help><![CDATA[
					source file or directory with zip files to extract
				]]></help>
      </parameter>
      <parameter name="target" required="false" type="string">
        <help><![CDATA[
					name of the target directory
				]]></help>
      </parameter>
    </function>
    <function name="FileAppend" returns="void">
      <help><![CDATA[
				appends the entire content to the specified file.
			]]></help>
      <parameter name="file" required="false" type="string">
        <help><![CDATA[
					file path
				]]></help>
      </parameter>
      <parameter name="data" required="false" type="any">
        <help><![CDATA[
					data to append to the file
				]]></help>
      </parameter>
      <parameter name="charset" required="false" type="string">
        <help><![CDATA[
					The character encoding in which the file contents is encoded.
				]]></help>
      </parameter>
    </function>
    <function name="FileClose" returns="void">
      <help><![CDATA[
				Closes an file that is open.
			]]></help>
      <parameter name="file" required="false" type="any">
        <help><![CDATA[
					The file to close.
				]]></help>
      </parameter>
    </function>
    <function name="FileCopy" returns="void">
      <help><![CDATA[
				Copies the specified on-disk or in-memory source file to the specified destination file.
			]]></help>
      <parameter name="source" required="false" type="any">
        <help><![CDATA[
					path to copy.
				]]></help>
      </parameter>
      <parameter name="destination" required="false" type="any">
        <help><![CDATA[
					Pathname of the destination file.
				]]></help>
      </parameter>
    </function>
    <function name="FileDelete" returns="void">
      <help><![CDATA[
				Deletes the specified file on the server.
			]]></help>
      <parameter name="file" required="false" type="any">
        <help><![CDATA[
					file to delete.
				]]></help>
      </parameter>
    </function>
    <function name="FileExists" returns="Boolean">
      <help><![CDATA[
				Determines whether a file exists
			]]></help>
      <parameter name="source" required="false" type="any">
        <help><![CDATA[
					a file path.
				]]></help>
      </parameter>
      <parameter name="allowRealPath" required="false" type="object">
        <help><![CDATA[
					boolean that defines if relative paths are interpreted or not
				]]></help>
      </parameter>
    </function>
    <function name="FileGetMimeType" returns="String">
      <help><![CDATA[
				Returns the mimetype of the given file
			]]></help>
      <parameter name="file" required="false" type="any">
        <help><![CDATA[
					file path or object
				]]></help>
      </parameter>
      <parameter name="strict" required="false" type="boolean">
        <help><![CDATA[
					if set to true, Lucee checks the header of the file, when set to false, Lucee only checks the extension.
				]]></help>
      </parameter>
    </function>
    <function name="FileInfo" returns="Struct">
      <help><![CDATA[
				Returns detailed info about the given file.
			]]></help>
      <parameter name="file" required="false" type="string">
        <help><![CDATA[
					file path
				]]></help>
      </parameter>
    </function>
    <function name="FileIsEOF" returns="Boolean">
      <help><![CDATA[
				Determines whether Lucee has reached the end of the file while reading it.
			]]></help>
      <parameter name="file" required="false" type="any">
        <help><![CDATA[
					The file object.
				]]></help>
      </parameter>
    </function>
    <function name="FileMove" returns="void">
      <help><![CDATA[
				Moves file from source to destination
			]]></help>
      <parameter name="source" required="false" type="any">
        <help><![CDATA[
					file to move.
				]]></help>
      </parameter>
      <parameter name="destination" required="false" type="any">
        <help><![CDATA[
					Pathname of the destination directory or file. If not an absolute path, it is relative to the source directory.
				]]></help>
      </parameter>
    </function>
    <function name="FileOpen" returns="void">
      <help><![CDATA[
				Opens an file to read, write, or append.
			]]></help>
      <parameter name="file" required="false" type="string">
        <help><![CDATA[
					a file path
				]]></help>
      </parameter>
      <parameter name="mode" required="false" type="string">
        <help><![CDATA[
					Action to perform on the file, including the following:
				]]></help>
      </parameter>
      <parameter name="charset" required="false" type="string">
        <help><![CDATA[
					The character set of the file.
				]]></help>
      </parameter>
      <parameter name="seekable" required="false" type="boolean">
        <help><![CDATA[
					can be used for function fileseek
				]]></help>
      </parameter>
    </function>
    <function name="FileRead" returns="void">
      <help><![CDATA[
				Reads an on-disk or in-memory text file or a file object created with the FileOpen function.
			]]></help>
      <parameter name="file" required="false" type="any">
        <help><![CDATA[
					file path or object
				]]></help>
      </parameter>
      <parameter name="charsetOrBufferSize" required="false" type="any">
        <help><![CDATA[
					the charset used or the size of the buffer.
				]]></help>
      </parameter>
    </function>
    <function name="FileReadBinary" returns="void">
      <help><![CDATA[
				Reads an on-disk or in-memory binary file (such as an executable or image file) on the server, into a binary object
			]]></help>
      <parameter name="file" required="false" type="any">
        <help><![CDATA[
					file path
				]]></help>
      </parameter>
    </function>
    <function name="FileReadLine" returns="String">
      <help><![CDATA[
				Reads a line from an file.
			]]></help>
      <parameter name="file" required="false" type="any">
        <help><![CDATA[
					The file object
				]]></help>
      </parameter>
    </function>
    <function name="FileSeek" returns="void">
      <help><![CDATA[
				Shifts the file pointer to the given position. The file must be opened with seekable option
			]]></help>
      <parameter name="file" required="false" type="any">
        <help><![CDATA[
					The file object.
				]]></help>
      </parameter>
      <parameter name="pos" required="false" type="number">
        <help><![CDATA[
					The position in a file within a stream where the following read and write operation must occur.
				]]></help>
      </parameter>
    </function>
    <function name="FileSetAccessMode" returns="void">
      <help><![CDATA[
				Sets the attributes of an on-disk file on UNIX or Linux. This function does not work with in-memory files.
			]]></help>
      <parameter name="file" required="false" type="any">
        <help><![CDATA[
					file path
				]]></help>
      </parameter>
      <parameter name="mode" required="false" type="string">
        <help><![CDATA[
					A three-digit value, in which each digit specifies the file access for individuals and groups:
				]]></help>
      </parameter>
    </function>
    <function name="FileSetAttribute" returns="void">
      <help><![CDATA[
				For the given path, sets the file attributes.
			]]></help>
      <parameter name="file" required="false" type="any">
        <help><![CDATA[
					file path
				]]></help>
      </parameter>
      <parameter name="attribute" required="false" type="string">
        <help><![CDATA[
					One of the following:
				]]></help>
      </parameter>
    </function>
    <function name="FileSetLastModified" returns="void">
      <help><![CDATA[
				For the given file, set the last modification date
			]]></help>
      <parameter name="file" required="false" type="any">
        <help><![CDATA[
					file path
				]]></help>
      </parameter>
      <parameter name="date" required="false" type="date">
        <help><![CDATA[
					last modified date
				]]></help>
      </parameter>
    </function>
    <function name="FileSkipBytes" returns="void">
      <help><![CDATA[
				Shifts the file pointer by the given number of bytes.
			]]></help>
      <parameter name="file" required="false" type="any">
        <help><![CDATA[
					The file object.
				]]></help>
      </parameter>
      <parameter name="len" required="false" type="number">
        <help><![CDATA[
					The number of bytes that must be skipped before the next file operation.
				]]></help>
      </parameter>
    </function>
    <function name="FileTouch" returns="void">
      <help><![CDATA[
				Touches given file, creates the file if not already exists.
			]]></help>
      <parameter name="file" required="false" type="any">
        <help><![CDATA[
					file to touch.
				]]></help>
      </parameter>
      <parameter name="createPath" required="false" type="boolean">
        <help><![CDATA[
					if set to false, expects all parent directories to exist, true (default) will generate necessary directories
				]]></help>
      </parameter>
    </function>
    <function name="FileUpload" returns="Struct">
      <help><![CDATA[
				Uploads file to a directory on the server.
			]]></help>
      <parameter name="destination" required="false" type="string">
        <help><![CDATA[
					Absolute pathname of directory or file on web server.
				]]></help>
      </parameter>
      <parameter name="fileField" required="false" type="string">
        <help><![CDATA[
					Name of form field used to select the file.
				]]></help>
      </parameter>
      <parameter name="accept" required="false" type="string">
        <help><![CDATA[
					Limits the MIME types to accept. Comma-delimited list. For example, to permit JPG and Microsoft Word file uploads: accept = "image/jpg, application/msword" The browser uses file extension to determine file type.
				]]></help>
      </parameter>
      <parameter name="nameConflict" required="false" type="string">
        <help><![CDATA[
					Action to take if filename is the same as that of a file in the directory.
				]]></help>
      </parameter>
      <parameter name="mode" required="false" type="string">
        <help><![CDATA[
					Applies only to Solaris and HP-UX. Permissions. Octal values of UNIX chmod command. Assigned to owner, group, and other, respectively.
				]]></help>
      </parameter>
      <parameter name="attributes" required="false" type="string">
        <help><![CDATA[
					One attribute (Windows) or a comma-delimited list of attributes (other platforms) to set on the file. If omitted, the file's attributes are maintained.
				]]></help>
      </parameter>
      <parameter name="acl" required="false" type="object">
        <help><![CDATA[
					only used for S3 Resources
				]]></help>
      </parameter>
    </function>
    <function name="FileUploadAll" returns="Array">
      <help><![CDATA[
				Saves files from all the form fields in a request to a specified directory/resource.
			]]></help>
      <parameter name="destination" required="false" type="string">
        <help><![CDATA[
					Absolute pathname of directory or file on web server.
				]]></help>
      </parameter>
      <parameter name="accept" required="false" type="string">
        <help><![CDATA[
					Limits the MIME types to accept. Comma-delimited list. For example, to permit JPG and Microsoft Word file uploads: accept = "image/jpg, application/msword" The browser uses file extension to determine file type.
				]]></help>
      </parameter>
      <parameter name="nameConflict" required="false" type="string">
        <help><![CDATA[
					Action to take if filename is the same as that of a file in the directory.
				]]></help>
      </parameter>
      <parameter name="strict" required="false" type="string">
        <help><![CDATA[
					Applies only to Solaris and HP-UX. Permissions. Octal values of UNIX chmod command. Assigned to owner, group, and other, respectively.
				]]></help>
      </parameter>
      <parameter name="attributes" required="false" type="string">
        <help><![CDATA[
					One attribute (Windows) or a comma-delimited list of attributes (other platforms) to set on the file. If omitted, the file's attributes are maintained.
				]]></help>
      </parameter>
      <parameter name="acl" required="false" type="object">
        <help><![CDATA[
					only used for S3 Resources
				]]></help>
      </parameter>
    </function>
    <function name="FileWrite" returns="void">
      <help><![CDATA[
				If you specify a file path, writes the entire content to the specified file. If you specify a file object, writes text or binary data to the file object.
			]]></help>
      <parameter name="file" required="false" type="any">
        <help><![CDATA[
					file path or object
				]]></help>
      </parameter>
      <parameter name="data" required="false" type="any">
        <help><![CDATA[
					data to write to the file
				]]></help>
      </parameter>
      <parameter name="charset" required="false" type="string">
        <help><![CDATA[
					The character encoding in which the file contents is encoded.
				]]></help>
      </parameter>
    </function>
    <function name="FileWriteLine" returns="void">
      <help><![CDATA[
				Opens up the file (or uses the existing file object) and appends the given line of text
			]]></help>
      <parameter name="file" required="false" type="any">
        <help><![CDATA[
					the file object to which to write the line.
				]]></help>
      </parameter>
      <parameter name="data" required="false" type="string">
        <help><![CDATA[
					data to add to the file object.
				]]></help>
      </parameter>
    </function>
    <function name="Find" returns="Number">
      <help><![CDATA[
				Finds the first occurrence of a substring in a string, from a specified start position. The search is case-sensitive.
			]]></help>
      <parameter name="substring" required="false" type="string">
        <help><![CDATA[
					String for which to search.
				]]></help>
      </parameter>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					String in which to search.
				]]></help>
      </parameter>
      <parameter name="start" required="false" type="number">
        <help><![CDATA[
					Start position of search.
				]]></help>
      </parameter>
    </function>
    <function name="FindNoCase" returns="Number">
      <help><![CDATA[
				Finds the first occurrence of a substring in a string, from a specified start position. If substring is not in string, returns zero. The search is case-insensitive.
			]]></help>
      <parameter name="substring" required="false" type="string">
        <help><![CDATA[
					String for which to search.
				]]></help>
      </parameter>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					String in which to search.
				]]></help>
      </parameter>
      <parameter name="start" required="false" type="number">
        <help><![CDATA[
					Start position of search.
				]]></help>
      </parameter>
    </function>
    <function name="FindOneOf" returns="Number">
      <help><![CDATA[
				Finds the first occurrence of any one of a set of characters in a string, from a specified start position. The search is case-sensitive.
			]]></help>
      <parameter name="set" required="false" type="string">
        <help><![CDATA[
					String that contains one or more characters to search for.
				]]></help>
      </parameter>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					String in which to search.
				]]></help>
      </parameter>
      <parameter name="start" required="false" type="number">
        <help><![CDATA[
					Start position of search.
				]]></help>
      </parameter>
    </function>
    <function name="FirstDayOfMonth" returns="Number">
      <help><![CDATA[
				Determines the ordinal (day number, in the year) of the first day of the month in which a given date falls.
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="Fix" returns="Number">
      <help><![CDATA[
				Converts a real number to an integer.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					A number
				]]></help>
      </parameter>
    </function>
    <function name="Floor" returns="Number">
      <help><![CDATA[
				Calculates the closest integer that is smaller than number.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					Real number to round down to an integer.
				]]></help>
      </parameter>
    </function>
    <function name="FormatBaseN" returns="String">
      <help><![CDATA[
				Converts a number to a string, formatted in the base specified by radix.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					Number to convert
				]]></help>
      </parameter>
      <parameter name="radix" required="false" type="number">
        <help><![CDATA[
					Base of the result
				]]></help>
      </parameter>
    </function>
    <function name="Generate3DESKey" returns="String">
      <help><![CDATA[
				Generates a secure key value for use in the encrypt function with the 3DES algorithm.
			]]></help>
      <parameter name="input" required="false" type="string">
        <help><![CDATA[
					A string input off of which the key will be based
				]]></help>
      </parameter>
    </function>
    <function name="GeneratePBKDFkey" returns="String">
      <help><![CDATA[
				Implementation of Password-Based Key-Derivation Function (PBKDF).
			]]></help>
      <parameter name="algorithm" required="false" type="string">
        <help><![CDATA[
					Hashing algorithm used for generating key Example Values:
				]]></help>
      </parameter>
      <parameter name="passphrase" required="false" type="string">
        <help><![CDATA[
					Passphrase used for the key. KEEP THIS SECRET.
				]]></help>
      </parameter>
      <parameter name="salt" required="false" type="string">
        <help><![CDATA[
					A random salt.
				]]></help>
      </parameter>
      <parameter name="iterations" required="false" type="numeric">
        <help><![CDATA[
					The number of PBKDEF iterations to perform. A minimum recommended value is 1000.
				]]></help>
      </parameter>
      <parameter name="keySize" required="false" type="numeric">
        <help><![CDATA[
					The length in bytes of the key to generate.
				]]></help>
      </parameter>
    </function>
    <function name="GenerateSecretKey" returns="String">
      <help><![CDATA[
				Gets a secure key value for use in the encrypt function.
			]]></help>
      <parameter name="algorithm" required="false" type="string">
        <help><![CDATA[
					The encryption algorithm for which to generate the key.
				]]></help>
      </parameter>
      <parameter name="keySize" required="false" type="number">
        <help><![CDATA[
					Number of bits requested in the key for the specified algorithm.
				]]></help>
      </parameter>
    </function>
    <function name="GetApplicationMetadata" returns="Struct">
      <help><![CDATA[
				Return a struct with information about the Application, as defined in <a href="/reference/tags/application.html">Application.cfc settings</a> for the current running Application.
			]]></help>

    </function>
    <function name="GetApplicationSettings" returns="Struct">
      <help><![CDATA[
				Return a struct with information about the Application, as defined in Application.cfc or Application.cfm for the current running Application.
			]]></help>
      <parameter name="suppressFunction" required="false" type="boolean">
        <help><![CDATA[
					If true then only data members from this scope are returned (no functions), default is false. Calling this function and passing true is equivalent to calling getApplicationMetaData()
				]]></help>
      </parameter>
    </function>
    <function name="GetAuthUser" returns="String">
      <help><![CDATA[
				Gets the name of an authenticated user.
			]]></help>

    </function>
    <function name="GetBaseTagData" returns="Struct">
      <help><![CDATA[
				Used within a custom tag. Finds calling (ancestor) tag by name and accesses its data.
			]]></help>
      <parameter name="tagname" required="false" type="string">
        <help><![CDATA[
					Ancestor tag name for which to return data
				]]></help>
      </parameter>
      <parameter name="instancenumber" required="false" type="number">
        <help><![CDATA[
					Number of ancestor levels to jump before returning data. The default value is 1 (closest ancestor).
				]]></help>
      </parameter>
    </function>
    <function name="GetBaseTagList" returns="String">
      <help><![CDATA[
				Gets ancestor tag names, starting with the parent tag.
			]]></help>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					delimiter used for the list
				]]></help>
      </parameter>
    </function>
    <function name="GetBaseTemplatePath" returns="String">
      <help><![CDATA[
				Gets the absolute path of an application's base page.
			]]></help>

    </function>
    <function name="GetBuiltInFunction" returns="void">
      <help><![CDATA[
				Returns a built-in function as an object, matching the given name, throws an exception when the function does not exist.
			]]></help>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					name of the build in function, for example "StructKeyExists"
				]]></help>
      </parameter>
    </function>
    <function name="GetCanonicalPath" returns="String">
      <help><![CDATA[
				Returns the canonical pathname string based on the given string.
			]]></help>
      <parameter name="path" required="false" type="string">
        <help><![CDATA[
					path to a component or component itself
				]]></help>
      </parameter>
    </function>
    <function name="GetClassPath" returns="Array">
      <help><![CDATA[
				Returns an array containing the Java classpath of the current enviroment.
			]]></help>

    </function>
    <function name="GetClientVariablesList" returns="String">
      <help><![CDATA[
				Finds the client variables to which a page has write access. Comma-delimited list of non-read-only client variables
			]]></help>

    </function>
    <function name="GetComponentMetaData" returns="Struct">
      <help><![CDATA[
				Gets metadata (such as the functions and implemented interfaces of a component) for a CFC or Interface.
			]]></help>
      <parameter name="pathOrCFC" required="false" type="object">
        <help><![CDATA[
					path to a component or component itself
				]]></help>
      </parameter>
    </function>
    <function name="GetComponentStaticScope" returns="Struct">
      <help><![CDATA[
				returns the static scope of a specific component, of course access rules apply.
			]]></help>
      <parameter name="component" required="false" type="string">
        <help><![CDATA[
					name of the component to get static scope, for example "org.lucee.cfml.Query".
				]]></help>
      </parameter>
    </function>
    <function name="GetContextRoot" returns="String">
      <help><![CDATA[
				Returns path to the J2EE server context root for the current request.
			]]></help>

    </function>
    <function name="GetCPUUsage" returns="Number">
      <help><![CDATA[
				returns the CPU usage for a defined time range (default: 1000ms).
			]]></help>
      <parameter name="time" required="false" type="number">
        <help><![CDATA[
					time range for a certain range.
				]]></help>
      </parameter>
    </function>
    <function name="GetCurrentContext" returns="Array">
      <help><![CDATA[
				this function is deprecated, use function CallStackGet instead.
			]]></help>

    </function>
    <function name="GetCurrentTemplatePath" returns="String">
      <help><![CDATA[
				Gets the absolute path of the page that calls this function.
			]]></help>

    </function>
    <function name="GetDirectoryFromPath" returns="String">
      <help><![CDATA[
				Extracts a directory from an absolute path. Returns the absolute path, without the filename.
			]]></help>
      <parameter name="path" required="false" type="string">
        <help><![CDATA[
					file path
				]]></help>
      </parameter>
    </function>
    <function name="GetEncoding" returns="String">
      <help><![CDATA[
				Returns the encoding (character set) of the Form or URL scope.
			]]></help>
      <parameter name="scope" required="false" type="string">
        <help><![CDATA[
					one of the following
				]]></help>
      </parameter>
    </function>
    <function name="GetFileFromPath" returns="String">
      <help><![CDATA[
				Extracts a filename from an absolute path.
			]]></help>
      <parameter name="path" required="false" type="string">
        <help><![CDATA[
					file path
				]]></help>
      </parameter>
    </function>
    <function name="GetFileInfo" returns="Struct">
      <help><![CDATA[
				Retrieves more detailed information about a file than <a href="/reference/functions/fileinfo.html">FileInfo</a>
			]]></help>
      <parameter name="file" required="false" type="any">
        <help><![CDATA[
					file path
				]]></help>
      </parameter>
    </function>
    <function name="GetFreeSpace" returns="void">
      <help><![CDATA[
				Returns the number of unallocated bytes in the partition named by this abstract path name.
			]]></help>
      <parameter name="file" required="false" type="object">
        <help><![CDATA[
					file path
				]]></help>
      </parameter>
    </function>
    <function name="GetFunctionCalledName" returns="String">
      <help><![CDATA[
				<pre><span class="nf">GetFunctionCalledName</span><span class="p">(</span> <span class="p">)</span>
				</pre>
			]]></help>

    </function>
    <function name="GetFunctionData" returns="Struct">
      <help><![CDATA[
				Returns information about a function
			]]></help>
      <parameter name="functionName" required="false" type="string">
        <help><![CDATA[
					name of the function getting information for
				]]></help>
      </parameter>
    </function>
    <function name="GetFunctionKeywords" returns="Array">
      <help><![CDATA[
				Returns all keywords defined with all functions
			]]></help>

    </function>
    <function name="GetFunctionList" returns="Struct">
      <help><![CDATA[
				Returns all the currently registered functions
			]]></help>

    </function>
    <function name="GetHTTPRequestData" returns="Struct">
      <help><![CDATA[
				Makes HTTP request headers and body available to CFML pages. Useful for capturing SOAP request data, which can be delivered in an HTTP header.
			]]></help>
      <parameter name="includeBody" required="false" type="boolean">
        <help><![CDATA[
					You would like to retrieve the body of the request as well (true or false). Default is true.
				]]></help>
      </parameter>
    </function>
    <function name="GetHttpTimeString" returns="String">
      <help><![CDATA[
				Gets the current time, in the Universal Time code (UTC).
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					A date-time value
				]]></help>
      </parameter>
    </function>
    <function name="GetK2ServerDocCount" returns="Number">
      <help><![CDATA[
				This function is deprecated.
			]]></help>

    </function>
    <function name="GetK2ServerDocCountLimit" returns="Number">
      <help><![CDATA[
				This function is deprecated.
			]]></help>

    </function>
    <function name="GetLocale" returns="String">
      <help><![CDATA[
				Gets the current geographic/language locale value.
			]]></help>

    </function>
    <function name="GetLocaleDisplayName" returns="String">
      <help><![CDATA[
				Gets a locale value and displays the name in a manner that is appropriate to a specific locale. By default, gets the current locale in the current locale's language.
			]]></help>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
      <parameter name="dspLocale" required="false" type="locale">
        <help><![CDATA[
					The locale in which to return the name. The default is the locale defined for the request.
				]]></help>
      </parameter>
    </function>
    <function name="GetLocaleInfo" returns="Struct">
      <help><![CDATA[
				returns info to a specific Locale
			]]></help>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale provides the country
				]]></help>
      </parameter>
      <parameter name="dspLocale" required="false" type="locale">
        <help><![CDATA[
					Locale used to format the country.
				]]></help>
      </parameter>
    </function>
    <function name="GetLocalHostIP" returns="void">
      <help><![CDATA[
				Returns the localhost IP address, which is 127.0.0.1 for IPv4 and ::1 for IPv6 addresses.
			]]></help>
      <parameter name="all" required="false" type="boolean">
        <help><![CDATA[
					pass true to get an Array with all of the local IP addresses. default [false] will return a String with one value.
				]]></help>
      </parameter>
      <parameter name="refresh" required="false" type="boolean">
        <help><![CDATA[
					on some systems getting all of the IP addresses can take some time so the result is cached after the first call, if the system's IP addresses were modified, pass true to refresh that cache.
				]]></help>
      </parameter>
    </function>
    <function name="GetLuceeId" returns="Struct">
      <help><![CDATA[
				return ids of the current context
			]]></help>

    </function>
    <function name="GetMemoryUsage" returns="Query">
      <help><![CDATA[
				Returns detailed information to the memory usage of the container.
			]]></help>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					type of the memory informtion, valid values are:
				]]></help>
      </parameter>
    </function>
    <function name="GetMetadata" returns="void">
      <help><![CDATA[
				Returns back meta information depending on the object passed in
			]]></help>
      <parameter name="object" required="false" type="any">
        <help><![CDATA[
					A component, user-defined function, query object, XML, ... . Within a CFC, the parameter can also specify the This scope
				]]></help>
      </parameter>
      <parameter name="source" required="false" type="boolean">
        <help><![CDATA[
					return information of the source of the object
				]]></help>
      </parameter>
    </function>
    <function name="GetMetricData" returns="void">
      <help><![CDATA[
				Gets server performance metrics.
			]]></help>
      <parameter name="monitor_name" required="false" type="string">
        <help><![CDATA[
					name of the monitor
				]]></help>
      </parameter>
    </function>
    <function name="GetNumericDate" returns="Number">
      <help><![CDATA[
				Returns a real number whose integer part represents the number of days since the EPOCH and whose fractional part represents the time value expressed in hours then divided by 24
			]]></help>
      <parameter name="arg1" required="false" type="any">
        <help><![CDATA[
					datetime object
				]]></help>
      </parameter>
    </function>
    <function name="GetPageContext" returns="void">
      <help><![CDATA[
				Gets the current <a href="http://javadoc.lucee.org/lucee/runtime/PageContext.html">PageContext</a> object that provides access to page attributes and configuration, request and response objects.
			]]></help>

    </function>
    <function name="GetPrinterList" returns="String">
      <help><![CDATA[
				Gets a string list of available printers.
			]]></help>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
    </function>
    <function name="GetProfileSections" returns="Struct">
      <help><![CDATA[
				Gets all the sections of an initialization file. An initialization file, as a struct whose format is as follows:
			]]></help>
      <parameter name="iniFile" required="false" type="string">
        <help><![CDATA[
					path to an ini file.
				]]></help>
      </parameter>
    </function>
    <function name="GetProfileString" returns="String">
      <help><![CDATA[
				Gets an initialization file entry. An initialization file assigns values to configuration variables, also known as entries, that are set when the system boots, the operating system comes up, or an application starts. Returns the entry - if no value, returns an empty string.
			]]></help>
      <parameter name="iniPath" required="false" type="string">
        <help><![CDATA[
					Absolute path (drive, directory, filename, extension) of initialization file; for example, C:\boot.ini
				]]></help>
      </parameter>
      <parameter name="section" required="false" type="string">
        <help><![CDATA[
					Section of initialization file from which to extract information
				]]></help>
      </parameter>
      <parameter name="entry" required="false" type="string">
        <help><![CDATA[
					Name of value to get
				]]></help>
      </parameter>
    </function>
    <function name="GetReadableImageFormats" returns="String">
      <help><![CDATA[
				Returns a list of image formats that Lucee can read on the operating system where Lucee is deployed.
			]]></help>

    </function>
    <function name="GetSOAPRequest" returns="void">
      <help><![CDATA[
				Returns an XML object that contains the entire SOAP request. Usually called from within a web service CFC.
			]]></help>
      <parameter name="webservice" required="false" type="any">
        <help><![CDATA[
					A webservice object as returned from the cfobject tag or the CreateObject function.
				]]></help>
      </parameter>
    </function>
    <function name="GetSOAPRequestHeader" returns="void">
      <help><![CDATA[
				Obtains a SOAP request header. Call only from within a CFC web service function that is processing a request as a SOAP web service.
			]]></help>
      <parameter name="namespace" required="false" type="string">
        <help><![CDATA[
					A String that is the namespace for the header.
				]]></help>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					A String that is the name of the header
				]]></help>
      </parameter>
      <parameter name="asXML" required="false" type="boolean">
        <help><![CDATA[
					If True, the header is returned as a XML object; if false (default), the header is returned as a Java object.
				]]></help>
      </parameter>
    </function>
    <function name="GetSOAPResponse" returns="void">
      <help><![CDATA[
				Returns an XML object that contains the entire SOAP response after invoking a web service.
			]]></help>
      <parameter name="webservice" required="false" type="any">
        <help><![CDATA[
					A webservice object as returned from the cfobject tag or the CreateObject function.
				]]></help>
      </parameter>
    </function>
    <function name="GetSOAPResponseHeader" returns="void">
      <help><![CDATA[
				Returns a SOAP response header. Call this function from within code that is invoking a web service after making a web service request.
			]]></help>
      <parameter name="webservice" required="false" type="any">
        <help><![CDATA[
					A webservice object as returned from the cfobject tag or the CreateObject function.
				]]></help>
      </parameter>
      <parameter name="namespace" required="false" type="string">
        <help><![CDATA[
					A String that is the namespace for the header.
				]]></help>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					A String that is the name of the SOAP header.
				]]></help>
      </parameter>
      <parameter name="asXML" required="false" type="boolean">
        <help><![CDATA[
					If True, the header is returned as a XML object; if false (default), the header is returned as a Java object.
				]]></help>
      </parameter>
    </function>
    <function name="GetSystemFreeMemory" returns="Number">
      <help><![CDATA[
				The amount of memory that is currently free, in bytes.
			]]></help>

    </function>
    <function name="GetSystemTotalMemory" returns="Number">
      <help><![CDATA[
				The amount of memory that is available to the operating system, in bytes.
			]]></help>

    </function>
    <function name="GetTagData" returns="Struct">
      <help><![CDATA[
				return information to a Tag as Struct
			]]></help>
      <parameter name="nameSpaceWithSeperator" required="false" type="string">
        <help><![CDATA[
					The namesapce of the tag with the seperator Example: cf, rc: aso.
				]]></help>
      </parameter>
      <parameter name="tagName" required="false" type="string">
        <help><![CDATA[
					The tag name without namespace Example: login,mail aso.
				]]></help>
      </parameter>
      <parameter name="dialect" required="false" type="string">
        <help><![CDATA[
					the dialect you need (cfml,lucee)
				]]></help>
      </parameter>
    </function>
    <function name="GetTagList" returns="Struct">
      <help><![CDATA[
				returns information to a tag as struct
			]]></help>

    </function>
    <function name="GetTempDirectory" returns="String">
      <help><![CDATA[
				Returns the full path to the currently assigned temporary directory
			]]></help>

    </function>
    <function name="GetTempFile" returns="String">
      <help><![CDATA[
				Creates a temporary file in a directory whose name starts with (at most) the first three characters of prefix.
			]]></help>
      <parameter name="dir" required="false" type="string">
        <help><![CDATA[
					Directory name
				]]></help>
      </parameter>
      <parameter name="prefix" required="false" type="string">
        <help><![CDATA[
					Prefix of a temporary file to create in the dir directory
				]]></help>
      </parameter>
    </function>
    <function name="GetTemplatePath" returns="void">
      <help><![CDATA[
				This function is deprecated.
			]]></help>

    </function>
    <function name="GetTickCount" returns="Number">
      <help><![CDATA[
				Returns the number of milliseconds since the start of the application server
			]]></help>
      <parameter name="unit" required="false" type="string">
        <help><![CDATA[
					base unit for the function, valid values are:
				]]></help>
      </parameter>
    </function>
    <function name="GetTimeZone" returns="Timezone">
      <help><![CDATA[
				Returns the timezone defined for the current request.
			]]></help>

    </function>
    <function name="GetTimeZoneInfo" returns="Struct">
      <help><![CDATA[
				Returns a structure representing the current timezone;
			]]></help>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					the timezone to get the data from.
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					locale used to format the output.
				]]></help>
      </parameter>
    </function>
    <function name="GetToken" returns="String">
      <help><![CDATA[
				Determines whether a token of the list in the delimiters parameter is present in a string. Returns the token found at position index of the string, as a string. If index is greater than the number of tokens in the string, returns an empty string.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					String in which to search.
				]]></help>
      </parameter>
      <parameter name="index" required="false" type="number">
        <help><![CDATA[
					Positive integer. The position of a token.
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					A delimited list of delimiters. Elements may consist of multiple characters. Default list of delimiters: space character, tab character, newline character; or their codes: "chr(32)", "chr(9)", chr(10). Default list delimiter: comma character.
				]]></help>
      </parameter>
    </function>
    <function name="GetTotalSpace" returns="void">
      <help><![CDATA[
				Returns the size of the partition named by this abstract pathname.
			]]></help>
      <parameter name="file" required="false" type="object">
        <help><![CDATA[
					file path
				]]></help>
      </parameter>
    </function>
    <function name="GetUserRoles" returns="String">
      <help><![CDATA[
				Retrieves the list of roles for the current user.
			]]></help>

    </function>
    <function name="GetVariable" returns="void">
      <help><![CDATA[
				Gets the variable referenced by the given parameter; may be fully qualified
			]]></help>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					name of the variable to return
				]]></help>
      </parameter>
    </function>
    <function name="GetVFSMetaData" returns="Struct">
      <help><![CDATA[
				Returns metadata for VFS
			]]></help>
      <parameter name="scheme" required="false" type="string">
        <help><![CDATA[
					the scheme of the virtual filesystem (ram,file,s3,http,https,zip,tar ...).
				]]></help>
      </parameter>
    </function>
    <function name="GetWriteableImageFormats" returns="String">
      <help><![CDATA[
				Returns a list of image formats that Lucee can write on the operating system where Lucee is deployed.
			]]></help>

    </function>
    <function name="Hash" returns="String">
      <help><![CDATA[
				Returns the one-way hash of a variable-length input string based on the algorithm, producing a fixed-length string.
			]]></help>
      <parameter name="input" required="false" type="any">
        <help><![CDATA[
					String to hash.
				]]></help>
      </parameter>
      <parameter name="algorithm" required="false" type="string">
        <help><![CDATA[
					The algorithm to use for hashing your input. The following values are supported:
				]]></help>
      </parameter>
      <parameter name="encoding" required="false" type="string">
        <help><![CDATA[
					The encoding to use when converting the input string to byte data.
				]]></help>
      </parameter>
      <parameter name="numIterations" required="false" type="number">
        <help><![CDATA[
					The number of times to iterate hashing. A greater number of interations will result in a cryptographically stronger hash but will also take more time to generate that hash.
				]]></help>
      </parameter>
    </function>
    <function name="Hash40" returns="String">
      <help><![CDATA[
				This function only exists for backward compstibility to Lucee 4.0 or older version that has produced an incorrect result for non us-ascii characters, Only use this function for backward compatibility, use <a href="/reference/functions/hash.html">Hash</a> instead
			]]></help>
      <parameter name="input" required="false" type="any">
        <help><![CDATA[
					String to hash.
				]]></help>
      </parameter>
      <parameter name="algorithm" required="false" type="string">
        <help><![CDATA[
					The algorithm to use to hash the string. Supported are the following algorithms:
				]]></help>
      </parameter>
      <parameter name="encoding" required="false" type="string">
        <help><![CDATA[
					A string specifying the encoding to use when converting the string to byte data used by the hash algorithm.
				]]></help>
      </parameter>
      <parameter name="numIterations" required="false" type="number">
        <help><![CDATA[
					number of iterations; default is 1.
				]]></help>
      </parameter>
    </function>
    <function name="HMAC" returns="String">
      <help><![CDATA[
				Creates a hash-based message authentication code (HMAC) for the given message combined with a given secret key using an optional algorithm and encoding. HMACs are used to verify the data integrity and authenticity of a transmitted message. The hash function used by the HMAC function depends on the algorithm specified.
			]]></help>
      <parameter name="message" required="false" type="object">
        <help><![CDATA[
					The message to be hashed. Can be a string or a byte array.
				]]></help>
      </parameter>
      <parameter name="key" required="false" type="object">
        <help><![CDATA[
					The secret cryptographic key to be combined with the message and hashed. Can be a string or a byte array.
				]]></help>
      </parameter>
      <parameter name="algorithm" required="false" type="string">
        <help><![CDATA[
					The algorithm to use for hashing your input. The following values are supported:
				]]></help>
      </parameter>
      <parameter name="encoding" required="false" type="string">
        <help><![CDATA[
					The character encoding to use when converting the message to bytes. Must be a character encoding name recognized by the Java runtime.
				]]></help>
      </parameter>
    </function>
    <function name="Hour" returns="Number">
      <help><![CDATA[
				Gets the current hour of the day. Ordinal value of the hour, in the range 0 - 23.
			]]></help>
      <parameter name="Date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="HTMLCodeFormat" returns="String">
      <help><![CDATA[
				Replaces special characters in a string with their HTML-escaped equivalents and inserts
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one.
				]]></help>
      </parameter>
      <parameter name="version" required="false" type="number">
        <help><![CDATA[
					HTML version to use: -1: The latest implementation of HTML 2.0: HTML 2.0 (default) 3.2: HTML 3.2
				]]></help>
      </parameter>
    </function>
    <function name="HTMLEditFormat" returns="String">
      <help><![CDATA[
				Replaces special characters in a string with their HTML-escaped equivalents. [version] HTML version to use. currently ignored.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one.
				]]></help>
      </parameter>
      <parameter name="version" required="false" type="number">
        <help><![CDATA[
					HTML version to use:
				]]></help>
      </parameter>
    </function>
    <function name="HtmlParse" returns="Xml">
      <help><![CDATA[
				parse the given html (not only xhtml) as xml Object, work similar to xmlParse, but this function is very forgiving with the syntax..
			]]></help>
      <parameter name="html" required="false" type="string">
        <help><![CDATA[
					Alias: string, text
				]]></help>
      </parameter>
      <parameter name="caseSensitive" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="IIf" returns="void">
      <help><![CDATA[
				Evaluates a Boolean conditional dynamic expression. Depending on whether the expression is true or false, dynamically evaluates one of two string expressions and returns the result.
			]]></help>
      <parameter name="condition" required="false" type="boolean">
        <help><![CDATA[
					An expression that can be evaluated as a Boolean.
				]]></help>
      </parameter>
      <parameter name="string_expression1" required="false" type="string">
        <help><![CDATA[
					Expression to evaluate and return if condition is true.
				]]></help>
      </parameter>
      <parameter name="string_expression2" required="false" type="string">
        <help><![CDATA[
					Expression to evaluate and return if condition is false.
				]]></help>
      </parameter>
    </function>
    <function name="ImageAddBorder" returns="void">
      <help><![CDATA[
				Adds a rectangular border around the outside edge of an image.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="thickness" required="false" type="number">
        <help><![CDATA[
					Thickness of the border in pixels. The default value is 1. The border is added to the outside edge of the image; the image area is increased accordingly.
				]]></help>
      </parameter>
      <parameter name="color" required="false" type="string">
        <help><![CDATA[
					Optional. Border color. The default border color is black. See Usage. Only valid if the borderType is not specified or if borderType = "constant".
				]]></help>
      </parameter>
      <parameter name="borderType" required="false" type="string">
        <help><![CDATA[
					The type of border:
				]]></help>
      </parameter>
    </function>
    <function name="ImageBlur" returns="void">
      <help><![CDATA[
				Smooths image.
			]]></help>
      <parameter name="image" required="false" type="image">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="blurRadius" required="false" type="number">
        <help><![CDATA[
					The size of the blur radius. Value must be greater than or equal to 3 and less than or equal to 10. The default value is 3.
				]]></help>
      </parameter>
    </function>
    <function name="ImageClearRect" returns="void">
      <help><![CDATA[
				Clears the specified rectangle by filling it with the background color of the current drawing surface.
			]]></help>
      <parameter name="image" required="false" type="image">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="x" required="false" type="number">
        <help><![CDATA[
					The X coordinate of the rectangle to clear.
				]]></help>
      </parameter>
      <parameter name="y" required="false" type="number">
        <help><![CDATA[
					The Y coordinate of the rectangle to clear.
				]]></help>
      </parameter>
      <parameter name="width" required="false" type="number">
        <help><![CDATA[
					The width of the rectangle to clear.
				]]></help>
      </parameter>
      <parameter name="height" required="false" type="number">
        <help><![CDATA[
					The height of the rectangle to clear.
				]]></help>
      </parameter>
    </function>
    <function name="ImageCopy" returns="void">
      <help><![CDATA[
				Copies a rectangular area of an image.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="x" required="false" type="number">
        <help><![CDATA[
					The x coordinate of the source rectangle.
				]]></help>
      </parameter>
      <parameter name="y" required="false" type="number">
        <help><![CDATA[
					The y coordinate of the source rectangle.
				]]></help>
      </parameter>
      <parameter name="width" required="false" type="number">
        <help><![CDATA[
					The width of the source rectangle.
				]]></help>
      </parameter>
      <parameter name="height" required="false" type="number">
        <help><![CDATA[
					The height of the source rectangle.
				]]></help>
      </parameter>
      <parameter name="dx" required="false" type="number">
        <help><![CDATA[
					The x coordinate of the destination rectangle.
				]]></help>
      </parameter>
      <parameter name="dy" required="false" type="number">
        <help><![CDATA[
					The y coordinate of the destination rectangle.
				]]></help>
      </parameter>
    </function>
    <function name="ImageCrop" returns="void">
      <help><![CDATA[
				Crops an image to a specified rectangular area.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="x" required="false" type="number">
        <help><![CDATA[
					The X origin of the crop area.
				]]></help>
      </parameter>
      <parameter name="y" required="false" type="number">
        <help><![CDATA[
					The Y origin of the crop area.
				]]></help>
      </parameter>
      <parameter name="width" required="false" type="number">
        <help><![CDATA[
					The width of the crop area.
				]]></help>
      </parameter>
      <parameter name="height" required="false" type="number">
        <help><![CDATA[
					The height of the crop area.
				]]></help>
      </parameter>
    </function>
    <function name="ImageDrawArc" returns="void">
      <help><![CDATA[
				Draws a circular or elliptical arc.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="x" required="false" type="number">
        <help><![CDATA[
					The x coordinate of the upper-left corner of the arc.
				]]></help>
      </parameter>
      <parameter name="y" required="false" type="number">
        <help><![CDATA[
					The y coordinate of the upper-left corner of the arc.
				]]></help>
      </parameter>
      <parameter name="width" required="false" type="number">
        <help><![CDATA[
					The width of the arc.
				]]></help>
      </parameter>
      <parameter name="height" required="false" type="number">
        <help><![CDATA[
					The height of the arc.
				]]></help>
      </parameter>
      <parameter name="startAngle" required="false" type="number">
        <help><![CDATA[
					The beginning angle in degrees.
				]]></help>
      </parameter>
      <parameter name="arcAngle" required="false" type="number">
        <help><![CDATA[
					The angular extent of the arc, relative to the start angle.
				]]></help>
      </parameter>
      <parameter name="filled" required="false" type="boolean">
        <help><![CDATA[
					Specify whether the arc is filled:
				]]></help>
      </parameter>
    </function>
    <function name="ImageDrawBeveledRect" returns="void">
      <help><![CDATA[
				Draws a rectangle with beveled edges.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="x" required="false" type="number">
        <help><![CDATA[
					The x coordinate of the rectangle.
				]]></help>
      </parameter>
      <parameter name="y" required="false" type="number">
        <help><![CDATA[
					The y coordinate of the rectangle.
				]]></help>
      </parameter>
      <parameter name="width" required="false" type="number">
        <help><![CDATA[
					The width of the rectangle.
				]]></help>
      </parameter>
      <parameter name="height" required="false" type="number">
        <help><![CDATA[
					The height of the rectangle.
				]]></help>
      </parameter>
      <parameter name="raised" required="false" type="boolean">
        <help><![CDATA[
					Specify whether the rectangle appears raised above the surface or sunk into the surface:
				]]></help>
      </parameter>
      <parameter name="filled" required="false" type="boolean">
        <help><![CDATA[
					Specify whether the rectangle is filled:
				]]></help>
      </parameter>
    </function>
    <function name="ImageDrawCubicCurve" returns="void">
      <help><![CDATA[
				Draws a cubic curve.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="x1" required="false" type="number">
        <help><![CDATA[
					The x coordinate of the start point of the cubic curve segment.
				]]></help>
      </parameter>
      <parameter name="y1" required="false" type="number">
        <help><![CDATA[
					The y coordinate of the start point of the cubic curve segment.
				]]></help>
      </parameter>
      <parameter name="ctrlx1" required="false" type="number">
        <help><![CDATA[
					The x coordinate of the first control point of the cubic curve segment.
				]]></help>
      </parameter>
      <parameter name="ctrly1" required="false" type="number">
        <help><![CDATA[
					The y coordinate of the first control point of the cubic curve segment.
				]]></help>
      </parameter>
      <parameter name="ctrlx2" required="false" type="number">
        <help><![CDATA[
					The x coordinate of the second control point of the cubic curve segment.
				]]></help>
      </parameter>
      <parameter name="ctrly2" required="false" type="number">
        <help><![CDATA[
					The y coordinate of the second control point of the cubic curve segment.
				]]></help>
      </parameter>
      <parameter name="x2" required="false" type="number">
        <help><![CDATA[
					The x coordinate of the end point of the cubic curve segment.
				]]></help>
      </parameter>
      <parameter name="y2" required="false" type="number">
        <help><![CDATA[
					The y coordinate of the end point of the cubic curve segment.
				]]></help>
      </parameter>
    </function>
    <function name="ImageDrawImage" returns="void">
      <help><![CDATA[
				this function is deprecated, use <a href="/reference/functions/imagepaste.html">ImagePaste</a> instead. Draws an image on an image with the baseline of the first character positioned at (x,y) in the image.
			]]></help>
      <parameter name="name" required="false" type="any">
        <help><![CDATA[
					the image to draw on it
				]]></help>
      </parameter>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					the image to draw
				]]></help>
      </parameter>
      <parameter name="x" required="false" type="number">
        <help><![CDATA[
					The x coordinate of the of the top left corner of the image to draw.
				]]></help>
      </parameter>
      <parameter name="y" required="false" type="number">
        <help><![CDATA[
					The y coordinate of the of the top left corner of the image to draw.
				]]></help>
      </parameter>
    </function>
    <function name="ImageDrawLine" returns="void">
      <help><![CDATA[
				Draws a single line defined by two sets of x and y coordinates on an image.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="x1" required="false" type="number">
        <help><![CDATA[
					The x coordinate for the start point of the line.
				]]></help>
      </parameter>
      <parameter name="y1" required="false" type="number">
        <help><![CDATA[
					The y coordinate for the start point of the line.
				]]></help>
      </parameter>
      <parameter name="x2" required="false" type="number">
        <help><![CDATA[
					The x coordinate for the end point of the line.
				]]></help>
      </parameter>
      <parameter name="y2" required="false" type="number">
        <help><![CDATA[
					The y coordinate for the end point of the line.
				]]></help>
      </parameter>
    </function>
    <function name="ImageDrawLines" returns="void">
      <help><![CDATA[
				Draws a sequence of connected lines defined by arrays of x and y coordinates.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="xcoords" required="false" type="array">
        <help><![CDATA[
					An array of x coordinates.
				]]></help>
      </parameter>
      <parameter name="ycoords" required="false" type="array">
        <help><![CDATA[
					An array of y coordinates.
				]]></help>
      </parameter>
      <parameter name="isPolygon" required="false" type="boolean">
        <help><![CDATA[
					Specify whether the lines form a polygon:
				]]></help>
      </parameter>
      <parameter name="filled" required="false" type="boolean">
        <help><![CDATA[
					Specify whether the polygon is filled:
				]]></help>
      </parameter>
    </function>
    <function name="ImageDrawOval" returns="void">
      <help><![CDATA[
				Draws an oval.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="x" required="false" type="number">
        <help><![CDATA[
					The x coordinate of the upper left corner of the oval to draw.
				]]></help>
      </parameter>
      <parameter name="y" required="false" type="number">
        <help><![CDATA[
					The y coordinate of the upper left corner of the oval to draw.
				]]></help>
      </parameter>
      <parameter name="width" required="false" type="number">
        <help><![CDATA[
					The width of the oval to draw.
				]]></help>
      </parameter>
      <parameter name="height" required="false" type="number">
        <help><![CDATA[
					The height of the oval to draw.
				]]></help>
      </parameter>
      <parameter name="filled" required="false" type="boolean">
        <help><![CDATA[
					Specify whether the oval is filled:
				]]></help>
      </parameter>
    </function>
    <function name="ImageDrawPoint" returns="void">
      <help><![CDATA[
				Draws a point at the specified (x,y) coordinate.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="x" required="false" type="number">
        <help><![CDATA[
					The x coordinate of the point.
				]]></help>
      </parameter>
      <parameter name="y" required="false" type="number">
        <help><![CDATA[
					The y coordinate of the point.
				]]></help>
      </parameter>
    </function>
    <function name="ImageDrawQuadraticCurve" returns="void">
      <help><![CDATA[
				Draws a curved line. The curve is controlled by a single point.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="x1" required="false" type="number">
        <help><![CDATA[
					The x coordinate of the start point of the quadratic curve segment.
				]]></help>
      </parameter>
      <parameter name="y1" required="false" type="number">
        <help><![CDATA[
					The y coordinate of the start point of the quadratic curve segment.
				]]></help>
      </parameter>
      <parameter name="ctrlx" required="false" type="number">
        <help><![CDATA[
					The x coordinate of the first control point of the quadratic curve segment.
				]]></help>
      </parameter>
      <parameter name="ctrly" required="false" type="number">
        <help><![CDATA[
					The y coordinate of the first control point of the quadratic curve segment.
				]]></help>
      </parameter>
      <parameter name="x2" required="false" type="number">
        <help><![CDATA[
					The x coordinate of the end point of the quadratic curve segment.
				]]></help>
      </parameter>
      <parameter name="y2" required="false" type="number">
        <help><![CDATA[
					The y coordinate of the end point of the quadratic curve segment.
				]]></help>
      </parameter>
    </function>
    <function name="ImageDrawRect" returns="void">
      <help><![CDATA[
				Draws a rectangle.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="x" required="false" type="number">
        <help><![CDATA[
					The x coordinate of the rectangle.
				]]></help>
      </parameter>
      <parameter name="y" required="false" type="number">
        <help><![CDATA[
					The y coordinate of the rectangle.
				]]></help>
      </parameter>
      <parameter name="width" required="false" type="number">
        <help><![CDATA[
					The width of the rectangle.
				]]></help>
      </parameter>
      <parameter name="height" required="false" type="number">
        <help><![CDATA[
					The height of the rectangle.
				]]></help>
      </parameter>
      <parameter name="filled" required="false" type="boolean">
        <help><![CDATA[
					Specify whether the rectangle is filled:
				]]></help>
      </parameter>
    </function>
    <function name="ImageDrawRoundRect" returns="void">
      <help><![CDATA[
				Draws a rectangle with rounded corners.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="x" required="false" type="number">
        <help><![CDATA[
					The x coordinate of the rectangle.
				]]></help>
      </parameter>
      <parameter name="y" required="false" type="number">
        <help><![CDATA[
					The y coordinate of the rectangle.
				]]></help>
      </parameter>
      <parameter name="width" required="false" type="number">
        <help><![CDATA[
					The width of the rectangle.
				]]></help>
      </parameter>
      <parameter name="height" required="false" type="number">
        <help><![CDATA[
					The height of the rectangle.
				]]></help>
      </parameter>
      <parameter name="arcWidth" required="false" type="number">
        <help><![CDATA[
					The horizontal diameter of the arc at the four corners.
				]]></help>
      </parameter>
      <parameter name="arcHeight" required="false" type="number">
        <help><![CDATA[
					The vertical diameter of the arc at the four corners.
				]]></help>
      </parameter>
      <parameter name="filled" required="false" type="boolean">
        <help><![CDATA[
					Specify whether the rectangle is filled:
				]]></help>
      </parameter>
    </function>
    <function name="ImageDrawText" returns="void">
      <help><![CDATA[
				Draws a text string on an image with the baseline of the first character positioned at (x,y) in the image.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					the text to draw.
				]]></help>
      </parameter>
      <parameter name="x" required="false" type="number">
        <help><![CDATA[
					The x coordinate for the start point of the string.
				]]></help>
      </parameter>
      <parameter name="y" required="false" type="number">
        <help><![CDATA[
					The y coordinate for the start point of the string.
				]]></help>
      </parameter>
      <parameter name="attributeCollection" required="false" type="struct">
        <help><![CDATA[
					a structure used to specify the text characteristics. the following keys are supported:
				]]></help>
      </parameter>
    </function>
    <function name="ImageFilter" returns="void">
      <help><![CDATA[
				the function ImageFilter allows to execute a filter against a image.
			]]></help>
      <parameter name="name" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="filtername" required="false" type="string">
        <help><![CDATA[
					the name of the filter executed (average,block,blur ...)
				]]></help>
      </parameter>
      <parameter name="parameters" required="false" type="struct">
        <help><![CDATA[
					parameters for the filter defined with argument filtername
				]]></help>
      </parameter>
    </function>
    <function name="ImageFilterColorMap" returns="void">
      <help><![CDATA[
				These are passed to the function ImageFilters (see ImageFilter documentation) which convert gray values to colors.
			]]></help>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					type of the color map, possible values are:
				]]></help>
      </parameter>
      <parameter name="lineColor1" required="false" type="string">
        <help><![CDATA[
					used only for type "linear", the color corresponding to value 0 in the colormap.
				]]></help>
      </parameter>
      <parameter name="lineColor2" required="false" type="string">
        <help><![CDATA[
					used only for type "linear", the color corresponding to value 1 in the colormap.
				]]></help>
      </parameter>
    </function>
    <function name="ImageFilterCurves" returns="void">
      <help><![CDATA[
				the curves for the wrap grid
			]]></help>

    </function>
    <function name="ImageFilterKernel" returns="void">
      <help><![CDATA[
				These are passed to the function ImageFilters (see <a href="/reference/functions/imagefilter.html">ImageFilter</a> documentation).
			]]></help>
      <parameter name="width" required="false" type="number">
        <help><![CDATA[
					width of the kernel
				]]></help>
      </parameter>
      <parameter name="height" required="false" type="number">
        <help><![CDATA[
					height of the kernel
				]]></help>
      </parameter>
      <parameter name="data" required="false" type="any">
        <help><![CDATA[
					kernel data in row major order
				]]></help>
      </parameter>
    </function>
    <function name="ImageFilterWarpGrid" returns="void">
      <help><![CDATA[
				A warp grid. These are passed to the function ImageFilters (see ImageFilter documentation).
			]]></help>
      <parameter name="rows" required="false" type="number">
        <help><![CDATA[
					rows of the warp grid
				]]></help>
      </parameter>
      <parameter name="cols" required="false" type="number">
        <help><![CDATA[
					cols of the warp grid
				]]></help>
      </parameter>
      <parameter name="width" required="false" type="number">
        <help><![CDATA[
					width of the warp grid
				]]></help>
      </parameter>
      <parameter name="height" required="false" type="number">
        <help><![CDATA[
					height of the warp grid
				]]></help>
      </parameter>
    </function>
    <function name="ImageFlip" returns="void">
      <help><![CDATA[
				Flips an image across an axis.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="transpose" required="false" type="string">
        <help><![CDATA[
					Transpose the image:
				]]></help>
      </parameter>
    </function>
    <function name="ImageFonts" returns="Array">
      <help><![CDATA[
				return all available
			]]></help>

    </function>
    <function name="ImageFormats" returns="Struct">
      <help><![CDATA[
				return all available readers and writers
			]]></help>

    </function>
    <function name="ImageGetBlob" returns="void">
      <help><![CDATA[
				Retrieves the bytes of the underlying image. The bytes are in the same image format as the source image.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
    </function>
    <function name="ImageGetBufferedImage" returns="void">
      <help><![CDATA[
				Returns the java.awt.BufferedImage object underlying the current image.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
    </function>
    <function name="ImageGetEXIFMetadata" returns="Struct">
      <help><![CDATA[
				Retrieves the Exchangeable Image File Format (EXIF) headers in an image as a CFML structure.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
    </function>
    <function name="ImageGetEXIFTag" returns="void">
      <help><![CDATA[
				Retrieves the specified EXIF tag in an image.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="tagName" required="false" type="string">
        <help><![CDATA[
					The EXIF tag name to be returned.
				]]></help>
      </parameter>
    </function>
    <function name="ImageGetHeight" returns="Number">
      <help><![CDATA[
				Retrieves the height of the image in pixels.
			]]></help>
      <parameter name="image" required="false" type="image">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
    </function>
    <function name="ImageGetIPTCTag" returns="void">
      <help><![CDATA[
				Retrieves the value of the IPTC tag for an image.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="tagName" required="false" type="string">
        <help><![CDATA[
					The IPTC tag name whose value is returned.
				]]></help>
      </parameter>
    </function>
    <function name="ImageGetWidth" returns="Number">
      <help><![CDATA[
				Retrieves the width of the specified image.
			]]></help>
      <parameter name="image" required="false" type="image">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
    </function>
    <function name="ImageGrayscale" returns="void">
      <help><![CDATA[
				Converts an image to grayscale.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
    </function>
    <function name="ImageInfo" returns="Struct">
      <help><![CDATA[
				Returns a structure that contains information about the image, such as height, width, color model, size, and filename.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
    </function>
    <function name="ImageNegative" returns="void">
      <help><![CDATA[
				Inverts the pixel values of an image.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
    </function>
    <function name="ImageNew" returns="void">
      <help><![CDATA[
				Creates an image.
			]]></help>
      <parameter name="source" required="false" type="any">
        <help><![CDATA[
					The source image path, URL, a variable that is read into the new image, or a Java buffered image.
				]]></help>
      </parameter>
      <parameter name="width" required="false" type="string">
        <help><![CDATA[
					The width of the new image. Valid when the height is specified and the source is not.
				]]></help>
      </parameter>
      <parameter name="height" required="false" type="string">
        <help><![CDATA[
					The height of the new image. Valid when the width is specified and the source is not.
				]]></help>
      </parameter>
      <parameter name="imageType" required="false" type="string">
        <help><![CDATA[
					The type of the image to create (Valid only when width and height are specified):
				]]></help>
      </parameter>
      <parameter name="canvasColor" required="false" type="string">
        <help><![CDATA[
					Color of the image canvas (The default value is "black"):
				]]></help>
      </parameter>
    </function>
    <function name="ImageOverlay" returns="void">
      <help><![CDATA[
				Reads two source images and overlays the second source image on the first source image.
			]]></help>
      <parameter name="source1" required="false" type="any">
        <help><![CDATA[
					The image that is the bottom layer in the image.
				]]></help>
      </parameter>
      <parameter name="source2" required="false" type="any">
        <help><![CDATA[
					the image that is the top layer (overlaid on the source1 image) in the image.
				]]></help>
      </parameter>
    </function>
    <function name="ImagePaste" returns="void">
      <help><![CDATA[
				Takes two images and an (x,y) coordinate and draws the second image over the first image with the upper-left corner at coordinate (x,y).
			]]></help>
      <parameter name="image1" required="false" type="any">
        <help><![CDATA[
					The bottom image.
				]]></help>
      </parameter>
      <parameter name="image2" required="false" type="any">
        <help><![CDATA[
					The image that is pasted on top of image1.
				]]></help>
      </parameter>
      <parameter name="x" required="false" type="number">
        <help><![CDATA[
					The x coordinate where the upper-left corner of image2 is pasted.
				]]></help>
      </parameter>
      <parameter name="y" required="false" type="number">
        <help><![CDATA[
					The y coordinate where the upper-left corner of image2 is pasted.
				]]></help>
      </parameter>
    </function>
    <function name="ImageRead" returns="void">
      <help><![CDATA[
				Reads the source pathname or URL and creates an image.
			]]></help>
      <parameter name="path" required="false" type="any">
        <help><![CDATA[
					On-disk or in-memory pathname or URL of the source image.
				]]></help>
      </parameter>
    </function>
    <function name="ImageReadBase64" returns="void">
      <help><![CDATA[
				Creates an image from a Base64 string.
			]]></help>
      <parameter name="b64str" required="false" type="string">
        <help><![CDATA[
					a variable or Base64 string.
				]]></help>
      </parameter>
    </function>
    <function name="ImageResize" returns="void">
      <help><![CDATA[
				Resizes an image.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="width" required="false" type="string">
        <help><![CDATA[
					New width of the image. If this value is blank, the width is calculated proportionately to the height.
				]]></help>
      </parameter>
      <parameter name="height" required="false" type="string">
        <help><![CDATA[
					New height of the image. If this value is blank, the height is calculated proportionately to the width.
				]]></help>
      </parameter>
      <parameter name="interpolation" required="false" type="string">
        <help><![CDATA[
					the interpolation method for resampling. You can specify a specific interpolation algorithm by name (for example, hamming), by image quality (for example, mediumQuality), or by performance (for example, highestPerformance). Valid values are:
				]]></help>
      </parameter>
      <parameter name="blurFactor" required="false" type="number">
        <help><![CDATA[
					The blur factor used for resampling. The higher the blur factor, the more blurred the image (also, the longer it takes to resize the image). Valid values are 1-10.
				]]></help>
      </parameter>
    </function>
    <function name="ImageRotate" returns="void">
      <help><![CDATA[
				Rotates an image at a specified point by a specified angle.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="x" required="false" type="string">
        <help><![CDATA[
					The x coordinate for the point of rotation. The default value is 2.
				]]></help>
      </parameter>
      <parameter name="y" required="false" type="string">
        <help><![CDATA[
					The y coordinate for the point of rotation. The default value is 2.
				]]></help>
      </parameter>
      <parameter name="angle" required="false" type="string">
        <help><![CDATA[
					The rotation angle in degrees.
				]]></help>
      </parameter>
      <parameter name="interpolation" required="false" type="string">
        <help><![CDATA[
					Type of interpolation:
				]]></help>
      </parameter>
    </function>
    <function name="ImageRotateDrawingAxis" returns="void">
      <help><![CDATA[
				Rotates all subsequent drawing on an image at a specified point by a specified angle.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="angle" required="false" type="number">
        <help><![CDATA[
					The rotation angle in degrees.
				]]></help>
      </parameter>
      <parameter name="x" required="false" type="number">
        <help><![CDATA[
					The x coordinate for the point of rotation. The default value is 0.
				]]></help>
      </parameter>
      <parameter name="y" required="false" type="number">
        <help><![CDATA[
					The y coordinate for the point of rotation. The default value is 0.
				]]></help>
      </parameter>
    </function>
    <function name="ImageScaleToFit" returns="void">
      <help><![CDATA[
				Creates a resized image with the aspect ratio maintained.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="fitWidth" required="false" type="string">
        <help><![CDATA[
					The width of the bounding box in pixels. You can specify an integer, or an empty string ("") if the fitHeight is specified.
				]]></help>
      </parameter>
      <parameter name="fitHeight" required="false" type="string">
        <help><![CDATA[
					The height of the bounding box in pixels. You can specify an integer, or an empty string ("") if the fitWidth is specified.
				]]></help>
      </parameter>
      <parameter name="interpolation" required="false" type="string">
        <help><![CDATA[
					The interpolation method for resampling. You can specify a specific interpolation algorithm by name (for example, hamming), by image quality (for example, mediumQuality), or by performance (for example, highestPerformance). Valid values are:
				]]></help>
      </parameter>
      <parameter name="blurFactor" required="false" type="number">
        <help><![CDATA[
					The blur factor used for resampling. The higher the blur factor, the more blurred the image (also, the longer it takes to resize the image). Valid values are 1-10.
				]]></help>
      </parameter>
    </function>
    <function name="ImageSetAntialiasing" returns="void">
      <help><![CDATA[
				Switches antialiasing on or off in rendered graphics.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="antialias" required="false" type="string">
        <help><![CDATA[
					Antialiasing switch:
				]]></help>
      </parameter>
    </function>
    <function name="ImageSetBackgroundColor" returns="void">
      <help><![CDATA[
				Sets the background color for the image. The background color is used for clearing a region. Setting the background color only affects the subsequent ImageClearRect calls
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="color" required="false" type="string">
        <help><![CDATA[
					Background color (The default value is "black"):
				]]></help>
      </parameter>
    </function>
    <function name="ImageSetDrawingAlpha" returns="void">
      <help><![CDATA[
				Sets the current drawing alpha for images. All subsequent graphics operations use the specified alpha.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="alpha" required="false" type="number">
        <help><![CDATA[
					a floating point number in range 0-1
				]]></help>
      </parameter>
    </function>
    <function name="ImageSetDrawingColor" returns="void">
      <help><![CDATA[
				Sets the current drawing color for images. All subsequent graphics operations use the specified color.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="color" required="false" type="string">
        <help><![CDATA[
					Drawing color (The default value is "black"):
				]]></help>
      </parameter>
    </function>
    <function name="ImageSetDrawingStroke" returns="void">
      <help><![CDATA[
				Sets the drawing stroke for points and lines in subsequent images.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="attributeCollection" required="false" type="struct">
        <help><![CDATA[
					The structure used to specify the line attributes:
				]]></help>
      </parameter>
    </function>
    <function name="ImageSetDrawingTransparency" returns="void">
      <help><![CDATA[
				Specifies the degree of transparency of drawing functions.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="percent" required="false" type="number">
        <help><![CDATA[
					Percent of transparency, a floating point number in range 0-100
				]]></help>
      </parameter>
    </function>
    <function name="ImageSharpen" returns="void">
      <help><![CDATA[
				Sharpens an image by using the unsharp mask filter.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="gain" required="false" type="number">
        <help><![CDATA[
					Gain values can be integers or real numbers. The default value is 1.0. The value determines whether the image is blurred or sharpened:
				]]></help>
      </parameter>
    </function>
    <function name="ImageShear" returns="void">
      <help><![CDATA[
				Shears an image either horizontally or vertically.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="shear" required="false" type="number">
        <help><![CDATA[
					Shear value. Coordinates can be integers or real numbers.
				]]></help>
      </parameter>
      <parameter name="direction" required="false" type="string">
        <help><![CDATA[
					Shear direction:
				]]></help>
      </parameter>
      <parameter name="interpolation" required="false" type="string">
        <help><![CDATA[
					Type of interpolation:
				]]></help>
      </parameter>
    </function>
    <function name="ImageShearDrawingAxis" returns="void">
      <help><![CDATA[
				Shears the drawing canvas.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="shx" required="false" type="number">
        <help><![CDATA[
					The multiplier by which coordinates are shifted in the positive x axis direction as a function of the y coordinate.
				]]></help>
      </parameter>
      <parameter name="shy" required="false" type="number">
        <help><![CDATA[
					the multiplier by which coordinates are shifted in the positive y axis direction as a function of the x coordinate.
				]]></help>
      </parameter>
    </function>
    <function name="ImageTranslate" returns="void">
      <help><![CDATA[
				Copies an image to a new location on the plane.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="xTrans" required="false" type="number">
        <help><![CDATA[
					Displacement in the x direction.
				]]></help>
      </parameter>
      <parameter name="yTrans" required="false" type="number">
        <help><![CDATA[
					Displacement in the y direction.
				]]></help>
      </parameter>
      <parameter name="interpolation" required="false" type="string">
        <help><![CDATA[
					Type of interpolation:
				]]></help>
      </parameter>
    </function>
    <function name="ImageTranslateDrawingAxis" returns="void">
      <help><![CDATA[
				Translates the origin of the image context to the point (x,y) in the current coordinate system.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="x" required="false" type="number">
        <help><![CDATA[
					x coordinate
				]]></help>
      </parameter>
      <parameter name="y" required="false" type="number">
        <help><![CDATA[
					y coordinate
				]]></help>
      </parameter>
    </function>
    <function name="ImageWrite" returns="void">
      <help><![CDATA[
				Writes an image to the specified filename or destination.
			]]></help>
      <parameter name="name" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="destination" required="false" type="string">
        <help><![CDATA[
					The path to write the file.
				]]></help>
      </parameter>
      <parameter name="quality" required="false" type="number">
        <help><![CDATA[
					Defines the JPEG quality used to encode the image. This parameter applies only to destination files with an extension of JPG or JPEG. Valid values are fractions that range from 0 through 1 (the lower the number, the lower the quality). The default value is 0.75.
				]]></help>
      </parameter>
      <parameter name="overwrite" required="false" type="boolean">
        <help><![CDATA[
					If set to true (default), overwrites the destination file.
				]]></help>
      </parameter>
    </function>
    <function name="ImageWriteBase64" returns="String">
      <help><![CDATA[
				Writes Base64 images to the specified filename and destination.
			]]></help>
      <parameter name="name" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="destination" required="false" type="string">
        <help><![CDATA[
					The path for the destination file.
				]]></help>
      </parameter>
      <parameter name="format" required="false" type="string">
        <help><![CDATA[
					the image format
				]]></help>
      </parameter>
      <parameter name="inHTMLFormat" required="false" type="boolean">
        <help><![CDATA[
					Specify whether Base64 output includes the headers used by the Base64 images in the HTML "img" tag ("data:image/{format};base64,...") :
				]]></help>
      </parameter>
    </function>
    <function name="ImageXORDrawingMode" returns="void">
      <help><![CDATA[
				Sets the paint mode of the image to alternate between the image's current color and the new specified color.
			]]></help>
      <parameter name="image" required="false" type="any">
        <help><![CDATA[
					The image on which this operation is performed.
				]]></help>
      </parameter>
      <parameter name="color" required="false" type="string">
        <help><![CDATA[
					the color (The default value is "black"):
				]]></help>
      </parameter>
    </function>
    <function name="IncrementValue" returns="Number">
      <help><![CDATA[
				this function is deprecated, use instead the ++ operator;Increments the current number by one
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					Number to increment
				]]></help>
      </parameter>
    </function>
    <function name="InputBaseN" returns="Number">
      <help><![CDATA[
				Converts string, using the base specified by radix, to an integer. For example: #InputBaseN("3ff",16)#
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					String that represents a number, in the base specified by radix.
				]]></help>
      </parameter>
      <parameter name="radix" required="false" type="number">
        <help><![CDATA[
					Base of the number represented by string, in the range 2-36.
				]]></help>
      </parameter>
    </function>
    <function name="Insert" returns="String">
      <help><![CDATA[
				Inserts a substring in a string after a specified character position. If position = 0, prefixes the substring to the string.
			]]></help>
      <parameter name="substring" required="false" type="string">
        <help><![CDATA[
					String to insert.
				]]></help>
      </parameter>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					String into which to insert substring.
				]]></help>
      </parameter>
      <parameter name="position" required="false" type="number">
        <help><![CDATA[
					position in string after which to insert substring.
				]]></help>
      </parameter>
    </function>
    <function name="Int" returns="Number">
      <help><![CDATA[
				Calculates the closest integer that is smaller than number.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					Real number to round down to an integer.
				]]></help>
      </parameter>
    </function>
    <function name="Invoke" returns="void">
      <help><![CDATA[
				invokes a function/operation of the given object and if given object is a string, Lucee tries to load as component.
			]]></help>
      <parameter name="object" required="false" type="any">
        <help><![CDATA[
					a component, struct or scope that holds a function, can also be the name of a component, in this case the component get loaded.
				]]></help>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					name of the function/operation
				]]></help>
      </parameter>
      <parameter name="arguments" required="false" type="any">
        <help><![CDATA[
					arguments to pass to the function/operation
				]]></help>
      </parameter>
    </function>
    <function name="IsArray" returns="Boolean">
      <help><![CDATA[
				Determines whether a value is an array. True, if value is an array, a query column object, or xml. also number = Dimension; function tests whether the array has exactly this dimension
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					Variable or array name
				]]></help>
      </parameter>
      <parameter name="dimension" required="false" type="number">
        <help><![CDATA[
					function tests whether the array has exactly this dimension.
				]]></help>
      </parameter>
    </function>
    <function name="IsBinary" returns="Boolean">
      <help><![CDATA[
				Determines whether a value is stored as binary data.
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					Number or string
				]]></help>
      </parameter>
    </function>
    <function name="IsBoolean" returns="Boolean">
      <help><![CDATA[
				Determines if the object represents a boolean value
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					Number or string
				]]></help>
      </parameter>
    </function>
    <function name="IsClosure" returns="Boolean">
      <help><![CDATA[
				checks if given Object is a closure or not.
			]]></help>
      <parameter name="object" required="false" type="any">
        <help><![CDATA[
					The object that is checked.
				]]></help>
      </parameter>
    </function>
    <function name="IsCustomFunction" returns="Boolean">
      <help><![CDATA[
				Determines whether a name represents a custom function
			]]></help>
      <parameter name="name" required="false" type="any">
        <help><![CDATA[
					Name of a custom function. Must not be in quotation marks. If not a defined variable or function name, Lucee generates an error.
				]]></help>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					limit to a specific type (closure,lambda,udf), if not set all custom function types are accpeted.
				]]></help>
      </parameter>
    </function>
    <function name="IsDate" returns="Boolean">
      <help><![CDATA[
				Determines whether a string or Java object can be converted to a date/time value.
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					A string or a variable that contains one.
				]]></help>
      </parameter>
    </function>
    <function name="IsDebugMode" returns="Boolean">
      <help><![CDATA[
				Determines whether debugging output is enabled.
			]]></help>

    </function>
    <function name="IsDefined" returns="Boolean">
      <help><![CDATA[
				Evaluates a string value to determine whether the variable named in it exists.
			]]></help>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					String, enclosed in quotation marks. Name of variable to test for.
				]]></help>
      </parameter>
    </function>
    <function name="IsEmpty" returns="Boolean">
      <help><![CDATA[
				Returns whether or not a given value is "empty". The following data types can be checked:
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					The value to check. Can be either a string, array, struct or query object.
				]]></help>
      </parameter>
    </function>
    <function name="IsImage" returns="Boolean">
      <help><![CDATA[
				Determines whether a variable returns an image.
			]]></help>
      <parameter name="name" required="false" type="any">
        <help><![CDATA[
					The variable that is checked.
				]]></help>
      </parameter>
    </function>
    <function name="IsImageFile" returns="Boolean">
      <help><![CDATA[
				Verifies whether an image file is valid.
			]]></help>
      <parameter name="path" required="false" type="string">
        <help><![CDATA[
					The pathname of the file to be checked. The pathname can be absolute or relative to the CFM page and must be enclosed in quotation marks.
				]]></help>
      </parameter>
    </function>
    <function name="IsInstanceOf" returns="Boolean">
      <help><![CDATA[
				Determines whether an object is an instance of a Lucee interface or component, or of a Java class.
			]]></help>
      <parameter name="obj" required="false" type="any">
        <help><![CDATA[
					The CFC instance or Java object that you are testing
				]]></help>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					The name of the interface, component, or Java class of which the object might be an instance.
				]]></help>
      </parameter>
    </function>
    <function name="isinthread" returns="Boolean">
      <help><![CDATA[
				Determines whether the executing code is inside a cfthread or not.
			]]></help>

    </function>
    <function name="IsIPInRange" returns="Boolean">
      <help><![CDATA[
				Checks if an ip is in the range of a list of given ips. IPv4 and IPv6 are supported.
			]]></help>
      <parameter name="ips" required="false" type="any">
        <help><![CDATA[
					A comma separeted list of strings or a string array of ip definitions. The following patterns are allowed:
				]]></help>
      </parameter>
      <parameter name="ip" required="false" type="string">
        <help><![CDATA[
					ip to search
				]]></help>
      </parameter>
    </function>
    <function name="IsIPv6" returns="Boolean">
      <help><![CDATA[
				checks if given IP is of IPV6 format
			]]></help>
      <parameter name="hostname" required="false" type="string">
        <help><![CDATA[
					the hostname to check
				]]></help>
      </parameter>
    </function>
    <function name="IsJson" returns="Boolean">
      <help><![CDATA[
				Evaluates whether a string is in valid JSON (JavaScript Object Notation) data interchange format.
			]]></help>
      <parameter name="var" required="false" type="any">
        <help><![CDATA[
					A string or variable that represents one.
				]]></help>
      </parameter>
    </function>
    <function name="IsLeapYear" returns="Boolean">
      <help><![CDATA[
				Determines whether a year is a leap year.
			]]></help>
      <parameter name="year" required="false" type="number">
        <help><![CDATA[
					Number representing a year
				]]></help>
      </parameter>
    </function>
    <function name="IsLocalHost" returns="Boolean">
      <help><![CDATA[
				Determines whether the specified IP address is the localhost.
			]]></help>
      <parameter name="ip" required="false" type="String">
        <help><![CDATA[
					Valid IP address.
				]]></help>
      </parameter>
    </function>
    <function name="IsNotMap" returns="void">
      <help><![CDATA[
				return true if the given Object is not of Type java.util.Map
			]]></help>

    </function>
    <function name="IsNull" returns="Boolean">
      <help><![CDATA[
				Determines whether given object is null or not
			]]></help>
      <parameter name="object" required="false" type="any">
        <help><![CDATA[
					Object for which you perform the null check.
				]]></help>
      </parameter>
    </function>
    <function name="IsNumeric" returns="Boolean">
      <help><![CDATA[
				Determines if the object represents a numeric
			]]></help>
      <parameter name="string" required="false" type="any">
        <help><![CDATA[
					A string or a variable that contains one.
				]]></help>
      </parameter>
    </function>
    <function name="IsNumericDate" returns="Boolean">
      <help><![CDATA[
				Evaluates whether a real number is a valid representation of a date (date/time object).
			]]></help>
      <parameter name="number" required="false" type="any">
        <help><![CDATA[
					A real number
				]]></help>
      </parameter>
    </function>
    <function name="IsObject" returns="Boolean">
      <help><![CDATA[
				Determines whether a value is an object. True, if the value represents a CFML object. False if the value is any other type of data, such as an integer, string, date, or struct.
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					A value, typically the name of a variable.
				]]></help>
      </parameter>
    </function>
    <function name="IsPDFObject" returns="Boolean">
      <help><![CDATA[
				Determines whether a value is a PDF object.
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					A value, typically the PDF object stored as a variable name.
				]]></help>
      </parameter>
    </function>
    <function name="IsQuery" returns="Boolean">
      <help><![CDATA[
				Determines whether value is a query.
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					Query variable
				]]></help>
      </parameter>
    </function>
    <function name="IsSimpleValue" returns="Boolean">
      <help><![CDATA[
				Determines if the object represents a simple value like a string, number, boolean etc
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					Variable or expression
				]]></help>
      </parameter>
    </function>
    <function name="IsSOAPRequest" returns="Boolean">
      <help><![CDATA[
				Determines whether a CFC is being called as a web service.
			]]></help>

    </function>
    <function name="IsStruct" returns="Boolean">
      <help><![CDATA[
				Determines if the object is a structure
			]]></help>
      <parameter name="variable" required="false" type="any">
        <help><![CDATA[
					Variable name
				]]></help>
      </parameter>
    </function>
    <function name="IsUserInAnyRole" returns="Boolean">
      <help><![CDATA[
				Determines whether an authenticated user belongs to any role in a list of roles.
			]]></help>
      <parameter name="role_list" required="false" type="string">
        <help><![CDATA[
					A comma-delimited list of one or more roles to be tested.
				]]></help>
      </parameter>
    </function>
    <function name="IsUserInRole" returns="Boolean">
      <help><![CDATA[
				Determines whether an authenticated user belongs to the specified Role.
			]]></help>
      <parameter name="role_name" required="false" type="any">
        <help><![CDATA[
					Name of a security role
				]]></help>
      </parameter>
    </function>
    <function name="IsUserLoggedIn" returns="Boolean">
      <help><![CDATA[
				Determines whether an user is logged in.
			]]></help>

    </function>
    <function name="IsValid" returns="Boolean">
      <help><![CDATA[
				Tests whether a value meets a validation or data type rule.
			]]></help>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					The valid format for the data; one of the following:
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					The value to test.
				]]></help>
      </parameter>
      <parameter name="min_or_pattern" required="false" type="any">
        <help><![CDATA[
					The minimum valid value; used only for range validation or a JavaScript regular expression that the parameter must match; used only for regex or regular_expression validation.
				]]></help>
      </parameter>
      <parameter name="max" required="false" type="any">
        <help><![CDATA[
					The maximum valid value; used only for range validation.
				]]></help>
      </parameter>
    </function>
    <function name="IsVideoFile" returns="Boolean">
      <help><![CDATA[
				Check if a String is a Video file
			]]></help>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					file to check
				]]></help>
      </parameter>
    </function>
    <function name="IsWddx" returns="Boolean">
      <help><![CDATA[
				Determines whether a value is a well-formed WDDX packet.
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					A WDDX packet
				]]></help>
      </parameter>
    </function>
    <function name="IsXML" returns="Boolean">
      <help><![CDATA[
				Determines whether a string is well-formed XML text.
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					A string containing the XML document text
				]]></help>
      </parameter>
    </function>
    <function name="IsXmlAttribute" returns="Boolean">
      <help><![CDATA[
				Determines whether the function parameter is an XML Document Object Model (DOM) attribute node.
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					Name of an XML attribute
				]]></help>
      </parameter>
    </function>
    <function name="IsXmlDoc" returns="Boolean">
      <help><![CDATA[
				Determines whether a function parameter is an Extended Markup language (XML) document object.
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					Name of an XML document object
				]]></help>
      </parameter>
    </function>
    <function name="IsXmlElem" returns="Boolean">
      <help><![CDATA[
				Determines whether a function parameter is an Extended Markup language (XML) document object element.
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					Name of an XML document object element
				]]></help>
      </parameter>
    </function>
    <function name="IsXmlNode" returns="Boolean">
      <help><![CDATA[
				Determines whether the function parameter is an XML document object node.
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					Name of an XML document object node.
				]]></help>
      </parameter>
    </function>
    <function name="IsXmlRoot" returns="Boolean">
      <help><![CDATA[
				Determines whether a function parameter is the root element of an Extended Markup language (XML) document object.
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					Name of an XML document object
				]]></help>
      </parameter>
    </function>
    <function name="IsZipFile" returns="Boolean">
      <help><![CDATA[
				Verifies whether an zip file is valid.
			]]></help>
      <parameter name="path" required="false" type="string">
        <help><![CDATA[
					path to the zip file
				]]></help>
      </parameter>
    </function>
    <function name="JavaCast" returns="void">
      <help><![CDATA[
				Converts the data type of a CFML variable to pass as an argument to an overloaded method of a Java object.
			]]></help>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					Data type to which to convert variable: bigdecimal (converts to java.math.BigDecimal)
				]]></help>
      </parameter>
      <parameter name="variable" required="false" type="any">
        <help><![CDATA[
					the object to cast
				]]></help>
      </parameter>
    </function>
    <function name="JSStringFormat" returns="String">
      <help><![CDATA[
				Escapes special JavaScript characters, such as single quotation mark, double quotation mark, and newline
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one.
				]]></help>
      </parameter>
    </function>
    <function name="LCase" returns="String">
      <help><![CDATA[
				Converts the alphabetic characters in a string to lowercase.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
    </function>
    <function name="Left" returns="String">
      <help><![CDATA[
				Returns a substring from beginning of the input string, with a length specified by the count argument.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one.
				]]></help>
      </parameter>
      <parameter name="count" required="false" type="number">
        <help><![CDATA[
					A non-zero integer. A positive value of n will return n characters from the beginning of the string.
				]]></help>
      </parameter>
    </function>
    <function name="Len" returns="Number">
      <help><![CDATA[
				Determines the length of a string, array,struct,query ...
			]]></help>
      <parameter name="value" required="false" type="object">
        <help><![CDATA[
					the length of a string
				]]></help>
      </parameter>
    </function>
    <function name="ListAppend" returns="String">
      <help><![CDATA[
				Concatenates a list or element to a list.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					a string value
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
    </function>
    <function name="ListAvg" returns="Number">
      <help><![CDATA[
				<pre><span class="nf">ListAvg</span><span class="p">(</span> <span class="nv">list</span> <span class="p">[,</span> <span class="nv">delimiters</span> <span class="p">[,</span> <span class="nv">multiCharacterDelimiter</span> <span class="p">]</span> <span class="p">]</span> <span class="p">)</span>
				</pre>
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="multiCharacterDelimiter" required="false" type="boolean">
        <help><![CDATA[
					specifying whether the delimiters parameter specifies a multi-character delimiter. If this parameter is true, the delimiters parameter must specify a single delimiter consisting of multiple characters. This parameter enables the ListToArray function to convert a list such as the following to an array of color names: red:|orange:|yellow:|green:|blue:|indigo:|violet.
				]]></help>
      </parameter>
    </function>
    <function name="ListChangeDelims" returns="String">
      <help><![CDATA[
				Changes a list delimiter. Returns a copy of the list, with each delimiter character replaced by new_delimiter.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="new_delimiter" required="false" type="string">
        <help><![CDATA[
					new delimiter to set. a delimiter is a characters that separate list elements.
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					existing delimiter to replace. a delimiter is a characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
      <parameter name="multiCharacterDelimiter" required="false" type="boolean">
        <help><![CDATA[
					specifying whether the delimiters parameter specifies a multi-character delimiter.
				]]></help>
      </parameter>
    </function>
    <function name="ListCompact" returns="String">
      <help><![CDATA[
				remove empty items at the end and at the start of the list
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="multiCharacterDelimiter" required="false" type="boolean">
        <help><![CDATA[
					specifying whether the delimiters parameter specifies a multi-character delimiter. If this parameter is true, the delimiters parameter must specify a single delimiter consisting of multiple characters. This parameter enables the ListToArray function to convert a list such as the following to an array of color names: red:|orange:|yellow:|green:|blue:|indigo:|violet.
				]]></help>
      </parameter>
    </function>
    <function name="ListContains" returns="Number">
      <help><![CDATA[
				Determines the index of the first list element that contains a specified substring. Returns the index of the first list element that contains substring. If not found, returns zero.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="substring" required="false" type="string">
        <help><![CDATA[
					the string to search in the list
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
      <parameter name="multiCharacterDelimiter" required="false" type="boolean">
        <help><![CDATA[
					specifying whether the delimiters parameter specifies a multi-character delimiter. If this parameter is true, the delimiters parameter must specify a single delimiter consisting of multiple characters. This parameter enables the ListToArray function to convert a list such as the following to an array of color names: red:|orange:|yellow:|green:|blue:|indigo:|violet.
				]]></help>
      </parameter>
    </function>
    <function name="ListContainsNoCase" returns="Number">
      <help><![CDATA[
				Determines the index of the first list element that contains a specified substring.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="substring" required="false" type="string">
        <help><![CDATA[
					the string to search in the list
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
      <parameter name="multiCharacterDelimiter" required="false" type="boolean">
        <help><![CDATA[
					specifying whether the delimiters parameter specifies a multi-character delimiter. If this parameter is true, the delimiters parameter must specify a single delimiter consisting of multiple characters. This parameter enables the ListToArray function to convert a list such as the following to an array of color names: red:|orange:|yellow:|green:|blue:|indigo:|violet.
				]]></help>
      </parameter>
    </function>
    <function name="ListDeleteAt" returns="String">
      <help><![CDATA[
				Deletes an element from a list. Returns a copy of the list, without the specified element.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="position" required="false" type="number">
        <help><![CDATA[
					position of the element to delete
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
    </function>
    <function name="ListEach" returns="void">
      <help><![CDATA[
				call the given UDF/Closure with every value in the string list.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					string list to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					function/closure that implements the following constructor [function(any value, numeric index,string list, string delimiter):void].
				]]></help>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					delimiter used to separate the string list
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					include empty fields or not
				]]></help>
      </parameter>
      <parameter name="multiCharacterDelimiter" required="false" type="boolean">
        <help><![CDATA[
					specifying whether the delimiters parameter specifies a multi-character delimiter. If this parameter is true, the delimiters parameter must specify a single delimiter consisting of multiple characters. This parameter enables the ListToArray function to convert a list such as the following to an array of color names: red:|orange:|yellow:|green:|blue:|indigo:|violet.
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="ListEvery" returns="Boolean">
      <help><![CDATA[
				This function calls a given closure/function with every element in a given string list and returns true, if all of the closure calls returns true.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					string list to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					function/closure that implements the following constructor [function(any value, numeric index, string list, string delimiter):boolean].
				]]></help>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					delimiter used to separate the string list
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					include empty fields or not
				]]></help>
      </parameter>
      <parameter name="multiCharacterDelimiter" required="false" type="boolean">
        <help><![CDATA[
					specifying whether the delimiters parameter specifies a multi-character delimiter. If this parameter is true, the delimiters parameter must specify a single delimiter consisting of multiple characters. This parameter enables the ListToArray function to convert a list such as the following to an array of color names: red:|orange:|yellow:|green:|blue:|indigo:|violet.
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="ListFilter" returns="String">
      <help><![CDATA[
				This function creates a new string list that returns all entries from an string list that match the given filter.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					list to filter entries from
				]]></help>
      </parameter>
      <parameter name="filter" required="false" type="function">
        <help><![CDATA[
					function/closure that implements the following constructor [function(any value, numeric index,string list, string delimiter):boolean].
				]]></help>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					delimiter used to separate the string list
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					include empty fields or not
				]]></help>
      </parameter>
      <parameter name="multiCharacterDelimiter" required="false" type="boolean">
        <help><![CDATA[
					specifying whether the delimiters parameter specifies a multi-character delimiter. If this parameter is true, the delimiters parameter must specify a single delimiter consisting of multiple characters. This parameter enables the ListToArray function to convert a list such as the following to an array of color names: red:|orange:|yellow:|green:|blue:|indigo:|violet.
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="ListFind" returns="Number">
      <help><![CDATA[
				Determines the index of the first list element in which a specified value occurs. Case-sensitive
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					element for which to search
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
    </function>
    <function name="ListFindNoCase" returns="Number">
      <help><![CDATA[
				Determines the index of the first list element in which a specified value occurs
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					element for which to search
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
    </function>
    <function name="ListFirst" returns="String">
      <help><![CDATA[
				Gets the first element of a list.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
      <parameter name="count" required="false" type="number">
        <help><![CDATA[
					specifies how many items to return from the beginning of the list. default is 1.
				]]></help>
      </parameter>
    </function>
    <function name="ListGetAt" returns="String">
      <help><![CDATA[
				Gets a list element at a specified position.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="position" required="false" type="number">
        <help><![CDATA[
					position of the element to return
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
    </function>
    <function name="ListIndexExists" returns="Boolean">
      <help><![CDATA[
				Determines if an element at the given position exists or not
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="index" required="false" type="number">
        <help><![CDATA[
					index to check for.
				]]></help>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
    </function>
    <function name="ListInsertAt" returns="String">
      <help><![CDATA[
				Inserts an element in a list.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="position" required="false" type="number">
        <help><![CDATA[
					Position at which to insert element. The first list position is 1.
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					An element or a list of elements.
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
    </function>
    <function name="ListItemTrim" returns="String">
      <help><![CDATA[
				Removes all the white space surrounding each element, returning back the new list
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
    </function>
    <function name="ListLast" returns="String">
      <help><![CDATA[
				Gets the last element of a list.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
    </function>
    <function name="ListLen" returns="Number">
      <help><![CDATA[
				Determines the number of elements in a list.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
    </function>
    <function name="ListMap" returns="String">
      <help><![CDATA[
				Calls the given closure with every element in the given array.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					list to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					filter can be a function/closure that implements the following constructor
				]]></help>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					delimiter used to separate the string list
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					include empty fields or not
				]]></help>
      </parameter>
      <parameter name="multiCharacterDelimiter" required="false" type="boolean">
        <help><![CDATA[
					specifying whether the delimiters parameter specifies a multi-character delimiter.
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="ListPrepend" returns="String">
      <help><![CDATA[
				Inserts an element at the beginning of a list.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					An element or a list of elements.
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
    </function>
    <function name="ListQualify" returns="String">
      <help><![CDATA[
				Inserts a string at the beginning and end of list elements.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="qualifier" required="false" type="string">
        <help><![CDATA[
					string to insert before and after the list elements specified in the elements parameter.
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="elements" required="false" type="string">
        <help><![CDATA[
					which type of element are qualified
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
    </function>
    <function name="ListReduce" returns="void">
      <help><![CDATA[
				Iterates over every entry of the given array and calls the closure with every element.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					string list to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					function/closure that implements the following constructor
				]]></help>
      </parameter>
      <parameter name="initialValue" required="false" type="object">
        <help><![CDATA[
					inital value passed as part of the first closure call
				]]></help>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					delimiter used to separate the string list
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					include empty fields or not
				]]></help>
      </parameter>
      <parameter name="multiCharacterDelimiter" required="false" type="boolean">
        <help><![CDATA[
					specifying whether the delimiters parameter specifies a multi-character delimiter.
				]]></help>
      </parameter>
    </function>
    <function name="ListRemoveDuplicates" returns="String">
      <help><![CDATA[
				Removes duplicate values from list.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="ignoreCase" required="false" type="boolean">
        <help><![CDATA[
					if set to true, the duplicate value test will not be case sensitive
				]]></help>
      </parameter>
    </function>
    <function name="ListRest" returns="String">
      <help><![CDATA[
				Gets a list, without its first element.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
      <parameter name="offset" required="false" type="number">
        <help><![CDATA[
					specifies how many items to skip from the beginning of the list. default is 1.
				]]></help>
      </parameter>
    </function>
    <function name="ListSetAt" returns="String">
      <help><![CDATA[
				Replaces the contents of a list element.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="position" required="false" type="number">
        <help><![CDATA[
					Position at which to set a value. The first list position is 1.
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					An element or a list of elements to set.
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
    </function>
    <function name="ListSome" returns="Boolean">
      <help><![CDATA[
				This function calls a given closure/function with every element in a given string list and returns true, if one of the closure calls returns true.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					string list to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					function/closure that implements the following constructor [function(any value, numeric index,string list, string delimiter):boolean].
				]]></help>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					delimiter used to separate the string list
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					include empty fields or not
				]]></help>
      </parameter>
      <parameter name="multiCharacterDelimiter" required="false" type="boolean">
        <help><![CDATA[
					specifying whether the delimiters parameter specifies a multi-character delimiter. If this parameter is true, the delimiters parameter must specify a single delimiter consisting of multiple characters. This parameter enables the ListToArray function to convert a list such as the following to an array of color names: red:|orange:|yellow:|green:|blue:|indigo:|violet.
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="ListSort" returns="String">
      <help><![CDATA[
				Sorts list elements according to a sort type and sort order.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="sort_type" required="false" type="string">
        <help><![CDATA[
					there are different sort types:
				]]></help>
      </parameter>
      <parameter name="sort_order" required="false" type="string">
        <help><![CDATA[
					sort direction:
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
    </function>
    <function name="ListToArray" returns="Array">
      <help><![CDATA[
				Copies the elements of a list to an array.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
      <parameter name="multiCharacterDelimiter" required="false" type="boolean">
        <help><![CDATA[
					specifying whether the delimiters parameter specifies a multi-character delimiter. The default is false. If this parameter is true, the delimiters parameter must specify a single delimiter consisting of multiple characters. This parameter enables the ListToArray function to convert a list such as the following to an array of color names: red:|orange:|yellow:|green:|blue:|indigo:|violet.
				]]></help>
      </parameter>
    </function>
    <function name="ListTrim" returns="String">
      <help><![CDATA[
				this function is deprecated, use instead ListCompact
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="delimiters" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
    </function>
    <function name="ListValueCount" returns="Number">
      <help><![CDATA[
				Counts instances of a specified value in a list. The search is case-sensitive.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					Item for which to search
				]]></help>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
    </function>
    <function name="ListValueCountNoCase" returns="Number">
      <help><![CDATA[
				Counts instances of a specified value in a list. The search is case-insensitive.
			]]></help>
      <parameter name="list" required="false" type="string">
        <help><![CDATA[
					a string list
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					Item for which to search
				]]></help>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					Characters that separate list elements. The default value is comma.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					if set to true, empty values are included as well
				]]></help>
      </parameter>
    </function>
    <function name="LJustify" returns="String">
      <help><![CDATA[
				Left justifies characters in a string of a specified length.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
      <parameter name="length" required="false" type="number">
        <help><![CDATA[
					Length of field in which to justify string
				]]></help>
      </parameter>
    </function>
    <function name="Location" returns="void">
      <help><![CDATA[
				Stops execution of the current request and redirect to another location.
			]]></help>
      <parameter name="url" required="false" type="string">
        <help><![CDATA[
					URL where the call should redirect
				]]></help>
      </parameter>
      <parameter name="addToken" required="false" type="boolean">
        <help><![CDATA[
					appends client variable information to URL (true|false)
				]]></help>
      </parameter>
      <parameter name="statusCode" required="false" type="numeric">
        <help><![CDATA[
					The HTTP status code (301,302(default), 303, 304, 305, 307)
				]]></help>
      </parameter>
    </function>
    <function name="Log" returns="Number">
      <help><![CDATA[
				Calculates the natural logarithm of a number. Natural logarithms are based on the constant e (2.71828182845904).
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					Positive real number for which to calculate the natural logarithm
				]]></help>
      </parameter>
    </function>
    <function name="Log10" returns="Number">
      <help><![CDATA[
				Calculates the logarithm of number, to base 10.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					Positive real number for which to calculate the logarithm
				]]></help>
      </parameter>
    </function>
    <function name="LSCurrencyFormat" returns="String">
      <help><![CDATA[
				Formats a number in a locale-specific currency format.
			]]></help>
      <parameter name="number" required="false" type="object">
        <help><![CDATA[
					Currency value
				]]></help>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					local: the currency format and currency symbol used in the locale. international: the international standard currency format and currency symbol of the locale. none: the currency format used in the locale without a currency symbol.
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
    </function>
    <function name="LSDateFormat" returns="String">
      <help><![CDATA[
				Formats a date string to a given output using the current sessions locale
			]]></help>
      <parameter name="date" required="false" type="any">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="mask" required="false" type="string">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="LSDateTimeFormat" returns="String">
      <help><![CDATA[
				Formats a date string to a given output using the current locale.
			]]></help>
      <parameter name="date" required="false" type="any">
        <help><![CDATA[
					date object
				]]></help>
      </parameter>
      <parameter name="mask" required="false" type="string">
        <help><![CDATA[
					Mask that has to be used for formatting. The function follows Java date time mask. For details, see the Java documentation section Date and Time Patterns.
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="LSDayOfWeek" returns="Number">
      <help><![CDATA[
				Returns the day of the week the date represents in locale format.
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="LSEuroCurrencyFormat" returns="String">
      <help><![CDATA[
				this function is just an alias for <a href="/reference/functions/lscurrencyformat.html">LSCurrencyFormat</a>
			]]></help>
      <parameter name="number" required="false" type="object">
        <help><![CDATA[
					Currency value
				]]></help>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					one of the following:
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
    </function>
    <function name="LSIsCurrency" returns="Boolean">
      <help><![CDATA[
				Determines whether a string is a valid representation of a currency amount in the current locale.
			]]></help>
      <parameter name="number" required="false" type="string">
        <help><![CDATA[
					A currency string
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="LSIsDate" returns="Boolean">
      <help><![CDATA[
				Determines whether a string is a valid representation of a date/time value in the current locale.
			]]></help>
      <parameter name="date" required="false" type="any">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="LSIsNumeric" returns="Boolean">
      <help><![CDATA[
				Determines whether a string is a valid representation of a number in the current locale.
			]]></help>
      <parameter name="number" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
    </function>
    <function name="LSNumberFormat" returns="String">
      <help><![CDATA[
				Formats a number to the given format mask in the current locale
			]]></help>
      <parameter name="number" required="false" type="any">
        <help><![CDATA[
					Number to format
				]]></help>
      </parameter>
      <parameter name="mask" required="false" type="string">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
    </function>
    <function name="LSParseCurrency" returns="String">
      <help><![CDATA[
				Converts a locale-specific currency string into a formatted number. Attempts conversion by comparing the string with each the three supported currency formats (none, local, international) and using the first that matches.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A locale-specific string
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
    </function>
    <function name="LSParseDateTime" returns="DateTime">
      <help><![CDATA[
				Converts a string that is a valid date/time representation in the current locale into a date/time object.
			]]></help>
      <parameter name="date" required="false" type="object">
        <help><![CDATA[
					A string in a format that is readable in the current locale.
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="string">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
      <parameter name="format" required="false" type="string">
        <help><![CDATA[
					Mask that has to be used for formatting. The function follows Java date time mask. For details, see the Java documentation section Date and Time Patterns.
				]]></help>
      </parameter>
    </function>
    <function name="LSParseEuroCurrency" returns="String">
      <help><![CDATA[
				use function <a href="/reference/functions/lsparsecurrency.html">LSParseCurrency</a> instead
			]]></help>
      <parameter name="number" required="false" type="string">
        <help><![CDATA[
					Locale-specific string
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
    </function>
    <function name="LSParseNumber" returns="Number">
      <help><![CDATA[
				Converts a string that is a valid numeric representation in the current locale into a formatted number.
			]]></help>
      <parameter name="number" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
    </function>
    <function name="LSTimeFormat" returns="String">
      <help><![CDATA[
				Formats a time string to a given output using the current locale.
			]]></help>
      <parameter name="time" required="false" type="any">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="mask" required="false" type="string">
        <help><![CDATA[
					Mask that has to be used for formatting. The function follows Java date time mask. For details, see the Java documentation section Date and Time Patterns.
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="LsWeek" returns="Number">
      <help><![CDATA[
				Returns the week number in the year of the date referenced, based on the local influence.
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="LTrim" returns="String">
      <help><![CDATA[
				Removes leading spaces from a string.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
    </function>
    <function name="ManifestRead" returns="Struct">
      <help><![CDATA[
				reads a manifest file and returns the content as struct
			]]></help>
      <parameter name="str" required="false" type="string">
        <help><![CDATA[
					Path to a jar file containing a "MANIFEST.MF" file in the directory "/META-INF/", path to a Manifest file or the content of a Manifest File
				]]></help>
      </parameter>
    </function>
    <function name="Max" returns="Number">
      <help><![CDATA[
				Returns the greater of two numbers.
			]]></help>
      <parameter name="number1" required="false" type="number">
        <help><![CDATA[
					first number
				]]></help>
      </parameter>
      <parameter name="number2" required="false" type="number">
        <help><![CDATA[
					second number
				]]></help>
      </parameter>
    </function>
    <function name="Metaphone" returns="String">
      <help><![CDATA[
				Metaphone is a phonetic algorithm, an algorithm published in 1990 for indexing words by their English pronunciation. The algorithm produces variable length keys as its output, as opposed to Soundex's fixed-length keys. Similar sounding words share the same keys.
			]]></help>
      <parameter name="str" required="false" type="string">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="Mid" returns="String">
      <help><![CDATA[
				Extracts a substring from a string.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					Must be single-quotation mark or double-quotation mark delimited.
				]]></help>
      </parameter>
      <parameter name="start" required="false" type="number">
        <help><![CDATA[
					The position of the first character to retrieve.
				]]></help>
      </parameter>
      <parameter name="count" required="false" type="number">
        <help><![CDATA[
					The number of characters to retrieve. If not set, all characters until the end of the string will be returned.
				]]></help>
      </parameter>
    </function>
    <function name="Millisecond" returns="Number">
      <help><![CDATA[
				Returns the milliseconds of the referenced date.
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="Min" returns="Number">
      <help><![CDATA[
				Determines the lesser of two numbers.
			]]></help>
      <parameter name="number1" required="false" type="number">
        <help><![CDATA[
					first number
				]]></help>
      </parameter>
      <parameter name="number2" required="false" type="number">
        <help><![CDATA[
					second number
				]]></help>
      </parameter>
    </function>
    <function name="Minute" returns="Number">
      <help><![CDATA[
				Extracts the minute value from a date/time object in the range 0-59.
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="Month" returns="Number">
      <help><![CDATA[
				Extracts the month value from a date/time object.
			]]></help>
      <parameter name="Date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="MonthAsString" returns="String">
      <help><![CDATA[
				Returns the string label for the given month
			]]></help>
      <parameter name="month" required="false" type="number">
        <help><![CDATA[
					a number between 1 and 12
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
    </function>
    <function name="MonthShortAsString" returns="String">
      <help><![CDATA[
				Returns the string label for the given month in short format.
			]]></help>
      <parameter name="monthnumber" required="false" type="number">
        <help><![CDATA[
					A number corresponding a given month; 1 (January)- 12 (December)
				]]></help>
      </parameter>
      <parameter name="locale" required="false" type="locale">
        <help><![CDATA[
					Locale to use instead of the locale of the page when processing the function
				]]></help>
      </parameter>
    </function>
    <function name="NewLine" returns="String">
      <help><![CDATA[
				returns a new line
			]]></help>

    </function>
    <function name="Now" returns="DateTime">
      <help><![CDATA[
				Returns the current date and time
			]]></help>

    </function>
    <function name="NowServer" returns="DateTime">
      <help><![CDATA[
				<div class="card card-yellow">
				 <aside class="card-side">
				  <span class="card-heading icon icon-info"></span>
				 </aside>
				 <div class="card-main">
				  <div class="card-inner">
				   <p class="card-heading">Warning</p>
				   <p>This function is deprecated. Returns the current time on the server independent of Lucee timezone definition.</p>
				  </div>
				 </div>
				</div>
			]]></help>

    </function>
    <function name="NullValue" returns="void">
      <help><![CDATA[
				returns null
			]]></help>

    </function>
    <function name="NumberFormat" returns="String">
      <help><![CDATA[
				Creates a custom-formatted number value. For international number formatting use <a href="/reference/functions/lsnumberformat.html">LSNumberFormat</a>.
			]]></help>
      <parameter name="number" required="false" type="any">
        <help><![CDATA[
					A number.
				]]></help>
      </parameter>
      <parameter name="mask" required="false" type="string">
        <help><![CDATA[
					_ = optional digit . = decimal point 0 = mandatory digit
				]]></help>
      </parameter>
    </function>
    <function name="ObjectEquals" returns="Boolean">
      <help><![CDATA[
				compares simply and complex objects for equality, attention string comparsion is case sensitive
			]]></help>
      <parameter name="left" required="false" type="any">
        <help><![CDATA[
					left operant
				]]></help>
      </parameter>
      <parameter name="right" required="false" type="any">
        <help><![CDATA[
					right operant
				]]></help>
      </parameter>
    </function>
    <function name="ObjectLoad" returns="void">
      <help><![CDATA[
				loads an object serialized in a binary form from a file or as binary input
			]]></help>
      <parameter name="input" required="false" type="any">
        <help><![CDATA[
					a binary represenation of an object or a path to a file that contains this
				]]></help>
      </parameter>
    </function>
    <function name="ObjectSave" returns="void">
      <help><![CDATA[
				serialize a (Serializable) object to a binary representation of the object
			]]></help>
      <parameter name="input" required="false" type="any">
        <help><![CDATA[
					object to serialize
				]]></help>
      </parameter>
      <parameter name="filepath" required="false" type="string">
        <help><![CDATA[
					path where lucee should save the object
				]]></help>
      </parameter>
    </function>
    <function name="ORMClearSession" returns="void">
      <help><![CDATA[
				Removes all the entities that are loaded or created in the session.
			]]></help>
      <parameter name="datasource" required="false" type="string">
        <help><![CDATA[
					datasource used for the session, if nor defined the datasource defined in application.cfc/cfapplication is used.
				]]></help>
      </parameter>
    </function>
    <function name="ORMCloseAllSessions" returns="void">
      <help><![CDATA[
				Closes all ORM session.
			]]></help>

    </function>
    <function name="ORMCloseSession" returns="void">
      <help><![CDATA[
				Closes the current ORM session.
			]]></help>
      <parameter name="datasource" required="false" type="string">
        <help><![CDATA[
					datasource used for the session, if nor defined the datasource defined in application.cfc/cfapplication is used.
				]]></help>
      </parameter>
    </function>
    <function name="ORMEvictCollection" returns="void">
      <help><![CDATA[
				This will remove all the entries with the specified relation/collection name in the specified component.
			]]></help>
      <parameter name="entityName" required="false" type="String">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="collectionName" required="false" type="String">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="primaryKey" required="false" type="String">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="ORMEvictEntity" returns="void">
      <help><![CDATA[
				This will remove all the entries for the specified component name from the entity cache.
			]]></help>
      <parameter name="entityName" required="false" type="String">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="primaryKey" required="false" type="String">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="ORMEvictQueries" returns="void">
      <help><![CDATA[
				This will remove all the queries from the named query cache.
			]]></help>
      <parameter name="cacheName" required="false" type="String">
        <help><![CDATA[
					Alias: cache, region
				]]></help>
      </parameter>
      <parameter name="datasource" required="false" type="string">
        <help><![CDATA[
					datasource used for the session, if nor defined the datasource defined in application.cfc/cfapplication is used.
				]]></help>
      </parameter>
    </function>
    <function name="ORMExecuteQuery" returns="void">
      <help><![CDATA[
				Runs the HQL on the default data source specified for the application.
			]]></help>
      <parameter name="hql" required="false" type="string">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="paramsOrUnique" required="false" type="any">
        <help><![CDATA[
					Alias: params
				]]></help>
      </parameter>
      <parameter name="uniqueOrQueryOptions" required="false" type="any">
        <help><![CDATA[
					Alias: unique
				]]></help>
      </parameter>
      <parameter name="queryOptions" required="false" type="any">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="ORMFlush" returns="void">
      <help><![CDATA[
				Flushes the current ORM session. ORMFlush flushes all the pending CRUD operations in that request.
			]]></help>
      <parameter name="datasource" required="false" type="string">
        <help><![CDATA[
					datasource used for the session, if nor defined the datasource defined in application.cfc/cfapplication is used.
				]]></help>
      </parameter>
    </function>
    <function name="ORMGetSession" returns="void">
      <help><![CDATA[
				Returns the current ORM session
			]]></help>
      <parameter name="datasource" required="false" type="string">
        <help><![CDATA[
					datasource used for the session, if nor defined the datasource defined in application.cfc/cfapplication is used.
				]]></help>
      </parameter>
    </function>
    <function name="ORMGetSessionFactory" returns="void">
      <help><![CDATA[
				Returns ORM session factory instance
			]]></help>
      <parameter name="datasource" required="false" type="string">
        <help><![CDATA[
					datasource used for the session, if nor defined the datasource defined in application.cfc/cfapplication is used.
				]]></help>
      </parameter>
    </function>
    <function name="ORMReload" returns="void">
      <help><![CDATA[
				Returns ORM session factory instance
			]]></help>

    </function>
    <function name="PagePoolClear" returns="Boolean">
      <help><![CDATA[
				clear pages in pools
			]]></help>

    </function>
    <function name="PagePoolList" returns="Array">
      <help><![CDATA[
				list all pages in pools
			]]></help>

    </function>
    <function name="ParagraphFormat" returns="String">
      <help><![CDATA[
				Formats the carriage returns in a string to a HTML alternatives
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
    </function>
    <function name="ParameterExists" returns="Boolean">
      <help><![CDATA[
				Determines if the parameter exists
			]]></help>
      <parameter name="parameter" required="false" type="variablestring">
        <help><![CDATA[
					Alias: param
				]]></help>
      </parameter>
    </function>
    <function name="ParseDateTime" returns="DateTime">
      <help><![CDATA[
				Parses a date/time string according to the English (U.S.) locale conventions.
			]]></help>
      <parameter name="date" required="false" type="object">
        <help><![CDATA[
					A string containing a date/time value formatted according to U.S. locale conventions.
				]]></help>
      </parameter>
      <parameter name="format" required="false" type="string">
        <help><![CDATA[
					The format (Java Syntax) of the string. This string is used to parse the given date string to date time object. For details see: Java Date Time masks
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="ParseNumber" returns="Number">
      <help><![CDATA[
				Parses the string argument as a numeric value.
			]]></help>
      <parameter name="number" required="false" type="string">
        <help><![CDATA[
					the String containing the numeric representation to be parsed
				]]></help>
      </parameter>
      <parameter name="radix" required="false" type="string">
        <help><![CDATA[
					the radix to be used while parsing (bin,oct,dec,hex)
				]]></help>
      </parameter>
    </function>
    <function name="Pi" returns="Number">
      <help><![CDATA[
				Gets the mathematical constant p, accurate to 15 digits. The number 3.14159265358979.
			]]></help>

    </function>
    <function name="PrecisionEvaluate" returns="void">
      <help><![CDATA[
				Evaluates one or more string expressions using an increased memory size for arithmatic operations. This improves the accuracy of floating point calculations. For more details, see this video explanation: <a href="https://www.youtube.com/watch?v=g7A8OFi1mdU">https://www.youtube.com/watch?v=g7A8OFi1mdU</a>.
			]]></help>

    </function>
    <function name="PreserveSingleQuotes" returns="String">
      <help><![CDATA[
				Returns back string without letting the engine escape the single quotes. Used within CFQUERY blocks usually
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					Variable that contains a string in which to preserve single-quotation marks.
				]]></help>
      </parameter>
    </function>
    <function name="Quarter" returns="Number">
      <help><![CDATA[
				Calculates the quarter of the year in which a date falls.
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="Query" returns="Query">
      <help><![CDATA[
				Create and populate a query object. You can set the column name as the argument name you pass in and pass in the data as an array. Each item in the array would represent a different row in that column.
			]]></help>

    </function>
    <function name="QueryAddColumn" returns="Number">
      <help><![CDATA[
				Adds a column to a query and populates its rows with the contents of an one-dimensional array.
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[
					Name of a query object.
				]]></help>
      </parameter>
      <parameter name="column" required="false" type="string">
        <help><![CDATA[
					Alias: columnname
				]]></help>
      </parameter>
      <parameter name="datatype_or_array" required="false" type="any">
        <help><![CDATA[
					Alias: datatype
				]]></help>
      </parameter>
      <parameter name="array" required="false" type="any">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="QueryAddRow" returns="Number">
      <help><![CDATA[
				Adds rows to a query, either empty row(s) or you can add a row with data.
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[
					Name of an executed query.
				]]></help>
      </parameter>
      <parameter name="numberOrData" required="false" type="any">
        <help><![CDATA[
					Number of rows to add to the query or a struct/array containing the data to populate the row.
				]]></help>
      </parameter>
    </function>
    <function name="QueryColumnArray" returns="Array">
      <help><![CDATA[
				return the column names as array
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="QueryColumnCount" returns="Number">
      <help><![CDATA[
				column count of given query
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="QueryColumnData" returns="Array">
      <help><![CDATA[
				Returns all the data in a query for a given column
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[
					query object do get data from
				]]></help>
      </parameter>
      <parameter name="columnName" required="false" type="string">
        <help><![CDATA[
					name of the column returned
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					UDF/Closure that call with the values from column
				]]></help>
      </parameter>
    </function>
    <function name="QueryColumnExists" returns="Boolean">
      <help><![CDATA[
				Determines whether a specific column is present in a query.
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="column" required="false" type="string">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="QueryColumnList" returns="String">
      <help><![CDATA[
				return the column names as list
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					delimiter used to separate elements in list
				]]></help>
      </parameter>
    </function>
    <function name="QueryConvertForGrid" returns="Struct">
      <help><![CDATA[
				Use instead the function QuerySlice. Converts query data to a structure that contains a paged subset of the query.
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[
					Name of the query whose data is returned.
				]]></help>
      </parameter>
      <parameter name="page" required="false" type="number">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="pageSize" required="false" type="number">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="QueryCurrentRow" returns="void">
      <help><![CDATA[
				return the row where the pointer of the query is pointing ATM
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="QueryDeleteColumn" returns="Array">
      <help><![CDATA[
				removes a column from a query and returns the removed column as array
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="column" required="false" type="String">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="QueryDeleteRow" returns="Boolean">
      <help><![CDATA[
				Deletes the row within a query object. Modifies the original query object
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="row" required="false" type="number">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="QueryEach" returns="void">
      <help><![CDATA[
				call the given UDF/Closure with every row (struct) in the query.
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[
					query to take values from
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					UDF/Closure that call with the entries from the query
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="QueryEvery" returns="Boolean">
      <help><![CDATA[
				This function calls a given closure/function with every element in a given query and returns true, if all of the closure calls returns true.
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[
					query to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					function/closure that implements the following constructor [function(struct row [number rownumber, query query]):boolean].
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="QueryExecute" returns="void">
      <help><![CDATA[
				<pre><span class="nf">QueryExecute</span><span class="p">(</span> <span class="nv">sql</span> <span class="p">[,</span> <span class="nv">params</span> <span class="p">[,</span> <span class="nv">options</span> <span class="p">[,</span> <span class="nv">name</span> <span class="p">]</span> <span class="p">]</span> <span class="p">]</span> <span class="p">)</span>
				</pre>
			]]></help>
      <parameter name="sql" required="false" type="string">
        <help><![CDATA[
					SQL to execute
				]]></help>
      </parameter>
      <parameter name="params" required="false" type="any">
        <help><![CDATA[
					Array or Struct of parameter values. When passing an array use ? as place holders.
				]]></help>
      </parameter>
      <parameter name="options" required="false" type="struct">
        <help><![CDATA[
					Struct containing query options, all cfquery tag attributes are supported except the name attribute.
				]]></help>
      </parameter>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					name of the query produced, visible in dumps or debugging output.
				]]></help>
      </parameter>
    </function>
    <function name="QueryFilter" returns="Query">
      <help><![CDATA[
				This function creates a new Query that returns all rows from an query that match the given filter.
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[
					query to filter entries from
				]]></help>
      </parameter>
      <parameter name="filter" required="false" type="function">
        <help><![CDATA[
					filter can be a function/closure that implements the following constructor [function(struct row[, number rowNumber, query query]):boolean].
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="QueryGetCell" returns="void">
      <help><![CDATA[
				return the value of a specific query cell
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[
					query to get cell value from
				]]></help>
      </parameter>
      <parameter name="column_name" required="false" type="string">
        <help><![CDATA[
					name of the column
				]]></help>
      </parameter>
      <parameter name="row_number" required="false" type="number">
        <help><![CDATA[
					row number (1-n)
				]]></help>
      </parameter>
    </function>
    <function name="QueryGetRow" returns="Struct">
      <help><![CDATA[
				this function is deprecated, use function QueryRowData instead.
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[
					query object do get data from
				]]></help>
      </parameter>
      <parameter name="rowNumber" required="false" type="number">
        <help><![CDATA[
					position of the row to be returned
				]]></help>
      </parameter>
    </function>
    <function name="QueryKeyExists" returns="Boolean">
      <help><![CDATA[
				Determines whether a specific column is present in a query.
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="column" required="false" type="string">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="QueryMap" returns="Query">
      <help><![CDATA[
				Calls the given closure with every row in the given query.
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[
					query to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					filter can be a function/closure that implements the following constructor
				]]></help>
      </parameter>
      <parameter name="resQuery" required="false" type="query">
        <help><![CDATA[
					Alias: resultingQuery
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="QueryNew" returns="Query">
      <help><![CDATA[
				Creates an empty query (query object).
			]]></help>
      <parameter name="columnNames" required="false" type="object">
        <help><![CDATA[
					column names for the query created, allowed are comma-delimited string lists or an array.
				]]></help>
      </parameter>
      <parameter name="columnTypes" required="false" type="object">
        <help><![CDATA[
					column types for the query created, allowed are comma-delimited string lists or an array.
				]]></help>
      </parameter>
      <parameter name="data" required="false" type="any">
        <help><![CDATA[
					data to populate the new Query, an array of arrays or an array of structs.
				]]></help>
      </parameter>
    </function>
    <function name="QueryRecordCount" returns="Number">
      <help><![CDATA[
				row count of given query
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="QueryReduce" returns="void">
      <help><![CDATA[
				Iterates over every row of the given query and calls the closure with that row.
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[
					query to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					function/closure that implements the following constructor
				]]></help>
      </parameter>
      <parameter name="initialValue" required="false" type="object">
        <help><![CDATA[
					inital value passed as part of the first closure call
				]]></help>
      </parameter>
    </function>
    <function name="QueryRowData" returns="Struct">
      <help><![CDATA[
				Returns a struct with the data from a query for a given row number
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[
					query object do get data from
				]]></help>
      </parameter>
      <parameter name="rowNumber" required="false" type="number">
        <help><![CDATA[
					position of the row to be returned
				]]></help>
      </parameter>
    </function>
    <function name="QuerySetCell" returns="Boolean">
      <help><![CDATA[
				Sets a cell to a value. If no row number is specified, the cell on the last row is set.
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[
					Name of an executed query.
				]]></help>
      </parameter>
      <parameter name="column_name" required="false" type="string">
        <help><![CDATA[
					Alias: columnName
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="row_number" required="false" type="number">
        <help><![CDATA[
					Alias: row, number
				]]></help>
      </parameter>
    </function>
    <function name="QuerySlice" returns="Query">
      <help><![CDATA[
				creates a new query containing a part of the given query
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="offset" required="false" type="number">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="length" required="false" type="number">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="QuerySome" returns="Boolean">
      <help><![CDATA[
				This function calls a given closure/function with every element in a given query and returns true, if one of the closure calls returns true.
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[
					query to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					function/closure that implements the following constructor [function(struct row [, number rowNumber, query query]):boolean].
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="QuerySort" returns="Boolean">
      <help><![CDATA[
				Sorts the query based on the column specified and the order criteria given. Modifies the original query object
			]]></help>
      <parameter name="query" required="false" type="query">
        <help><![CDATA[
					the query to sort
				]]></help>
      </parameter>
      <parameter name="columnNameOrSortFunc" required="false" type="any">
        <help><![CDATA[
					a list of names, a single column name or a function used as comparator.
				]]></help>
      </parameter>
      <parameter name="direction" required="false" type="string">
        <help><![CDATA[
					a list of directions or a single direction definition (asc,desc), the list must have the same length as the columnName list
				]]></help>
      </parameter>
    </function>
    <function name="QuotedValueList" returns="String">
      <help><![CDATA[
				Returns a quoted list of all the values, for a given column within the query, delimited by the value given. this function is deprecated, use instead the function queryColumnData
			]]></help>
      <parameter name="query_column" required="false" type="queryColumn">
        <help><![CDATA[
					Name of an executed query and column. Separate query name and column name with a period.
				]]></help>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					Alias: delimiters
				]]></help>
      </parameter>
    </function>
    <function name="Rand" returns="Number">
      <help><![CDATA[
				Generates a pseudo-random number in the range 0 - 1.
			]]></help>
      <parameter name="algorithm" required="false" type="string">
        <help><![CDATA[
					The algorithm to use to generate the random number.
				]]></help>
      </parameter>
    </function>
    <function name="Randomize" returns="Number">
      <help><![CDATA[
				Seeds the pseudo-random number generator with an integer number, ensuring repeatable number patterns.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					a number
				]]></help>
      </parameter>
      <parameter name="algorithm" required="false" type="string">
        <help><![CDATA[
					The algorithm to use to generated the random number.
				]]></help>
      </parameter>
    </function>
    <function name="RandRange" returns="Number">
      <help><![CDATA[
				Generates a random integer between two specified numbers.
			]]></help>
      <parameter name="number1" required="false" type="number">
        <help><![CDATA[
					smaller number
				]]></help>
      </parameter>
      <parameter name="number2" required="false" type="number">
        <help><![CDATA[
					bigger number
				]]></help>
      </parameter>
      <parameter name="algorithm" required="false" type="string">
        <help><![CDATA[
					The algorithm to use to generate the random number.
				]]></help>
      </parameter>
    </function>
    <function name="REFind" returns="void">
      <help><![CDATA[
				Uses a regular expression (RE) to search a string for a pattern. The search is case sensitive.
			]]></help>
      <parameter name="reg_expression" required="false" type="string">
        <help><![CDATA[
					Regular expression for which to search. Case sensitive.
				]]></help>
      </parameter>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					String in which to search.
				]]></help>
      </parameter>
      <parameter name="start" required="false" type="number">
        <help><![CDATA[
					A positive integer. Position in the string at which to start search. The default value is 1.
				]]></help>
      </parameter>
      <parameter name="returnsubexpressions" required="false" type="boolean">
        <help><![CDATA[
					If true returns result as a struct with keys pos and len. Each are an array with elements for the position and length of the match (first element), and the position and length of any matched subexpressions in the subsequent elements.
				]]></help>
      </parameter>
      <parameter name="scope" required="false" type="string">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="REFindNoCase" returns="void">
      <help><![CDATA[
				Uses a regular expression (RE) to search a string for a pattern, starting from a specified position. The search is case-insensitive.
			]]></help>
      <parameter name="reg_expression" required="false" type="string">
        <help><![CDATA[
					Regular expression for which to search. Case-insensitive.
				]]></help>
      </parameter>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					String in which to search.
				]]></help>
      </parameter>
      <parameter name="start" required="false" type="number">
        <help><![CDATA[
					A positive integer. Position in the string at which to start search. The default value is 1.
				]]></help>
      </parameter>
      <parameter name="returnsubexpressions" required="false" type="boolean">
        <help><![CDATA[
					True: if the regular expression is found, the first array element contains the length and position, respectively, of the first match. If the regular expression contains parentheses that group subexpressions, each subsequent array element contains the length and position, respectively, of the first occurrence of each group. If the regular expression is not found, the arrays each contain one element with the value 0. False: the function returns the position in the string where the match begins. Default.
				]]></help>
      </parameter>
      <parameter name="scope" required="false" type="string">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="ReleaseComObject" returns="void">
      <help><![CDATA[
				Releases a COM Object and frees up resources that it used.
			]]></help>
      <parameter name="comObject" required="false" type="any">
        <help><![CDATA[
					Variable name of a COM object that was created using the function or tag.
				]]></help>
      </parameter>
    </function>
    <function name="REMatch" returns="Array">
      <help><![CDATA[
				Uses a regular expression (RE) to search a string for a pattern, starting from a specified position.
			]]></help>
      <parameter name="regex" required="false" type="string">
        <help><![CDATA[
					Regular expression for which to search. Case sensitive.
				]]></help>
      </parameter>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					String in which to search.
				]]></help>
      </parameter>
    </function>
    <function name="REMatchNoCase" returns="Array">
      <help><![CDATA[
				Uses a regular expression (RE) to search a string for a pattern, starting from a specified position.
			]]></help>
      <parameter name="reg_expression" required="false" type="string">
        <help><![CDATA[
					Regular expression for which to search. Case-insensitive.
				]]></help>
      </parameter>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					String in which to search.
				]]></help>
      </parameter>
    </function>
    <function name="RemoveChars" returns="String">
      <help><![CDATA[
				Removes characters from a string.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					String in which to search.
				]]></help>
      </parameter>
      <parameter name="start" required="false" type="number">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="count" required="false" type="number">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="Render" returns="String">
      <help><![CDATA[
				Similar to the <a href="/reference/functions/evaluate.html">Evaluate</a> function, this function executes Lucee <em>tag</em> code that you provide as a string and returns any output as a string.
			]]></help>
      <parameter name="code" required="false" type="string">
        <help><![CDATA[
					The code to evaluate, e.g. "#methodName#( argumentCollection=argsCollection )"
				]]></help>
      </parameter>
      <parameter name="dialect" required="false" type="string">
        <help><![CDATA[
					Either cfml (default) or Lucee.
				]]></help>
      </parameter>
    </function>
    <function name="RepeatString" returns="String">
      <help><![CDATA[
				Creates a string that contains a specified number of repetitions of the specified string.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one.
				]]></help>
      </parameter>
      <parameter name="count" required="false" type="number">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="Replace" returns="String">
      <help><![CDATA[
				Replaces occurrences of substring1 in a string with substring2, in a specified scope. The search is case-sensitive.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					String in which to search.
				]]></help>
      </parameter>
      <parameter name="substring" required="false" type="any">
        <help><![CDATA[
					Substring for which to search. Optionally pass a Struct with key/value pairs to do a replace all
				]]></help>
      </parameter>
      <parameter name="replacement" required="false" type="any">
        <help><![CDATA[
					Substring with which to replace the found matches. This arg is required if the substring1 arg is a string
				]]></help>
      </parameter>
      <parameter name="scope" required="false" type="string">
        <help><![CDATA[
					scope for the execution:
				]]></help>
      </parameter>
    </function>
    <function name="ReplaceList" returns="String">
      <help><![CDATA[
				Replaces occurrences of the elements from a delimited list in a string with corresponding elements from another delimited list. The search is case-sensitive.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string
				]]></help>
      </parameter>
      <parameter name="list1" required="false" type="string">
        <help><![CDATA[
					string list of search strings
				]]></help>
      </parameter>
      <parameter name="list2" required="false" type="string">
        <help><![CDATA[
					string list of replacement strings
				]]></help>
      </parameter>
      <parameter name="delimiter_list1" required="false" type="string">
        <help><![CDATA[
					Delimiter for search, or if no replacement delimiter is defined, this delimiter is used for search and replacement.
				]]></help>
      </parameter>
      <parameter name="delimiter_list2" required="false" type="string">
        <help><![CDATA[
					Delimiter for replacement.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					When true, empty elements are preserved
				]]></help>
      </parameter>
    </function>
    <function name="ReplaceListNoCase" returns="String">
      <help><![CDATA[
				Replaces occurrences of the elements from a delimited list in a string with corresponding elements from another delimited list. The search is NOT case-sensitive.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string
				]]></help>
      </parameter>
      <parameter name="list1" required="false" type="string">
        <help><![CDATA[
					string list of search strings
				]]></help>
      </parameter>
      <parameter name="list2" required="false" type="string">
        <help><![CDATA[
					string list of replacement strings
				]]></help>
      </parameter>
      <parameter name="delimiter_list1" required="false" type="string">
        <help><![CDATA[
					Delimiter for search, or if no replacement delimiter is defined, this delimiter is used for search and replacement.
				]]></help>
      </parameter>
      <parameter name="delimiter_list2" required="false" type="string">
        <help><![CDATA[
					Delimiter for replacement.
				]]></help>
      </parameter>
      <parameter name="includeEmptyFields" required="false" type="boolean">
        <help><![CDATA[
					When true, empty elements are preserved
				]]></help>
      </parameter>
    </function>
    <function name="ReplaceNoCase" returns="String">
      <help><![CDATA[
				Replaces occurrences of substring1 with substring2, in the specified scope. The search is case-insensitive.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string (or variable that contains one) within which to replace substring.
				]]></help>
      </parameter>
      <parameter name="substring" required="false" type="any">
        <help><![CDATA[
					Substring for which to search. Optionally pass a Struct with key/value pairs to do a replace all
				]]></help>
      </parameter>
      <parameter name="replacement" required="false" type="string">
        <help><![CDATA[
					Substring with which to replace the found matches. This arg is required if the substring1 arg is a string
				]]></help>
      </parameter>
      <parameter name="scope" required="false" type="string">
        <help><![CDATA[
					scope for the execution:
				]]></help>
      </parameter>
    </function>
    <function name="REReplace" returns="String">
      <help><![CDATA[
				Uses a regular expression (RE) to search a string for a string pattern and replace it with another. The search is case-sensitive.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					String within which to search.
				]]></help>
      </parameter>
      <parameter name="regex" required="false" type="string">
        <help><![CDATA[
					Regular expression to replace.
				]]></help>
      </parameter>
      <parameter name="substring" required="false" type="string">
        <help><![CDATA[
					replacement
				]]></help>
      </parameter>
      <parameter name="scope" required="false" type="string">
        <help><![CDATA[
					one (default): Replace the first occurrence of the regular expression. all: Replace all occurrences of the regular expression.
				]]></help>
      </parameter>
    </function>
    <function name="REReplaceNoCase" returns="String">
      <help><![CDATA[
				Uses a regular expression to search a string for a string pattern and replace it with another. The search is case-insensitive.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one.
				]]></help>
      </parameter>
      <parameter name="regex" required="false" type="string">
        <help><![CDATA[
					Regular expression to replace.
				]]></help>
      </parameter>
      <parameter name="substring" required="false" type="string">
        <help><![CDATA[
					replacement
				]]></help>
      </parameter>
      <parameter name="scope" required="false" type="string">
        <help><![CDATA[
					one (default): Replace the first occurrence of the regular expression. all: Replace all occurrences of the regular expression.
				]]></help>
      </parameter>
    </function>
    <function name="RestDeleteApplication" returns="void">
      <help><![CDATA[
				Deletes an existing REST mapping.
			]]></help>
      <parameter name="dirPath" required="false" type="string">
        <help><![CDATA[
					Path to the directory to be registered or reseted.
				]]></help>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					password for the web administrator, this is needed delete a REST mapping.
				]]></help>
      </parameter>
    </function>
    <function name="RestInitApplication" returns="void">
      <help><![CDATA[
				Registers the directory path with the service mapping provided. If no service mapping is provided, the application name is used. If the rest application is already registered, it is refreshed.
			]]></help>
      <parameter name="dirPath" required="false" type="string">
        <help><![CDATA[
					Path to the directory to be registered or reseted.
				]]></help>
      </parameter>
      <parameter name="serviceMapping" required="false" type="string">
        <help><![CDATA[
					Alternate string to be used for application name while calling the REST service.
				]]></help>
      </parameter>
      <parameter name="default" required="false" type="boolean">
        <help><![CDATA[
					set if the mapping is a default mapping or not
				]]></help>
      </parameter>
      <parameter name="password" required="false" type="string">
        <help><![CDATA[
					password for the web administrator, this is needed when you update/create a REST mapping.
				]]></help>
      </parameter>
    </function>
    <function name="RestSetResponse" returns="void">
      <help><![CDATA[
				Sets the custom responses.
			]]></help>
      <parameter name="response" required="false" type="struct">
        <help><![CDATA[
					A struct that contains the response details.
				]]></help>
      </parameter>
    </function>
    <function name="Reverse" returns="String">
      <help><![CDATA[
				Reverses the order of items, such as the characters in a string, the digits in a number, or the elements in an array.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
    </function>
    <function name="Right" returns="String">
      <help><![CDATA[
				Returns a substring from end of the input string, with a length specified by the count argument.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one.
				]]></help>
      </parameter>
      <parameter name="count" required="false" type="number">
        <help><![CDATA[
					A non-zero integer. A positive value of n will return n characters from the end of the string.
				]]></help>
      </parameter>
    </function>
    <function name="RJustify" returns="String">
      <help><![CDATA[
				Right justifies characters of a string.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string enclosed in quotation marks
				]]></help>
      </parameter>
      <parameter name="length" required="false" type="number">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="Round" returns="Number">
      <help><![CDATA[
				Rounds a number to the closest integer.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					Number to round
				]]></help>
      </parameter>
      <parameter name="precision" required="false" type="number">
        <help><![CDATA[
					Number of decimal points to round to
				]]></help>
      </parameter>
    </function>
    <function name="RTrim" returns="String">
      <help><![CDATA[
				Removes spaces from the end of a string.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
    </function>
    <function name="Second" returns="Number">
      <help><![CDATA[
				Extracts the ordinal for the second from a date/time object.
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="SendGatewayMessage" returns="String">
      <help><![CDATA[
				Sends an outgoing message through an event gateway.
			]]></help>
      <parameter name="gatewayID" required="false" type="string">
        <help><![CDATA[
					Identifier of the gateway to send the message.
				]]></help>
      </parameter>
      <parameter name="data" required="false" type="struct">
        <help><![CDATA[
					A structure.
				]]></help>
      </parameter>
    </function>
    <function name="Serialize" returns="String">
      <help><![CDATA[
				Opposite of evaluate, this function serializes all cfml objects and all serializable Java objects. Can also serialize Components.
			]]></help>
      <parameter name="object" required="false" type="any">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="SerializeJSON" returns="String">
      <help><![CDATA[
				Converts CFML data into a JSON (JavaScript Object Notation) representation of the data.
			]]></help>
      <parameter name="var" required="false" type="any">
        <help><![CDATA[
					A CFML data value or variable that represents one.
				]]></help>
      </parameter>
      <parameter name="options" required="false" type="any">
        <help><![CDATA[
					Either a Boolean value that specifies whether to serialize CFML queries by Column, or a string with the value "struct".
				]]></help>
      </parameter>
      <parameter name="charset" required="false" type="string">
        <help><![CDATA[
					string characters that cannot be encoded by this charset get escaped, if not set the web charset is used.
				]]></help>
      </parameter>
    </function>
    <function name="SessionInvalidate" returns="void">
      <help><![CDATA[
				Invalidates or cleans up the current session.
			]]></help>

    </function>
    <function name="SessionRotate" returns="void">
      <help><![CDATA[
				invalidate current session, creates a new session and migrate the data from the old session to the new.
			]]></help>

    </function>
    <function name="SessionStartTime" returns="date">
      <help><![CDATA[
				Provides information about the time when the current users session scope was created.
			]]></help>

    </function>
    <function name="SetEncoding" returns="String">
      <help><![CDATA[
				Sets the character encoding (character set) of Form and URL scope variable values; used when the character encoding of the input to a form, or the character encoding of a URL, is not in UTF-8 encoding.
			]]></help>
      <parameter name="scope" required="false" type="string">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="encoding" required="false" type="string">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="SetLocale" returns="Locale">
      <help><![CDATA[
				Sets the country/language locale for CFML processing and the page returned to the client.
			]]></help>
      <parameter name="new_locale" required="false" type="locale">
        <help><![CDATA[
					The name of a locale; for example, "English (US)"
				]]></help>
      </parameter>
    </function>
    <function name="SetProfileString" returns="String">
      <help><![CDATA[
				Sets the value of a profile entry in an initialization file.
			]]></help>
      <parameter name="iniPath" required="false" type="string">
        <help><![CDATA[
					Absolute path of initialization file
				]]></help>
      </parameter>
      <parameter name="section" required="false" type="string">
        <help><![CDATA[
					Section of the initialization file in which the entry is to be set
				]]></help>
      </parameter>
      <parameter name="entry" required="false" type="string">
        <help><![CDATA[
					Name of the entry to set
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					Value to which to set the entry
				]]></help>
      </parameter>
    </function>
    <function name="SetTimeZone" returns="Timezone">
      <help><![CDATA[
				Change the timezone definition for the current request.
			]]></help>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					You can find a list of all available timezones in the Lucee administrator (Settings/Regional). Some examples of valid timezones include:
				]]></help>
      </parameter>
    </function>
    <function name="SetVariable" returns="void">
      <help><![CDATA[
				Sets the value
			]]></help>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					Variable name, can be contain "." for structures.
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					the value to set
				]]></help>
      </parameter>
    </function>
    <function name="Sgn" returns="Number">
      <help><![CDATA[
				Determines the sign of a number.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					A number
				]]></help>
      </parameter>
    </function>
    <function name="Sin" returns="Number">
      <help><![CDATA[
				Calculates the sine of an angle that is entered in radians.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					Angle, in radians for which to calculate the sine.
				]]></help>
      </parameter>
    </function>
    <function name="SizeOf" returns="void">
      <help><![CDATA[
				This function is experimental, do not use in a production environment. This function returns the size in bytes of a given object.
			]]></help>
      <parameter name="obj" required="false" type="object">
        <help><![CDATA[
					object to get size for
				]]></help>
      </parameter>
      <parameter name="complex" required="false" type="boolean">
        <help><![CDATA[
					if set to false, the size is returned, if set to true a struct containing the element count and the size is returned
				]]></help>
      </parameter>
    </function>
    <function name="Sleep" returns="void">
      <help><![CDATA[
				Causes the current thread to stop processing for a specified period of time.
			]]></help>
      <parameter name="duration" required="false" type="number">
        <help><![CDATA[
					Time, in milliseconds, to stop processing the thread.
				]]></help>
      </parameter>
    </function>
    <function name="Soundex" returns="String">
      <help><![CDATA[
				Soundex is a phonetic algorithm for indexing names by sound, as pronounced in English. The goal is for homophones to be encoded to the same representation so that they can be matched despite minor differences in spelling. The algorithm mainly encodes consonants; a vowel will not be encoded unless it is the first letter. Soundex is the most widely known of all phonetic algorithms, as it is a standard feature of MS SQL and Oracle, and is often used (incorrectly) as a synonym for "phonetic algorithm".
			]]></help>
      <parameter name="str" required="false" type="string">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="SpanExcluding" returns="String">
      <help><![CDATA[
				Gets characters from a string, from the beginning to a character that is in a specified set of characters. The search is case-sensitive.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
      <parameter name="set" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains a set of characters. Must contain one or more characters
				]]></help>
      </parameter>
    </function>
    <function name="SpanIncluding" returns="String">
      <help><![CDATA[
				Gets characters from a string, from the beginning to a character that is not in a specified set of characters. The search is case-sensitive.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains the search string.
				]]></help>
      </parameter>
      <parameter name="set" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains a set of characters. Must contain one or more characters
				]]></help>
      </parameter>
    </function>
    <function name="SpreadSheetNew" returns="void">
      <help><![CDATA[
				<pre><span class="nf">SpreadSheetNew</span><span class="p">(</span> <span class="p">)</span>
				</pre>
			]]></help>

    </function>
    <function name="SpreadsheetSetCellValue" returns="void">
      <help><![CDATA[
				<pre><span class="nf">SpreadsheetSetCellValue</span><span class="p">(</span> <span class="p">)</span>
				</pre>
			]]></help>

    </function>
    <function name="SpreadSheetWrite" returns="void">
      <help><![CDATA[
				<pre><span class="nf">SpreadSheetWrite</span><span class="p">(</span> <span class="p">)</span>
				</pre>
			]]></help>

    </function>
    <function name="Sqr" returns="Number">
      <help><![CDATA[
				Calculates the square root of a number.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					A positive integer. Number whose square root to get.
				]]></help>
      </parameter>
    </function>
    <function name="SSLCertificateInstall" returns="void">
      <help><![CDATA[
				install certificates of a specific host
			]]></help>
      <parameter name="host" required="false" type="string">
        <help><![CDATA[
					host to get Certificates from
				]]></help>
      </parameter>
      <parameter name="port" required="false" type="number">
        <help><![CDATA[
					port of the host, default is 443
				]]></help>
      </parameter>
    </function>
    <function name="SSLCertificateList" returns="Query">
      <help><![CDATA[
				list all Certificates available on a specific host
			]]></help>
      <parameter name="host" required="false" type="string">
        <help><![CDATA[
					host to get Certificates from
				]]></help>
      </parameter>
      <parameter name="port" required="false" type="number">
        <help><![CDATA[
					port of the host, default is 443
				]]></help>
      </parameter>
    </function>
    <function name="StoreAddACL" returns="void">
      <help><![CDATA[
				Adds ACL to existing ACL for object or bucket.
			]]></help>
      <parameter name="url" required="false" type="string">
        <help><![CDATA[
					Amazon S3 URL
				]]></help>
      </parameter>
      <parameter name="aclObject" required="false" type="object">
        <help><![CDATA[
					an array of struct where each struct represents an ACL grant
				]]></help>
      </parameter>
    </function>
    <function name="StoreGetACL" returns="void">
      <help><![CDATA[
				returns an array of struct where each struct represents an ACL grant
			]]></help>
      <parameter name="url" required="false" type="string">
        <help><![CDATA[
					Amazon S3 URL
				]]></help>
      </parameter>
    </function>
    <function name="StoreGetMetadata" returns="Struct">
      <help><![CDATA[
				Returns the metadata related to the object or bucket.
			]]></help>
      <parameter name="url" required="false" type="string">
        <help><![CDATA[
					Amazon S3 URL
				]]></help>
      </parameter>
    </function>
    <function name="StoreSetACL" returns="void">
      <help><![CDATA[
				Sets the ACL for object or bucket.
			]]></help>
      <parameter name="url" required="false" type="string">
        <help><![CDATA[
					Amazon S3 URL
				]]></help>
      </parameter>
      <parameter name="aclObject" required="false" type="object">
        <help><![CDATA[
					an array of struct where each struct represents an ACL grant
				]]></help>
      </parameter>
    </function>
    <function name="StoreSetMetadata" returns="void">
      <help><![CDATA[
				Sets the metadata on bucket or object.
			]]></help>
      <parameter name="url" required="false" type="string">
        <help><![CDATA[
					Amazon S3 URL
				]]></help>
      </parameter>
      <parameter name="metadata" required="false" type="struct">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="Stringlen" returns="Number">
      <help><![CDATA[
				returns the len of a string
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="StripCr" returns="String">
      <help><![CDATA[
				Deletes return characters from a string.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
    </function>
    <function name="StructAppend" returns="Boolean">
      <help><![CDATA[
				Appends all the data from struct2 into struct1, replacing duplicate keys unless specified by the overwrite flag
			]]></help>
      <parameter name="Struct1" required="false" type="struct">
        <help><![CDATA[
					Structure to which struct2 is appended.
				]]></help>
      </parameter>
      <parameter name="Struct2" required="false" type="struct">
        <help><![CDATA[
					Structure that contains the data to append to struct1
				]]></help>
      </parameter>
      <parameter name="OverwriteFlag" required="false" type="boolean">
        <help><![CDATA[
					true (default): values in struct2 overwrite corresponding values in struct1.
				]]></help>
      </parameter>
    </function>
    <function name="StructClear" returns="Boolean">
      <help><![CDATA[
				Removes all data from a structure.
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					Structure to clear
				]]></help>
      </parameter>
    </function>
    <function name="StructCopy" returns="void">
      <help><![CDATA[
				Copies a structure. Copies top-level keys, values, and arrays in the structure by value; copies nested structures by reference.
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					Structure to copy
				]]></help>
      </parameter>
    </function>
    <function name="StructCount" returns="Number">
      <help><![CDATA[
				Counts the keys in a structure.
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					Structure to access
				]]></help>
      </parameter>
    </function>
    <function name="StructDelete" returns="Boolean">
      <help><![CDATA[
				Removes an element from a structure.
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					Structure contains element to remove.
				]]></help>
      </parameter>
      <parameter name="key" required="false" type="string">
        <help><![CDATA[
					Element to remove
				]]></help>
      </parameter>
      <parameter name="indicatenotexisting" required="false" type="boolean">
        <help><![CDATA[
					Alias: indicateExists
				]]></help>
      </parameter>
    </function>
    <function name="StructEach" returns="void">
      <help><![CDATA[
				call the given UDF/Closure with every entry (key/value) in the struct.
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					struct to take values from
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					UDF/Closure that call with the entries from struct
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="StructEvery" returns="Boolean">
      <help><![CDATA[
				This function calls a given closure/function with every element in a given struct and returns true, if all of the closure calls returns true.
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					struct to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					function/closure that implements the following constructor [function(string key, any value[array array]):boolean].
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="StructFilter" returns="Struct">
      <help><![CDATA[
				This function creates a new Struct that returns all entries from an struct that match the given filter.
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					struct to filter entries from
				]]></help>
      </parameter>
      <parameter name="filter" required="false" type="function">
        <help><![CDATA[
					filter can be a function/closure that implements the following constructor [function(any key,any value):boolean].
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="StructFind" returns="void">
      <help><![CDATA[
				Determines the value associated with a key in a structure.
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					Structure that contains the value to return
				]]></help>
      </parameter>
      <parameter name="key" required="false" type="string">
        <help><![CDATA[
					Key whose value to return
				]]></help>
      </parameter>
      <parameter name="defaultValue" required="false" type="any">
        <help><![CDATA[
					Default value which will be returned if the key does not exist or if null was found
				]]></help>
      </parameter>
    </function>
    <function name="StructFindKey" returns="Array">
      <help><![CDATA[
				Searches recursively through a substructure of nested arrays, structures, and other elements, for structures whose values match the search key in the value parameter.
			]]></help>
      <parameter name="Top" required="false" type="struct">
        <help><![CDATA[
					object from which to start search. This parameter requires an object, not a name of an object.
				]]></help>
      </parameter>
      <parameter name="Key" required="false" type="string">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="Scope" required="false" type="string">
        <help><![CDATA[
					one (default): returns one matching key. all: returns all matching keys
				]]></help>
      </parameter>
    </function>
    <function name="StructFindValue" returns="Array">
      <help><![CDATA[
				Searches recursively through a substructure of nested arrays, structures, and other elements for structures with values that match the search key in the value parameter.
			]]></help>
      <parameter name="Top" required="false" type="struct">
        <help><![CDATA[
					structure from which to start search. This parameter requires an object, not a name of an object.
				]]></help>
      </parameter>
      <parameter name="Key" required="false" type="string">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="Scope" required="false" type="string">
        <help><![CDATA[
					one (default): function returns one matching key all: function returns all matching keys
				]]></help>
      </parameter>
    </function>
    <function name="StructGet" returns="void">
      <help><![CDATA[
				Gets a structure(s) from a specified path.
			]]></help>
      <parameter name="PathDesired" required="false" type="string">
        <help><![CDATA[
					Pathname of variable that contains structure or array from which Lucee retrieves structure.
				]]></help>
      </parameter>
    </function>
    <function name="StructInsert" returns="Boolean">
      <help><![CDATA[
				Inserts a key-value pair into a structure.
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					Structure to contain the new key-value pair.
				]]></help>
      </parameter>
      <parameter name="key" required="false" type="string">
        <help><![CDATA[
					Key that contains the inserted value.
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					Value to add.
				]]></help>
      </parameter>
      <parameter name="allowoverwrite" required="false" type="boolean">
        <help><![CDATA[
					Whether to allow overwriting a key. Default: False.
				]]></help>
      </parameter>
    </function>
    <function name="StructIsEmpty" returns="Boolean">
      <help><![CDATA[
				Determines whether a structure contains data.
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					Structure to test
				]]></help>
      </parameter>
    </function>
    <function name="StructKeyArray" returns="Array">
      <help><![CDATA[
				Finds the keys in a struct. An array of keys; if structure does not exist, CFML throws an exception.
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					Structure from which to extract a list of keys
				]]></help>
      </parameter>
    </function>
    <function name="StructKeyExists" returns="Boolean">
      <help><![CDATA[
				Determines whether a specific key is present in a structure.
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					Name of structure to test
				]]></help>
      </parameter>
      <parameter name="key" required="false" type="string">
        <help><![CDATA[
					Key to test
				]]></help>
      </parameter>
    </function>
    <function name="StructKeyList" returns="String">
      <help><![CDATA[
				Extracts keys from a struct.
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					Structure from which to extract a list of keys.
				]]></help>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					Character that separates keys in list. Default: comma.
				]]></help>
      </parameter>
    </function>
    <function name="StructKeyTranslate" returns="Number">
      <help><![CDATA[
				<pre><span class="nf">StructKeyTranslate</span><span class="p">(</span> <span class="nv">struct</span> <span class="p">[,</span> <span class="nv">deepTranslation</span> <span class="p">[,</span> <span class="nv">leaveOriginalKey</span> <span class="p">]</span> <span class="p">]</span> <span class="p">)</span>
				</pre>
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					Alias: structure, object
				]]></help>
      </parameter>
      <parameter name="deepTranslation" required="false" type="boolean">
        <help><![CDATA[
					also translate keys of child structures
				]]></help>
      </parameter>
      <parameter name="leaveOriginalKey" required="false" type="boolean">
        <help><![CDATA[
					leave original key in struct
				]]></help>
      </parameter>
    </function>
    <function name="StructMap" returns="Struct">
      <help><![CDATA[
				Calls the given closure with every element in the given struct. the function returns a struct that contains all values returned by the closure.
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					struct to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					filter can be a function/closure that implements the following constructor
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="StructNew" returns="Struct">
      <help><![CDATA[
				Creates an empty structure.
			]]></help>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					the type of structure created:
				]]></help>
      </parameter>
    </function>
    <function name="StructReduce" returns="void">
      <help><![CDATA[
				Iterates over every entry of the given struct and calls the closure with every key/value.
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					struct to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					function/closure that implements the following constructor
				]]></help>
      </parameter>
      <parameter name="initialValue" required="false" type="object">
        <help><![CDATA[
					inital value passed as part of the first closure call
				]]></help>
      </parameter>
    </function>
    <function name="StructSome" returns="Boolean">
      <help><![CDATA[
				This function calls a given closure/function with every element in a given struct and returns true, if one of the closure calls returns true.
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					struct to iterate
				]]></help>
      </parameter>
      <parameter name="closure" required="false" type="function">
        <help><![CDATA[
					function/closure that implements the following constructor [function(string key, any value[array array]):boolean].
				]]></help>
      </parameter>
      <parameter name="parallel" required="false" type="boolean">
        <help><![CDATA[
					execute closures parallel
				]]></help>
      </parameter>
      <parameter name="maxThreads" required="false" type="number">
        <help><![CDATA[
					maximum number of threads executed, ignored when argument "parallel" is set to false
				]]></help>
      </parameter>
    </function>
    <function name="StructSort" returns="Array">
      <help><![CDATA[
				Returns a sorted array of the top level keys in a structure. Sorts using alphabetic or numeric sorting, and can sort based on the values of any structure element.
			]]></help>
      <parameter name="base" required="false" type="struct">
        <help><![CDATA[
					A structure with one field (an associative array).
				]]></help>
      </parameter>
      <parameter name="sortType" required="false" type="string">
        <help><![CDATA[
					define one of the following:
				]]></help>
      </parameter>
      <parameter name="sortOrder" required="false" type="string">
        <help><![CDATA[
					sort direction:
				]]></help>
      </parameter>
      <parameter name="pathToSubElement" required="false" type="string">
        <help><![CDATA[
					String or a variable that contains one
				]]></help>
      </parameter>
    </function>
    <function name="StructUpdate" returns="Boolean">
      <help><![CDATA[
				Updates a key with a value.
			]]></help>
      <parameter name="struct" required="false" type="struct">
        <help><![CDATA[
					Structure to update
				]]></help>
      </parameter>
      <parameter name="key" required="false" type="string">
        <help><![CDATA[
					Key, the value of which to update
				]]></help>
      </parameter>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					New value
				]]></help>
      </parameter>
    </function>
    <function name="SystemCacheClear" returns="void">
      <help><![CDATA[
				clears all caches or the specified cache
			]]></help>
      <parameter name="cacheName" required="false" type="string">
        <help><![CDATA[
					Name of the cache to clear, if not defined all caches will be cleared: the following cache Names are supported:
				]]></help>
      </parameter>
    </function>
    <function name="SystemOutput" returns="Boolean">
      <help><![CDATA[
				writes the given string to the output stream
			]]></help>
      <parameter name="obj" required="false" type="Object">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="addNewLine" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="doErrorStream" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="Tan" returns="Number">
      <help><![CDATA[
				Calculates the tangent of an angle that is entered in radians.
			]]></help>
      <parameter name="number" required="false" type="number">
        <help><![CDATA[
					Angle, in radians, for which to calculate the tangent.
				]]></help>
      </parameter>
    </function>
    <function name="ThreadJoin" returns="void">
      <help><![CDATA[
				Makes the current thread wait until the thread or threads specified in the name attribute complete processing, or until the period specified in the timeout argument passes, before continuing processing. If you don't specify a timeout and thread you are joining to doesn't finish, the current thread also cannot finish processing.
			]]></help>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					The name of the thread or threads to join to the current thread. To specify multiple threads, use a comma-delimited list.
				]]></help>
      </parameter>
      <parameter name="timeout" required="false" type="numeric">
        <help><![CDATA[
					The number of milliseconds that the current thread waits for the thread or threads being joined to finish. If any thread does not finish by the specified time, the current thread proceeds. If the attribute value is 0, the default, the current thread continues waiting until all joining threads finish. If the current thread is thepage thread, the page continues waiting until the threads are joined, even if you specify a page timeout. (optional, default=0)
				]]></help>
      </parameter>
    </function>
    <function name="ThreadTerminate" returns="void">
      <help><![CDATA[
				Stops processing of the thread specified in the name attribute. If you terminate a thread, the thread scope includes an ERROR metadata structure with information about the termination. (optional, default=run)
			]]></help>
      <parameter name="name" required="false" type="string">
        <help><![CDATA[
					The name of the thread to stop.
				]]></help>
      </parameter>
    </function>
    <function name="Throw" returns="void">
      <help><![CDATA[
				Throws a developer-specified exception, which can be caught with a cfcatch tag
			]]></help>
      <parameter name="message" required="false" type="string">
        <help><![CDATA[
					Message that describes exception event.
				]]></help>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					A custom type Application Do not enter another predefined type; types are not generated by CFML applications. If you specify Application, you need not specify a type for cfcatch.
				]]></help>
      </parameter>
      <parameter name="detail" required="false" type="string">
        <help><![CDATA[
					addional detailed description of the exception.
				]]></help>
      </parameter>
      <parameter name="errorcode" required="false" type="string">
        <help><![CDATA[
					A custom error code that you supply.
				]]></help>
      </parameter>
      <parameter name="extendedInfo" required="false" type="string">
        <help><![CDATA[
					extended information to the exception.
				]]></help>
      </parameter>
      <parameter name="object" required="false" type="any">
        <help><![CDATA[
					Throws a Java exception from a CFML tag. This attribute is mutually exclusive with all other argments of this function.
				]]></help>
      </parameter>
    </function>
    <function name="TimeFormat" returns="String">
      <help><![CDATA[
				Formats a time object to a given string output.
			]]></help>
      <parameter name="time" required="false" type="any">
        <help><![CDATA[
					date object; for example, now()
				]]></help>
      </parameter>
      <parameter name="mask" required="false" type="string">
        <help><![CDATA[
					Formatting mask for time:
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="ToBase64" returns="String">
      <help><![CDATA[
				Calculates the Base64 representation of a string or binary object. The Base64 format uses printable characters, allowing binary data to be sent in forms and e-mail, and stored in a database or file.
			]]></help>
      <parameter name="strOrBin" required="false" type="any">
        <help><![CDATA[
					A string, the name of a string, or a binary object.
				]]></help>
      </parameter>
      <parameter name="encoding" required="false" type="string">
        <help><![CDATA[
					For a string, defines how characters are represented in a byte array.
				]]></help>
      </parameter>
    </function>
    <function name="ToBinary" returns="void">
      <help><![CDATA[
				Calculates the binary representation of Base64-encoded data.
			]]></help>
      <parameter name="data" required="false" type="any">
        <help><![CDATA[
					A variable representing data in Base64-encoded format or a PDF document.
				]]></help>
      </parameter>
      <parameter name="charset" required="false" type="string">
        <help><![CDATA[
					if first argument is a string and this argument is set, the string is not handled as base64 encoded string, it is simply converted to a binary, with help of the given argument.
				]]></help>
      </parameter>
    </function>
    <function name="ToNumeric" returns="Number">
      <help><![CDATA[
				Converts given value to a number
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					value that should be translated to a numeric value
				]]></help>
      </parameter>
      <parameter name="radix" required="false" type="any">
        <help><![CDATA[
					the base for tranlation of the given value, default is 10, possible values are [2-36,bin,oct,dec,hex]
				]]></help>
      </parameter>
    </function>
    <function name="ToScript" returns="String">
      <help><![CDATA[
				Creates a JavaScript expression that assigns the value of a variable to a JavaScript variable. This function can convert strings, numbers, arrays, structures, and queries to JavaScript syntax that defines equivalent variables and values.
			]]></help>
      <parameter name="cfvar" required="false" type="any">
        <help><![CDATA[
					A variable.
				]]></help>
      </parameter>
      <parameter name="javascriptvar" required="false" type="string">
        <help><![CDATA[
					A string that specifies the name of the JavaScript variable that the ToScript function creates.
				]]></help>
      </parameter>
      <parameter name="outputformat" required="false" type="boolean">
        <help><![CDATA[
					A Boolean value that determines whether to create WDDX (JavaScript) or ActionScript style output for structures and queries. Default: true
				]]></help>
      </parameter>
      <parameter name="ASFormat" required="false" type="boolean">
        <help><![CDATA[
					A Boolean value that specifies whether to use ActionScript shortcuts in the script. Default: false
				]]></help>
      </parameter>
    </function>
    <function name="ToString" returns="String">
      <help><![CDATA[
				Converts a value to a string.
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					Value to convert to a string; can be a simple value such as an integer, a binary object, or an XML document object.
				]]></help>
      </parameter>
      <parameter name="encoding" required="false" type="string">
        <help><![CDATA[
					The character encoding (character set) of the string.
				]]></help>
      </parameter>
    </function>
    <function name="Trace" returns="void">
      <help><![CDATA[
				Displays and logs debugging data about the state of an application at the time this function executes.
			]]></help>
      <parameter name="caller" required="false" type="struct">
        <help><![CDATA[
					The Caller Scope
				]]></help>
      </parameter>
      <parameter name="var" required="false" type="string">
        <help><![CDATA[
					The name of a simple or complex variable to display. Useful for displaying a temporary value, or a value that does not display on any CFM page.
				]]></help>
      </parameter>
      <parameter name="text" required="false" type="string">
        <help><![CDATA[
					string, which can include simple variable, but not complex variables such as arrays.
				]]></help>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					Corresponds to the cflog type attribute:
				]]></help>
      </parameter>
      <parameter name="category" required="false" type="string">
        <help><![CDATA[
					string name for identifying trace groups
				]]></help>
      </parameter>
      <parameter name="inline" required="false" type="boolean">
        <help><![CDATA[
					if true displays trace code in line on the page in the location of the trace function, addition to the debugging information output.
				]]></help>
      </parameter>
      <parameter name="abort" required="false" type="boolean">
        <help><![CDATA[
					stops further processing of the request.
				]]></help>
      </parameter>
      <parameter name="follow" required="false" type="boolean">
        <help><![CDATA[
					If true, Lucee follows the variable defined in the [var] attribute and will log any changes to it. Ignored when attribute [var] is not defined.
				]]></help>
      </parameter>
    </function>
    <function name="TransactionCommit" returns="void">
      <help><![CDATA[
				commits a pending transaction
			]]></help>

    </function>
    <function name="TransactionRollback" returns="void">
      <help><![CDATA[
				rolls back a pending transaction
			]]></help>

    </function>
    <function name="TransactionSetSavePoint" returns="void">
      <help><![CDATA[
				Saves a specific state within a transaction
			]]></help>

    </function>
    <function name="Trim" returns="String">
      <help><![CDATA[
				Removes leading and trailing spaces from a string.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					the string to trim
				]]></help>
      </parameter>
    </function>
    <function name="TrueFalseFormat" returns="String">
      <help><![CDATA[
				True, for a non-zero value; False, otherwise.
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					a value that can be casted to a boolean
				]]></help>
      </parameter>
    </function>
    <function name="UCase" returns="String">
      <help><![CDATA[
				Converts the alphabetic characters in a string to uppercase.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
    </function>
    <function name="UcFirst" returns="String">
      <help><![CDATA[
				Capitalizes the first character of the given string.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					the input string
				]]></help>
      </parameter>
      <parameter name="doAll" required="false" type="boolean">
        <help><![CDATA[
					If true, then every word is capitalized, where a new word is defined as alpha characters that come after whitespace, a dot [.], a dash [-], or (parenthesis).
				]]></help>
      </parameter>
      <parameter name="doLowerIfAllUppercase" required="false" type="boolean">
        <help><![CDATA[
					If true, then if the input string contains letters and they are all UPPERCASE, then the input string is first lowercased.
				]]></help>
      </parameter>
    </function>
    <function name="UnserializeJava" returns="void">
      <help><![CDATA[
				literal definition of a serialized Java Object by function serialize
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="URLDecode" returns="String">
      <help><![CDATA[
				Decodes an URL-encoded string.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					URL-encoded string.
				]]></help>
      </parameter>
      <parameter name="charset" required="false" type="string">
        <help><![CDATA[
					The character encoding in which the string is encoded.
				]]></help>
      </parameter>
    </function>
    <function name="URLEncode" returns="String">
      <help><![CDATA[
				encode an url
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[

				]]></help>
      </parameter>
      <parameter name="charset" required="false" type="string">
        <help><![CDATA[
					The World Wide Web Consortium Recommendation states that UTF-8 should be used as per https://www.w3.org/TR/html40/appendix/notes.html#non-ascii-chars
				]]></help>
      </parameter>
      <parameter name="force" required="false" type="boolean">
        <help><![CDATA[
					If false, then the string will not be encoded if it does not contain unsafe characters.
				]]></help>
      </parameter>
    </function>
    <function name="URLEncodedFormat" returns="String">
      <help><![CDATA[
				Generates an URL-encoded string.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
      <parameter name="charset" required="false" type="string">
        <help><![CDATA[
					The character encoding in which the string is encoded.
				]]></help>
      </parameter>
      <parameter name="force" required="false" type="boolean">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="URLSessionFormat" returns="String">
      <help><![CDATA[
				Encodes the URL with the CFTOKEN/CFID/JSESSIONID
			]]></help>
      <parameter name="url" required="false" type="string">
        <help><![CDATA[
					URL of a cfml template
				]]></help>
      </parameter>
    </function>
    <function name="Val" returns="Number">
      <help><![CDATA[
				Converts numeric characters that occur at the beginning of a string to a number.
			]]></help>
      <parameter name="value" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
    </function>
    <function name="ValueArray" returns="Array">
      <help><![CDATA[
				Returns an array of all the values, for a given column within the query.
			]]></help>
      <parameter name="query_column" required="false" type="queryColumn">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="ValueList" returns="String">
      <help><![CDATA[
				Returns a list of all the values, for a given column within the query, delimited by the value given. this function is deprecated, use instead the function <a href="/reference/functions/querycolumndata.html">QueryColumnData</a>
			]]></help>
      <parameter name="query_column" required="false" type="queryColumn">
        <help><![CDATA[
					Name of an executed query and column. Separate query name and column name with a period.
				]]></help>
      </parameter>
      <parameter name="delimiter" required="false" type="string">
        <help><![CDATA[
					A delimiter character to separate column data items. Default: comma (,).
				]]></help>
      </parameter>
    </function>
    <function name="VerifyClient" returns="void">
      <help><![CDATA[
				Verifies whether request is from valid client or not
			]]></help>

    </function>
    <function name="Week" returns="Number">
      <help><![CDATA[
				From a date/time object, determines the week number within the year. An integer in the range 1-53; the ordinal of the week, within the year.
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					date object
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone, it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="Wrap" returns="String">
      <help><![CDATA[
				Wraps text so that each line has a specified maximum number of characters.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					The text to wrap.
				]]></help>
      </parameter>
      <parameter name="limit" required="false" type="number">
        <help><![CDATA[
					Positive integer maximum number of characters to allow on a line.
				]]></help>
      </parameter>
      <parameter name="strip" required="false" type="boolean">
        <help><![CDATA[
					Whether to remove all existing newline and carriage return characters in the input string with spaces before wrapping the text.
				]]></help>
      </parameter>
    </function>
    <function name="WriteDump" returns="void">
      <help><![CDATA[
				Outputs the elements, variables and values of most kinds of CFML objects. Useful for debugging. You can display the contents of simple and complex variables, objects, components, user-defined functions, and other elements.
			]]></help>
      <parameter name="var" required="false" type="object">
        <help><![CDATA[
					Variable to display.
				]]></help>
      </parameter>
      <parameter name="expand" required="false" type="boolean">
        <help><![CDATA[
					expands views
				]]></help>
      </parameter>
      <parameter name="format" required="false" type="string">
        <help><![CDATA[
					specify the output format of the dump, the following formats are supported:
				]]></help>
      </parameter>
      <parameter name="hide" required="false" type="string">
        <help><![CDATA[
					hide column or keys.
				]]></help>
      </parameter>
      <parameter name="keys" required="false" type="numeric">
        <help><![CDATA[
					For a structure, number of keys to display.
				]]></help>
      </parameter>
      <parameter name="label" required="false" type="string">
        <help><![CDATA[
					header for the dump output.
				]]></help>
      </parameter>
      <parameter name="metainfo" required="false" type="boolean">
        <help><![CDATA[
					Includes information about the query in the cfdump results.
				]]></help>
      </parameter>
      <parameter name="output" required="false" type="string">
        <help><![CDATA[
					Where to send the results:
				]]></help>
      </parameter>
      <parameter name="show" required="false" type="string">
        <help><![CDATA[
					show column or keys.
				]]></help>
      </parameter>
      <parameter name="showUDFs" required="false" type="boolean">
        <help><![CDATA[
					show UDFs in cfdump output.
				]]></help>
      </parameter>
      <parameter name="top" required="false" type="numeric">
        <help><![CDATA[
					The number of rows to display.
				]]></help>
      </parameter>
      <parameter name="abort" required="false" type="boolean">
        <help><![CDATA[
					stops further processing of the request.
				]]></help>
      </parameter>
      <parameter name="eval" required="false" type="string">
        <help><![CDATA[
					name of the variable to display, also used as label, when no label defined.
				]]></help>
      </parameter>
    </function>
    <function name="WriteLog" returns="void">
      <help><![CDATA[
				Writes a message to a log file.
			]]></help>
      <parameter name="text" required="false" type="string">
        <help><![CDATA[
					Message text to log.
				]]></help>
      </parameter>
      <parameter name="type" required="false" type="string">
        <help><![CDATA[
					Type (severity) of the message:
				]]></help>
      </parameter>
      <parameter name="application" required="false" type="boolean">
        <help><![CDATA[
					log application name, if it is specified in a cfapplication tag.
				]]></help>
      </parameter>
      <parameter name="file" required="false" type="string">
        <help><![CDATA[
					Message file. Specify only the main part of the filename. For example, to log to the Testing.log file, specify "Testing". The file must be located in the default log directory. You cannot specify a directory path. If the file does not exist, it is created automatically, with the suffix .log.
				]]></help>
      </parameter>
      <parameter name="log" required="false" type="string">
        <help><![CDATA[
					If you omit the file argument, writes messages to standard log file. Ignored, if you specify file argument.
				]]></help>
      </parameter>
    </function>
    <function name="WriteOutput" returns="Boolean">
      <help><![CDATA[
				Writes the given string to the main response buffer regardless of conditions established by the <a href="/reference/tags/setting.html">&lt;cfsetting&gt;</a> tag.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string to write to the buffer.
				]]></help>
      </parameter>
      <parameter name="encodeFor" required="false" type="string">
        <help><![CDATA[
					encode for what, valid values are:
				]]></help>
      </parameter>
    </function>
    <function name="XmlChildPos" returns="Number">
      <help><![CDATA[
				Gets the position of a child element within an XML document object. The position, in an XmlChildren array, of the Nth child that has the specified name.
			]]></help>
      <parameter name="node" required="false" type="xml">
        <help><![CDATA[
					XML element within which to search.
				]]></help>
      </parameter>
      <parameter name="childName" required="false" type="string">
        <help><![CDATA[
					XML child element for which to search
				]]></help>
      </parameter>
      <parameter name="index" required="false" type="number">
        <help><![CDATA[

				]]></help>
      </parameter>
    </function>
    <function name="XmlElemNew" returns="void">
      <help><![CDATA[
				Creates an XML document object element
			]]></help>
      <parameter name="xmlObj" required="false" type="xml">
        <help><![CDATA[
					Name of the XML document object in which you are creating the element
				]]></help>
      </parameter>
      <parameter name="namespace_or_childName" required="false" type="string">
        <help><![CDATA[
					URI of the namespace to which this element belongs or the name of the element to create.
				]]></help>
      </parameter>
      <parameter name="childName" required="false" type="string">
        <help><![CDATA[
					The name of the element to create. This element becomes a child element of xmlObj in the tree.
				]]></help>
      </parameter>
    </function>
    <function name="XMLFormat" returns="String">
      <help><![CDATA[
				Escapes special XML characters in a string, so that the string is safe to use with XML.
			]]></help>
      <parameter name="string" required="false" type="string">
        <help><![CDATA[
					A string or a variable that contains one
				]]></help>
      </parameter>
    </function>
    <function name="XmlGetNodeType" returns="String">
      <help><![CDATA[
				Determines the type of an XML document object node.
			]]></help>
      <parameter name="xml" required="false" type="xml">
        <help><![CDATA[
					An XML DOM object node
				]]></help>
      </parameter>
    </function>
    <function name="XmlNew" returns="Xml">
      <help><![CDATA[
				Creates an XML document object.
			]]></help>
      <parameter name="caseSensitive" required="false" type="boolean">
        <help><![CDATA[
					Determines how Lucee processes the case of XML document object component identifiers:
				]]></help>
      </parameter>
    </function>
    <function name="XmlParse" returns="Xml">
      <help><![CDATA[
				Converts an XML document that is represented as a string variable into an XML document object.
			]]></help>
      <parameter name="xmlString" required="false" type="string">
        <help><![CDATA[
					Any of the following:
				]]></help>
      </parameter>
      <parameter name="caseSensitive" required="false" type="boolean">
        <help><![CDATA[
					Maintains the case of document elements and attributes. Default: false
				]]></help>
      </parameter>
      <parameter name="validator" required="false" type="string">
        <help><![CDATA[
					Any of the following:
				]]></help>
      </parameter>
    </function>
    <function name="XmlSearch" returns="void">
      <help><![CDATA[
				Uses an XPath language expression to search an XML document object.
			]]></help>
      <parameter name="xml" required="false" type="xml">
        <help><![CDATA[
					XML document object
				]]></help>
      </parameter>
      <parameter name="xpath" required="false" type="string">
        <help><![CDATA[
					XPath expression
				]]></help>
      </parameter>
    </function>
    <function name="XmlTransform" returns="String">
      <help><![CDATA[
				Applies an Extensible Stylesheet Language Transformation (XSLT) to an XML document object that is represented as a string variable. An XSLT converts an XML document to another format or representation by applying an Extensible Stylesheet Language (XSL) stylesheet to it.
			]]></help>
      <parameter name="xml" required="false" type="any">
        <help><![CDATA[
					An XML document in string format, or an XML document object
				]]></help>
      </parameter>
      <parameter name="xsl" required="false" type="string">
        <help><![CDATA[
					Alias: xslString, xslText
				]]></help>
      </parameter>
      <parameter name="parameters" required="false" type="struct">
        <help><![CDATA[
					A structure containing XSL template parameter name-value pairs to use in transforming the document. The XSL transform defined in the xslString parameter uses these parameter values in processing the xml.
				]]></help>
      </parameter>
    </function>
    <function name="XmlValidate" returns="Struct">
      <help><![CDATA[
				Uses a Document Type Definition (DTD) or XML Schema to validate an XML text document or an XML document object.
			]]></help>
      <parameter name="xmlDoc" required="false" type="string">
        <help><![CDATA[
					The XML to validate
				]]></help>
      </parameter>
      <parameter name="validator" required="false" type="string">
        <help><![CDATA[
					Any of the following:
				]]></help>
      </parameter>
    </function>
    <function name="Year" returns="Number">
      <help><![CDATA[
				From a date/time object, gets the year value.
			]]></help>
      <parameter name="date" required="false" type="datetime">
        <help><![CDATA[
					The date from which to extract the year
				]]></help>
      </parameter>
      <parameter name="timezone" required="false" type="timezone">
        <help><![CDATA[
					A datetime object is independent of a specific timezone; it is only an offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
				]]></help>
      </parameter>
    </function>
    <function name="YesNoFormat" returns="String">
      <help><![CDATA[
				Yes, for a non-zero value; No, otherwise.
			]]></help>
      <parameter name="value" required="false" type="any">
        <help><![CDATA[
					a value that can be casted to a boolean
				]]></help>
      </parameter>
    </function>
  </functions>

  <cfscopes>
    <scopevar name="Client">
      <help><![CDATA[Client scope variables ]]></help>
      <scopevar name="CFID">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="CFToken">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="HitCount">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="LastVisit">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="TimeCreated">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="URLToken">
        <help><![CDATA[ ]]></help>
      </scopevar>
    </scopevar>

    <scopevar name="CGI">
      <help><![CDATA[ ]]></help>
      <scopevar name="AUTH_PASSWORD">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="AUTH_TYPE">
        <help>
          <![CDATA[ If the server supports user authentication, and the script is protected, the protocol-specific authentication method used to validate the user. ]]></help>
      </scopevar>
      <scopevar name="AUTH_USER">
        <help>
          <![CDATA[ If the server supports user authentication, and the script is protected, the username the user has authenticated as. (Also available as AUTH_USER.) ]]></help>
      </scopevar>
      <scopevar name="CERT_COOKIE">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="CERT_FLAGS">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="CERT_ISSUER">
        <help><![CDATA[ Information about the authority that provided the client certificate ]]></help>
      </scopevar>
      <scopevar name="CERT_KEYSIZE">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="CERT_SECRETKEYSIZE">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="CERT_SERIALNUMBER">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="CERT_SERVER_ISSUER">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="CERT_SERVER_SUBJECT">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="CERT_SUBJECT">
        <help>
          <![CDATA[ Client-specific information provided by the web server. This data typically includes the client's name, e-mail address, and so on ]]></help>
      </scopevar>
      <scopevar name="CF_TEMPLATE_PATH">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="CONTENT_LENGTH">
        <help><![CDATA[ Length of the content as given by the client. ]]></help>
      </scopevar>
      <scopevar name="CONTENT_TYPE">
        <help>
          <![CDATA[ For queries that have attached information, such as HTTP POST and PUT, this is the content type of the data. ]]></help>
      </scopevar>
      <scopevar name="CONTEXT_PATH">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="GATEWAY_INTERFACE">
        <help><![CDATA[ CGI specification revision with which this server complies. Format: CGI/revision. ]]></help>
      </scopevar>
      <scopevar name="HTTPS">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="HTTPS_KEYSIZE">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="HTTPS_SECRETKEYSIZE">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="HTTPS_SERVER_ISSUER">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="HTTPS_SERVER_SUBJECT">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="HTTP_ACCEPT">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="HTTP_ACCEPT_ENCODING">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="HTTP_ACCEPT_LANGUAGE">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="HTTP_CONNECTION">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="HTTP_COOKIE">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="HTTP_HOST">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="HTTP_REFERER">
        <help><![CDATA[ The referring document that linked to or submitted form data. ]]></help>
      </scopevar>
      <scopevar name="HTTP_USER_AGENT">
        <help>
          <![CDATA[ The browser that the client is currently using to send the request. Format: software/version library/version. ]]></help>
      </scopevar>
      <scopevar name="QUERY_STRING">
        <help><![CDATA[ Query information that follows the ? in the URL that referenced this script. ]]></help>
      </scopevar>
      <scopevar name="REMOTE_ADDR">
        <help><![CDATA[ IP address of the remote host making the request. ]]></help>
      </scopevar>
      <scopevar name="REMOTE_HOST">
        <help>
          <![CDATA[ Hostname making the request. If the server does not have this information, it sets REMOTE_ADDR and does not set REMOTE_HOST. ]]></help>
      </scopevar>
      <scopevar name="REMOTE_USER">
        <help>
          <![CDATA[ If the server supports user authentication, and the script is protected, the username the user has authenticated as. (Also available as AUTH_USER.) ]]></help>
      </scopevar>
      <scopevar name="REQUEST_METHOD">
        <help><![CDATA[ Method with which the request was made. For HTTP, this is Get, Head, Post, and so on. ]]></help>
      </scopevar>
      <scopevar name="SCRIPT_NAME">
        <help><![CDATA[ Virtual path to the script that is executing; used for self-referencing URLs. ]]></help>
      </scopevar>
      <scopevar name="SERVER_NAME">
        <help><![CDATA[ Server's hostname, DNS alias, or IP address as it appears in self-referencing URLs. ]]></help>
      </scopevar>
      <scopevar name="SERVER_PORT">
        <help><![CDATA[ Port number to which the request was sent. ]]></help>
      </scopevar>
      <scopevar name="SERVER_PORT_SECURE">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="SERVER_PROTOCOL">
        <help><![CDATA[ Name and revision of the information protocol this request came in with. Format: protocol/revision. ]]></help>
      </scopevar>
      <scopevar name="SERVER_SOFTWARE">
        <help>
          <![CDATA[ Name and version of the information server software answering the request (and running the gateway). Format: name/version. ]]></help>
      </scopevar>
      <scopevar name="WEB_SERVER_API">
        <help><![CDATA[ ]]></help>
      </scopevar>
    </scopevar>

    <scopevar name="Server">
      <help><![CDATA[Client scope variables ]]></help>
      <scopevar name="ColdFusion">
        <help><![CDATA[ ]]></help>
        <scopevar name="ProductName">
          <help><![CDATA[ ]]></help>
        </scopevar>
        <scopevar name="ProductVersion">
          <help><![CDATA[ ]]></help>
        </scopevar>
        <scopevar name="ProductLevel">
          <help><![CDATA[ ]]></help>
        </scopevar>
        <scopevar name="SerialNumber">
          <help><![CDATA[ ]]></help>
        </scopevar>
        <scopevar name="SupportedLocales">
          <help><![CDATA[ ]]></help>
        </scopevar>
        <scopevar name="AppServer">
          <help><![CDATA[ ]]></help>
        </scopevar>
        <scopevar name="Expiration">
          <help><![CDATA[ ]]></help>
        </scopevar>
        <scopevar name="RootDir">
          <help><![CDATA[ ]]></help>
        </scopevar>
      </scopevar>
      <scopevar name="OS">
        <help><![CDATA[ ]]></help>
        <scopevar name="Name">
          <help><![CDATA[ ]]></help>
        </scopevar>
        <scopevar name="AdditionalInformation">
          <help><![CDATA[ ]]></help>
        </scopevar>
        <scopevar name="Version">
          <help><![CDATA[ ]]></help>
        </scopevar>
        <scopevar name="BuildNumber">
          <help><![CDATA[ ]]></help>
        </scopevar>
      </scopevar>
    </scopevar>

    <scopevar name="Application">
      <help><![CDATA[ ]]></help>
      <scopevar name="ApplicationName">
        <help><![CDATA[ ]]></help>
      </scopevar>
    </scopevar>

    <scopevar name="Session">
      <help><![CDATA[ ]]></help>
      <scopevar name="CFID">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="CFToken">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="URLToken">
        <help><![CDATA[ ]]></help>
      </scopevar>
    </scopevar>

    <scopevar name="CFFtp">
      <help><![CDATA[ ]]></help>
      <scopevar name="Succeeded">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="ErrorCode">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="ErrorText">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="ReturnValue">
        <help><![CDATA[ ]]></help>
      </scopevar>

    </scopevar>

    <scopevar name="CFHttp">
      <help><![CDATA[ ]]></help>
      <scopevar name="FileContent">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="MimeType">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="Header">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="ResponseHeader">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="StatusCode">
        <help><![CDATA[ ]]></help>
      </scopevar>

    </scopevar>

    <scopevar name="CFLDAP" type="query" attribute="action" attributevalue="query">
      <help><![CDATA[ ]]></help>
      <scopevar name="CurrentRow">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="RecordCount">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="ColumnList">
        <help><![CDATA[ ]]></help>
      </scopevar>
    </scopevar>

    <scopevar name="CFPOP" type="query" returnattribute="name">
      <help><![CDATA[ ]]></help>
      <scopevar name="Date">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="From">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="Body">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="Header">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="MessageNumber">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="ReplyTo">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="Subject">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="CC">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="To">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="CurrentRow">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="RecordCount">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="ColumnList">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="Attachments">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="AttachmentFiles">
        <help><![CDATA[ ]]></help>
      </scopevar>
    </scopevar>

    <scopevar name="CFQuery">
      <returnvar attribute="name">
        <scopevar name="CurrentRow">
          <help><![CDATA[ Current row of query that cfoutput is processing. ]]></help>
        </scopevar>
        <scopevar name="RecordCount">
          <help><![CDATA[ Number of records (rows) returned from the query. ]]></help>
        </scopevar>
        <scopevar name="ColumnList">
          <help><![CDATA[ Comma-separated list of the query columns. ]]></help>
        </scopevar>
      </returnvar>
      <scopevar name="ExecutionTime ">
        <help><![CDATA[ ]]></help>
      </scopevar>
    </scopevar>

    <scopevar name="CFStoredProc">

      <scopevar name="ExecutionTime">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="StatusCode">
        <help><![CDATA[  ]]></help>
      </scopevar>


    </scopevar>

    <scopevar name="CFRegistry">
      <returnvar attribute="name">
        <scopevar name="Entry">
          <help><![CDATA[  ]]></help>
        </scopevar>
        <scopevar name="Type">
          <help><![CDATA[  ]]></help>
        </scopevar>
        <scopevar name="Value">
          <help><![CDATA[  ]]></help>
        </scopevar>
      </returnvar>
    </scopevar>

    <scopevar name="CFSEARCH">
      <returnvar attribute="name">
        <scopevar name="URL">
          <help><![CDATA[  ]]></help>
        </scopevar>
        <scopevar name="Key">
          <help><![CDATA[  ]]></help>
        </scopevar>
        <scopevar name="Title">
          <help><![CDATA[  ]]></help>
        </scopevar>
        <scopevar name="Score">
          <help><![CDATA[  ]]></help>
        </scopevar>
        <scopevar name="Custom1">
          <help><![CDATA[  ]]></help>
        </scopevar>
        <scopevar name="Custom2">
          <help><![CDATA[  ]]></help>
        </scopevar>
        <scopevar name="Summary">
          <help><![CDATA[  ]]></help>
        </scopevar>
        <scopevar name="RecordCount">
          <help><![CDATA[  ]]></help>
        </scopevar>
        <scopevar name="CurrentRow">
          <help><![CDATA[  ]]></help>
        </scopevar>
        <scopevar name="RecordsSearched">
          <help><![CDATA[  ]]></help>
        </scopevar>
        <scopevar name="ColumnList">
          <help><![CDATA[  ]]></help>
        </scopevar>
      </returnvar>
    </scopevar>

    <scopevar name="CFDirectory">
      <help><![CDATA[ ]]></help>
      <returnvar attribute="name">
        <scopevar name="Name">
          <help><![CDATA[ ]]></help>
        </scopevar>
        <scopevar name="Size">
          <help><![CDATA[  ]]></help>
        </scopevar>
        <scopevar name="Type">
          <help><![CDATA[  ]]></help>
        </scopevar>
        <scopevar name="DateLastModified">
          <help><![CDATA[ ]]></help>
        </scopevar>
        <scopevar name="Attributes">
          <help><![CDATA[ ]]></help>
        </scopevar>
        <scopevar name="Mode">
          <help><![CDATA[  ]]></help>
        </scopevar>
      </returnvar>
    </scopevar>

    <scopevar name="CFError">
      <help><![CDATA[ ]]></help>
      <scopevar name="Diagnostics">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="MailTo">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="DateTime">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="Browser">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="GeneratedContent">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="RemoteAddress">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="HTTPReferer">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="Template">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="QueryString">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="ValidationHeader">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="InvalidFields">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="ValidationFooter">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="Type">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="Message">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="Detail">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="ErrNumber">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="NativeErrorCode">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="SQLState">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="LockName">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="LockOperation">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="MissingFileName">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="TagContext">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="ErrorCode">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="ExtendedInfo">
        <help><![CDATA[ ]]></help>
      </scopevar>
    </scopevar>

    <scopevar name="CFFile">
      <help><![CDATA[ ]]></help>
      <scopevar name="AttemptedServerFile">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="ClientDirectory">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="ClientFile">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="ClientFileExt">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="ClientFileName">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="ContentSubType">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="ContentType">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="DateLastAccessed">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="FileExisted">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="FileSize">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="FileWasAppended">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="FileWasOverwritten">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="FileWasRenamed">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="FileWasSaved">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="OldFileSize">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="ServerDirectory">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="ServerFile">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="ServerFileExt">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="ServerFileName">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="TimeCreated">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="TimeLastModified">
        <help><![CDATA[  ]]></help>
      </scopevar>
    </scopevar>

    <scopevar name="CFCatch">
      <help><![CDATA[ ]]></help>
      <scopevar name="Type">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="Message">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="Detail">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="ErrNumber">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="NativeErrorCode">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="SQLState">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="LockName">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="LockOperation">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="MissingFileName">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="TagContext">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="ErrorCode">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="ExtendedInfo">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="QueryError">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="SQL">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="Where">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="Datasource">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="Name">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="TokenText">
        <help><![CDATA[  ]]></help>
      </scopevar>
    </scopevar>

    <scopevar name="this">
      <help><![CDATA[ ]]></help>

      <scopevar name="name">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="super">
        <help><![CDATA[ ]]></help>

        <scopevar name="name">
          <help><![CDATA[ ]]></help>
        </scopevar>
      </scopevar>
      <scopevar name="applicationTimeout">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="clientManagement">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="clientStorage">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="Attributes">
        <help><![CDATA[ ]]></help>
      </scopevar>
      <scopevar name="customTagPaths">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="loginStorage">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="mappings">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="sessionManagement">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="sessionTimeout">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="setClientCookies">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="setDomainCookies">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="scriptProtect">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="secureJSON">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="secureJSONPrefix">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="welcomeFileList">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="ormEnabled">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="ormSettings">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="datasource">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="enableRobustException">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="debuggingIPAddress">
        <help><![CDATA[  ]]></help>
      </scopevar>
      <scopevar name="smtpServerSettings">
        <help><![CDATA[  ]]></help>
      </scopevar>
    </scopevar>
  </cfscopes>

  <scopes>
    <scopes>
      <!-- Updated by Jordan Clark: jclark@imagineeringstudio.com -->
      <!-- Server scope variables -->
      <scope type="String" value="Server.ColdFusion.ProductName">
        <help><![CDATA[
        ColdFusion product name, usually "ColdFusion Server"
    ]]></help>
      </scope>
      <scope type="String" value="Server.ColdFusion.ProductVersion">
        <help><![CDATA[
        ColdFusion product release information. Comma seperated list
        of build numbers, first number is the major build number.
        Example: 7,0,1,116466
    ]]></help>
      </scope>
      <scope type="String" value="Server.ColdFusion.ProductLevel">
        <help><![CDATA[
        ColdFusion product level information, for example:
        "Professional", "Enterprise", or "Developer"
    ]]></help>
      </scope>
      <scope type="String" value="Server.ColdFusion.SerialNumber">
        <help><![CDATA[
        ColdFusion serial number.
    ]]></help>
      </scope>
      <scope type="String" value="Server.ColdFusion.SupportedLocales">
        <help><![CDATA[
        Locales supported by ColdFusion, comma seperated.
    ]]></help>
      </scope>
      <scope type="DateTime" value="Server.ColdFusion.Expiration">
        <help><![CDATA[
        Expiration date of ColdFusion.
    ]]></help>
      </scope>
      <scope type="String" value="Server.ColdFusion.RootDir">
        <help><![CDATA[
        Directory ColdFusion is installed to
        Example: C:\CFusionMX7
    ]]></help>
      </scope>
      <scope type="String" value="Server.ColdFusion.AppServer">
        <help><![CDATA[
        Name of J2EE Application server, for stand-alone ColdFusion
        the value is "JRun4".
    ]]></help>
      </scope>
      <scope type="String" value="Server.ColdFusion.InstallKit">
        <help><![CDATA[
        Type of installation method.
        Example: Native Windows
    ]]></help>
      </scope>
      <scope type="String" value="Server.OS.Name">
        <help><![CDATA[
        Server operating system name.
    ]]></help>
      </scope>
      <scope type="String" value="Server.OS.AdditionalInformation">
        <help><![CDATA[
        Information about the host operating system.
    ]]></help>
      </scope>
      <scope type="Numeric" value="Server.OS.Version">
        <help><![CDATA[
        Operating system version.
    ]]></help>
      </scope>
      <scope type="String" value="Server.OS.Arch">
        <help><![CDATA[
        The computer architecture, Windows computers are: x86
    ]]></help>
      </scope>
      <scope type="String" value="Server.OS.BuildNumber">
        <help><![CDATA[
        Build number of the host operating system.
    ]]></help>
      </scope>
      <!-- Application Scope variables -->
      <scope type="String" value="Application.ApplicationName">
        <help><![CDATA[
        Name of the application set with the cfapplication tag, or
        in Application.cfc
    ]]></help>
      </scope>
      <!-- Application.CFC THIS variables -->
      <!-- REFERENCE: http://livedocs.macromedia.com/coldfusion/7/htmldocs/wwhelp/wwhimpl/js/html/wwhelp.htm?href=00001134.htm#1133743 -->
      <scope type="String" value="ApplicationCFC.Name">
        <help><![CDATA[
        The application name. If you do not set this variable, or
        set it to the empty string, your CFC applies to the unnamed
        application scope, which is the ColdFusion MX J2EE servlet
        context.
    ]]></help>
      </scope>
      <scope type="DateTime" value="ApplicationCFC.ApplicationTimeout">
        <help><![CDATA[
        Life span, as a real number of days, of the application,
        including all Application scope variables. Use the CFML
        CreateTimeSpan function to generate this variable's value.
    ]]></help>
      </scope>
      <scope type="boolean" value="ApplicationCFC.ClientManagement">
        <help><![CDATA[
        Whether the application supports Client scope variables.
    ]]></help>
      </scope>
      <scope type="String" value="ApplicationCFC.ClientStorage">
        <help><![CDATA[
        Where Client variables are stored; can be cookie, registry,
        or the name of a data source.
    ]]></help>
      </scope>
      <scope type="String" value="ApplicationCFC.LoginStorage">
        <help><![CDATA[
        Whether to store login information in the Cookie scope or the
        Session scope.
    ]]></help>
      </scope>
      <scope type="boolean" value="ApplicationCFC.SessionManagement">
        <help><![CDATA[
        Whether the application supports Session scope variables.
    ]]></help>
      </scope>
      <scope type="DateTime" value="ApplicationCFC.SessionTimeout">
        <help><![CDATA[
        Life span, as a real number of days, of the user session,
        including all Session variables. Use the CFML CreateTimeSpan
        function to generate this variable's value.
    ]]></help>
      </scope>
      <scope type="boolean" value="ApplicationCFC.SetClientCookies">
        <help><![CDATA[
        Whether to send CFID and CFTOKEN cookies to the client
        browser.
    ]]></help>
      </scope>
      <scope type="boolean" value="ApplicationCFC.SetDomainCookies">
        <help><![CDATA[
        Whether to set CFID and CFTOKEN cookies for a domain (not
        just a host).
    ]]></help>
      </scope>
      <scope type="boolean" value="ApplicationCFC.ScriptProtect">
        <help><![CDATA[
        Whether to protect variables from cross-site scripting
        attacks.
    ]]></help>
      </scope>
      <!-- Client scope variables -->
      <!-- REFERENCE: http://livedocs.macromedia.com/coldfusion/7/htmldocs/wwhelp/wwhimpl/js/html/wwhelp.htm?href=00001134.htm#1133743 -->
      <!-- REFERENCE: expressionelements.vtm -->
      <scope type="Numeric" value="Client.CFID">
        <help><![CDATA[
        Unique client ID. Part of the session key.
    ]]></help>
      </scope>
      <scope type="Numeric" value="Client.CFToken">
        <help><![CDATA[
        Unique ID. Part of the session key.
    ]]></help>
      </scope>
      <scope type="Numeric" value="Client.HitCount">
        <help><![CDATA[
        Number of client visits.
    ]]></help>
      </scope>
      <scope type="DateTime" value="Client.LastVisit">
        <help><![CDATA[
        Date and time of the last visit.
    ]]></help>
      </scope>
      <scope type="DateTime" value="Client.TimeCreated">
        <help><![CDATA[
        Date and time of first visit.
    ]]></help>
      </scope>
      <scope type="String" value="Client.URLToken">
        <help><![CDATA[
        CFID combined with CFTOKEN.
        Example: CFID=123&CFTOKEN=45678
    ]]></help>
      </scope>
      <!-- Session Scope variables -->
      <scope type="Numeric" value="Session.CFID">
        <help><![CDATA[
        Unique Session ID. Part of the session key.
    ]]></help>
      </scope>
      <scope type="Numeric" value="Session.CFToken">
        <help><![CDATA[
        Unique Session ID. Part of the session key.
    ]]></help>
      </scope>
      <scope type="String" value="Session.URLToken">
        <help><![CDATA[
        CFID combined with CFTOKEN
        Eexample: CFID=123&CFTOKEN=45678
    ]]></help>
      </scope>
      <scope type="String" value="Session.SessionID">
        <help><![CDATA[
        A unique identifier for the session. ColdFusion session
        management: a combination of the application name and CFID
        and CFToken values. J2EE session management: the jsessionid
        value.
    ]]></help>
      </scope>
      <!-- Custom tag variables -->
      <scope type="String" value="ThisTag.ExecutionMode">
        <help><![CDATA[
        A custom tag template may be invoked in either of two modes:
        "Start" tag execution and "End" tag execution. "Inactive" is
        another possible value, but for unknown purposes.
    ]]></help>
      </scope>
      <scope type="boolean" value="ThisTag.HasEndTag">
        <help><![CDATA[
        Used for code validation, it distinguishes between custom
        tags that have and don't have end tags for
        ExecutionMode='start'. The name of the Boolean value is
        ThisTagHasEndTag.
    ]]></help>
      </scope>
      <scope type="String" value="ThisTag.GeneratedContent">
        <help><![CDATA[
        Custom tags can access and modify the generated content of
        any of its instances using the ThisTag.GeneratedContent
        variable.
    ]]></help>
      </scope>
      <scope type="Struct" value="ThisTag.AssocAttribs">
        <help><![CDATA[
        Holds the attributes of all nested tags if CFASSOCIATE has
        used them.
    ]]></help>
      </scope>
      <!-- cffile action="upload" variables -->
      <!-- CFFILE prefix can be renamed with RESULT attribute -->
      <scope type="boolean" value="CFFILE.AttemptedServerFile">
        <help><![CDATA[
        Specifies whether or not ColdFusion attempted to save a file.
    ]]></help>
      </scope>
      <scope type="String" value="CFFILE.ClientDirectory">
        <help><![CDATA[
        Full path of the uploaded file on the clients system.
    ]]></help>
      </scope>
      <scope type="String" value="CFFILE.ClientFile">
        <help><![CDATA[
        Filename of the uploaded file on the clients system.
    ]]></help>
      </scope>
      <scope type="String" value="CFFILE.ClientFileExt">
        <help><![CDATA[
        Extension of the uploaded file on the clients system without
        a period.
    ]]></help>
      </scope>
      <scope type="String" value="CFFILE.ClientFileName">
        <help><![CDATA[
        Filename without an extension of the uploaded file on the
        client's system.
    ]]></help>
      </scope>
      <scope type="String" value="CFFILE.ContentSubType">
        <help><![CDATA[
        MIME content subtype of the saved file.
    ]]></help>
      </scope>
      <scope type="String" value="CFFILE.ContentType">
        <help><![CDATA[
        MIME content type of the saved file.
    ]]></help>
      </scope>
      <scope type="DateTime" value="CFFILE.DateLastAccessed">
        <help><![CDATA[
        Date and time the uploaded file was last accessed.
    ]]></help>
      </scope>
      <scope type="boolean" value="CFFILE.FileExisted">
        <help><![CDATA[
        Specifies whether or not the file already existed with the
        same path.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFFILE.FileSize">
        <help><![CDATA[
        Size of the uploaded file.
    ]]></help>
      </scope>
      <scope type="boolean" value="CFFILE.FileWasAppended">
        <help><![CDATA[
        Specifies whether or not ColdFusion appended a file to an
        existing file.
    ]]></help>
      </scope>
      <scope type="boolean" value="CFFILE.FileWasOverwritten">
        <help><![CDATA[
        Specifies whether or not ColdFusion overwrote a file.
    ]]></help>
      </scope>
      <scope type="boolean" value="CFFILE.FileWasRenamed">
        <help><![CDATA[
        Specifies whether or not the uploaded file was renamed to
        avoid a name conflict.
    ]]></help>
      </scope>
      <scope type="boolean" value="CFFILE.FileWasSaved">
        <help><![CDATA[
        Specifies whether or not ColdFusion saved a file.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFFILE.OldFileSize">
        <help><![CDATA[
        Size of a file that was overwritten in the file upload
        operation.
    ]]></help>
      </scope>
      <scope type="String" value="CFFILE.ServerDirectory">
        <help><![CDATA[
        Full path of the file actually saved.
    ]]></help>
      </scope>
      <scope type="String" value="CFFILE.ServerFile">
        <help><![CDATA[
        Filename of the file actually saved.
    ]]></help>
      </scope>
      <scope type="String" value="CFFILE.ServerFileExt">
        <help><![CDATA[
        Extension of the uploaded file on the server, without a period
        Example: txt
    ]]></help>
      </scope>
      <scope type="String" value="CFFILE.ServerFileName">
        <help><![CDATA[
        Filename, without an extension, of the uploaded file on the
        server.
    ]]></help>
      </scope>
      <scope type="DateTime" value="CFFILE.TimeCreated">
        <help><![CDATA[
        Time the uploaded file was created.
    ]]></help>
      </scope>
      <scope type="DateTime" value="CFFILE.TimeLastModified">
        <help><![CDATA[
        Date and time of the last modification to the uploaded file.
    ]]></help>
      </scope>
      <!-- CFFTP variables -->
      <!-- REFERENCE: http://livedocs.macromedia.com/coldfusion/7/htmldocs/wwhelp/wwhimpl/common/html/wwhelp.htm?context=ColdFusion_Documentation&file=00000261.htm -->
      <!-- REFERENCE: expressionelements.vtm -->
      <!-- CFFTP prefix can be renamed with RESULT attribute -->
      <scope type="String" value="CFFTP.ReturnValue">
        <help><![CDATA[
        The result value depending on the action performed, as
        follows:
        getCurrentDir = current directory (string)
        getCurrentURL = current URL (string)
        existsDir = yes/no
        existsFile = yes/no
        exists = yes/no
    ]]></help>
      </scope>
      <scope type="boolean" value="CFFTP.Succeeded">
        <help><![CDATA[
        Yes or No dependent on value of ErrorCode.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFFTP.ErrorCode">
        <help><![CDATA[
        Error code.
    ]]></help>
      </scope>
      <scope type="String" value="CFFTP.ErrorText">
        <help><![CDATA[
        Text associated with ErrorCode.
    ]]></help>
      </scope>
      <!-- Returned from "ListDir" action as a query with these fields -->
      <!-- CFFTP prefix is set by NAME attribute -->
      <scope type="String" value="CFFTPList.Name">
        <help><![CDATA[
        ListDir Query Field: Filename of the current element.
    ]]></help>
      </scope>
      <scope type="String" value="CFFTPList.Path">
        <help><![CDATA[
        ListDir Query Field: File path (without the drive
        designation) of the current element.
    ]]></help>
      </scope>
      <scope type="String" value="CFFTPList.URL">
        <help><![CDATA[
        ListDir Query Field: Complete URL for the current element
        (file or directory).
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFFTPList.Length">
        <help><![CDATA[
        ListDir Query Field: Number indicating file size of the
        current element.
    ]]></help>
      </scope>
      <scope type="DateTime" value="CFFTPList.LastModified">
        <help><![CDATA[
        ListDir Query Field: Unformatted date/time value of the
        current element.
    ]]></help>
      </scope>
      <scope type="String" value="CFFTPList.Attributes">
        <help><![CDATA[
        ListDir Query Field: Indicates attributes of the current
        element.
    ]]></help>
      </scope>
      <scope type="boolean" value="CFFTPList.IsDirectory">
        <help><![CDATA[
        ListDir Query Field: Indicates whether object is a file or
        directory.
    ]]></help>
      </scope>
      <scope type="String" value="CFFTPList.CurrentRow">
        <help><![CDATA[
        The current row of the query in a loop.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFFTPList.RecordCount">
        <help><![CDATA[
        Total number of records in the query.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFFTPList.ColumnList">
        <help><![CDATA[
        Column list, comma seperated.
    ]]></help>
      </scope>
      <!-- CFNTAUTHENTICATE -->
      <!-- CFNTAUTHENTICATE prefix is set by RESULT attribute -->
      <scope type="boolean" value="CFNTAUTHENTICATE.auth">
        <help><![CDATA[
        Whether the user is authenticated
    ]]></help>
      </scope>
      <scope type="String" value="CFNTAUTHENTICATE.groups">
        <help><![CDATA[
        A comma-delimited list of the user's groups in the specified
        domain. The structure includes this field only if the
        listGroups attribute is Yes.
    ]]></help>
      </scope>
      <scope type="String" value="CFNTAUTHENTICATE.name">
        <help><![CDATA[
        The user name; equals the tag's name attribute.
    ]]></help>
      </scope>
      <scope type="String" value="CFNTAUTHENTICATE.status">
        <help><![CDATA[
        The authentication status. One of the following:
        - success
        - UserNotInDirFailure: the user is not listed in the directory.
        - AuthenticationFailure: the user is in the directory, but
          the password is not valid.
    ]]></help>
      </scope>
      <!-- CFDIRECTORY ACTION="LIST" QUERY -->
      <!-- REFERENCE: http://livedocs.macromedia.com/coldfusion/7/htmldocs/wwhelp/wwhimpl/js/html/wwhelp.htm?href=00001134.htm#1133743 -->
      <!-- REFERENCE: expressionelements.vtm -->
      <!-- CFDIRECTORY prefix is set by QUERY attribute -->
      <scope type="String" value="CFDIRECTORY.Attributes">
        <help><![CDATA[
        Returns file attributes, if applicable.
    ]]></help>
      </scope>
      <scope type="DateTime" value="CFDIRECTORY.DateLastModified">
        <help><![CDATA[
        Returns the date an entry was last modified.
    ]]></help>
      </scope>
      <scope type="String" value="CFDIRECTORY.Directory">
        <help><![CDATA[
        Directory containing the entry.
    ]]></help>
      </scope>
      <scope type="String" value="CFDIRECTORY.Mode">
        <help><![CDATA[
        (Deprecated) Empty value for backward compatibility with
        ColdFusion 5 on UNIX.
    ]]></help>
      </scope>
      <scope type="String" value="CFDIRECTORY.Name">
        <help><![CDATA[
        Returns the directory or file entry name. ( "." and ".."
        aren't returned since 6.0)
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFDIRECTORY.Size">
        <help><![CDATA[
        Returns the size of directory or file entry.
    ]]></help>
      </scope>
      <scope type="String" value="CFDIRECTORY.Type">
        <help><![CDATA[
        Returns entry type: "File" or "Dir".
    ]]></help>
      </scope>
      <scope type="String" value="CFDIRECTORY.CurrentRow">
        <help><![CDATA[
        The current row of the query in a loop.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFDIRECTORY.RecordCount">
        <help><![CDATA[
        Total number of records in the query.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFDIRECTORY.ColumnList">
        <help><![CDATA[
        Column list, comma seperated.
    ]]></help>
      </scope>
      <!-- CFREGISTRY ACTION="GETALL" QUERY -->
      <!-- REFERENCE: expressionelements.vtm -->
      <!-- CFREGISTRY prefix is set by NAME attribute -->
      <scope type="String" value="CFREGISTRY.Entry">
        <help><![CDATA[
        Registry value name.
    ]]></help>
      </scope>
      <scope type="String" value="CFREGISTRY.Type">
        <help><![CDATA[
        Data type.
    ]]></help>
      </scope>
      <scope type="String" value="CFREGISTRY.Value">
        <help><![CDATA[
        Registry value data.
    ]]></help>
      </scope>
      <scope type="String" value="CFREGISTRY.CurrentRow">
        <help><![CDATA[
        The current row of the query in a loop.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFREGISTRY.RecordCount">
        <help><![CDATA[
        Total number of records in the query.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFREGISTRY.ColumnList">
        <help><![CDATA[
        Column list, comma seperated.
    ]]></help>
      </scope>
      <!-- CFSEARCH QUERY -->
      <!-- REFERENCE: http://livedocs.macromedia.com/coldfusion/7/htmldocs/wwhelp/wwhimpl/js/html/wwhelp.htm?href=00001134.htm#1133743 -->
      <!-- CFSEARCH prefix is set by NAME attribute -->
      <scope type="String" value="CFSEARCH.URL">
        <help><![CDATA[
        Value of URLpath attribute in the cfindex tag used to
        populate a collection.
    ]]></help>
      </scope>
      <scope type="String" value="CFSEARCH.Key">
        <help><![CDATA[
        Value of the key attribute in the cfindex tag used to
        populate a collection.
    ]]></help>
      </scope>
      <scope type="String" value="CFSEARCH.Title">
        <help><![CDATA[
        Value of title attribute in cfindex tag used to populate the
        collection, including PDF and Office document titles. If a
        title is not extracted from the document, the tag uses the
        cfindex title attribute value for each row.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFSEARCH.Score">
        <help><![CDATA[
        Relevancy score of document based on search criteria, from
        0-1. Example: 0.92 (would be 92%)
    ]]></help>
      </scope>
      <scope type="String" value="CFSEARCH.Custom1">
        <help><![CDATA[
        Value of custom fields in cfindex tag used to populate a
        collection.
    ]]></help>
      </scope>
      <scope type="String" value="CFSEARCH.Custom2">
        <help><![CDATA[
        Value of custom fields in cfindex tag used to populate a
        collection.
    ]]></help>
      </scope>
      <scope type="String" value="CFSEARCH.Context">
        <help><![CDATA[
        A context summary containing the search terms, highlighted in
        bold (by default). This is enabled if you set the
        contextpassages attribute to a number greater than zero.
    ]]></help>
      </scope>
      <scope type="String" value="CFSEARCH.Custom3">
        <help><![CDATA[
        Value of custom fields in cfindex tag used to populate a
        collection.
    ]]></help>
      </scope>
      <scope type="String" value="CFSEARCH.Custom4">
        <help><![CDATA[
        Value of custom fields in cfindex tag used to populate a
        collection.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFSEARCH.Size">
        <help><![CDATA[
        The number of bytes in the index document.
    ]]></help>
      </scope>
      <scope type="String" value="CFSEARCH.Rank">
        <help><![CDATA[
        The rank of this document in the search results.
    ]]></help>
      </scope>
      <scope type="String" value="CFSEARCH.Author">
        <help><![CDATA[
        Extracted from the HTML, Office, and PDF documents when
        available.
    ]]></help>
      </scope>
      <scope type="String" value="CFSEARCH.Type">
        <help><![CDATA[
        The MIME type of the document.
        Example: text/html
    ]]></help>
      </scope>
      <scope type="String" value="CFSEARCH.Category">
        <help><![CDATA[
        A list of the categories that were specified for this
        document when it was indexed.
    ]]></help>
      </scope>
      <scope type="String" value="CFSEARCH.CategoryTree">
        <help><![CDATA[
        A hierarchical category tree, or serial list of categories,
        that was specified for this document when it was indexed.
        Only a single tree is returned.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFSEARCH.RecordsSearched">
        <help><![CDATA[
        Number of records searched. This is the same value for each
        row in the record set. Corresponds to the searched key in the
        status structure.
    ]]></help>
      </scope>
      <scope type="String" value="CFSEARCH.Summary">
        <help><![CDATA[
        Contents of automatic summary generated by cfindex.
    ]]></help>
      </scope>
      <scope type="String" value="CFSEARCH.CurrentRow">
        <help><![CDATA[
        The current row of the query in a loop.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFSEARCH.RecordCount">
        <help><![CDATA[
        Total number of records in the query.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFSEARCH.ColumnList">
        <help><![CDATA[
        Column list, comma seperated.
    ]]></help>
      </scope>
      <!-- CFCOLLECTION -->
      <!-- REFERENCE: http://livedocs.macromedia.com/coldfusion/7/htmldocs/wwhelp/wwhimpl/common/html/wwhelp.htm?context=ColdFusion_Documentation&file=00000230.htm#1097667 -->
      <!-- CFCOLLECTION prefix is set by NAME attribute -->
      <scope type="boolean" value="CFCOLLECTION.categories">
        <help><![CDATA[
        Collection has category support enabled or disabled.
    ]]></help>
      </scope>
      <scope type="String" value="CFCOLLECTION.charset">
        <help><![CDATA[
        The character set of the collection.
    ]]></help>
      </scope>
      <scope type="DateTime" value="CFCOLLECTION.created">
        <help><![CDATA[
        The date and time that the collection was created.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFCOLLECTION.doccount">
        <help><![CDATA[
        The number of documents in this collection.
    ]]></help>
      </scope>
      <scope type="String" value="CFCOLLECTION.external">
        <help><![CDATA[
        - yes: the collection is external.
        - no: the collection is not external.
        - Not Found: the collection is registered but is not available in the defined path .
    ]]></help>
      </scope>
      <scope type="String" value="CFCOLLECTION.language">
        <help><![CDATA[
        The locale setting of the collection.
        (This information is not available for K2Server collections.)
    ]]></help>
      </scope>
      <scope type="DateTime" value="CFCOLLECTION.lastmodified">
        <help><![CDATA[
        The date and time that the collection was last changed.
    ]]></help>
      </scope>
      <scope type="String" value="CFCOLLECTION.name">
        <help><![CDATA[
        The name of the collection.
    ]]></help>
      </scope>
      <scope type="String" value="CFCOLLECTION.path">
        <help><![CDATA[
        Absolute path to the collection.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFCOLLECTION.size">
        <help><![CDATA[
        The size of the collection, expressed in kilobytes.
    ]]></help>
      </scope>
      <scope compatibility="obsolete" type="boolean" value="CFCOLLECTION.mapped">
        <help><![CDATA[
        Obsolete.
        The collection is mapped.
        (This information is not available for K2Server collections.)
    ]]></help>
      </scope>
      <scope compatibility="obsolete" type="boolean" value="CFCOLLECTION.online">
        <help><![CDATA[
        Obsolete.
        The collection can be searched.
        (If EXTERNAL = "Not Found", this value is "No".)
    ]]></help>
      </scope>
      <scope compatibility="obsolete" type="String" value="CFCOLLECTION.registered">
        <help><![CDATA[
        Obsolete.
        - CF: collection is registered by ColdFusion
        - K2: collection is registered by K2Server
    ]]></help>
      </scope>
      <!-- CFSTOREDPROC -->
      <!-- REFERENCE: http://livedocs.macromedia.com/coldfusion/7/htmldocs/wwhelp/wwhimpl/js/html/wwhelp.htm?href=00001134.htm#1133743 -->
      <!-- CFSTOREDPROC prefix can be renamed with RESULT attribute -->
      <scope type="String" value="CFSTOREDPROC.StatusCode">
        <help><![CDATA[
        Status code for the stored procedure.
        (only when returnCode="true")
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFSTOREDPROC.ExecutionTime">
        <help><![CDATA[
        Execution time for the request in milliseconds.
        (only when returnCode="true")
    ]]></help>
      </scope>
      <!-- CFPOP action="GETALL" and action="GETHEADERONLY" QUERY -->
      <!-- REFERENCE: http://livedocs.macromedia.com/coldfusion/7/htmldocs/wwhelp/wwhimpl/js/html/wwhelp.htm?href=00001134.htm#1133743 -->
      <!-- CFPOP prefix is set by NAME attribute -->
      <scope type="String" value="CFPOP.Attachments">
        <help><![CDATA[
        Contains a tab-separated list of all original attachment
        names.
        (only when action="getall")
    ]]></help>
      </scope>
      <scope type="String" value="CFPOP.AttachmentFiles">
        <help><![CDATA[
        Contains a tab-separated list of the actual temporary
        filenames written to the server.
        (only when action="getall")
    ]]></help>
      </scope>
      <scope type="String" value="CFPOP.Body">
        <help><![CDATA[
        Body of message.
        (only when action="getall")
    ]]></help>
      </scope>
      <scope type="String" value="CFPOP.TextBody">
        <help><![CDATA[
        Text Body of message.
        (only when action="getall")
    ]]></help>
      </scope>
      <scope type="String" value="CFPOP.HtmlBody">
        <help><![CDATA[
        HTML Body of message.
        (only when action="getall")
    ]]></help>
      </scope>
      <scope type="String" value="CFPOP.CC">
        <help><![CDATA[
        CC value from message header.
    ]]></help>
      </scope>
      <scope type="DateTime" value="CFPOP.Date">
        <help><![CDATA[
        Date sent value from message header.
    ]]></help>
      </scope>
      <scope type="String" value="CFPOP.From">
        <help><![CDATA[
        From value from message header.
    ]]></help>
      </scope>
      <scope type="String" value="CFPOP.Header">
        <help><![CDATA[
        Entire message header.
        (only when action="getall")
    ]]></help>
      </scope>
      <scope type="String" value="CFPOP.MessageNumber">
        <help><![CDATA[
        Sequential message number of message on POP server.
    ]]></help>
      </scope>
      <scope type="String" value="CFPOP.MessageID">
        <help><![CDATA[
        The mail header Message-ID field.
    ]]></help>
      </scope>
      <scope type="String" value="CFPOP.ReplyTo">
        <help><![CDATA[
        ReplyTo value from message header.
    ]]></help>
      </scope>
      <scope type="String" value="CFPOP.Subject">
        <help><![CDATA[
        Subject value from message header.
    ]]></help>
      </scope>
      <scope type="String" value="CFPOP.To">
        <help><![CDATA[
        To value from message header.
    ]]></help>
      </scope>
      <scope type="String" value="CFPOP.ColumnList">
        <help><![CDATA[
        Column list, comma seperated.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFPOP.CurrentRow">
        <help><![CDATA[
        The current row of the query in a loop.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFPOP.RecordCount">
        <help><![CDATA[
        Total number of records in the query.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFPOP.UID">
        <help><![CDATA[
        Unique identifier for the e-mail message file.
        (mail header X-UID field)
    ]]></help>
      </scope>
      <scope type="Struct" value="CFPOP.CIDS">
        <help><![CDATA[
        Structure that contains key-value pairs. The keys are the
        names of image files that are embedded in the e-mail
        message; the values are their cids. You can use the cid
        to find the correct place of an image in an HTML e-mail
        message that the cfpop tag retrieves. If the e-mail message
        contains more than one embedded image, only the last
        embedded image is available.
    ]]></help>
      </scope>
      <!-- CFQUERY Query -->
      <!-- REFERENCE: http://livedocs.macromedia.com/coldfusion/7/htmldocs/wwhelp/wwhimpl/js/html/wwhelp.htm?href=00001134.htm#1133743 -->
      <!-- CFQUERY prefix is set by RESULT attribute -->
      <scope type="String" value="CFQUERY.SQL">
        <help><![CDATA[
        The SQL statement that was executed.
    ]]></help>
      </scope>
      <scope type="boolean" value="CFQUERY.Cached">
        <help><![CDATA[
        If the query was cached.
    ]]></help>
      </scope>
      <scope type="Array" value="CFQUERY.SqlParameters">
        <help><![CDATA[
        An ordered Array of cfqueryparam values.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFQUERY.RecordCount">
        <help><![CDATA[
        Total number of records in the query.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFQUERY.ColumnList">
        <help><![CDATA[
        Column list, comma seperated.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFQUERY.ExecutionTime">
        <help><![CDATA[
        Execution time for the SQL request.
    ]]></help>
      </scope>
      <!-- Any Query -->
      <scope type="String" value="QUERY.CurrentRow">
        <help><![CDATA[
        The current row of the query in a loop.
    ]]></help>
      </scope>
      <scope type="Numeric" value="QUERY.RecordCount">
        <help><![CDATA[
        Total number of records in the query.
    ]]></help>
      </scope>
      <scope type="Numeric" value="QUERY.ColumnList">
        <help><![CDATA[
        Column list, comma seperated.
    ]]></help>
      </scope>
      <!-- cfhttp variables -->
      <!-- CFHTTP prefix can be renamed with RESULT attribute -->
      <!-- REFERENCE: http://livedocs.macromedia.com/coldfusion/7/htmldocs/wwhelp/wwhimpl/common/html/wwhelp.htm?context=ColdFusion_Documentation&file=00000272.htm -->
      <scope type="String" value="CFHTTP.CharSet">
        <help><![CDATA[
        Response character character set (character encoding)
        specified by the response Content-Type header.
    ]]></help>
      </scope>
      <scope type="String" value="CFHTTP.ErrorDetail">
        <help><![CDATA[
        If the connection to the HTTP server fails, contains details
        about the failure. For instance: "Unknown host: my.co.com";
        otherwise, the empty string. Macromedia recommends that you
        check this variable for an error condition before checking
        other variables.
    ]]></help>
      </scope>
      <scope type="String" value="CFHTTP.FileContent">
        <help><![CDATA[
        Response body; for example: the contents of a html page
        retrieved by a GET operation. Empty if you save the response
        in a file.
    ]]></help>
      </scope>
      <scope type="String" value="CFHTTP.Header">
        <help><![CDATA[
        Raw response header containing all header information in a
        single string. Contains the same information as the
        #cfhttp.responseHeader# variable.
    ]]></help>
      </scope>
      <scope type="String" value="CFHTTP.MimeType">
        <help><![CDATA[
        MIME type specified by the response Content-Type header,
        Example: text/html
    ]]></help>
      </scope>
      <scope type="String" value="CFHTTP.ResponseHeader">
        <help><![CDATA[
        The response headers formatted into a structure. Each element
        key is the header name, such as Content-Type or Status_Code.
        If there is more than one instance of a header type, the type
        values are put in an array. One common technique is to
        dynamically access the cfhttp.responseHeader structure as a
        dynamic array, example: #cfhttp.resonseHeader[fieldVariable]#
    ]]></help>
      </scope>
      <scope type="String" value="CFHTTP.StatusCode">
        <help><![CDATA[
        The HTTP status_code header value followed by the HTTP
        Explanation header value.
        Example: 200 OK
    ]]></help>
      </scope>
      <scope type="boolean" value="CFHTTP.Text">
        <help><![CDATA[
        Boolean; True if the response body content type is text.
        ColdFusion recognizes the response body as text if: The
        header does not specify a content type, or it starts with
        "text" or "message" or the full content
        type="application/octet-stream".
    ]]></help>
      </scope>
      <!-- CGI scope variables -->
      <!-- REFERENCE: Apache: http://www.zytrax.com/tech/web/env_var.htm -->
      <!-- REFERENCE: IIS: http://msdn.microsoft.com/library/default.asp?url=/library/en-us/iissdk/html/21b3be8f-d4ed-4059-8e21-6cba2c253006.asp -->
      <!-- REFERENCE: Zeus: http://www.zeus.com/extra/docsystem/docroot/apps/web/docs/modules/cgi/reference.html -->
      <scope type="String" value="CGI.ALL_HTTP">
        <help><![CDATA[
        All HTTP headers that were not already parsed into one of the
        listed variables. These variables are of the form HTTP_header
        field name with each variable separated by a semi-colon
    ]]></help>
      </scope>
      <scope type="String" value="CGI.ALL_RAW">
        <help><![CDATA[
        (IIS) Retrieves all headers in raw form. The difference
        between CGI.ALL_RAW and CGI.ALL_HTTP is that CGI.ALL_HTTP
        places an HTTP_ prefix before the header name and the header
        name is always capitalized. In ALL_RAW the header name and
        values appear as they are sent by the client.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.APP_POOL_ID">
        <help><![CDATA[
        (IIS) Returns the name of the application pool that is
        running in the IIS worker process that is handling the
        request. There is also an CGI.APP_POOL_ID environment
        variable that is available to applications that are running
        in the IIS worker process. (Note: IIS 5.1 and earlier: This server
        variable is not available.)
    ]]></help>
      </scope>
      <scope type="String" value="CGI.APPL_MD_PATH">
        <help><![CDATA[
        (IIS) Retrieves the metabase path of the application.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.APPL_PHYSICAL_PATH">
        <help><![CDATA[
        (IIS) Retrieves the physical path corresponding to the
        metabase path in CGI.APPL_MD_PATH.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.AUTH_PASSWORD">
        <help><![CDATA[
        (IIS) The value entered in the client's authentication
        dialog. This variable is available only if Basic
        authentication is used.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.AUTH_TYPE">
        <help><![CDATA[
        If the server supports user authentication, and the script
        is protected, this is the protocol-specific authentication
        method used to validate the user.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.AUTH_USER">
        <help><![CDATA[
        (IIS) The name of the user as it is derived from the
        authorization header sent by the client, before the user
        name is mapped to a Windows account. This variable is no
        different from CGI.REMOTE_USER. If you have an authentication
        filter installed on your Web server that maps incoming users
        to accounts, use CGI.LOGON_USER to view the mapped user name.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.CACHE_URL">
        <help><![CDATA[
        (IIS) Returns the full URL
        Example: http://www.macromedia.com:80/index.cfm?query=string
        (Note: IIS 5.1 and earlier: This server variable is not
        available.)
    ]]></help>
      </scope>
      <scope type="String" value="CGI.CERT_COOKIE">
        <help><![CDATA[
        (IIS) Unique ID for the client certificate, returned as a
        string. This can be used as a signature for the whole client
        certificate.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.CERT_FLAGS">
        <help><![CDATA[
        (IIS) bit0 is set to 1 if the client certificate is present.
        bit1 is set to 1 if the certification authority of the client
        certificate is invalid (that is, it is not in the list of
        recognized certification authorities on the server). If bit
        1 of CGI.CERT_FLAGS is set to 1, indicating that the
        certificate is invalid, IIS version 4.0 and later will reject
        the certificate.
        (Note: Earlier versions of IIS will not reject the
        certificate.)
    ]]></help>
      </scope>
      <scope type="String" value="CGI.CERT_ISSUER">
        <help><![CDATA[
        Issuer field of the client certificate
        (O=MS, OU=IAS, CN=user name, C=USA).
    ]]></help>
      </scope>
      <scope type="String" value="CGI.CERT_KEYSIZE">
        <help><![CDATA[
        (IIS) Number of bits in the Secure Sockets Layer (SSL)
        connection key size.
        Example: 128
    ]]></help>
      </scope>
      <scope type="String" value="CGI.CERT_SECRETKEYSIZE">
        <help><![CDATA[
        (IIS) Number of bits in server certificate private key.
        Example: 1024
    ]]></help>
      </scope>
      <scope type="String" value="CGI.CERT_SERIALNUMBER">
        <help><![CDATA[
        (IIS) Serial number field of the client certificate.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.CERT_SERVER_ISSUER">
        <help><![CDATA[
        (IIS) Issuer field of the server certificate.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.CERT_SERVER_SUBJECT">
        <help><![CDATA[
        (IIS) Subject field of the server certificate.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.CERT_SUBJECT">
        <help><![CDATA[
        Subject field of the client certificate.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.CF_TEMPLATE_PATH">
        <help><![CDATA[
        Show the entire file path to the coldfusion template, similar
        to CGI.PATH_TRANSLATED.
        Example: c:\inetpub\wwwroot\somesite\somepage.cfm
    ]]></help>
      </scope>
      <scope type="String" value="CGI.CLIENT_CERT_ENCODED">
        <help/>
      </scope>
      <scope type="String" value="CGI.CONTENT_LENGTH">
        <help><![CDATA[
        The length of the content as given by the client.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.CONTENT_TYPE">
        <help><![CDATA[
        For queries that have attached information, such as HTTP POST
        and PUT, this is the content type of the data.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.DATE_GMT">
        <help><![CDATA[
        (Apache SSI) The current date and time in Greenwich Mean Time
        (now Unviversal Co-ordinated Time (UCT) in the default or
        #config defined format). Thursday, 03-May-2001 21:18:54 GMT
    ]]></help>
      </scope>
      <scope type="String" value="CGI.DATE_LOCAL">
        <help><![CDATA[
        (Apache SSI) The current date and time in the local (server)
        timezone (in the default or #config defined format),
        Example: Thursday, 03-May-2001 17:18:54 EDT
    ]]></help>
      </scope>
      <scope type="String" value="CGI.DOCUMENT_ARGS">
        <help><![CDATA[
        (Zeus SSI) This will be set to the CGI.QUERY_STRING of the
        master document. The value of CGI.QUERY_STRING for an SSI
        sub-request will contain the query string in the sub-request
        URL, if present, else the master document's CGI.QUERY_STRING.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.DOCUMENT_NAME">
        <help><![CDATA[
        (Apache SSI) The file name (excludes directories) of the
        document requested by the user.
        Example: ssi.htm
    ]]></help>
      </scope>
      <scope type="String" value="CGI.DOCUMENT_PATH_INFO">
        <help><![CDATA[
        (Apache SSI/Zeus SSI) This will be set to the CGI.PATH_INFO of
        the master document.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.DOCUMENT_ROOT">
        <help><![CDATA[
        (Apache SSI) The root directory of this site defined by the
        'DocumentRoot' directive in the General Section or a
        <virtualhost> section.
        Example: /var/www/zytrax
    ]]></help>
      </scope>
      <scope type="String" value="CGI.DOCUMENT_URI">
        <help><![CDATA[
        (Apache SSI/Zeus SSI) The URL path of the document requested
        by the user.
        Example: /tech/web/ssi.htm
    ]]></help>
      </scope>
      <scope type="String" value="CGI.GATEWAY_INTERFACE">
        <help><![CDATA[
        The revision of the CGI specification to which this server
        complies. Format: CGI/revision.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.HTTP_ACCEPT">
        <help><![CDATA[
        List of Content-types the browser can accept (defined by the
        HTTP Accept header).
    ]]></help>
      </scope>
      <scope type="String" value="CGI.HTTP_ACCEPT_ENCODING">
        <help><![CDATA[
        (IIS) Returns a list of accepted encoding types.
        Example: gzip, deflate
    ]]></help>
      </scope>
      <scope type="String" value="CGI.HTTP_ACCEPT_LANGUAGE">
        <help><![CDATA[
        (IIS) Returns a string describing the language to use for
        displaying content.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.HTTP_CONNECTION">
        <help><![CDATA[
        (IIS) Returns a string describing the connection type.
        Example: Keep-Alive
    ]]></help>
      </scope>
      <scope type="String" value="CGI.HTTP_COOKIE">
        <help><![CDATA[
        (IIS) Returns the cookie string that was included with the
        request.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.HTTP_HOST">
        <help><![CDATA[
        (IIS) Returns the name of the Web server. This may or may
        not be the same as CGI.SERVER_NAME depending on type of name
        resolution you are using on your Web server (IP address,
        host header).
    ]]></help>
      </scope>
      <scope type="String" value="CGI.HTTP_IF_MODIFIED_SINCE">
        <help/>
      </scope>
      <scope type="String" value="CGI.HTTP_METHOD">
        <help><![CDATA[
        (IIS) The method used to make the request
        (Note: same as CGI.REQUEST_METHOD).
    ]]></help>
      </scope>
      <scope type="String" value="CGI.HTTP_REFERER">
        <help><![CDATA[
        The referring document. The document that linked to or
        submitted form data.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.HTTP_URL">
        <help><![CDATA[
        (IIS) Returns the raw, encoded URL.
        Example: /vdir/default.asp?querystring
    ]]></help>
      </scope>
      <scope type="String" value="CGI.HTTP_USER_AGENT">
        <help><![CDATA[
        The browser the client is currently using to send the
        request. Format: software/version library/version.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.HTTP_VERSION">
        <help><![CDATA[
        (IIS) The name and version of the request protocol (the raw
        form of CGI.SERVER_PROTOCOL).
    ]]></help>
      </scope>
      <scope type="String" value="CGI.HTTPS">
        <help><![CDATA[
        (IIS/Zeus) Returns ON if the request came in through a secure
        channel; or it returns OFF, if the request is for an
        insecure channel.
        Example: SSL
    ]]></help>
      </scope>
      <scope type="String" value="CGI.HTTPS_KEYSIZE">
        <help><![CDATA[
        (IIS/Zeus) Number of bits in the SSL connection key size.
        Example: 128
    ]]></help>
      </scope>
      <scope type="String" value="CGI.HTTPS_SECRETKEYSIZE">
        <help><![CDATA[
        (IIS/Zeus) Number of bits in the server certificate private
        key.
        Example: 1024
    ]]></help>
      </scope>
      <scope type="String" value="CGI.HTTPS_SERVER_ISSUER">
        <help><![CDATA[
        (IIS) Issuer field of the server certificate.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.HTTPS_SERVER_SUBJECT">
        <help><![CDATA[
        (IIS) Subject field of the server certificate.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.HTTPS_SESSIONID">
        <help><![CDATA[
        (Zeus SSI) The value of the session id used by the SSL
        session. This value is unique for each distinct SSL session
    ]]></help>
      </scope>
      <scope type="String" value="CGI.INSTANCE_ID">
        <help><![CDATA[
        (IIS) The ID for the IIS instance in textual format. If the
        instance ID is 1, it appears as a string. You can use this
        variable to retrieve the ID of the Web server instance (in
        the metabase) to which the request belongs.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.INSTANCE_META_PATH">
        <help><![CDATA[
        (IIS) The metabase path for the instance of IIS that responds
        to the request.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.LAST_MODIFIED">
        <help><![CDATA[
        (Apache SSI) The last modification date of the document (file)
        requested by the user (in the default or #config defined
        format). This variable related to the file currently being
        accessed i.e. if you put this is an included 'footer' file
        is is the modification date of the footer NOT the base
        document (you need to use a simple 'wheeze' to pass a USER
        variable which contains the calling documents modification
        date (see here).
        Example: Thursday, 03-May-2001 17:18:45 EDT
    ]]></help>
      </scope>
      <scope type="String" value="CGI.LOCAL_ADDR">
        <help><![CDATA[
        (IIS) Returns the server address on which the request came
        in. This is important on computers where there can be
        multiple IP addresses bound to the computer, and you want to
        find out which address the request used.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.LOGON_USER">
        <help><![CDATA[
        (IIS) The Windows account that the user is impersonating
        while connected to your Web server. Use CGI.REMOTE_USER,
        CGI.UNMAPPED_REMOTE_USER, or CGI.AUTH_USER to view the raw
        user name that is contained in the request header. The only
        time CGI.LOGON_USER holds a different value than these other
        variables is if you have an authentication filter installed.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.PATH">
        <help><![CDATA[
        (Apache) The PATH(s) available to the server for this web site
        Example: /sbin:/usr/sbin:/bin:/usr/bin:/usr/X11R6/bin
    ]]></help>
      </scope>
      <scope type="String" value="CGI.PATH_INFO">
        <help><![CDATA[
        The extra path information, as given by the client. In other
        words, scripts can be accessed by their virtual pathname,
        followed by extra information at the end of this path. The
        extra information is sent as CGI.PATH_INFO.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.PATH_TRANSLATED">
        <help><![CDATA[
        The server provides a translated version of CGI.PATH_INFO,
        which takes the path and does any virtual-to-physical mapping
        to it.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.QUERY_STRING">
        <help><![CDATA[
        The query information that follows the ? in the URL that
        referenced this script.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.REMOTE_ADDR">
        <help><![CDATA[
        The IP address of the remote host making the request.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.REMOTE_HOST">
        <help><![CDATA[
        The hostname making the request. If the server does not have
        this information, it sets CGI.REMOTE_ADDR and leaves this
        unset.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.REMOTE_IDENT">
        <help><![CDATA[
        If the HTTP server supports RFC 931 identification, then this
        variable is set to the remote user name retrieved from the
        server. Usage of this variable should be limited to logging
        only.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.REMOTE_PORT">
        <help><![CDATA[
        (IIS) The client port number of the TCP connection.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.REMOTE_USER">
        <help><![CDATA[
        If the server supports user authentication, and the script is
        protected, this is the username they have authenticated as.
        (Also available as CGI.AUTH_USER.)
    ]]></help>
      </scope>
      <scope type="String" value="CGI.REQUEST_BODY">
        <help><![CDATA[
        The entity body (if any) sent with an HTTP request or
        response is in a format and encoding defined by the
        Entity-Header fields. See the HTTP protocol specification
        for details.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.REQUEST_METHOD">
        <help><![CDATA[
        The method with which the request was made. For HTTP, this
        "GET", "HEAD", "POST", etc.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.REQUEST_URI">
        <help><![CDATA[
        (Apache) The URI for this request (relative to
        CGI.DOCUMENT_ROOT)
        Example: /tech/web/ssi.htm
    ]]></help>
      </scope>
      <scope type="String" value="CGI.SCRIPT_FILENAME">
        <help><![CDATA[
        (Apache) The path to the script being executed (relative to
        CGI.DOCUMENT_ROOT)
        Example: /tech/web/ssi.htm
    ]]></help>
      </scope>
      <scope type="String" value="CGI.SCRIPT_NAME">
        <help><![CDATA[
        A virtual path to the script being executed, used for
        self-referencing URLs.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.SCRIPT_TRANSLATED">
        <help><![CDATA[
        (IIS) The canonical physical path to the script listed in
        CGI.SCRIPT_NAME
        Example: \\?\c:\inetpub\wwwroot\vdir\default.asp
        (Note: IIS 5.1 and earlier: This server variable is not
        available.)
    ]]></help>
      </scope>
      <scope type="String" value="CGI.SERVER_ADMIN">
        <help><![CDATA[
        (Apache) The administrators e-mail address for this
        CGI.SERVER_NAME.
        Example: webmaster@zytrax.com
    ]]></help>
      </scope>
      <scope type="String" value="CGI.SERVER_NAME">
        <help><![CDATA[
        The servers hostname, DNS alias, or IP address as it appears
        in self-referencing URLs.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.SERVER_PORT">
        <help><![CDATA[
        The port number to which the request was sent.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.SERVER_PORT_SECURE">
        <help><![CDATA[
        (IIS) A string that contains either 0 or 1. If the request is
        being handled on the secure port, then this is 1. Otherwise,
        it is 0.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.SERVER_PROTOCOL">
        <help><![CDATA[
        The name and revision of the information protocol this
        request came in with. Format: protocol/revision.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.SERVER_SIGNATURE">
        <help><![CDATA[
        (Apache) The HTML string that may be embedded in the page to
        identify this host.
        Example: <address>Apache/1.3.14 Server at www.zytrax.com Port
        80</address>
    ]]></help>
      </scope>
      <scope type="String" value="CGI.SERVER_SOFTWARE">
        <help><![CDATA[
        The name and version of the information server software
        answering the request (and running the gateway).
        Format: name/version.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.SSI_EXEC_DISABLED">
        <help><![CDATA[
        (IIS) Returns a 1 if the server-side include directive,
        #exec, is disabled. Otherwise, CGI.SSI_EXE_DISABLED returns a
        0. To enable or disable #exec, use the SSIExecDisablemetabase
        property. (Note: IIS 5.1 and earlier: This server variable is
        not available.)
    ]]></help>
      </scope>
      <scope type="String" value="CGI.UNENCODED_URL">
        <help><![CDATA[
        (IIS) Returns the raw, unencoded URL
        Example: /vdir/default.asp?querystring
        (Note: IIS 4.0 and earlier: This server variable is not
        available)
    ]]></help>
      </scope>
      <scope type="String" value="CGI.UNMAPPED_REMOTE_USER">
        <help><![CDATA[
        (IIS) The name of the user as it is derived from the
        authorization header sent by the client, before the user name
        is mapped to a Windows account (same as CGI.REMOTE_USER). If
        you have an authentication filter installed on your Web server
        that maps incoming users to accounts, use CGI.LOGON_USER to
        view the mapped user name.
    ]]></help>
      </scope>
      <scope type="String" value="CGI.URL">
        <help><![CDATA[
        (IIS) Gives the base portion of the URL, without any
        querystring or extra path information. For the raw URL, use
        CGI.HTTP_URL or CGI.UNENCODED_URL.
        Example: "/vdir/default.asp".
    ]]></help>
      </scope>
      <scope type="String" value="CGI.URL_PATH_INFO">
        <help><![CDATA[
        (IIS) Use CGI.PATH_INFO instead. (Note: This server variable
        is only available on IIS 5.0.)
    ]]></help>
      </scope>
      <scope type="String" value="CGI.USER_NAME">
        <help><![CDATA[
        (Apache SSI) The user name of the web site in which this web
        site runs.
        Example: zytrax
    ]]></help>
      </scope>
      <!-- CFCATCH variables -->
      <scope type="String" value="CFCATCH.Type">
        <help><![CDATA[
        The exception's type, possible values: Application, Database,
        Template, Security, Object, MissingInclude, Expression, Lock,
        SearchEngine or a Custom Type.
    ]]></help>
      </scope>
      <scope type="String" value="CFCATCH.Detail">
        <help><![CDATA[
        A detailed message from the CFML compiler. This message,
        which can contain HTML formatting, can help to determine
        which tag threw the exception.
    ]]></help>
      </scope>
      <scope type="String" value="CFCATCH.ErrorCode">
        <help><![CDATA[
        The cfthrow tag can supply a value for this code through the
        errorCode attribute. For Type="Database", CFCATCH.ErrorCode
        has the same value as CFCATCH.SQLState. Otherwise, the value
        of CFCATCH.ErrorCode is the empty string.
    ]]></help>
      </scope>
      <scope type="String" value="CFCATCH.ExtendedInfo">
        <help><![CDATA[
        Custom error message information. This is returned only to
        CFCATCH tags for which the type attribute is "Application" or
        a custom type. Otherwise, the value of CFCATCH.ExtendedInfo
        is empty.
    ]]></help>
      </scope>
      <scope type="String" value="CFCATCH.Message">
        <help><![CDATA[
        The exception's default diagnostic message, if one was
        provided. If no diagnostic message is available, this is
        empty.
    ]]></help>
      </scope>
      <scope type="Array" value="CFCATCH.TagContext">
        <help><![CDATA[
        Array of tag information structures.
    ]]></help>
      </scope>
      <scope compatibility="obsolete" type="Numeric" value="CFCATCH.TagContext[x].Column">
        <help><![CDATA[
        Obsolete (retained for backwards compatibility). Always 0.
    ]]></help>
      </scope>
      <scope type="String" value="CFCATCH.TagContext[x].ID">
        <help><![CDATA[
        The tag in which the exception occurred. Exceptions in
        CFScript are indicated by two question marks (??). All custom
        tags, including those called directly, are identified as
        cfmodule.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFCATCH.TagContext[x].Line">
        <help><![CDATA[
        The line on the page in which the tag is located.
    ]]></help>
      </scope>
      <scope type="String" value="CFCATCH.TagContext[x].Raw_Trace">
        <help><![CDATA[
        The raw Java stack trace for the error.
    ]]></help>
      </scope>
      <scope type="String" value="CFCATCH.TagContext[x].Template">
        <help><![CDATA[
        The pathname of the application page that contains the tag.
    ]]></help>
      </scope>
      <scope type="String" value="CFCATCH.TagContext[x].Type">
        <help><![CDATA[
        The type of page; it is always a ColdFusion page.
    ]]></help>
      </scope>
      <!-- expression exceptions -->
      <scope type="String" value="CFCATCH.ErrNumber">
        <help><![CDATA[
        An internal expression error number.
        Available for expression exceptions.
    ]]></help>
      </scope>
      <!-- locking exceptions -->
      <scope type="String" value="CFCATCH.LockName">
        <help><![CDATA[
        The name of the affected lock. This is set to "anonymous" if
        the lock name is unknown.
        Available for locking exceptions.
    ]]></help>
      </scope>
      <scope type="String" value="CFCATCH.LockOperation">
        <help><![CDATA[
        The operation that failed. This is set to "unknown" if the
        failed operation is unknown.
        Available for locking exceptions.
    ]]></help>
      </scope>
      <!-- Missing include exceptions -->
      <scope type="String" value="CFCATCH.MissingFileName">
        <help><![CDATA[
        The name of the missing file.
        Available for missingInclude exceptions.
    ]]></help>
      </scope>
      <!-- Database exceptions -->
      <scope type="String" value="CFCATCH.NativeErrorCode">
        <help><![CDATA[
        The native error code associated with this exception.
        Database drivers typically provide error codes to assist in
        the diagnosis of failing database operations. The values
        assumed by CFCATCH.NativeErrorCode are driver-dependent. If
        no error code is provided, the value of
        CFCATCH.nativeErrorCode is -1. The value is 0 for queries of
        queries.
        Available for database exceptions.
    ]]></help>
      </scope>
      <scope type="String" value="CFCATCH.SQLState">
        <help><![CDATA[
        The SQLState code associated with this exception. Database
        drivers typically provide error codes to assist in the
        diagnosis of failing database operations. SQLState codes are
        more consistent across database systems than native error
        codes. If the driver does not provide an SQLState value, the
        value of CFCATCH.SQLState is -1.
        Available for database exceptions.
    ]]></help>
      </scope>
      <scope type="String" value="CFCATCH.SQL">
        <help><![CDATA[
        The SQL statement sent to the data source.
        Available for database exceptions.
    ]]></help>
      </scope>
      <scope type="String" value="CFCATCH.QueryError">
        <help><![CDATA[
        The error message as reported by the database driver.
        Available for database exceptions.
    ]]></help>
      </scope>
      <scope type="String" value="CFCATCH.Where">
        <help><![CDATA[
        If the query uses the cfqueryparam tag, query parameter
        name-value pairs.
        Available for database exceptions.
    ]]></help>
      </scope>
      <!-- CFERROR variables -->
      <!-- REFERENCE: http://livedocs.macromedia.com/coldfusion/7/htmldocs/wwhelp/wwhimpl/common/html/wwhelp.htm?context=ColdFusion_Documentation&file=00001138.htm -->
      <!-- Type: Validation -->
      <scope type="String" value="CFERROR.InvalidFields">
        <help><![CDATA[
        Unordered list of validation errors that occurred. This
        includes any text that you specify in the value attribute
        or a hidden tag used to validate form input.
        Available for Validation type errors.
    ]]></help>
      </scope>
      <scope type="String" value="CFERROR.ValidationHeader">
        <help><![CDATA[
        Text for the header of the default validation message.
        Available for Validation type errors.
    ]]></help>
      </scope>
      <scope type="String" value="CFERROR.ValidationFooter">
        <help><![CDATA[
        Text for the footer of the default validation message.
        Available for Validation type errors.
    ]]></help>
      </scope>
      <!-- Exception and Request -->
      <scope type="String" value="CFERROR.Browser">
        <help><![CDATA[
        Browser that was running when the error occurred.
        Available for Exception and Request type errors.
    ]]></help>
      </scope>
      <scope type="DateTime" value="CFERROR.DateTime">
        <help><![CDATA[
        Date and time when the error occurred.
        Available for Exception and Request type errors.
    ]]></help>
      </scope>
      <scope type="String" value="CFERROR.Diagnostics">
        <help><![CDATA[
        Detailed error diagnostics.
        Available for Exception and Request type errors.
    ]]></help>
      </scope>
      <scope type="String" value="CFERROR.GeneratedContent">
        <help><![CDATA[
        Any content that ColdFusion generated in response to the
        request prior to the error.
        Available for Exception and Request type errors.
    ]]></help>
      </scope>
      <scope type="String" value="CFERROR.HTTPReferer">
        <help><![CDATA[
        Page containing the HTML link to the page on which the error
        occurred. This value is an empty string if the user specified
        the page directly in the browser. (string).
        Available for Exception and Request type errors
    ]]></help>
      </scope>
      <scope type="String" value="CFERROR.MailTo">
        <help><![CDATA[
        E-mail address of the administrator who should be notified.
        This value is set in the mailTo attribute of the cferror
        tag.
        Available for Exception and Request type errors.
    ]]></help>
      </scope>
      <scope type="String" value="CFERROR.QueryString">
        <help><![CDATA[
        URL query string of the client's request, if any.
        Available for Exception and Request type errors.
    ]]></help>
      </scope>
      <scope type="String" value="CFERROR.RemoteAddress">
        <help><![CDATA[
        IP address of the remote client.
        Available for Exception and Request type errors.
    ]]></help>
      </scope>
      <scope type="String" value="CFERROR.Template">
        <help><![CDATA[
        Page being executed when the error occurred.
        Available for Exception and Request type errors.
    ]]></help>
      </scope>
      <!-- Exception Only -->
      <scope type="String" value="CFERROR.Message">
        <help><![CDATA[
        Error message associated with the exception.
        Available for Exception type errors.
    ]]></help>
      </scope>
      <scope type="java object" value="CFERROR.RootCause">
        <help><![CDATA[
        Java servlet exception reported by the JVM as the cause of
        the "root cause" of the exception.
        Available for Exception type errors.
    ]]></help>
      </scope>
      <scope type="String" value="CFERROR.Type">
        <help><![CDATA[
        Exception type, possible values: Application, Database,
        Template, Security, Object, MissingInclude, Expression, Lock,
        SearchEngine or a Custom Type.
    ]]></help>
      </scope>
      <scope type="Array" value="CFERROR.TagContext">
        <help><![CDATA[
        Array of structures containing information for each tag in
        the tag stack The tag stack consists of each tag that is
        currently open.
        Available for Exception type errors.
    ]]></help>
      </scope>
      <scope compatibility="obsolete" type="Numeric" value="CFERROR.TagContext[x].Column">
        <help><![CDATA[
        Obsolete (retained for backwards compatibility). Always 0.
    ]]></help>
      </scope>
      <scope type="String" value="CFERROR.TagContext[x].ID">
        <help><![CDATA[
        The tag in which the exception occurred. Exceptions in CFScript
        are indicated by two question marks (??). All custom tags,
        including those called directly, are identified as cfmodule.
    ]]></help>
      </scope>
      <scope type="Numeric" value="CFERROR.TagContext[x].Line">
        <help><![CDATA[
        The line on the page in which the tag is located. (int)
    ]]></help>
      </scope>
      <scope type="String" value="CFERROR.TagContext[x].Raw_Trace">
        <help><![CDATA[
        The raw Java stack trace for the error.
    ]]></help>
      </scope>
      <scope type="String" value="CFERROR.TagContext[x].Template">
        <help><![CDATA[
        The pathname of the application page that contains the tag.
    ]]></help>
      </scope>
      <scope type="String" value="CFERROR.TagContext[x].Type">
        <help><![CDATA[
        The type of page; it is always a ColdFusion page.
    ]]></help>
      </scope>
      <!-- ERROR variables -->
      <!-- REFERENCE: http://livedocs.macromedia.com/coldfusion/7/htmldocs/wwhelp/wwhimpl/common/html/wwhelp.htm?context=ColdFusion_Documentation&file=00001138.htm -->
      <!-- Type: Validation -->
      <scope type="String" value="ERROR.InvalidFields">
        <help><![CDATA[
        Unordered list of validation errors that occurred. This
        includes any text that you specify in the value attribute
        or a hidden tag used to validate form input.
        Available for Validation type errors.
    ]]></help>
      </scope>
      <scope type="String" value="ERROR.ValidationHeader">
        <help><![CDATA[
        Text for the header of the default validation message.
        Available for Validation type errors.
    ]]></help>
      </scope>
      <scope type="String" value="ERROR.ValidationFooter">
        <help><![CDATA[
        Text for the footer of the default validation message.
        Available for Validation type errors.
    ]]></help>
      </scope>
      <!-- Exception and Request -->
      <scope type="String" value="ERROR.Browser">
        <help><![CDATA[
        Browser that was running when the error occurred.
        Available for Exception and Request type errors.
    ]]></help>
      </scope>
      <scope type="DateTime" value="ERROR.DateTime">
        <help><![CDATA[
        Date and time when the error occurred.
        Available for Exception and Request type errors.
    ]]></help>
      </scope>
      <scope type="String" value="ERROR.Diagnostics">
        <help><![CDATA[
        Detailed error diagnostics.
        Available for Exception and Request type errors.
    ]]></help>
      </scope>
      <scope type="String" value="ERROR.GeneratedContent">
        <help><![CDATA[
        Any content that ColdFusion generated in response to the
        request prior to the error.
        Available for Exception and Request type errors.
    ]]></help>
      </scope>
      <scope type="String" value="ERROR.HTTPReferer">
        <help><![CDATA[
        Page containing the HTML link to the page on which the error
        occurred. This value is an empty string if the user specified
        the page directly in the browser. (string).
        Available for Exception and Request type errors
    ]]></help>
      </scope>
      <scope type="String" value="ERROR.MailTo">
        <help><![CDATA[
        E-mail address of the administrator who should be notified.
        This value is set in the mailTo attribute of the ERROR
        tag.
        Available for Exception and Request type errors.
    ]]></help>
      </scope>
      <scope type="String" value="ERROR.QueryString">
        <help><![CDATA[
        URL query string of the client's request, if any.
        Available for Exception and Request type errors.
    ]]></help>
      </scope>
      <scope type="String" value="ERROR.RemoteAddress">
        <help><![CDATA[
        IP address of the remote client.
        Available for Exception and Request type errors.
    ]]></help>
      </scope>
      <scope type="String" value="ERROR.Template">
        <help><![CDATA[
        Page being executed when the error occurred.
        Available for Exception and Request type errors.
    ]]></help>
      </scope>
      <!-- Exception Only -->
      <scope type="String" value="ERROR.Message">
        <help><![CDATA[
        Error message associated with the exception.
        Available for Exception type errors.
    ]]></help>
      </scope>
      <scope type="java object" value="ERROR.RootCause">
        <help><![CDATA[
        Java servlet exception reported by the JVM as the cause of
        the "root cause" of the exception.
        Available for Exception type errors.
    ]]></help>
      </scope>
      <scope type="String" value="ERROR.Type">
        <help><![CDATA[
        Exception type, possible values: Application, Database,
        Template, Security, Object, MissingInclude, Expression, Lock,
        SearchEngine or a Custom Type.
    ]]></help>
      </scope>
      <scope type="Array" value="ERROR.TagContext">
        <help><![CDATA[
        Array of structures containing information for each tag in
        the tag stack The tag stack consists of each tag that is
        currently open.
        Available for Exception type errors.
    ]]></help>
      </scope>
      <scope compatibility="obsolete" type="Numeric" value="ERROR.TagContext[x].Column">
        <help><![CDATA[
        Obsolete (retained for backwards compatibility). Always 0.
    ]]></help>
      </scope>
      <scope type="String" value="ERROR.TagContext[x].ID">
        <help><![CDATA[
        The tag in which the exception occurred. Exceptions in CFScript
        are indicated by two question marks (??). All custom tags,
        including those called directly, are identified as cfmodule.
    ]]></help>
      </scope>
      <scope type="Numeric" value="ERROR.TagContext[x].Line">
        <help><![CDATA[
        The line on the page in which the tag is located. (int)
    ]]></help>
      </scope>
      <scope type="String" value="ERROR.TagContext[x].Raw_Trace">
        <help><![CDATA[
        The raw Java stack trace for the error.
    ]]></help>
      </scope>
      <scope type="String" value="ERROR.TagContext[x].Template">
        <help><![CDATA[
        The pathname of the application page that contains the tag.
    ]]></help>
      </scope>
      <scope type="String" value="ERROR.TagContext[x].Type">
        <help><![CDATA[
        The type of page; it is always a ColdFusion page.
    ]]></help>
      </scope>
    </scopes>
  </scopes>

</dictionary>