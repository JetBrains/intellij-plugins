// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: ColdFusion.flex

package com.intellij.coldFusion.model.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.psi.tree.IElementType;
import com.intellij.coldFusion.model.lexer.CfmlTokenTypes;
import com.intellij.coldFusion.model.psi.CfmlElementType;
import com.intellij.coldFusion.model.parsers.CfmlElementTypes;
import com.intellij.coldFusion.model.CfmlUtil;
import com.intellij.openapi.project.Project;
import com.intellij.util.containers.Stack;


class _CfmlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CLOSER = 2;
  public static final int TAGCLOSE = 4;
  public static final int TAGOPEN = 6;
  public static final int TAGATTR = 8;
  public static final int ASSIGN = 10;
  public static final int COMMENT = 12;
  public static final int COMMENTEND = 14;
  public static final int DOUBLE_QUOTED_STRING = 16;
  public static final int DOUBLEQUOTE = 18;
  public static final int SINGLE_QUOTED_STRING = 20;
  public static final int SINGLEQUOTE = 22;
  public static final int DOUBLEQUOTE_CLOSER = 24;
  public static final int SINGLEQUOTE_CLOSER = 26;
  public static final int ATTRIBUTE_VALUE = 28;
  public static final int TAGINNERBLOCK = 30;
  public static final int SCRIPT_EXPRESSION = 32;
  public static final int X = 34;
  public static final int Y = 36;
  public static final int TEXT = 38;
  public static final int EAT_TEST_AS_SCRIPT = 40;
  public static final int FINAL_STATE = 42;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10,  9,  9, 11, 11, 12, 12, 13, 13,  9,  9, 
    14, 14,  9,  9,  9,  9, 15, 15, 16, 16,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\121\u1100\1\u2700\4\u1100\1\u2800"+
    "\1\u1100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\53\u1100"+
    "\1\u2f00\41\u2000\1\u1100\1\u3000\1\u3100\1\u1100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u1100"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00\1\u5000\1\u5100"+
    "\1\u5200\3\u1100\1\u5300\1\u5400\1\u5500\12\u2000\4\u1100\1\u5600"+
    "\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100\1\u5800\1\u5900\2\u2000"+
    "\1\u5a00\1\u5b00\27\u1100\1\u5c00\4\u1100\1\u5d00\1\u5e00\42\u2000"+
    "\1\u1100\1\u5f00\1\u6000\11\u2000\1\u6100\24\u2000\1\u6200\1\u6300"+
    "\1\u2000\1\u6400\1\u6500\1\u6600\1\u6700\2\u2000\1\u6800\5\u2000"+
    "\1\u6900\1\u6a00\1\u6b00\5\u2000\1\u6c00\1\u6d00\2\u2000\1\u6e00"+
    "\1\u2000\1\u6f00\14\u2000\1\u7000\4\u2000\246\u1100\1\u7100\20\u1100"+
    "\1\u7200\1\u7300\25\u1100\1\u7400\34\u1100\1\u7500\14\u2000\2\u1100"+
    "\1\u7600\5\u2000\23\u1100\1\u7700\u0aec\u2000\1\u7800\1\u7900\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\2\2\1\16\0\4\2\1\1\1\3"+
    "\1\4\1\5\1\6\2\2\1\7\2\2\1\10\2\2"+
    "\1\11\1\2\1\12\12\0\1\13\1\2\1\14\1\15"+
    "\1\16\1\2\1\17\1\20\1\21\1\22\1\6\1\23"+
    "\1\24\2\6\1\25\2\6\1\26\1\27\1\30\1\31"+
    "\1\32\1\6\1\33\1\6\1\34\1\6\1\35\4\6"+
    "\4\2\1\6\1\2\1\20\1\21\1\22\1\6\1\23"+
    "\1\24\2\6\1\25\2\6\1\26\1\27\1\30\1\31"+
    "\1\32\1\6\1\33\1\6\1\34\1\6\1\35\4\6"+
    "\4\2\41\0\2\2\4\6\4\2\1\6\2\2\1\0"+
    "\7\2\1\6\4\2\1\6\5\2\27\6\1\2\37\6"+
    "\1\2\70\6\2\25\u0190\6\4\2\14\6\16\2\5\6"+
    "\7\2\1\6\1\2\1\6\21\2\160\0\5\6\1\2"+
    "\2\6\2\2\4\6\1\2\1\6\6\2\1\6\1\2"+
    "\3\6\1\2\1\6\1\2\24\6\1\2\123\6\1\2"+
    "\213\6\1\2\5\0\2\2\246\6\1\2\46\6\2\2"+
    "\1\6\6\2\51\6\6\2\1\6\1\2\55\0\1\2"+
    "\1\0\1\2\2\0\1\2\2\0\1\2\1\0\10\2"+
    "\33\6\4\2\4\6\15\2\6\0\5\2\1\6\4\2"+
    "\13\0\1\2\1\0\3\2\53\6\37\0\4\2\2\6"+
    "\1\0\143\6\1\2\1\6\10\0\1\2\6\0\2\6"+
    "\2\0\1\2\4\0\2\6\12\0\3\6\2\2\1\6"+
    "\17\2\1\0\1\6\1\0\36\6\33\0\2\2\131\6"+
    "\13\0\1\6\16\2\12\0\41\6\11\0\2\6\4\2"+
    "\1\6\2\2\1\0\30\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\5\0\22\2\31\6\3\0\4\2\13\6"+
    "\65\2\25\6\1\2\22\6\13\2\61\0\66\6\3\0"+
    "\1\6\22\0\1\6\7\0\12\6\2\0\2\2\12\0"+
    "\1\2\20\6\3\0\1\2\10\6\2\2\2\6\2\2"+
    "\26\6\1\2\7\6\1\2\1\6\3\2\4\6\2\2"+
    "\1\0\1\6\7\0\2\2\2\0\2\2\3\0\1\6"+
    "\10\2\1\0\4\2\2\6\1\2\3\6\2\0\2\2"+
    "\12\0\4\6\7\2\2\6\1\2\1\0\2\2\3\0"+
    "\1\2\6\6\4\2\2\6\2\2\26\6\1\2\7\6"+
    "\1\2\2\6\1\2\2\6\1\2\2\6\2\2\1\0"+
    "\1\2\5\0\4\2\2\0\2\2\3\0\3\2\1\0"+
    "\7\2\4\6\1\2\1\6\7\2\14\0\3\6\1\0"+
    "\13\2\3\0\1\2\11\6\1\2\3\6\1\2\26\6"+
    "\1\2\7\6\1\2\2\6\1\2\5\6\2\2\1\0"+
    "\1\6\10\0\1\2\3\0\1\2\3\0\2\2\1\6"+
    "\17\2\2\6\2\0\2\2\12\0\1\2\1\6\7\2"+
    "\1\6\6\0\1\2\3\0\1\2\10\6\2\2\2\6"+
    "\2\2\26\6\1\2\7\6\1\2\2\6\1\2\5\6"+
    "\2\2\1\0\1\6\7\0\2\2\2\0\2\2\3\0"+
    "\7\2\3\0\4\2\2\6\1\2\3\6\2\0\2\2"+
    "\12\0\1\2\1\6\20\2\1\0\1\6\1\2\6\6"+
    "\3\2\3\6\1\2\4\6\3\2\2\6\1\2\1\6"+
    "\1\2\2\6\3\2\2\6\3\2\3\6\3\2\14\6"+
    "\4\2\5\0\3\2\3\0\1\2\4\0\2\2\1\6"+
    "\6\2\1\0\16\2\12\0\11\2\1\6\6\2\5\0"+
    "\10\6\1\2\3\6\1\2\27\6\1\2\20\6\3\2"+
    "\1\6\7\0\1\2\3\0\1\2\4\0\7\2\2\0"+
    "\1\2\3\6\5\2\2\6\2\0\2\2\12\0\20\2"+
    "\1\6\3\0\1\2\10\6\1\2\3\6\1\2\27\6"+
    "\1\2\12\6\1\2\5\6\2\2\1\0\1\6\7\0"+
    "\1\2\3\0\1\2\4\0\7\2\2\0\7\2\1\6"+
    "\1\2\2\6\2\0\2\2\12\0\1\2\2\6\15\2"+
    "\4\0\11\6\1\2\3\6\1\2\51\6\2\0\1\6"+
    "\7\0\1\2\3\0\1\2\4\0\1\6\5\2\3\6"+
    "\1\0\7\2\3\6\2\0\2\2\12\0\12\2\6\6"+
    "\1\2\3\0\1\2\22\6\3\2\30\6\1\2\11\6"+
    "\1\2\1\6\2\2\7\6\3\2\1\0\4\2\6\0"+
    "\1\2\1\0\1\2\10\0\6\2\12\0\2\2\2\0"+
    "\15\2\60\6\1\0\2\6\7\0\4\2\10\6\10\0"+
    "\1\2\12\0\47\2\2\6\1\2\1\6\1\2\5\6"+
    "\1\2\30\6\1\2\1\6\1\2\12\6\1\0\2\6"+
    "\11\0\1\6\2\2\5\6\1\2\1\6\1\2\6\0"+
    "\2\2\12\0\2\2\4\6\40\2\1\6\27\2\2\0"+
    "\6\2\12\0\13\2\1\0\1\2\1\0\1\2\1\0"+
    "\4\2\2\0\10\6\1\2\44\6\4\2\24\0\1\2"+
    "\2\0\5\6\13\0\1\2\44\0\11\2\1\0\71\2"+
    "\53\6\24\0\1\6\12\0\6\2\6\6\4\0\4\6"+
    "\3\0\1\6\3\0\2\6\7\0\3\6\4\0\15\6"+
    "\14\0\1\6\17\0\2\2\46\6\1\2\1\6\5\2"+
    "\1\6\2\2\53\6\1\2\u014d\6\1\2\4\6\2\2"+
    "\7\6\1\2\1\6\1\2\4\6\2\2\51\6\1\2"+
    "\4\6\2\2\41\6\1\2\4\6\2\2\7\6\1\2"+
    "\1\6\1\2\4\6\2\2\17\6\1\2\71\6\1\2"+
    "\4\6\2\2\103\6\2\2\3\0\40\2\20\6\20\2"+
    "\126\6\2\2\6\6\3\2\u016c\6\2\2\21\6\1\2"+
    "\32\6\5\2\113\6\3\2\13\6\7\2\15\6\1\2"+
    "\4\6\3\0\13\2\22\6\3\0\13\2\22\6\2\0"+
    "\14\2\15\6\1\2\3\6\1\2\2\0\14\2\64\6"+
    "\40\0\3\2\1\6\3\2\2\6\1\0\2\2\12\0"+
    "\41\2\4\0\1\2\12\0\6\2\131\6\7\2\5\6"+
    "\2\0\42\6\1\0\1\6\5\2\106\6\12\2\37\6"+
    "\1\2\14\0\4\2\14\0\12\2\12\0\36\6\2\2"+
    "\5\6\13\2\54\6\4\2\32\6\6\2\12\0\46\2"+
    "\27\6\5\0\4\2\65\6\12\0\1\2\35\0\2\2"+
    "\13\0\6\2\12\0\15\2\1\6\10\2\16\0\1\2"+
    "\2\0\77\2\5\0\57\6\21\0\7\6\4\2\12\0"+
    "\21\2\11\0\14\2\3\0\36\6\15\0\2\6\12\0"+
    "\54\6\16\0\14\2\44\6\24\0\10\2\12\0\3\2"+
    "\3\6\12\0\44\6\2\2\11\6\7\2\53\6\2\2"+
    "\3\6\20\2\3\0\1\2\25\0\4\6\1\0\6\6"+
    "\1\0\2\6\3\0\1\6\5\2\300\6\72\0\1\2"+
    "\5\0\26\6\2\2\6\6\2\2\46\6\2\2\6\6"+
    "\2\2\10\6\1\2\1\6\1\2\1\6\1\2\1\6"+
    "\1\2\37\6\2\2\65\6\1\2\7\6\1\2\1\6"+
    "\3\2\3\6\1\2\7\6\3\2\4\6\2\2\6\6"+
    "\4\2\15\6\5\2\3\6\1\2\7\6\16\2\5\0"+
    "\32\2\5\0\20\2\2\6\23\2\1\6\13\2\5\0"+
    "\1\2\12\0\1\2\1\6\15\2\1\6\20\2\15\6"+
    "\3\2\40\6\20\2\15\0\4\2\1\0\3\2\14\0"+
    "\21\2\1\6\4\2\1\6\2\2\12\6\1\2\1\6"+
    "\3\2\5\6\6\2\1\6\1\2\1\6\1\2\1\6"+
    "\1\2\4\6\1\2\13\6\2\2\4\6\5\2\5\6"+
    "\4\2\1\6\21\2\51\6\u0177\2\57\6\1\2\57\6"+
    "\1\2\205\6\6\2\4\6\3\0\2\6\14\2\46\6"+
    "\1\2\1\6\5\2\1\6\2\2\70\6\7\2\1\6"+
    "\17\2\1\0\27\6\11\2\7\6\1\2\7\6\1\2"+
    "\7\6\1\2\7\6\1\2\7\6\1\2\7\6\1\2"+
    "\7\6\1\2\7\6\1\2\40\0\57\2\1\6\325\2"+
    "\3\6\31\2\11\6\6\0\1\2\5\6\2\2\5\6"+
    "\4\2\126\6\2\2\2\0\2\2\3\6\1\2\132\6"+
    "\1\2\4\6\5\2\53\6\1\2\136\6\21\2\40\6"+
    "\60\2\320\6\100\2\375\6\3\2\215\6\103\2\56\6"+
    "\2\2\15\6\3\2\20\6\12\0\2\6\24\2\57\6"+
    "\1\0\4\2\12\0\1\2\37\6\2\0\120\6\2\0"+
    "\45\2\11\6\2\2\147\6\2\2\65\6\2\2\11\6"+
    "\52\2\15\6\1\0\3\6\1\0\4\6\1\0\27\6"+
    "\5\0\4\2\1\0\13\2\1\6\7\2\64\6\14\2"+
    "\2\0\62\6\22\0\12\2\12\0\6\2\22\0\6\6"+
    "\3\2\1\6\1\2\2\6\13\0\34\6\10\0\2\2"+
    "\27\6\15\0\14\2\35\6\3\2\4\0\57\6\16\0"+
    "\16\2\1\6\12\0\6\2\5\6\1\0\12\6\12\0"+
    "\5\6\1\2\51\6\16\0\11\2\3\6\1\0\10\6"+
    "\2\0\2\2\12\0\6\2\27\6\3\2\1\6\3\0"+
    "\62\6\1\0\1\6\3\0\2\6\2\0\5\6\2\0"+
    "\1\6\1\0\1\6\30\2\3\6\2\2\13\6\5\0"+
    "\2\2\3\6\2\0\12\2\6\6\2\2\6\6\2\2"+
    "\6\6\11\2\7\6\1\2\7\6\1\2\53\6\1\2"+
    "\16\6\6\2\163\6\10\0\1\2\2\0\2\2\12\0"+
    "\6\2\244\6\14\2\27\6\4\2\61\6\4\2\156\6"+
    "\2\2\152\6\46\2\7\6\14\2\5\6\5\2\1\6"+
    "\1\0\12\6\1\2\15\6\1\2\5\6\1\2\1\6"+
    "\1\2\2\6\1\2\2\6\1\2\154\6\41\2\153\6"+
    "\22\2\100\6\2\2\66\6\50\2\15\6\3\2\20\0"+
    "\20\2\20\0\3\2\2\6\30\2\3\6\31\2\1\6"+
    "\6\2\5\6\1\2\207\6\2\2\1\0\4\2\1\6"+
    "\13\2\12\0\7\2\32\6\4\2\1\6\1\2\32\6"+
    "\13\2\131\6\3\2\6\6\2\2\6\6\2\2\6\6"+
    "\2\2\3\6\3\2\2\6\3\2\2\6\22\2\3\0"+
    "\4\2\14\6\1\2\32\6\1\2\23\6\1\2\2\6"+
    "\1\2\17\6\2\2\16\6\42\2\173\6\105\2\65\6"+
    "\210\2\1\0\202\2\35\6\3\2\61\6\17\2\1\0"+
    "\37\2\40\6\15\2\36\6\5\2\46\6\5\0\5\2"+
    "\36\6\2\2\44\6\4\2\10\6\1\2\5\6\52\2"+
    "\236\6\2\2\12\0\6\2\44\6\4\2\44\6\4\2"+
    "\50\6\10\2\64\6\234\2\67\6\11\2\26\6\12\2"+
    "\10\6\230\2\6\6\2\2\1\6\1\2\54\6\1\2"+
    "\2\6\3\2\1\6\2\2\27\6\12\2\27\6\11\2"+
    "\37\6\101\2\23\6\1\2\2\6\12\2\26\6\12\2"+
    "\32\6\106\2\70\6\6\2\2\6\100\2\1\6\3\0"+
    "\1\2\2\0\5\2\4\0\4\6\1\2\3\6\1\2"+
    "\35\6\2\2\3\0\4\2\1\0\40\2\35\6\3\2"+
    "\35\6\43\2\10\6\1\2\34\6\2\0\31\2\66\6"+
    "\12\2\26\6\12\2\23\6\15\2\22\6\156\2\111\6"+
    "\67\2\63\6\15\2\63\6\15\2\44\6\4\0\10\2"+
    "\12\0\u0146\2\52\6\1\2\2\0\3\2\2\6\116\2"+
    "\35\6\12\2\1\6\10\2\26\6\13\0\137\2\25\6"+
    "\33\2\27\6\11\2\3\0\65\6\17\0\37\2\12\0"+
    "\17\2\4\0\55\6\13\0\2\2\1\0\17\2\1\0"+
    "\2\2\31\6\7\2\12\0\6\2\3\0\44\6\16\0"+
    "\1\2\12\0\4\2\1\6\2\0\1\6\10\2\43\6"+
    "\1\0\2\2\1\6\11\2\3\0\60\6\16\0\4\6"+
    "\4\2\4\0\1\2\14\0\1\6\1\2\1\6\43\2"+
    "\22\6\1\2\31\6\14\0\6\2\1\0\101\2\7\6"+
    "\1\2\1\6\1\2\4\6\1\2\17\6\1\2\12\6"+
    "\7\2\57\6\14\0\5\2\12\0\6\2\4\0\1\2"+
    "\10\6\2\2\2\6\2\2\26\6\1\2\7\6\1\2"+
    "\2\6\1\2\5\6\1\2\2\0\1\6\7\0\2\2"+
    "\2\0\2\2\3\0\2\2\1\6\6\2\1\0\5\2"+
    "\5\6\2\0\2\2\7\0\3\2\5\0\213\2\65\6"+
    "\22\0\4\6\5\2\12\0\4\2\1\0\3\6\36\2"+
    "\60\6\24\0\2\6\1\2\1\6\10\2\12\0\246\2"+
    "\57\6\7\0\2\2\11\0\27\2\4\6\2\0\42\2"+
    "\60\6\21\0\3\2\1\6\13\2\12\0\46\2\53\6"+
    "\15\0\1\6\7\2\12\0\66\2\33\6\2\2\17\0"+
    "\4\2\12\0\306\2\54\6\17\0\145\2\100\6\12\0"+
    "\25\2\10\6\2\2\1\6\2\2\10\6\1\2\2\6"+
    "\1\2\30\6\6\0\1\2\2\0\2\2\4\0\1\6"+
    "\1\0\1\6\2\0\14\2\12\0\106\2\10\6\2\2"+
    "\47\6\7\0\2\2\7\0\1\6\1\2\1\6\1\0"+
    "\33\2\1\6\12\0\50\6\7\0\1\6\4\0\10\2"+
    "\1\0\10\2\1\6\13\0\56\6\20\0\3\2\1\6"+
    "\42\2\71\6\7\2\11\6\1\2\45\6\10\0\1\2"+
    "\10\0\1\6\17\2\12\0\30\2\36\6\2\2\26\0"+
    "\1\2\16\0\111\2\7\6\1\2\2\6\1\2\46\6"+
    "\6\0\3\2\1\0\1\2\2\0\1\2\7\0\1\6"+
    "\1\0\10\2\12\0\6\2\6\6\1\2\2\6\1\2"+
    "\40\6\5\0\1\2\2\0\1\2\5\0\1\6\7\2"+
    "\12\0\u0136\2\23\6\4\0\271\2\1\6\54\2\4\6"+
    "\37\2\232\6\146\2\157\6\21\2\304\6\274\2\57\6"+
    "\1\2\11\0\307\2\107\6\271\2\71\6\7\2\37\6"+
    "\1\2\12\0\146\2\36\6\2\2\5\0\13\2\60\6"+
    "\7\0\11\2\4\6\14\2\12\0\11\2\25\6\5\2"+
    "\23\6\260\2\100\6\200\2\113\6\4\2\1\0\1\6"+
    "\67\0\7\2\4\0\15\6\100\2\2\6\1\2\1\6"+
    "\1\0\13\2\2\0\16\2\370\6\10\2\326\6\52\2"+
    "\11\6\367\2\37\6\61\2\3\6\21\2\4\6\10\2"+
    "\u018c\6\4\2\153\6\5\2\15\6\3\2\11\6\7\2"+
    "\12\6\3\2\2\0\1\2\4\0\301\2\5\0\3\2"+
    "\26\0\2\2\7\0\36\2\4\0\224\2\3\0\273\2"+
    "\125\6\1\2\107\6\1\2\2\6\2\2\1\6\2\2"+
    "\2\6\2\2\4\6\1\2\14\6\1\2\1\6\1\2"+
    "\7\6\1\2\101\6\1\2\4\6\2\2\10\6\1\2"+
    "\7\6\1\2\34\6\1\2\4\6\1\2\5\6\1\2"+
    "\1\6\3\2\7\6\1\2\u0154\6\2\2\31\6\1\2"+
    "\31\6\1\2\37\6\1\2\31\6\1\2\37\6\1\2"+
    "\31\6\1\2\37\6\1\2\31\6\1\2\37\6\1\2"+
    "\31\6\1\2\10\6\2\2\151\0\4\2\62\0\10\2"+
    "\1\0\16\2\1\0\26\2\5\0\1\2\17\0\120\2"+
    "\7\0\1\2\21\0\2\2\7\0\1\2\2\0\1\2"+
    "\5\0\325\2\55\6\3\2\7\0\7\6\2\2\12\0"+
    "\4\2\1\6\u0171\2\54\6\16\0\5\2\306\6\13\2"+
    "\7\0\51\2\104\6\7\0\1\6\4\2\12\0\u0156\2"+
    "\1\6\117\2\4\6\1\2\33\6\1\2\2\6\1\2"+
    "\1\6\2\2\1\6\1\2\12\6\1\2\4\6\1\2"+
    "\1\6\1\2\1\6\6\2\1\6\4\2\1\6\1\2"+
    "\1\6\1\2\1\6\1\2\3\6\1\2\2\6\1\2"+
    "\1\6\2\2\1\6\1\2\1\6\1\2\1\6\1\2"+
    "\1\6\1\2\1\6\1\2\2\6\1\2\1\6\2\2"+
    "\4\6\1\2\7\6\1\2\4\6\1\2\4\6\1\2"+
    "\1\6\1\2\12\6\1\2\21\6\5\2\3\6\1\2"+
    "\5\6\1\2\21\6\u0134\2\12\0\6\2\336\6\42\2"+
    "\65\6\13\2\336\6\2\2\u0182\6\16\2\u0131\6\37\2"+
    "\36\6\342\2\113\6\266\2\1\0\36\2\140\0\200\2"+
    "\360\0\20\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\5\2\1\3\6\0\1\2\2\0\1\4\1\5"+
    "\1\1\1\6\1\5\2\7\2\5\1\2\1\10\2\7"+
    "\1\11\2\7\1\12\3\13\1\14\3\3\1\7\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\16\1\22\1\23"+
    "\1\24\1\25\1\26\1\7\1\27\1\30\1\31\1\32"+
    "\1\27\1\33\1\34\1\35\1\36\1\7\1\0\1\5"+
    "\3\0\3\5\1\37\1\40\12\0\2\41\4\0\1\42"+
    "\13\0\1\5\3\0\1\43\3\5\2\0\1\11\2\0"+
    "\1\44\1\0\1\45\2\0\1\46\5\0\1\47\7\0"+
    "\1\5\4\0\1\50\3\5\1\37\1\40\1\0\1\51"+
    "\1\52\1\53\3\0\1\54\5\0\1\55\3\5\1\56"+
    "\1\57\1\0\1\60\1\0\1\61\6\0\3\5\4\0"+
    "\3\5\1\0\1\5\1\0\1\5\4\0\5\5\1\0"+
    "\2\5\1\0\2\5\1\0\2\5\1\0\1\5\1\0"+
    "\2\5\1\0\1\5\2\0\1\5\4\0\4\5\1\0"+
    "\1\5\1\0\1\5\2\0\3\5\6\0\1\5\1\0"+
    "\1\5\2\0\3\5\5\0\1\62\1\0\1\5\1\0"+
    "\3\5\1\0\4\5\5\0\3\5\1\0\2\5\1\0"+
    "\3\5\7\0\1\5\1\0\2\5\1\0\2\5\1\0"+
    "\3\5\11\0\1\5\2\0\4\5\5\0\1\5\2\0"+
    "\3\5\1\0\3\5\15\0\1\5\2\0\3\5\1\0"+
    "\3\5\5\0\4\5\11\0\6\5\15\0\6\5\5\0"+
    "\4\5\7\0\5\5\13\0\5\5\2\0\4\5\6\0"+
    "\5\5\12\0\5\5\1\0\4\5\5\0\4\5\11\0"+
    "\4\5\1\0\3\5\5\0\3\5\11\0\3\5\1\0"+
    "\2\5\4\62\5\0\2\5\3\62\1\0\1\62\7\0"+
    "\2\5\3\62\1\0\1\62\1\0\1\5\1\62\1\0"+
    "\1\62\5\0\1\5\1\62\1\0\1\62\2\0\1\62"+
    "\5\0\1\5\1\62\1\0\1\62\2\0\1\62\1\0"+
    "\4\62\4\0\3\62\1\0\1\62\1\0\1\62\3\0"+
    "\3\62\1\0\1\62\1\0\1\62\2\0\1\62\4\0"+
    "\2\62\2\0\1\62\2\0\1\62\1\0\1\62\2\0"+
    "\1\62\2\0\1\62\1\0\1\62\1\63\1\0\1\62"+
    "\4\0\2\62\1\0\2\62\2\0\2\62\2\0\1\62"+
    "\1\0\1\62\1\0\1\62\1\0\2\62\1\63\4\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[658];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\322"+
    "\0\360\0\u010e\0\u012c\0\u014a\0\u0168\0\u0186\0\u01a4\0\u01c2"+
    "\0\u01e0\0\u01fe\0\u021c\0\u023a\0\u0258\0\u0276\0\u023a\0\u0294"+
    "\0\u02b2\0\u02d0\0\u023a\0\u02ee\0\u030c\0\u032a\0\u0348\0\u0366"+
    "\0\u023a\0\u023a\0\u0348\0\u0384\0\u023a\0\u03a2\0\u03c0\0\u03de"+
    "\0\u03fc\0\u041a\0\u0438\0\u0456\0\u0474\0\u0492\0\u04b0\0\u023a"+
    "\0\u023a\0\u04ce\0\u023a\0\u023a\0\u023a\0\u04ec\0\u050a\0\u023a"+
    "\0\u023a\0\u023a\0\u0528\0\u0546\0\u023a\0\u0564\0\u023a\0\u0582"+
    "\0\u05a0\0\u05be\0\u05dc\0\u05fa\0\u0618\0\u0636\0\u0654\0\u0672"+
    "\0\u0690\0\u06ae\0\u06cc\0\u06ea\0\u0708\0\u0726\0\u0744\0\u0762"+
    "\0\u0780\0\u079e\0\u07bc\0\u0438\0\u0456\0\u0492\0\u04b0\0\u04ec"+
    "\0\u07da\0\u07f8\0\u023a\0\u0816\0\u0834\0\u0852\0\u0870\0\u088e"+
    "\0\u08ac\0\u08ca\0\u08e8\0\u0906\0\u0924\0\u0942\0\u0960\0\u097e"+
    "\0\u099c\0\u09ba\0\u09d8\0\u09f6\0\u0a14\0\u0a32\0\u0a50\0\u0a6e"+
    "\0\u0a8c\0\u0aaa\0\u0ac8\0\u0ae6\0\u0b04\0\u0b22\0\u0b40\0\u0b5e"+
    "\0\u023a\0\u0b7c\0\u0b9a\0\u0bb8\0\u0bd6\0\u0bf4\0\u0c12\0\u0c30"+
    "\0\u0c4e\0\u0c6c\0\u0c8a\0\u0ca8\0\u0cc6\0\u0ce4\0\u0d02\0\u0d20"+
    "\0\u0d3e\0\u0d5c\0\u0d7a\0\u0d98\0\u0db6\0\u0dd4\0\u0df2\0\u0e10"+
    "\0\u0e2e\0\u0e4c\0\u0e6a\0\u0e88\0\u023a\0\u0ea6\0\u0ec4\0\u0ee2"+
    "\0\u0f00\0\u0f1e\0\u0f3c\0\u0f5a\0\u0f78\0\u0f96\0\u0fb4\0\u0fd2"+
    "\0\u0ff0\0\u100e\0\u023a\0\u023a\0\u102c\0\u023a\0\u104a\0\u023a"+
    "\0\u1068\0\u1086\0\u10a4\0\u10c2\0\u0fb4\0\u10e0\0\u10fe\0\u111c"+
    "\0\u113a\0\u1158\0\u1176\0\u1194\0\u11b2\0\u11d0\0\u11ee\0\u120c"+
    "\0\u122a\0\u1248\0\u1266\0\u1284\0\u12a2\0\u12c0\0\u12de\0\u12fc"+
    "\0\u131a\0\u1338\0\u1356\0\u1374\0\u1392\0\u13b0\0\u13ce\0\u13ec"+
    "\0\u140a\0\u1428\0\u1446\0\u1464\0\u1482\0\u14a0\0\u14be\0\u14dc"+
    "\0\u14fa\0\u1518\0\u1536\0\u1554\0\u1572\0\u1590\0\u15ae\0\u15cc"+
    "\0\u15ea\0\u1608\0\u1626\0\u1644\0\u1662\0\u1680\0\u169e\0\u16bc"+
    "\0\u16da\0\u16f8\0\u1716\0\u1734\0\u1752\0\u1770\0\u178e\0\u17ac"+
    "\0\u17ca\0\u17e8\0\u1806\0\u1824\0\u1842\0\u1860\0\u187e\0\u189c"+
    "\0\u18ba\0\u18d8\0\u18f6\0\u1914\0\u1932\0\u1950\0\u196e\0\u198c"+
    "\0\u19aa\0\u19c8\0\u19e6\0\u1a04\0\u1a22\0\u1a40\0\u1a5e\0\u1a7c"+
    "\0\u1a9a\0\u1ab8\0\u1ad6\0\u1af4\0\u1b12\0\u1b30\0\u1b4e\0\u1b6c"+
    "\0\u1b8a\0\u1ba8\0\u1bc6\0\u1be4\0\u1c02\0\u1c20\0\u1c3e\0\u1c5c"+
    "\0\u1c7a\0\u1c98\0\u1cb6\0\u1cd4\0\u1cf2\0\u1d10\0\u1d2e\0\u1d4c"+
    "\0\u1d6a\0\u1d88\0\u1da6\0\u1dc4\0\u1de2\0\u1e00\0\u1e1e\0\u1e3c"+
    "\0\u1e5a\0\u1e78\0\u1e96\0\u1eb4\0\u1ed2\0\u1ef0\0\u1f0e\0\u1f2c"+
    "\0\u1f4a\0\u1f68\0\u1f86\0\u1fa4\0\u1fc2\0\u1fe0\0\u1ffe\0\u201c"+
    "\0\u203a\0\u2058\0\u2076\0\u2094\0\u20b2\0\u20d0\0\u20ee\0\u210c"+
    "\0\u212a\0\u2148\0\u2166\0\u2184\0\u21a2\0\u21c0\0\u21de\0\u21fc"+
    "\0\u221a\0\u2238\0\u2256\0\u2274\0\u2292\0\u22b0\0\u22ce\0\u22ec"+
    "\0\u230a\0\u2328\0\u2346\0\u2364\0\u2382\0\u23a0\0\u23be\0\u23dc"+
    "\0\u23fa\0\u2418\0\u2436\0\u2454\0\u2472\0\u2490\0\u24ae\0\u24cc"+
    "\0\u24ea\0\u2508\0\u2526\0\u2544\0\u2562\0\u2580\0\u259e\0\u25bc"+
    "\0\u25da\0\u25f8\0\u2616\0\u2634\0\u2652\0\u2670\0\u268e\0\u26ac"+
    "\0\u26ca\0\u26e8\0\u2706\0\u2724\0\u2742\0\u2760\0\u277e\0\u279c"+
    "\0\u27ba\0\u27d8\0\u27f6\0\u2814\0\u2832\0\u2850\0\u286e\0\u288c"+
    "\0\u28aa\0\u28c8\0\u28e6\0\u2904\0\u2922\0\u2940\0\u295e\0\u297c"+
    "\0\u299a\0\u29b8\0\u29d6\0\u29f4\0\u2a12\0\u2a30\0\u2a4e\0\u2a6c"+
    "\0\u2a8a\0\u2aa8\0\u2ac6\0\u2ae4\0\u2b02\0\u2b20\0\u2b3e\0\u2b5c"+
    "\0\u2b7a\0\u2b98\0\u2bb6\0\u2bd4\0\u2bf2\0\u2c10\0\u2c2e\0\u2c4c"+
    "\0\u2c6a\0\u2c88\0\u2ca6\0\u2cc4\0\u2ce2\0\u2d00\0\u2d1e\0\u2d3c"+
    "\0\u2d5a\0\u2d78\0\u2d96\0\u2db4\0\u2dd2\0\u2df0\0\u2e0e\0\u2e2c"+
    "\0\u2e4a\0\u2e68\0\u2e86\0\u2ea4\0\u2ec2\0\u2ee0\0\u2efe\0\u2f1c"+
    "\0\u2f3a\0\u2f58\0\u2f76\0\u2f94\0\u2fb2\0\u2fd0\0\u2fee\0\u300c"+
    "\0\u302a\0\u3048\0\u3066\0\u3084\0\u30a2\0\u30c0\0\u30de\0\u30fc"+
    "\0\u311a\0\u3138\0\u3156\0\u3174\0\u3192\0\u31b0\0\u31ce\0\u31ec"+
    "\0\u320a\0\u3228\0\u3246\0\u3264\0\u3282\0\u32a0\0\u32be\0\u32dc"+
    "\0\u32fa\0\u3318\0\u3336\0\u3354\0\u3372\0\u3390\0\u33ae\0\u33cc"+
    "\0\u33ea\0\u3408\0\u3426\0\u3444\0\u3462\0\u3480\0\u349e\0\u34bc"+
    "\0\u34da\0\u34f8\0\u3516\0\u3534\0\u3552\0\u3570\0\u358e\0\u35ac"+
    "\0\u35ca\0\u35e8\0\u3606\0\u3624\0\u3642\0\u3660\0\u367e\0\u369c"+
    "\0\u36ba\0\u36d8\0\u36f6\0\u3714\0\u3732\0\u3750\0\u376e\0\u378c"+
    "\0\u37aa\0\u37c8\0\u37e6\0\u3804\0\u3822\0\u3840\0\u385e\0\u387c"+
    "\0\u389a\0\u38b8\0\u38d6\0\u38f4\0\u3912\0\u3930\0\u394e\0\u396c"+
    "\0\u398a\0\u39a8\0\u39c6\0\u39e4\0\u3a02\0\u3a20\0\u3a3e\0\u3a5c"+
    "\0\u3a7a\0\u3a98\0\u3ab6\0\u3ad4\0\u3af2\0\u3b10\0\u3b2e\0\u3b4c"+
    "\0\u3b6a\0\u3b88\0\u3ba6\0\u3bc4\0\u3be2\0\u3c00\0\u3c1e\0\u3c3c"+
    "\0\u3c5a\0\u3c78\0\u3c96\0\u3cb4\0\u3cd2\0\u3cf0\0\u3d0e\0\u3d2c"+
    "\0\u3d4a\0\u3d68\0\u3d86\0\u3da4\0\u3dc2\0\u3de0\0\u3dfe\0\u3e1c"+
    "\0\u3e3a\0\u3e58\0\u3e76\0\u3e94\0\u3eb2\0\u3ed0\0\u3eee\0\u3f0c"+
    "\0\u3f2a\0\u3f48\0\u3f66\0\u3f84\0\u3fa2\0\u3fc0\0\u3fde\0\u3ffc"+
    "\0\u401a\0\u4038\0\u4056\0\u4074\0\u4092\0\u40b0\0\u40ce\0\u40ec"+
    "\0\u410a\0\u4128\0\u4146\0\u4164\0\u4182\0\u41a0\0\u41be\0\u41dc"+
    "\0\u41fa\0\u4218\0\u4236\0\u4254\0\u4272\0\u4290\0\u42ae\0\u42cc"+
    "\0\u42ea\0\u4308\0\u4326\0\u4344\0\u4362\0\u4380\0\u439e\0\u43bc"+
    "\0\u43da\0\u43f8\0\u4416\0\u4434\0\u4452\0\u4470\0\u448e\0\u44ac"+
    "\0\u44ca\0\u44e8\0\u4506\0\u4524\0\u4542\0\u4560\0\u457e\0\u459c"+
    "\0\u45ba\0\u45d8\0\u45f6\0\u4614\0\u4632\0\u4650\0\u466e\0\u468c"+
    "\0\u46aa\0\u46c8\0\u46e6\0\u4704\0\u4722\0\u4740\0\u475e\0\u477c"+
    "\0\u479a\0\u47b8\0\u47d6\0\u47f4\0\u4812\0\u4830\0\u484e\0\u486c"+
    "\0\u488a\0\u48a8\0\u48c6\0\u48e4\0\u4902\0\u023a\0\u4920\0\u493e"+
    "\0\u495c\0\u497a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[658];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\22\1\23\3\22\1\24\4\22\1\25\1\22\1\26"+
    "\2\22\1\27\2\22\1\30\2\22\1\31\10\22\1\27"+
    "\1\32\14\27\1\33\20\27\1\32\20\27\1\34\14\27"+
    "\1\32\20\27\1\35\14\27\1\32\4\27\1\36\3\27"+
    "\1\37\1\27\1\40\1\27\1\41\1\27\16\36\1\42"+
    "\1\32\10\42\1\43\1\42\1\44\1\45\1\41\17\42"+
    "\11\46\1\47\2\46\1\50\21\46\11\27\1\51\24\27"+
    "\4\52\1\53\1\54\30\52\36\27\5\55\1\56\1\55"+
    "\1\57\26\55\4\27\1\60\40\27\1\61\26\27\1\62"+
    "\1\32\2\62\1\63\1\64\1\62\1\65\2\62\1\66"+
    "\1\62\1\27\1\62\1\27\17\62\4\67\1\70\1\71"+
    "\1\67\1\72\2\67\1\73\1\67\1\74\1\67\1\75"+
    "\17\67\5\76\1\77\6\76\1\100\2\76\1\27\16\76"+
    "\36\21\5\22\1\0\6\22\1\101\22\22\1\23\3\22"+
    "\1\0\4\22\1\25\1\22\1\101\5\22\1\30\2\22"+
    "\1\31\10\22\36\0\5\22\1\0\2\22\1\102\3\22"+
    "\1\101\24\22\1\103\6\22\1\104\7\22\1\105\20\22"+
    "\1\0\6\22\1\101\14\22\1\106\11\22\1\0\6\22"+
    "\1\101\12\22\1\107\1\110\5\22\1\0\1\32\60\0"+
    "\1\111\35\0\1\112\11\0\1\36\5\0\1\36\4\0"+
    "\1\113\4\0\16\36\16\0\1\33\22\0\1\114\6\0"+
    "\1\115\7\0\1\116\16\0\1\114\6\0\1\117\7\0"+
    "\1\120\13\0\11\46\1\0\2\46\1\0\21\46\11\0"+
    "\1\121\27\0\1\122\43\0\1\123\24\0\4\52\1\124"+
    "\1\125\30\52\4\0\1\52\36\0\1\52\30\0\5\55"+
    "\1\126\1\55\1\127\26\55\5\0\1\55\37\0\1\55"+
    "\26\0\1\62\1\0\2\62\2\0\1\62\1\0\2\62"+
    "\1\130\1\62\1\0\1\62\1\0\35\62\1\0\17\62"+
    "\4\67\2\0\1\67\1\0\2\67\1\131\1\67\1\132"+
    "\1\67\1\0\35\67\1\133\22\67\1\134\6\67\1\135"+
    "\7\67\1\136\13\67\5\76\1\0\6\76\1\137\24\76"+
    "\1\140\6\76\1\141\7\76\1\142\13\76\3\22\1\143"+
    "\6\22\1\144\7\22\1\145\13\22\5\102\1\146\2\102"+
    "\1\147\3\102\1\150\21\102\11\22\1\151\46\22\1\152"+
    "\37\22\1\153\16\22\1\0\6\22\1\101\12\22\1\154"+
    "\13\22\1\0\6\22\1\101\15\22\1\155\10\22\1\0"+
    "\6\22\1\101\17\22\1\156\1\22\1\111\5\0\1\111"+
    "\4\0\1\157\4\0\16\111\1\112\5\0\1\112\4\0"+
    "\1\160\4\0\16\112\6\0\1\161\11\0\16\161\11\0"+
    "\1\162\46\0\1\163\37\0\1\164\33\0\1\165\37\0"+
    "\1\166\22\0\1\167\35\0\1\170\42\0\1\171\17\0"+
    "\16\67\1\0\22\67\1\172\6\67\1\173\7\67\1\174"+
    "\24\67\1\175\46\67\1\176\37\67\1\177\11\67\3\76"+
    "\1\200\6\76\1\201\7\76\1\202\24\76\1\203\46\76"+
    "\1\204\37\76\1\164\11\76\11\22\1\205\46\22\1\145"+
    "\37\22\1\0\11\22\10\146\1\206\25\146\5\102\1\146"+
    "\2\102\1\147\1\102\1\207\1\102\1\150\24\102\1\210"+
    "\4\102\1\147\1\102\1\211\7\102\1\212\13\102\11\22"+
    "\1\213\50\22\1\214\11\22\1\153\5\0\1\153\11\0"+
    "\16\153\5\22\1\0\6\22\1\101\15\22\1\215\10\22"+
    "\1\0\6\22\1\101\14\22\1\216\11\22\1\0\6\22"+
    "\1\101\6\22\1\217\12\22\6\0\1\220\11\0\16\220"+
    "\6\0\1\221\11\0\16\221\1\161\5\0\1\161\11\0"+
    "\16\161\11\0\1\222\50\0\1\223\11\0\1\164\5\0"+
    "\1\164\11\0\16\164\24\0\1\224\11\0\1\166\5\0"+
    "\1\166\11\0\16\166\16\0\1\225\30\0\1\226\24\0"+
    "\11\67\1\227\46\67\1\174\37\67\1\0\22\67\1\230"+
    "\50\67\1\231\11\67\1\177\5\0\1\177\11\0\16\177"+
    "\11\76\1\232\46\76\1\202\37\76\1\0\22\76\1\233"+
    "\50\76\1\223\11\76\11\22\1\234\24\22\10\146\1\206"+
    "\1\146\1\235\23\146\1\22\1\207\3\22\1\0\4\22"+
    "\1\25\1\22\1\101\5\22\1\30\2\22\1\31\10\22"+
    "\10\102\1\147\1\236\34\102\1\147\11\102\1\212\23\102"+
    "\1\147\13\102\1\146\11\102\11\22\1\237\24\22\1\214"+
    "\5\0\1\214\11\0\16\214\5\22\1\0\6\22\1\101"+
    "\14\22\1\240\11\22\1\0\6\22\1\101\16\22\1\241"+
    "\7\22\1\0\6\22\1\101\16\22\1\242\2\22\1\220"+
    "\5\0\1\220\11\0\16\220\1\221\5\0\1\221\11\0"+
    "\16\221\11\0\1\243\24\0\1\223\5\0\1\223\11\0"+
    "\16\223\1\224\5\0\1\224\11\0\16\224\11\0\1\244"+
    "\24\0\11\67\1\245\35\67\1\246\24\67\1\231\5\0"+
    "\1\231\11\0\16\231\11\76\1\247\35\76\1\250\24\76"+
    "\11\22\1\0\24\22\1\0\1\235\10\0\1\251\7\0"+
    "\1\252\2\0\1\253\10\0\10\102\1\147\1\254\24\102"+
    "\1\0\1\255\15\0\1\256\16\0\5\22\1\0\6\22"+
    "\1\101\13\22\1\257\12\22\1\0\6\22\1\101\17\22"+
    "\1\260\6\22\1\0\6\22\1\101\7\22\1\261\11\22"+
    "\11\67\1\0\24\67\11\76\1\0\24\76\10\0\1\146"+
    "\56\0\1\262\33\0\1\263\1\264\5\0\10\102\1\147"+
    "\1\146\24\102\22\0\1\265\13\0\5\22\1\0\6\22"+
    "\1\101\6\22\1\266\12\22\4\267\1\270\1\271\1\267"+
    "\1\272\4\267\1\273\21\267\5\22\1\0\6\22\1\101"+
    "\3\22\1\274\15\22\27\0\1\275\40\0\1\276\37\0"+
    "\1\277\25\0\1\300\11\0\5\22\1\0\6\22\1\101"+
    "\13\22\1\301\5\22\4\267\1\270\1\271\1\267\1\272"+
    "\2\267\1\302\1\267\1\273\5\267\1\303\2\267\1\304"+
    "\10\267\4\305\1\267\1\306\1\305\1\307\2\305\1\310"+
    "\1\305\1\311\5\305\1\312\2\305\1\313\10\305\5\0"+
    "\1\314\30\0\4\315\1\316\1\317\1\315\1\267\2\315"+
    "\1\320\1\315\1\321\5\315\1\322\2\315\1\323\10\315"+
    "\3\267\1\324\1\270\1\325\1\267\1\272\2\267\1\326"+
    "\7\267\1\327\2\267\1\304\10\267\5\22\1\0\6\22"+
    "\1\101\5\22\1\330\13\22\32\0\1\331\34\0\1\332"+
    "\27\0\1\333\41\0\1\334\6\0\5\22\1\0\6\22"+
    "\1\101\17\22\1\335\1\22\4\267\1\270\1\271\1\267"+
    "\1\272\1\336\1\267\1\302\1\267\1\273\5\267\1\303"+
    "\2\267\1\304\14\267\1\270\1\271\1\267\1\272\2\267"+
    "\1\302\1\267\1\273\5\267\1\303\2\267\1\304\3\267"+
    "\1\337\10\267\1\270\1\271\1\267\1\272\2\267\1\302"+
    "\1\267\1\273\5\267\1\303\2\267\1\304\2\267\1\340"+
    "\5\267\5\305\1\306\1\305\1\307\2\305\1\310\1\305"+
    "\1\311\5\305\1\312\2\305\1\313\10\305\5\0\1\341"+
    "\30\0\5\22\1\0\1\22\1\305\4\22\1\101\21\22"+
    "\5\305\1\306\1\305\1\307\1\342\1\305\1\310\1\305"+
    "\1\311\5\305\1\312\2\305\1\313\13\305\1\343\1\305"+
    "\1\344\1\305\1\307\2\305\1\345\7\305\1\346\2\305"+
    "\1\313\15\305\1\306\1\305\1\307\2\305\1\310\1\305"+
    "\1\311\5\305\1\312\2\305\1\313\3\305\1\347\11\305"+
    "\1\306\1\305\1\307\2\305\1\310\1\305\1\311\5\305"+
    "\1\312\2\305\1\313\1\305\1\350\1\351\5\305\4\314"+
    "\1\352\1\271\1\314\1\353\2\314\1\354\7\314\1\355"+
    "\2\314\1\356\10\314\4\315\1\316\1\317\4\315\1\320"+
    "\1\315\1\321\5\315\1\322\2\315\1\323\10\315\4\22"+
    "\1\315\1\0\6\22\1\101\21\22\5\0\1\357\30\0"+
    "\4\315\1\316\1\317\2\315\1\360\1\315\1\320\1\315"+
    "\1\321\5\315\1\322\2\315\1\323\13\315\1\361\1\316"+
    "\1\362\4\315\1\363\7\315\1\364\2\315\1\323\14\315"+
    "\1\316\1\317\4\315\1\320\1\315\1\321\5\315\1\322"+
    "\2\315\1\323\3\315\1\365\10\315\1\316\1\317\4\315"+
    "\1\320\1\315\1\321\5\315\1\322\2\315\1\323\1\315"+
    "\1\366\1\367\5\315\4\267\1\270\1\325\1\267\1\272"+
    "\1\267\1\370\1\302\7\267\1\303\2\267\1\304\10\267"+
    "\5\22\1\314\6\22\1\101\21\22\4\267\1\270\1\325"+
    "\1\267\1\272\1\336\1\267\1\302\7\267\1\327\2\267"+
    "\1\304\14\267\1\270\1\325\1\267\1\272\2\267\1\302"+
    "\7\267\1\303\1\267\1\314\1\304\3\267\1\337\4\267"+
    "\5\22\1\0\6\22\1\101\6\22\1\335\12\22\31\0"+
    "\1\371\37\0\1\372\35\0\1\373\30\0\1\374\7\0"+
    "\5\375\1\0\6\375\1\376\2\375\1\22\16\375\4\336"+
    "\1\377\1\u0100\1\336\1\u0101\1\u0102\1\336\1\u0103\1\336"+
    "\1\u0104\5\336\1\u0105\2\336\1\u0106\10\336\4\267\1\270"+
    "\1\271\1\267\1\272\2\267\1\302\1\267\1\273\5\267"+
    "\1\303\2\267\1\304\1\267\1\u0107\12\267\1\270\1\271"+
    "\1\267\1\272\2\267\1\302\1\267\1\273\5\267\1\303"+
    "\2\267\1\304\6\267\1\u0108\1\267\5\341\1\306\1\341"+
    "\1\u0109\2\341\1\u010a\7\341\1\u010b\2\341\1\u010c\10\341"+
    "\5\342\1\u010d\1\342\1\u010e\1\u010f\1\342\1\u0110\1\342"+
    "\1\u0111\5\342\1\u0112\2\342\1\u0113\10\342\5\305\1\344"+
    "\1\305\1\307\1\305\1\u0114\1\310\7\305\1\312\2\305"+
    "\1\313\10\305\5\22\1\341\6\22\1\101\21\22\5\305"+
    "\1\344\1\305\1\307\1\342\1\305\1\310\7\305\1\346"+
    "\2\305\1\313\15\305\1\344\1\305\1\307\2\305\1\310"+
    "\7\305\1\312\1\305\1\341\1\313\3\305\1\347\11\305"+
    "\1\306\1\305\1\307\2\305\1\310\1\305\1\311\5\305"+
    "\1\312\2\305\1\313\1\305\1\u0115\13\305\1\306\1\305"+
    "\1\307\2\305\1\310\1\305\1\311\5\305\1\312\2\305"+
    "\1\313\4\305\1\u0116\10\305\1\306\1\305\1\307\2\305"+
    "\1\310\1\305\1\311\5\305\1\312\2\305\1\313\6\305"+
    "\1\u0117\1\305\4\341\1\314\1\306\1\341\1\u0109\2\341"+
    "\1\u010a\7\341\1\u010b\2\341\1\u010c\10\341\4\357\1\u0118"+
    "\1\317\1\357\1\314\2\357\1\u0119\7\357\1\u011a\2\357"+
    "\1\u011b\10\357\4\314\1\352\1\271\1\314\1\353\1\u011c"+
    "\1\314\1\354\7\314\1\355\2\314\1\356\14\314\1\352"+
    "\1\271\1\314\1\353\2\314\1\354\7\314\1\355\2\314"+
    "\1\356\3\314\1\u011d\10\314\1\352\1\271\1\314\1\353"+
    "\2\314\1\354\7\314\1\355\2\314\1\356\2\314\1\u011e"+
    "\5\314\4\357\1\u0118\1\317\4\357\1\u0119\7\357\1\u011a"+
    "\2\357\1\u011b\10\357\4\360\1\u011f\1\u0120\2\360\1\u0121"+
    "\1\360\1\u0122\1\360\1\u0123\5\360\1\u0124\2\360\1\u0125"+
    "\10\360\4\315\1\316\1\362\3\315\1\u0126\1\320\7\315"+
    "\1\322\2\315\1\323\10\315\5\22\1\357\6\22\1\101"+
    "\21\22\4\315\1\316\1\362\2\315\1\360\1\315\1\320"+
    "\7\315\1\364\2\315\1\323\14\315\1\316\1\362\4\315"+
    "\1\320\7\315\1\322\1\315\1\357\1\323\3\315\1\365"+
    "\10\315\1\316\1\317\4\315\1\320\1\315\1\321\5\315"+
    "\1\322\2\315\1\323\1\315\1\u0127\12\315\1\316\1\317"+
    "\4\315\1\320\1\315\1\321\5\315\1\322\2\315\1\323"+
    "\4\315\1\u0128\7\315\1\316\1\317\4\315\1\320\1\315"+
    "\1\321\5\315\1\322\2\315\1\323\6\315\1\u0129\1\315"+
    "\4\267\1\270\1\325\1\267\1\272\1\267\1\u012a\1\302"+
    "\7\267\1\303\2\267\1\304\10\267\30\0\1\u012b\41\0"+
    "\1\u012c\25\0\1\u012d\46\0\1\u012e\5\375\1\0\6\375"+
    "\1\376\24\375\1\u012f\6\375\1\u0130\7\375\1\u0131\13\375"+
    "\4\342\1\336\1\u010d\1\342\1\u010e\1\u010f\1\342\1\u0110"+
    "\1\342\1\u0111\5\342\1\u0112\2\342\1\u0113\10\342\5\146"+
    "\1\u011c\2\146\1\206\25\146\4\360\1\u011f\1\u0120\1\360"+
    "\1\336\1\u0121\1\360\1\u0122\1\360\1\u0123\5\360\1\u0124"+
    "\2\360\1\u0125\10\360\4\336\1\377\1\u0100\1\336\1\u0101"+
    "\1\u0102\1\336\1\302\1\336\1\u0104\5\336\1\u0105\2\336"+
    "\1\u0106\14\336\1\377\1\u0100\1\336\1\u0101\2\336\1\u0103"+
    "\1\336\1\u0104\5\336\1\u0105\2\336\1\u0106\13\336\1\u0132"+
    "\1\377\1\u0133\1\336\1\u0101\1\u0102\1\336\1\u0134\7\336"+
    "\1\u0135\2\336\1\u0106\14\336\1\377\1\u0100\1\336\1\u0101"+
    "\1\u0102\1\336\1\u0103\1\336\1\u0104\5\336\1\u0105\2\336"+
    "\1\u0106\3\336\1\u0136\10\336\1\377\1\u0100\1\336\1\u0101"+
    "\1\u0102\1\336\1\u0103\1\336\1\u0104\5\336\1\u0105\2\336"+
    "\1\u0106\2\336\1\u0137\5\336\4\267\1\270\1\271\1\267"+
    "\1\272\2\267\1\302\1\267\1\273\5\267\1\303\2\267"+
    "\1\304\4\267\1\u0138\7\267\1\270\1\271\1\267\1\272"+
    "\2\267\1\302\1\267\1\273\5\267\1\303\1\u0139\1\267"+
    "\1\304\10\267\7\0\1\341\26\0\5\341\1\306\1\341"+
    "\1\u0109\1\u013a\1\341\1\u010a\7\341\1\u010b\2\341\1\u010c"+
    "\15\341\1\306\1\341\1\u0109\2\341\1\u010a\7\341\1\u010b"+
    "\2\341\1\u010c\3\341\1\u013b\11\341\1\306\1\341\1\u0109"+
    "\2\341\1\u010a\7\341\1\u010b\2\341\1\u010c\1\341\1\u013c"+
    "\1\u013d\5\341\5\146\1\u013a\2\146\1\206\25\146\5\102"+
    "\1\146\1\102\1\342\1\147\3\102\1\150\21\102\5\342"+
    "\1\u010d\1\342\1\u010e\1\u010f\1\342\1\310\1\342\1\u0111"+
    "\5\342\1\u0112\2\342\1\u0113\15\342\1\u010d\1\342\1\u010e"+
    "\2\342\1\u0110\1\342\1\u0111\5\342\1\u0112\2\342\1\u0113"+
    "\13\342\1\u013e\1\342\1\u013f\1\342\1\u010e\1\u010f\1\342"+
    "\1\u0140\7\342\1\u0141\2\342\1\u0113\15\342\1\u010d\1\342"+
    "\1\u010e\1\u010f\1\342\1\u0110\1\342\1\u0111\5\342\1\u0112"+
    "\2\342\1\u0113\3\342\1\u0142\11\342\1\u010d\1\342\1\u010e"+
    "\1\u010f\1\342\1\u0110\1\342\1\u0111\5\342\1\u0112\2\342"+
    "\1\u0113\1\342\1\u0143\1\u0144\5\342\5\305\1\344\1\305"+
    "\1\307\1\305\1\u0145\1\310\7\305\1\312\2\305\1\313"+
    "\15\305\1\306\1\305\1\307\2\305\1\310\1\305\1\311"+
    "\5\305\1\312\2\305\1\313\4\305\1\u0146\10\305\1\306"+
    "\1\305\1\307\2\305\1\310\1\305\1\311\5\305\1\312"+
    "\2\305\1\313\3\305\1\u0147\11\305\1\306\1\305\1\307"+
    "\2\305\1\310\1\305\1\311\5\305\1\312\1\u0148\1\305"+
    "\1\313\10\305\4\0\1\357\31\0\4\357\1\u0118\1\317"+
    "\2\357\1\u0149\1\357\1\u0119\7\357\1\u011a\2\357\1\u011b"+
    "\14\357\1\u0118\1\317\4\357\1\u0119\7\357\1\u011a\2\357"+
    "\1\u011b\3\357\1\u014a\10\357\1\u0118\1\317\4\357\1\u0119"+
    "\7\357\1\u011a\2\357\1\u011b\1\357\1\u014b\1\u014c\5\357"+
    "\4\u011c\1\u014d\1\u0100\1\u011c\1\u014e\1\u014f\1\u011c\1\u0150"+
    "\7\u011c\1\u0151\2\u011c\1\u0152\10\u011c\4\314\1\352\1\271"+
    "\1\314\1\353\2\314\1\354\7\314\1\355\2\314\1\356"+
    "\1\314\1\u0153\12\314\1\352\1\271\1\314\1\353\2\314"+
    "\1\354\7\314\1\355\2\314\1\356\6\314\1\u0154\1\314"+
    "\4\102\1\360\1\146\2\102\1\147\3\102\1\150\21\102"+
    "\5\146\1\u0149\2\146\1\206\25\146\4\360\1\u011f\1\u0120"+
    "\2\360\1\u0121\1\360\1\320\1\360\1\u0123\5\360\1\u0124"+
    "\2\360\1\u0125\14\360\1\u011f\1\u0120\4\360\1\u0122\1\360"+
    "\1\u0123\5\360\1\u0124\2\360\1\u0125\13\360\1\u0155\1\u011f"+
    "\1\u0156\2\360\1\u0121\1\360\1\u0157\7\360\1\u0158\2\360"+
    "\1\u0125\14\360\1\u011f\1\u0120\2\360\1\u0121\1\360\1\u0122"+
    "\1\360\1\u0123\5\360\1\u0124\2\360\1\u0125\3\360\1\u0159"+
    "\10\360\1\u011f\1\u0120\2\360\1\u0121\1\360\1\u0122\1\360"+
    "\1\u0123\5\360\1\u0124\2\360\1\u0125\1\360\1\u015a\1\u015b"+
    "\5\360\4\315\1\316\1\362\3\315\1\u015c\1\320\7\315"+
    "\1\322\2\315\1\323\14\315\1\316\1\317\4\315\1\320"+
    "\1\315\1\321\5\315\1\322\2\315\1\323\4\315\1\u015d"+
    "\7\315\1\316\1\317\4\315\1\320\1\315\1\321\5\315"+
    "\1\322\2\315\1\323\3\315\1\u015e\10\315\1\316\1\317"+
    "\4\315\1\320\1\315\1\321\5\315\1\322\1\u015f\1\315"+
    "\1\323\10\315\4\267\1\270\1\325\1\267\1\272\1\267"+
    "\1\314\1\302\7\267\1\303\2\267\1\304\10\267\23\0"+
    "\1\u0160\12\0\4\314\1\352\1\271\1\314\1\353\26\314"+
    "\20\0\1\u0161\35\0\1\u0162\15\0\11\375\1\u0163\46\375"+
    "\1\u0131\37\375\1\0\11\375\4\336\1\377\1\u0133\1\336"+
    "\1\u0101\1\u0102\1\u0164\1\u0103\7\336\1\u0105\2\336\1\u0106"+
    "\10\336\5\102\1\u011c\2\102\1\147\3\102\1\150\21\102"+
    "\4\336\1\377\1\u0133\1\336\1\u0101\2\336\1\u0103\7\336"+
    "\1\u0135\2\336\1\u0106\14\336\1\377\1\u0133\1\336\1\u0101"+
    "\1\u0102\1\336\1\u0103\7\336\1\u0105\1\336\1\u011c\1\u0106"+
    "\3\336\1\u0136\10\336\1\377\1\u0100\1\336\1\u0101\1\u0102"+
    "\1\336\1\u0103\1\336\1\u0104\5\336\1\u0105\2\336\1\u0106"+
    "\1\336\1\u0165\12\336\1\377\1\u0100\1\336\1\u0101\1\u0102"+
    "\1\336\1\u0103\1\336\1\u0104\5\336\1\u0105\2\336\1\u0106"+
    "\6\336\1\u0166\1\336\4\267\1\270\1\271\1\267\1\272"+
    "\2\267\1\302\1\267\1\273\5\267\1\303\2\267\1\304"+
    "\3\267\1\u0167\10\267\1\270\1\271\1\267\1\272\2\267"+
    "\1\302\1\267\1\273\5\267\1\303\2\267\1\304\5\267"+
    "\1\u0168\2\267\5\u013a\1\u010d\1\u013a\1\u0169\1\u016a\1\u013a"+
    "\1\u016b\7\u013a\1\u016c\2\u013a\1\u016d\10\u013a\5\341\1\306"+
    "\1\341\1\u0109\2\341\1\u010a\7\341\1\u010b\2\341\1\u010c"+
    "\1\341\1\u016e\13\341\1\306\1\341\1\u0109\2\341\1\u010a"+
    "\7\341\1\u010b\2\341\1\u010c\4\341\1\u016f\10\341\1\306"+
    "\1\341\1\u0109\2\341\1\u010a\7\341\1\u010b\2\341\1\u010c"+
    "\6\341\1\u0170\1\341\5\342\1\u013f\1\342\1\u010e\1\u010f"+
    "\1\u0171\1\u0110\7\342\1\u0112\2\342\1\u0113\10\342\5\102"+
    "\1\u013a\2\102\1\147\3\102\1\150\21\102\5\342\1\u013f"+
    "\1\342\1\u010e\2\342\1\u0110\7\342\1\u0141\2\342\1\u0113"+
    "\15\342\1\u013f\1\342\1\u010e\1\u010f\1\342\1\u0110\7\342"+
    "\1\u0112\1\342\1\u013a\1\u0113\3\342\1\u0142\11\342\1\u010d"+
    "\1\342\1\u010e\1\u010f\1\342\1\u0110\1\342\1\u0111\5\342"+
    "\1\u0112\2\342\1\u0113\1\342\1\u0172\13\342\1\u010d\1\342"+
    "\1\u010e\1\u010f\1\342\1\u0110\1\342\1\u0111\5\342\1\u0112"+
    "\2\342\1\u0113\4\342\1\u0173\10\342\1\u010d\1\342\1\u010e"+
    "\1\u010f\1\342\1\u0110\1\342\1\u0111\5\342\1\u0112\2\342"+
    "\1\u0113\6\342\1\u0174\1\342\5\305\1\344\1\305\1\307"+
    "\1\305\1\341\1\310\7\305\1\312\2\305\1\313\15\305"+
    "\1\306\1\305\1\307\2\305\1\310\1\305\1\311\5\305"+
    "\1\312\2\305\1\313\3\305\1\u0175\11\305\1\306\1\305"+
    "\1\307\2\305\1\310\1\305\1\311\5\305\1\312\2\305"+
    "\1\313\5\305\1\u0176\7\305\1\306\1\305\1\307\2\305"+
    "\1\310\1\305\1\311\5\305\1\312\2\305\1\313\5\305"+
    "\1\u0177\2\305\4\u0149\1\u0178\1\u0120\2\u0149\1\u0179\1\u0149"+
    "\1\u017a\7\u0149\1\u017b\2\u0149\1\u017c\10\u0149\4\357\1\u0118"+
    "\1\317\4\357\1\u0119\7\357\1\u011a\2\357\1\u011b\1\357"+
    "\1\u017d\12\357\1\u0118\1\317\4\357\1\u0119\7\357\1\u011a"+
    "\2\357\1\u011b\4\357\1\u017e\7\357\1\u0118\1\317\4\357"+
    "\1\u0119\7\357\1\u011a\2\357\1\u011b\6\357\1\u017f\1\357"+
    "\4\u013a\1\u011c\1\u010d\1\u013a\1\u0169\1\u016a\1\u013a\1\u016b"+
    "\7\u013a\1\u016c\2\u013a\1\u016d\10\u013a\4\u0149\1\u0178\1\u0120"+
    "\1\u0149\1\u011c\1\u0179\1\u0149\1\u017a\7\u0149\1\u017b\2\u0149"+
    "\1\u017c\10\u0149\4\u011c\1\u014d\1\u0100\1\u011c\1\u014e\1\u014f"+
    "\1\u011c\1\354\7\u011c\1\u0151\2\u011c\1\u0152\14\u011c\1\u014d"+
    "\1\u0100\1\u011c\1\u014e\2\u011c\1\u0150\7\u011c\1\u0151\2\u011c"+
    "\1\u0152\14\u011c\1\u014d\1\u0100\1\u011c\1\u014e\1\u014f\1\u011c"+
    "\1\u0150\7\u011c\1\u0151\2\u011c\1\u0152\3\u011c\1\u0180\10\u011c"+
    "\1\u014d\1\u0100\1\u011c\1\u014e\1\u014f\1\u011c\1\u0150\7\u011c"+
    "\1\u0151\2\u011c\1\u0152\2\u011c\1\u0181\5\u011c\4\314\1\352"+
    "\1\271\1\314\1\353\2\314\1\354\7\314\1\355\2\314"+
    "\1\356\4\314\1\u0182\7\314\1\352\1\271\1\314\1\353"+
    "\2\314\1\354\7\314\1\355\1\u0183\1\314\1\356\10\314"+
    "\4\360\1\u011f\1\u0156\2\360\1\u0121\1\u0184\1\u0122\7\360"+
    "\1\u0124\2\360\1\u0125\10\360\5\102\1\u0149\2\102\1\147"+
    "\3\102\1\150\21\102\4\360\1\u011f\1\u0156\4\360\1\u0122"+
    "\7\360\1\u0158\2\360\1\u0125\14\360\1\u011f\1\u0156\2\360"+
    "\1\u0121\1\360\1\u0122\7\360\1\u0124\1\360\1\u0149\1\u0125"+
    "\3\360\1\u0159\10\360\1\u011f\1\u0120\2\360\1\u0121\1\360"+
    "\1\u0122\1\360\1\u0123\5\360\1\u0124\2\360\1\u0125\1\360"+
    "\1\u0185\12\360\1\u011f\1\u0120\2\360\1\u0121\1\360\1\u0122"+
    "\1\360\1\u0123\5\360\1\u0124\2\360\1\u0125\4\360\1\u0186"+
    "\7\360\1\u011f\1\u0120\2\360\1\u0121\1\360\1\u0122\1\360"+
    "\1\u0123\5\360\1\u0124\2\360\1\u0125\6\360\1\u0187\1\360"+
    "\4\315\1\316\1\362\3\315\1\357\1\320\7\315\1\322"+
    "\2\315\1\323\14\315\1\316\1\317\4\315\1\320\1\315"+
    "\1\321\5\315\1\322\2\315\1\323\3\315\1\u0188\10\315"+
    "\1\316\1\317\4\315\1\320\1\315\1\321\5\315\1\322"+
    "\2\315\1\323\5\315\1\u0189\6\315\1\316\1\317\4\315"+
    "\1\320\1\315\1\321\5\315\1\322\2\315\1\323\5\315"+
    "\1\u018a\2\315\30\0\1\u018b\27\0\1\u018c\46\0\1\u018d"+
    "\2\0\11\375\1\u018e\24\375\4\336\1\377\1\u0133\1\336"+
    "\1\u0101\1\u0102\1\u018f\1\u0103\7\336\1\u0105\2\336\1\u0106"+
    "\14\336\1\377\1\u0100\1\336\1\u0101\1\u0102\1\336\1\u0103"+
    "\1\336\1\u0104\5\336\1\u0105\2\336\1\u0106\4\336\1\u0190"+
    "\7\336\1\377\1\u0100\1\336\1\u0101\1\u0102\1\336\1\u0103"+
    "\1\336\1\u0104\5\336\1\u0105\1\u0191\1\336\1\u0106\10\336"+
    "\4\267\1\270\1\271\1\267\1\272\2\267\1\302\1\267"+
    "\1\273\5\267\1\303\2\267\1\304\2\267\1\u0192\11\267"+
    "\1\270\1\271\1\267\1\272\2\267\1\302\1\267\1\273"+
    "\5\267\1\303\1\267\1\u0193\1\304\10\267\7\146\1\u013a"+
    "\1\206\25\146\5\u013a\1\u010d\1\u013a\1\u0169\1\u016a\1\u013a"+
    "\1\u010a\7\u013a\1\u016c\2\u013a\1\u016d\15\u013a\1\u010d\1\u013a"+
    "\1\u0169\2\u013a\1\u016b\7\u013a\1\u016c\2\u013a\1\u016d\15\u013a"+
    "\1\u010d\1\u013a\1\u0169\1\u016a\1\u013a\1\u016b\7\u013a\1\u016c"+
    "\2\u013a\1\u016d\3\u013a\1\u0194\11\u013a\1\u010d\1\u013a\1\u0169"+
    "\1\u016a\1\u013a\1\u016b\7\u013a\1\u016c\2\u013a\1\u016d\1\u013a"+
    "\1\u0195\1\u0196\5\u013a\5\341\1\306\1\341\1\u0109\2\341"+
    "\1\u010a\7\341\1\u010b\2\341\1\u010c\4\341\1\u0197\10\341"+
    "\1\306\1\341\1\u0109\2\341\1\u010a\7\341\1\u010b\2\341"+
    "\1\u010c\3\341\1\u0198\11\341\1\306\1\341\1\u0109\2\341"+
    "\1\u010a\7\341\1\u010b\1\u0199\1\341\1\u010c\10\341\5\342"+
    "\1\u013f\1\342\1\u010e\1\u010f\1\u019a\1\u0110\7\342\1\u0112"+
    "\2\342\1\u0113\15\342\1\u010d\1\342\1\u010e\1\u010f\1\342"+
    "\1\u0110\1\342\1\u0111\5\342\1\u0112\2\342\1\u0113\4\342"+
    "\1\u019b\10\342\1\u010d\1\342\1\u010e\1\u010f\1\342\1\u0110"+
    "\1\342\1\u0111\5\342\1\u0112\2\342\1\u0113\3\342\1\u019c"+
    "\11\342\1\u010d\1\342\1\u010e\1\u010f\1\342\1\u0110\1\342"+
    "\1\u0111\5\342\1\u0112\1\u019d\1\342\1\u0113\10\342\5\305"+
    "\1\306\1\305\1\307\2\305\1\310\1\305\1\311\5\305"+
    "\1\312\2\305\1\313\2\305\1\u019e\12\305\1\306\1\305"+
    "\1\307\2\305\1\310\1\305\1\311\5\305\1\312\2\305"+
    "\1\313\6\305\1\267\6\305\1\306\1\305\1\307\2\305"+
    "\1\310\1\305\1\311\5\305\1\312\1\305\1\u019f\1\313"+
    "\10\305\4\146\1\u0149\3\146\1\206\25\146\4\u0149\1\u0178"+
    "\1\u0120\2\u0149\1\u0179\1\u0149\1\u0119\7\u0149\1\u017b\2\u0149"+
    "\1\u017c\14\u0149\1\u0178\1\u0120\4\u0149\1\u017a\7\u0149\1\u017b"+
    "\2\u0149\1\u017c\14\u0149\1\u0178\1\u0120\2\u0149\1\u0179\1\u0149"+
    "\1\u017a\7\u0149\1\u017b\2\u0149\1\u017c\3\u0149\1\u01a0\10\u0149"+
    "\1\u0178\1\u0120\2\u0149\1\u0179\1\u0149\1\u017a\7\u0149\1\u017b"+
    "\2\u0149\1\u017c\1\u0149\1\u01a1\1\u01a2\5\u0149\4\357\1\u0118"+
    "\1\317\4\357\1\u0119\7\357\1\u011a\2\357\1\u011b\4\357"+
    "\1\u01a3\7\357\1\u0118\1\317\4\357\1\u0119\7\357\1\u011a"+
    "\2\357\1\u011b\3\357\1\u01a4\10\357\1\u0118\1\317\4\357"+
    "\1\u0119\7\357\1\u011a\1\u01a5\1\357\1\u011b\10\357\4\u011c"+
    "\1\u014d\1\u0100\1\u011c\1\u014e\1\u014f\1\u011c\1\u0150\7\u011c"+
    "\1\u0151\2\u011c\1\u0152\1\u011c\1\u01a6\12\u011c\1\u014d\1\u0100"+
    "\1\u011c\1\u014e\1\u014f\1\u011c\1\u0150\7\u011c\1\u0151\2\u011c"+
    "\1\u0152\6\u011c\1\u01a7\1\u011c\4\314\1\352\1\271\1\314"+
    "\1\353\2\314\1\354\7\314\1\355\2\314\1\356\3\314"+
    "\1\u01a8\10\314\1\352\1\271\1\314\1\353\2\314\1\354"+
    "\7\314\1\355\2\314\1\356\5\314\1\u01a9\2\314\4\360"+
    "\1\u011f\1\u0156\2\360\1\u0121\1\u01aa\1\u0122\7\360\1\u0124"+
    "\2\360\1\u0125\14\360\1\u011f\1\u0120\2\360\1\u0121\1\360"+
    "\1\u0122\1\360\1\u0123\5\360\1\u0124\2\360\1\u0125\4\360"+
    "\1\u01ab\7\360\1\u011f\1\u0120\2\360\1\u0121\1\360\1\u0122"+
    "\1\360\1\u0123\5\360\1\u0124\2\360\1\u0125\3\360\1\u01ac"+
    "\10\360\1\u011f\1\u0120\2\360\1\u0121\1\360\1\u0122\1\360"+
    "\1\u0123\5\360\1\u0124\1\u01ad\1\360\1\u0125\10\360\4\315"+
    "\1\316\1\317\4\315\1\320\1\315\1\321\5\315\1\322"+
    "\2\315\1\323\2\315\1\u01ae\11\315\1\316\1\317\4\315"+
    "\1\320\1\315\1\321\5\315\1\322\2\315\1\323\6\315"+
    "\1\267\5\315\1\316\1\317\4\315\1\320\1\315\1\321"+
    "\5\315\1\322\1\315\1\u01af\1\323\10\315\34\0\1\u01b0"+
    "\24\0\1\u01b0\37\0\1\u01b1\10\0\11\375\1\0\24\375"+
    "\4\336\1\377\1\u0133\1\336\1\u0101\1\u0102\1\u011c\1\u0103"+
    "\7\336\1\u0105\2\336\1\u0106\14\336\1\377\1\u0100\1\336"+
    "\1\u0101\1\u0102\1\336\1\u0103\1\336\1\u0104\5\336\1\u0105"+
    "\2\336\1\u0106\3\336\1\u01b2\10\336\1\377\1\u0100\1\336"+
    "\1\u0101\1\u0102\1\336\1\u0103\1\336\1\u0104\5\336\1\u0105"+
    "\2\336\1\u0106\5\336\1\u01b3\2\336\4\267\1\270\1\271"+
    "\1\267\1\272\2\267\1\302\1\267\1\273\5\267\1\303"+
    "\1\u01b4\1\267\1\304\14\267\1\270\1\271\1\267\1\272"+
    "\2\267\1\302\1\267\1\273\3\267\1\u01b5\1\267\1\303"+
    "\2\267\1\304\10\267\5\u013a\1\u010d\1\u013a\1\u0169\1\u016a"+
    "\1\u013a\1\u016b\7\u013a\1\u016c\2\u013a\1\u016d\1\u013a\1\u01b6"+
    "\13\u013a\1\u010d\1\u013a\1\u0169\1\u016a\1\u013a\1\u016b\7\u013a"+
    "\1\u016c\2\u013a\1\u016d\4\u013a\1\u01b7\10\u013a\1\u010d\1\u013a"+
    "\1\u0169\1\u016a\1\u013a\1\u016b\7\u013a\1\u016c\2\u013a\1\u016d"+
    "\6\u013a\1\u01b8\1\u013a\5\341\1\306\1\341\1\u0109\2\341"+
    "\1\u010a\7\341\1\u010b\2\341\1\u010c\3\341\1\u01b9\11\341"+
    "\1\306\1\341\1\u0109\2\341\1\u010a\7\341\1\u010b\2\341"+
    "\1\u010c\5\341\1\u01ba\7\341\1\306\1\341\1\u0109\2\341"+
    "\1\u010a\7\341\1\u010b\2\341\1\u010c\5\341\1\u01bb\2\341"+
    "\5\342\1\u013f\1\342\1\u010e\1\u010f\1\u013a\1\u0110\7\342"+
    "\1\u0112\2\342\1\u0113\15\342\1\u010d\1\342\1\u010e\1\u010f"+
    "\1\342\1\u0110\1\342\1\u0111\5\342\1\u0112\2\342\1\u0113"+
    "\3\342\1\u01bc\11\342\1\u010d\1\342\1\u010e\1\u010f\1\342"+
    "\1\u0110\1\342\1\u0111\5\342\1\u0112\2\342\1\u0113\5\342"+
    "\1\u01bd\7\342\1\u010d\1\342\1\u010e\1\u010f\1\342\1\u0110"+
    "\1\342\1\u0111\5\342\1\u0112\2\342\1\u0113\5\342\1\u01be"+
    "\2\342\5\305\1\306\1\305\1\307\2\305\1\310\1\305"+
    "\1\311\5\305\1\312\1\u01bf\1\305\1\313\15\305\1\306"+
    "\1\305\1\307\2\305\1\310\1\305\1\311\3\305\1\u01c0"+
    "\1\305\1\312\2\305\1\313\10\305\4\u0149\1\u0178\1\u0120"+
    "\2\u0149\1\u0179\1\u0149\1\u017a\7\u0149\1\u017b\2\u0149\1\u017c"+
    "\1\u0149\1\u01c1\12\u0149\1\u0178\1\u0120\2\u0149\1\u0179\1\u0149"+
    "\1\u017a\7\u0149\1\u017b\2\u0149\1\u017c\4\u0149\1\u01c2\7\u0149"+
    "\1\u0178\1\u0120\2\u0149\1\u0179\1\u0149\1\u017a\7\u0149\1\u017b"+
    "\2\u0149\1\u017c\6\u0149\1\u01c3\1\u0149\4\357\1\u0118\1\317"+
    "\4\357\1\u0119\7\357\1\u011a\2\357\1\u011b\3\357\1\u01c4"+
    "\10\357\1\u0118\1\317\4\357\1\u0119\7\357\1\u011a\2\357"+
    "\1\u011b\5\357\1\u01c5\6\357\1\u0118\1\317\4\357\1\u0119"+
    "\7\357\1\u011a\2\357\1\u011b\5\357\1\u01c6\2\357\4\u011c"+
    "\1\u014d\1\u0100\1\u011c\1\u014e\1\u014f\1\u011c\1\u0150\7\u011c"+
    "\1\u0151\2\u011c\1\u0152\4\u011c\1\u01c7\7\u011c\1\u014d\1\u0100"+
    "\1\u011c\1\u014e\1\u014f\1\u011c\1\u0150\7\u011c\1\u0151\1\u01c8"+
    "\1\u011c\1\u0152\10\u011c\4\314\1\352\1\271\1\314\1\353"+
    "\2\314\1\354\7\314\1\355\2\314\1\356\2\314\1\u01c9"+
    "\11\314\1\352\1\271\1\314\1\353\2\314\1\354\7\314"+
    "\1\355\1\314\1\u01ca\1\356\10\314\4\360\1\u011f\1\u0156"+
    "\2\360\1\u0121\1\u0149\1\u0122\7\360\1\u0124\2\360\1\u0125"+
    "\14\360\1\u011f\1\u0120\2\360\1\u0121\1\360\1\u0122\1\360"+
    "\1\u0123\5\360\1\u0124\2\360\1\u0125\3\360\1\u01cb\10\360"+
    "\1\u011f\1\u0120\2\360\1\u0121\1\360\1\u0122\1\360\1\u0123"+
    "\5\360\1\u0124\2\360\1\u0125\5\360\1\u01cc\6\360\1\u011f"+
    "\1\u0120\2\360\1\u0121\1\360\1\u0122\1\360\1\u0123\5\360"+
    "\1\u0124\2\360\1\u0125\5\360\1\u01cd\2\360\4\315\1\316"+
    "\1\317\4\315\1\320\1\315\1\321\5\315\1\322\1\u01ce"+
    "\1\315\1\323\14\315\1\316\1\317\4\315\1\320\1\315"+
    "\1\321\3\315\1\u01cf\1\315\1\322\2\315\1\323\10\315"+
    "\5\375\1\0\6\375\1\376\2\375\1\0\16\375\20\0"+
    "\1\u01d0\15\0\4\336\1\377\1\u0100\1\336\1\u0101\1\u0102"+
    "\1\336\1\u0103\1\336\1\u0104\5\336\1\u0105\2\336\1\u0106"+
    "\2\336\1\u01d1\11\336\1\377\1\u0100\1\336\1\u0101\1\u0102"+
    "\1\336\1\u0103\1\336\1\u0104\5\336\1\u0105\1\336\1\u01d2"+
    "\1\u0106\10\336\4\267\1\270\1\271\1\267\1\272\2\267"+
    "\1\302\1\267\1\273\5\267\1\303\2\267\1\304\2\267"+
    "\1\u01d3\11\267\1\270\1\271\1\267\1\272\2\267\1\302"+
    "\1\267\1\273\5\267\1\u01d4\2\267\1\304\10\267\5\u013a"+
    "\1\u010d\1\u013a\1\u0169\1\u016a\1\u013a\1\u016b\7\u013a\1\u016c"+
    "\2\u013a\1\u016d\4\u013a\1\u01d5\10\u013a\1\u010d\1\u013a\1\u0169"+
    "\1\u016a\1\u013a\1\u016b\7\u013a\1\u016c\2\u013a\1\u016d\3\u013a"+
    "\1\u01d6\11\u013a\1\u010d\1\u013a\1\u0169\1\u016a\1\u013a\1\u016b"+
    "\7\u013a\1\u016c\1\u01d7\1\u013a\1\u016d\10\u013a\5\341\1\306"+
    "\1\341\1\u0109\2\341\1\u010a\7\341\1\u010b\2\341\1\u010c"+
    "\2\341\1\u01d8\12\341\1\306\1\341\1\u0109\2\341\1\u010a"+
    "\7\341\1\u010b\2\341\1\u010c\6\341\1\314\6\341\1\306"+
    "\1\341\1\u0109\2\341\1\u010a\7\341\1\u010b\1\341\1\u01d9"+
    "\1\u010c\10\341\5\342\1\u010d\1\342\1\u010e\1\u010f\1\342"+
    "\1\u0110\1\342\1\u0111\5\342\1\u0112\2\342\1\u0113\2\342"+
    "\1\u01da\12\342\1\u010d\1\342\1\u010e\1\u010f\1\342\1\u0110"+
    "\1\342\1\u0111\5\342\1\u0112\2\342\1\u0113\6\342\1\336"+
    "\6\342\1\u010d\1\342\1\u010e\1\u010f\1\342\1\u0110\1\342"+
    "\1\u0111\5\342\1\u0112\1\342\1\u01db\1\u0113\10\342\5\305"+
    "\1\306\1\305\1\307\2\305\1\310\1\305\1\311\5\305"+
    "\1\312\2\305\1\313\2\305\1\u01dc\12\305\1\306\1\305"+
    "\1\307\2\305\1\310\1\305\1\311\5\305\1\u01dd\2\305"+
    "\1\313\10\305\4\u0149\1\u0178\1\u0120\2\u0149\1\u0179\1\u0149"+
    "\1\u017a\7\u0149\1\u017b\2\u0149\1\u017c\4\u0149\1\u01de\7\u0149"+
    "\1\u0178\1\u0120\2\u0149\1\u0179\1\u0149\1\u017a\7\u0149\1\u017b"+
    "\2\u0149\1\u017c\3\u0149\1\u01df\10\u0149\1\u0178\1\u0120\2\u0149"+
    "\1\u0179\1\u0149\1\u017a\7\u0149\1\u017b\1\u01e0\1\u0149\1\u017c"+
    "\10\u0149\4\357\1\u0118\1\317\4\357\1\u0119\7\357\1\u011a"+
    "\2\357\1\u011b\2\357\1\u01e1\11\357\1\u0118\1\317\4\357"+
    "\1\u0119\7\357\1\u011a\2\357\1\u011b\6\357\1\314\5\357"+
    "\1\u0118\1\317\4\357\1\u0119\7\357\1\u011a\1\357\1\u01e2"+
    "\1\u011b\10\357\4\u011c\1\u014d\1\u0100\1\u011c\1\u014e\1\u014f"+
    "\1\u011c\1\u0150\7\u011c\1\u0151\2\u011c\1\u0152\3\u011c\1\u01e3"+
    "\10\u011c\1\u014d\1\u0100\1\u011c\1\u014e\1\u014f\1\u011c\1\u0150"+
    "\7\u011c\1\u0151\2\u011c\1\u0152\5\u011c\1\u01e4\2\u011c\4\314"+
    "\1\352\1\271\1\314\1\353\2\314\1\354\7\314\1\355"+
    "\1\u01e5\1\314\1\356\14\314\1\352\1\271\1\314\1\353"+
    "\2\314\1\354\5\314\1\u01e6\1\314\1\355\2\314\1\356"+
    "\10\314\4\360\1\u011f\1\u0120\2\360\1\u0121\1\360\1\u0122"+
    "\1\360\1\u0123\5\360\1\u0124\2\360\1\u0125\2\360\1\u01e7"+
    "\11\360\1\u011f\1\u0120\2\360\1\u0121\1\360\1\u0122\1\360"+
    "\1\u0123\5\360\1\u0124\2\360\1\u0125\6\360\1\336\5\360"+
    "\1\u011f\1\u0120\2\360\1\u0121\1\360\1\u0122\1\360\1\u0123"+
    "\5\360\1\u0124\1\360\1\u01e8\1\u0125\10\360\4\315\1\316"+
    "\1\317\4\315\1\320\1\315\1\321\5\315\1\322\2\315"+
    "\1\323\2\315\1\u01e9\11\315\1\316\1\317\4\315\1\320"+
    "\1\315\1\321\5\315\1\u01ea\2\315\1\323\10\315\21\0"+
    "\1\u01eb\14\0\4\336\1\377\1\u0100\1\336\1\u0101\1\u0102"+
    "\1\336\1\u0103\1\336\1\u0104\5\336\1\u0105\1\u01ec\1\336"+
    "\1\u0106\14\336\1\377\1\u0100\1\336\1\u0101\1\u0102\1\336"+
    "\1\u0103\1\336\1\u0104\3\336\1\u01ed\1\336\1\u0105\2\336"+
    "\1\u0106\10\336\4\267\1\270\1\271\1\267\1\272\2\267"+
    "\1\302\1\267\1\273\5\267\1\303\2\267\1\304\6\267"+
    "\1\u01ee\5\267\1\270\1\271\1\267\1\272\2\267\1\302"+
    "\1\267\1\273\5\267\1\303\1\u01ee\1\267\1\304\3\267"+
    "\1\337\4\267\5\u013a\1\u010d\1\u013a\1\u0169\1\u016a\1\u013a"+
    "\1\u016b\7\u013a\1\u016c\2\u013a\1\u016d\3\u013a\1\u01ef\11\u013a"+
    "\1\u010d\1\u013a\1\u0169\1\u016a\1\u013a\1\u016b\7\u013a\1\u016c"+
    "\2\u013a\1\u016d\5\u013a\1\u01f0\7\u013a\1\u010d\1\u013a\1\u0169"+
    "\1\u016a\1\u013a\1\u016b\7\u013a\1\u016c\2\u013a\1\u016d\5\u013a"+
    "\1\u01f1\2\u013a\5\341\1\306\1\341\1\u0109\2\341\1\u010a"+
    "\7\341\1\u010b\1\u01f2\1\341\1\u010c\15\341\1\306\1\341"+
    "\1\u0109\2\341\1\u010a\5\341\1\u01f3\1\341\1\u010b\2\341"+
    "\1\u010c\10\341\5\342\1\u010d\1\342\1\u010e\1\u010f\1\342"+
    "\1\u0110\1\342\1\u0111\5\342\1\u0112\1\u01f4\1\342\1\u0113"+
    "\15\342\1\u010d\1\342\1\u010e\1\u010f\1\342\1\u0110\1\342"+
    "\1\u0111\3\342\1\u01f5\1\342\1\u0112\2\342\1\u0113\10\342"+
    "\5\305\1\306\1\305\1\307\2\305\1\310\1\305\1\311"+
    "\5\305\1\312\2\305\1\313\6\305\1\u01f6\6\305\1\306"+
    "\1\305\1\307\2\305\1\310\1\305\1\311\5\305\1\312"+
    "\1\u01f6\1\305\1\313\3\305\1\347\4\305\4\u0149\1\u0178"+
    "\1\u0120\2\u0149\1\u0179\1\u0149\1\u017a\7\u0149\1\u017b\2\u0149"+
    "\1\u017c\3\u0149\1\u01f7\10\u0149\1\u0178\1\u0120\2\u0149\1\u0179"+
    "\1\u0149\1\u017a\7\u0149\1\u017b\2\u0149\1\u017c\5\u0149\1\u01f8"+
    "\6\u0149\1\u0178\1\u0120\2\u0149\1\u0179\1\u0149\1\u017a\7\u0149"+
    "\1\u017b\2\u0149\1\u017c\5\u0149\1\u01f9\2\u0149\4\357\1\u0118"+
    "\1\317\4\357\1\u0119\7\357\1\u011a\1\u01fa\1\357\1\u011b"+
    "\14\357\1\u0118\1\317\4\357\1\u0119\5\357\1\u01fb\1\357"+
    "\1\u011a\2\357\1\u011b\10\357\4\u011c\1\u014d\1\u0100\1\u011c"+
    "\1\u014e\1\u014f\1\u011c\1\u0150\7\u011c\1\u0151\2\u011c\1\u0152"+
    "\2\u011c\1\u01fc\11\u011c\1\u014d\1\u0100\1\u011c\1\u014e\1\u014f"+
    "\1\u011c\1\u0150\7\u011c\1\u0151\1\u011c\1\u01fd\1\u0152\10\u011c"+
    "\4\314\1\352\1\271\1\314\1\353\2\314\1\354\7\314"+
    "\1\355\2\314\1\356\2\314\1\u01fe\11\314\1\352\1\271"+
    "\1\314\1\353\2\314\1\354\7\314\1\u01ff\2\314\1\356"+
    "\10\314\4\360\1\u011f\1\u0120\2\360\1\u0121\1\360\1\u0122"+
    "\1\360\1\u0123\5\360\1\u0124\1\u0200\1\360\1\u0125\14\360"+
    "\1\u011f\1\u0120\2\360\1\u0121\1\360\1\u0122\1\360\1\u0123"+
    "\3\360\1\u0201\1\360\1\u0124\2\360\1\u0125\10\360\4\315"+
    "\1\316\1\317\4\315\1\320\1\315\1\321\5\315\1\322"+
    "\2\315\1\323\6\315\1\u0202\5\315\1\316\1\317\4\315"+
    "\1\320\1\315\1\321\5\315\1\322\1\u0202\1\315\1\323"+
    "\3\315\1\365\4\315\26\0\1\u0203\7\0\4\336\1\377"+
    "\1\u0100\1\336\1\u0101\1\u0102\1\336\1\u0103\1\336\1\u0104"+
    "\5\336\1\u0105\2\336\1\u0106\2\336\1\u0204\11\336\1\377"+
    "\1\u0100\1\336\1\u0101\1\u0102\1\336\1\u0103\1\336\1\u0104"+
    "\5\336\1\u0205\2\336\1\u0106\10\336\4\u0206\1\u0207\1\271"+
    "\1\u0206\1\u0208\2\u0206\1\u0209\1\u0206\1\u020a\2\u0206\1\267"+
    "\16\u0206\5\u013a\1\u010d\1\u013a\1\u0169\1\u016a\1\u013a\1\u016b"+
    "\7\u013a\1\u016c\2\u013a\1\u016d\2\u013a\1\u020b\12\u013a\1\u010d"+
    "\1\u013a\1\u0169\1\u016a\1\u013a\1\u016b\7\u013a\1\u016c\2\u013a"+
    "\1\u016d\6\u013a\1\u011c\6\u013a\1\u010d\1\u013a\1\u0169\1\u016a"+
    "\1\u013a\1\u016b\7\u013a\1\u016c\1\u013a\1\u020c\1\u016d\10\u013a"+
    "\5\341\1\306\1\341\1\u0109\2\341\1\u010a\7\341\1\u010b"+
    "\2\341\1\u010c\2\341\1\u020d\12\341\1\306\1\341\1\u0109"+
    "\2\341\1\u010a\7\341\1\u020e\2\341\1\u010c\10\341\5\342"+
    "\1\u010d\1\342\1\u010e\1\u010f\1\342\1\u0110\1\342\1\u0111"+
    "\5\342\1\u0112\2\342\1\u0113\2\342\1\u020f\12\342\1\u010d"+
    "\1\342\1\u010e\1\u010f\1\342\1\u0110\1\342\1\u0111\5\342"+
    "\1\u0210\2\342\1\u0113\10\342\5\u0211\1\306\1\u0211\1\u0212"+
    "\2\u0211\1\u0213\1\u0211\1\u0214\2\u0211\1\305\5\u0211\1\u0215"+
    "\10\u0211\4\u0149\1\u0178\1\u0120\2\u0149\1\u0179\1\u0149\1\u017a"+
    "\7\u0149\1\u017b\2\u0149\1\u017c\2\u0149\1\u0216\11\u0149\1\u0178"+
    "\1\u0120\2\u0149\1\u0179\1\u0149\1\u017a\7\u0149\1\u017b\2\u0149"+
    "\1\u017c\6\u0149\1\u011c\5\u0149\1\u0178\1\u0120\2\u0149\1\u0179"+
    "\1\u0149\1\u017a\7\u0149\1\u017b\1\u0149\1\u0217\1\u017c\10\u0149"+
    "\4\357\1\u0118\1\317\4\357\1\u0119\7\357\1\u011a\2\357"+
    "\1\u011b\2\357\1\u0218\11\357\1\u0118\1\317\4\357\1\u0119"+
    "\7\357\1\u0219\2\357\1\u011b\10\357\4\u011c\1\u014d\1\u0100"+
    "\1\u011c\1\u014e\1\u014f\1\u011c\1\u0150\7\u011c\1\u0151\1\u021a"+
    "\1\u011c\1\u0152\14\u011c\1\u014d\1\u0100\1\u011c\1\u014e\1\u014f"+
    "\1\u011c\1\u0150\5\u011c\1\u021b\1\u011c\1\u0151\2\u011c\1\u0152"+
    "\10\u011c\4\314\1\352\1\271\1\314\1\353\2\314\1\354"+
    "\7\314\1\355\2\314\1\356\6\314\1\u021c\5\314\1\352"+
    "\1\271\1\314\1\353\2\314\1\354\7\314\1\355\1\u021c"+
    "\1\314\1\356\3\314\1\u011d\4\314\4\360\1\u011f\1\u0120"+
    "\2\360\1\u0121\1\360\1\u0122\1\360\1\u0123\5\360\1\u0124"+
    "\2\360\1\u0125\2\360\1\u021d\11\360\1\u011f\1\u0120\2\360"+
    "\1\u0121\1\360\1\u0122\1\360\1\u0123\5\360\1\u021e\2\360"+
    "\1\u0125\10\360\4\u021f\1\u0220\1\317\4\u021f\1\u0221\1\u021f"+
    "\1\u0222\2\u021f\1\315\5\u021f\1\u0223\10\u021f\23\0\1\u0224"+
    "\12\0\4\336\1\377\1\u0100\1\336\1\u0101\1\u0102\1\336"+
    "\1\u0103\1\336\1\u0104\5\336\1\u0105\2\336\1\u0106\6\336"+
    "\1\u0225\5\336\1\377\1\u0100\1\336\1\u0101\1\u0102\1\336"+
    "\1\u0103\1\336\1\u0104\5\336\1\u0105\1\u0225\1\336\1\u0106"+
    "\3\336\1\u0136\4\336\4\u0206\1\u0207\1\271\1\u0206\1\u0208"+
    "\2\u0206\1\u0209\1\u0206\1\u020a\21\u0206\4\u0211\1\u0206\1\306"+
    "\1\u0211\1\u0212\2\u0211\1\u0213\1\u0211\1\u0214\10\u0211\1\u0215"+
    "\10\u0211\4\u021f\1\u0220\1\317\1\u021f\1\u0206\2\u021f\1\u0221"+
    "\1\u021f\1\u0222\10\u021f\1\u0223\10\u021f\4\u0206\1\u0207\1\271"+
    "\1\u0206\1\u0208\1\u0226\1\u0206\1\u0209\1\u0206\1\u020a\24\u0206"+
    "\1\u0227\1\u0207\1\u0228\1\u0206\1\u0208\2\u0206\1\u0229\7\u0206"+
    "\1\u022a\13\u0206\5\u013a\1\u010d\1\u013a\1\u0169\1\u016a\1\u013a"+
    "\1\u016b\7\u013a\1\u016c\1\u022b\1\u013a\1\u016d\15\u013a\1\u010d"+
    "\1\u013a\1\u0169\1\u016a\1\u013a\1\u016b\5\u013a\1\u022c\1\u013a"+
    "\1\u016c\2\u013a\1\u016d\10\u013a\5\341\1\306\1\341\1\u0109"+
    "\2\341\1\u010a\7\341\1\u010b\2\341\1\u010c\6\341\1\u022d"+
    "\6\341\1\306\1\341\1\u0109\2\341\1\u010a\7\341\1\u010b"+
    "\1\u022d\1\341\1\u010c\3\341\1\u013b\4\341\5\342\1\u010d"+
    "\1\342\1\u010e\1\u010f\1\342\1\u0110\1\342\1\u0111\5\342"+
    "\1\u0112\2\342\1\u0113\6\342\1\u022e\6\342\1\u010d\1\342"+
    "\1\u010e\1\u010f\1\342\1\u0110\1\342\1\u0111\5\342\1\u0112"+
    "\1\u022e\1\342\1\u0113\3\342\1\u0142\4\342\5\u0211\1\306"+
    "\1\u0211\1\u0212\2\u0211\1\u0213\1\u0211\1\u0214\10\u0211\1\u0215"+
    "\10\u0211\5\375\1\0\1\375\1\u0211\4\375\1\376\21\375"+
    "\5\u0211\1\306\1\u0211\1\u0212\1\u022f\1\u0211\1\u0213\1\u0211"+
    "\1\u0214\10\u0211\1\u0215\13\u0211\1\u0230\1\u0211\1\u0231\1\u0211"+
    "\1\u0212\2\u0211\1\u0232\7\u0211\1\u0233\2\u0211\1\u0215\15\u0211"+
    "\1\306\1\u0211\1\u0212\2\u0211\1\u0213\1\u0211\1\u0214\10\u0211"+
    "\1\u0215\1\u0211\1\u0234\6\u0211\4\u0149\1\u0178\1\u0120\2\u0149"+
    "\1\u0179\1\u0149\1\u017a\7\u0149\1\u017b\1\u0235\1\u0149\1\u017c"+
    "\14\u0149\1\u0178\1\u0120\2\u0149\1\u0179\1\u0149\1\u017a\5\u0149"+
    "\1\u0236\1\u0149\1\u017b\2\u0149\1\u017c\10\u0149\4\357\1\u0118"+
    "\1\317\4\357\1\u0119\7\357\1\u011a\2\357\1\u011b\6\357"+
    "\1\u0237\5\357\1\u0118\1\317\4\357\1\u0119\7\357\1\u011a"+
    "\1\u0237\1\357\1\u011b\3\357\1\u014a\4\357\4\u011c\1\u014d"+
    "\1\u0100\1\u011c\1\u014e\1\u014f\1\u011c\1\u0150\7\u011c\1\u0151"+
    "\2\u011c\1\u0152\2\u011c\1\u0238\11\u011c\1\u014d\1\u0100\1\u011c"+
    "\1\u014e\1\u014f\1\u011c\1\u0150\7\u011c\1\u0239\2\u011c\1\u0152"+
    "\10\u011c\4\u0206\1\u0207\1\271\1\u0206\1\u0208\2\u0206\1\u0209"+
    "\1\u0206\1\u020a\2\u0206\1\314\16\u0206\4\360\1\u011f\1\u0120"+
    "\2\360\1\u0121\1\360\1\u0122\1\360\1\u0123\5\360\1\u0124"+
    "\2\360\1\u0125\6\360\1\u023a\5\360\1\u011f\1\u0120\2\360"+
    "\1\u0121\1\360\1\u0122\1\360\1\u0123\5\360\1\u0124\1\u023a"+
    "\1\360\1\u0125\3\360\1\u0159\4\360\4\u021f\1\u0220\1\317"+
    "\4\u021f\1\u0221\1\u021f\1\u0222\10\u021f\1\u0223\10\u021f\4\375"+
    "\1\u021f\1\0\6\375\1\376\21\375\4\u021f\1\u0220\1\317"+
    "\2\u021f\1\u023b\1\u021f\1\u0221\1\u021f\1\u0222\10\u021f\1\u0223"+
    "\13\u021f\1\u023c\1\u0220\1\u023d\4\u021f\1\u023e\7\u021f\1\u023f"+
    "\2\u021f\1\u0223\14\u021f\1\u0220\1\317\4\u021f\1\u0221\1\u021f"+
    "\1\u0222\10\u021f\1\u0223\1\u021f\1\u0240\6\u021f\11\u0224\1\u0241"+
    "\24\u0224\4\u0226\1\u0242\1\u0100\1\u0226\1\u0243\1\u0244\1\u0226"+
    "\1\u0245\1\u0226\1\u0246\2\u0226\1\336\22\u0226\1\u0242\1\u0100"+
    "\1\u0226\1\u0243\1\u0244\1\u0226\1\u0245\1\u0226\1\u0246\21\u0226"+
    "\4\u0206\1\u0207\1\u0228\1\u0206\1\u0208\1\u0206\1\u0247\1\u0209"+
    "\23\u0206\5\375\1\314\6\375\1\376\21\375\4\u0206\1\u0207"+
    "\1\u0228\1\u0206\1\u0208\1\u0226\1\u0206\1\u0209\7\u0206\1\u022a"+
    "\17\u0206\1\u0207\1\u0228\1\u0206\1\u0208\2\u0206\1\u0209\11\u0206"+
    "\1\314\11\u0206\5\u013a\1\u010d\1\u013a\1\u0169\1\u016a\1\u013a"+
    "\1\u016b\7\u013a\1\u016c\2\u013a\1\u016d\2\u013a\1\u0248\12\u013a"+
    "\1\u010d\1\u013a\1\u0169\1\u016a\1\u013a\1\u016b\7\u013a\1\u0249"+
    "\2\u013a\1\u016d\10\u013a\5\u0211\1\306\1\u0211\1\u0212\2\u0211"+
    "\1\u0213\1\u0211\1\u0214\2\u0211\1\341\5\u0211\1\u0215\10\u0211"+
    "\5\u022f\1\u010d\1\u022f\1\u024a\1\u024b\1\u022f\1\u024c\1\u022f"+
    "\1\u024d\2\u022f\1\342\5\u022f\1\u024e\15\u022f\1\u010d\1\u022f"+
    "\1\u024a\1\u024b\1\u022f\1\u024c\1\u022f\1\u024d\10\u022f\1\u024e"+
    "\10\u022f\5\u0211\1\u0231\1\u0211\1\u0212\1\u0211\1\u024f\1\u0213"+
    "\12\u0211\1\u0215\10\u0211\5\375\1\341\6\375\1\376\21\375"+
    "\5\u0211\1\u0231\1\u0211\1\u0212\1\u022f\1\u0211\1\u0213\7\u0211"+
    "\1\u0233\2\u0211\1\u0215\15\u0211\1\u0231\1\u0211\1\u0212\2\u0211"+
    "\1\u0213\11\u0211\1\341\1\u0215\15\u0211\1\306\1\u0211\1\u0212"+
    "\2\u0211\1\u0213\1\u0211\1\u0214\10\u0211\1\u0215\4\u0211\1\u0250"+
    "\3\u0211\4\u0149\1\u0178\1\u0120\2\u0149\1\u0179\1\u0149\1\u017a"+
    "\7\u0149\1\u017b\2\u0149\1\u017c\2\u0149\1\u0251\11\u0149\1\u0178"+
    "\1\u0120\2\u0149\1\u0179\1\u0149\1\u017a\7\u0149\1\u0252\2\u0149"+
    "\1\u017c\10\u0149\4\u021f\1\u0220\1\317\4\u021f\1\u0221\1\u021f"+
    "\1\u0222\2\u021f\1\357\5\u021f\1\u0223\10\u021f\4\u011c\1\u014d"+
    "\1\u0100\1\u011c\1\u014e\1\u014f\1\u011c\1\u0150\7\u011c\1\u0151"+
    "\2\u011c\1\u0152\6\u011c\1\u0253\5\u011c\1\u014d\1\u0100\1\u011c"+
    "\1\u014e\1\u014f\1\u011c\1\u0150\7\u011c\1\u0151\1\u0253\1\u011c"+
    "\1\u0152\3\u011c\1\u0180\4\u011c\4\u023b\1\u0254\1\u0120\2\u023b"+
    "\1\u0255\1\u023b\1\u0256\1\u023b\1\u0257\2\u023b\1\360\5\u023b"+
    "\1\u0258\14\u023b\1\u0254\1\u0120\2\u023b\1\u0255\1\u023b\1\u0256"+
    "\1\u023b\1\u0257\10\u023b\1\u0258\10\u023b\4\u021f\1\u0220\1\u023d"+
    "\3\u021f\1\u0259\1\u0221\12\u021f\1\u0223\10\u021f\5\375\1\357"+
    "\6\375\1\376\21\375\4\u021f\1\u0220\1\u023d\2\u021f\1\u023b"+
    "\1\u021f\1\u0221\7\u021f\1\u023f\2\u021f\1\u0223\14\u021f\1\u0220"+
    "\1\u023d\4\u021f\1\u0221\11\u021f\1\357\1\u0223\14\u021f\1\u0220"+
    "\1\317\4\u021f\1\u0221\1\u021f\1\u0222\10\u021f\1\u0223\4\u021f"+
    "\1\u025a\3\u021f\11\u0224\1\u025b\24\u0224\4\u022f\1\u0226\1\u010d"+
    "\1\u022f\1\u024a\1\u024b\1\u022f\1\u024c\1\u022f\1\u024d\10\u022f"+
    "\1\u024e\10\u022f\4\u023b\1\u0254\1\u0120\1\u023b\1\u0226\1\u0255"+
    "\1\u023b\1\u0256\1\u023b\1\u0257\10\u023b\1\u0258\10\u023b\4\u0226"+
    "\1\u0242\1\u0100\1\u0226\1\u0243\1\u0244\1\u0226\1\u0209\1\u0226"+
    "\1\u0246\25\u0226\1\u0242\1\u0100\1\u0226\1\u0243\2\u0226\1\u0245"+
    "\1\u0226\1\u0246\24\u0226\1\u025c\1\u0242\1\u025d\1\u0226\1\u0243"+
    "\1\u0244\1\u0226\1\u025e\7\u0226\1\u025f\13\u0226\4\u0206\1\u0207"+
    "\1\u0228\1\u0206\1\u0208\1\u0206\1\u0260\1\u0209\23\u0206\5\u013a"+
    "\1\u010d\1\u013a\1\u0169\1\u016a\1\u013a\1\u016b\7\u013a\1\u016c"+
    "\2\u013a\1\u016d\6\u013a\1\u0261\6\u013a\1\u010d\1\u013a\1\u0169"+
    "\1\u016a\1\u013a\1\u016b\7\u013a\1\u016c\1\u0261\1\u013a\1\u016d"+
    "\3\u013a\1\u0194\4\u013a\5\u0262\1\146\1\u0262\1\u022f\1\u0263"+
    "\3\u0262\1\u0264\21\u0262\5\u022f\1\u010d\1\u022f\1\u024a\1\u024b"+
    "\1\u022f\1\u0213\1\u022f\1\u024d\10\u022f\1\u024e\15\u022f\1\u010d"+
    "\1\u022f\1\u024a\2\u022f\1\u024c\1\u022f\1\u024d\10\u022f\1\u024e"+
    "\13\u022f\1\u0265\1\u022f\1\u0266\1\u022f\1\u024a\1\u024b\1\u022f"+
    "\1\u0267\7\u022f\1\u0268\2\u022f\1\u024e\15\u022f\1\u010d\1\u022f"+
    "\1\u024a\1\u024b\1\u022f\1\u024c\1\u022f\1\u024d\10\u022f\1\u024e"+
    "\1\u022f\1\u0269\6\u022f\5\u0211\1\u0231\1\u0211\1\u0212\1\u0211"+
    "\1\u026a\1\u0213\12\u0211\1\u0215\15\u0211\1\306\1\u0211\1\u0212"+
    "\2\u0211\1\u0213\1\u0211\1\u0214\10\u0211\1\u0215\3\u0211\1\u026b"+
    "\4\u0211\4\u0149\1\u0178\1\u0120\2\u0149\1\u0179\1\u0149\1\u017a"+
    "\7\u0149\1\u017b\2\u0149\1\u017c\6\u0149\1\u026c\5\u0149\1\u0178"+
    "\1\u0120\2\u0149\1\u0179\1\u0149\1\u017a\7\u0149\1\u017b\1\u026c"+
    "\1\u0149\1\u017c\3\u0149\1\u01a0\4\u0149\4\u0226\1\u0242\1\u0100"+
    "\1\u0226\1\u0243\1\u0244\1\u0226\1\u0245\1\u0226\1\u0246\2\u0226"+
    "\1\u011c\16\u0226\4\u0262\1\u023b\1\146\2\u0262\1\u0263\3\u0262"+
    "\1\u0264\21\u0262\4\u023b\1\u0254\1\u0120\2\u023b\1\u0255\1\u023b"+
    "\1\u0221\1\u023b\1\u0257\10\u023b\1\u0258\14\u023b\1\u0254\1\u0120"+
    "\4\u023b\1\u0256\1\u023b\1\u0257\10\u023b\1\u0258\13\u023b\1\u026d"+
    "\1\u0254\1\u026e\2\u023b\1\u0255\1\u023b\1\u026f\7\u023b\1\u0270"+
    "\2\u023b\1\u0258\14\u023b\1\u0254\1\u0120\2\u023b\1\u0255\1\u023b"+
    "\1\u0256\1\u023b\1\u0257\10\u023b\1\u0258\1\u023b\1\u0271\6\u023b"+
    "\4\u021f\1\u0220\1\u023d\3\u021f\1\u0272\1\u0221\12\u021f\1\u0223"+
    "\14\u021f\1\u0220\1\317\4\u021f\1\u0221\1\u021f\1\u0222\10\u021f"+
    "\1\u0223\3\u021f\1\u0273\4\u021f\11\u0224\1\u025b\4\u0224\1\u0274"+
    "\17\u0224\4\u0226\1\u0242\1\u025d\1\u0226\1\u0243\1\u0244\1\u0275"+
    "\1\u0245\23\u0226\5\u0262\1\u011c\2\u0262\1\u0263\3\u0262\1\u0264"+
    "\21\u0262\4\u0226\1\u0242\1\u025d\1\u0226\1\u0243\2\u0226\1\u0245"+
    "\7\u0226\1\u025f\17\u0226\1\u0242\1\u025d\1\u0226\1\u0243\1\u0244"+
    "\1\u0226\1\u0245\11\u0226\1\u011c\11\u0226\4\u0206\1\u0207\1\u0228"+
    "\1\u0206\1\u0208\1\u0206\1\314\1\u0209\23\u0206\5\u022f\1\u010d"+
    "\1\u022f\1\u024a\1\u024b\1\u022f\1\u024c\1\u022f\1\u024d\2\u022f"+
    "\1\u013a\5\u022f\1\u024e\10\u022f\5\u0262\1\146\2\u0262\1\u0263"+
    "\3\u0262\1\u0264\26\u0262\1\146\2\u0262\1\u0263\1\u0262\1\u0276"+
    "\1\u0262\1\u0264\24\u0262\1\u0277\4\u0262\1\u0263\1\u0262\1\u0278"+
    "\7\u0262\1\u0279\13\u0262\5\u022f\1\u0266\1\u022f\1\u024a\1\u024b"+
    "\1\u027a\1\u024c\12\u022f\1\u024e\10\u022f\5\u0262\1\u013a\2\u0262"+
    "\1\u0263\3\u0262\1\u0264\21\u0262\5\u022f\1\u0266\1\u022f\1\u024a"+
    "\2\u022f\1\u024c\7\u022f\1\u0268\2\u022f\1\u024e\15\u022f\1\u0266"+
    "\1\u022f\1\u024a\1\u024b\1\u022f\1\u024c\11\u022f\1\u013a\1\u024e"+
    "\15\u022f\1\u010d\1\u022f\1\u024a\1\u024b\1\u022f\1\u024c\1\u022f"+
    "\1\u024d\10\u022f\1\u024e\4\u022f\1\u027b\3\u022f\5\u0211\1\u0231"+
    "\1\u0211\1\u0212\1\u0211\1\341\1\u0213\12\u0211\1\u0215\15\u0211"+
    "\1\306\1\u0211\1\u0212\2\u0211\1\u0213\1\u0211\1\u0214\10\u0211"+
    "\1\u0215\5\u0211\1\u027c\2\u0211\4\u023b\1\u0254\1\u0120\2\u023b"+
    "\1\u0255\1\u023b\1\u0256\1\u023b\1\u0257\2\u023b\1\u0149\5\u023b"+
    "\1\u0258\14\u023b\1\u0254\1\u026e\2\u023b\1\u0255\1\u027d\1\u0256"+
    "\12\u023b\1\u0258\10\u023b\5\u0262\1\u0149\2\u0262\1\u0263\3\u0262"+
    "\1\u0264\21\u0262\4\u023b\1\u0254\1\u026e\4\u023b\1\u0256\7\u023b"+
    "\1\u0270\2\u023b\1\u0258\14\u023b\1\u0254\1\u026e\2\u023b\1\u0255"+
    "\1\u023b\1\u0256\11\u023b\1\u0149\1\u0258\14\u023b\1\u0254\1\u0120"+
    "\2\u023b\1\u0255\1\u023b\1\u0256\1\u023b\1\u0257\10\u023b\1\u0258"+
    "\4\u023b\1\u027e\3\u023b\4\u021f\1\u0220\1\u023d\3\u021f\1\357"+
    "\1\u0221\12\u021f\1\u0223\14\u021f\1\u0220\1\317\4\u021f\1\u0221"+
    "\1\u021f\1\u0222\10\u021f\1\u0223\5\u021f\1\u027f\2\u021f\11\0"+
    "\1\u0280\24\0\4\u0226\1\u0242\1\u025d\1\u0226\1\u0243\1\u0244"+
    "\1\u0281\1\u0245\23\u0226\1\375\1\u0276\3\375\1\0\4\375"+
    "\1\u0282\1\375\1\376\10\375\1\u0283\10\375\10\u0262\1\u0263"+
    "\1\u0284\34\u0262\1\u0263\11\u0262\1\u0279\23\u0262\1\u0263\13\u0262"+
    "\1\146\11\u0262\5\u022f\1\u0266\1\u022f\1\u024a\1\u024b\1\u0285"+
    "\1\u024c\12\u022f\1\u024e\15\u022f\1\u010d\1\u022f\1\u024a\1\u024b"+
    "\1\u022f\1\u024c\1\u022f\1\u024d\10\u022f\1\u024e\3\u022f\1\u0286"+
    "\4\u022f\5\u0211\1\306\1\u0211\1\u0212\2\u0211\1\u0213\1\u0211"+
    "\1\u0214\10\u0211\1\u0215\6\u0211\1\u0206\1\u0211\4\u023b\1\u0254"+
    "\1\u026e\2\u023b\1\u0255\1\u0287\1\u0256\12\u023b\1\u0258\14\u023b"+
    "\1\u0254\1\u0120\2\u023b\1\u0255\1\u023b\1\u0256\1\u023b\1\u0257"+
    "\10\u023b\1\u0258\3\u023b\1\u0288\4\u023b\4\u021f\1\u0220\1\317"+
    "\4\u021f\1\u0221\1\u021f\1\u0222\10\u021f\1\u0223\6\u021f\1\u0206"+
    "\1\u021f\11\0\1\u0289\24\0\4\u0226\1\u0242\1\u025d\1\u0226"+
    "\1\u0243\1\u0244\1\u011c\1\u0245\23\u0226\5\375\1\0\2\375"+
    "\1\u0262\3\375\1\376\26\375\1\0\6\375\1\376\12\375"+
    "\1\u028a\6\375\10\u0262\1\u0263\1\u028b\24\u0262\5\u022f\1\u0266"+
    "\1\u022f\1\u024a\1\u024b\1\u013a\1\u024c\12\u022f\1\u024e\15\u022f"+
    "\1\u010d\1\u022f\1\u024a\1\u024b\1\u022f\1\u024c\1\u022f\1\u024d"+
    "\10\u022f\1\u024e\5\u022f\1\u028c\2\u022f\4\u023b\1\u0254\1\u026e"+
    "\2\u023b\1\u0255\1\u0149\1\u0256\12\u023b\1\u0258\14\u023b\1\u0254"+
    "\1\u0120\2\u023b\1\u0255\1\u023b\1\u0256\1\u023b\1\u0257\10\u023b"+
    "\1\u0258\5\u023b\1\u028d\2\u023b\16\0\1\u028e\17\0\5\375"+
    "\1\0\6\375\1\376\15\375\1\u028f\3\375\10\u0262\1\u0263"+
    "\1\146\24\u0262\5\u022f\1\u010d\1\u022f\1\u024a\1\u024b\1\u022f"+
    "\1\u024c\1\u022f\1\u024d\10\u022f\1\u024e\6\u022f\1\u0226\1\u022f"+
    "\4\u023b\1\u0254\1\u0120\2\u023b\1\u0255\1\u023b\1\u0256\1\u023b"+
    "\1\u0257\10\u023b\1\u0258\6\u023b\1\u0226\1\u023b\5\375\1\0"+
    "\6\375\1\376\14\375\1\u0290\11\375\1\0\6\375\1\376"+
    "\16\375\1\u0291\7\375\1\0\6\375\1\376\17\375\1\u0292"+
    "\1\375\4\u0206\1\u0207\1\271\1\u0206\1\u0208\4\u0206\1\u020a"+
    "\21\u0206";

  private static int [] zzUnpacktrans() {
    int [] result = new int[18840];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\1\6\0\1\1\2\0\3\1\1\11\2\1\1\11"+
    "\3\1\1\11\5\1\2\11\2\1\1\11\12\1\2\11"+
    "\1\1\3\11\2\1\3\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\0\1\1\3\0\5\1\12\0\2\1\4\0"+
    "\1\11\13\0\1\1\3\0\4\1\2\0\1\1\2\0"+
    "\1\1\1\0\1\1\2\0\1\11\5\0\1\1\7\0"+
    "\1\1\4\0\6\1\1\0\2\1\1\11\3\0\1\1"+
    "\5\0\4\1\2\11\1\0\1\11\1\0\1\11\6\0"+
    "\3\1\4\0\3\1\1\0\1\1\1\0\1\1\4\0"+
    "\5\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\2\0\1\1\4\0"+
    "\4\1\1\0\1\1\1\0\1\1\2\0\3\1\6\0"+
    "\1\1\1\0\1\1\2\0\3\1\5\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\4\1\5\0\3\1\1\0"+
    "\2\1\1\0\3\1\7\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\3\1\11\0\1\1\2\0\4\1\5\0"+
    "\1\1\2\0\3\1\1\0\3\1\15\0\1\1\2\0"+
    "\3\1\1\0\3\1\5\0\4\1\11\0\6\1\15\0"+
    "\6\1\5\0\4\1\7\0\5\1\13\0\5\1\2\0"+
    "\4\1\6\0\5\1\12\0\5\1\1\0\4\1\5\0"+
    "\4\1\11\0\4\1\1\0\3\1\5\0\3\1\11\0"+
    "\3\1\1\0\6\1\5\0\5\1\1\0\1\1\7\0"+
    "\5\1\1\0\1\1\1\0\2\1\1\0\1\1\5\0"+
    "\2\1\1\0\1\1\2\0\1\1\5\0\2\1\1\0"+
    "\1\1\2\0\1\1\1\0\4\1\4\0\3\1\1\0"+
    "\1\1\1\0\1\1\3\0\3\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1\4\0\2\1\2\0\1\1\2\0"+
    "\1\1\1\0\1\1\2\0\1\1\2\0\1\1\1\0"+
    "\2\1\1\0\1\1\4\0\2\1\1\0\2\1\2\0"+
    "\2\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[658];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  Project myProject;
  final CfmlLexerConfiguration myCurrentConfiguration = new CfmlLexerConfiguration();

  public _CfmlLexer(Project project) {
    this((java.io.Reader)null);
    myProject =  project;
  }

  public class CfmlLexerConfiguration {
      int myArePoundsEvaluated = 0;
      int myCommentCounter = 0;
      int mySharpCounter = 0;
      boolean myIfReturnExpression = false;
      Stack<Integer> myReturnStack = new Stack<>();
      // to give to other lexer
      IElementType myBlockType = CfmlElementTypes.TEMPLATE_TEXT;
      boolean myStartExpression = true;
      String myCurrentTag = "cfelse";

      public CfmlLexerConfiguration() {}

      public void reset() {
          myCommentCounter = 0;
          mySharpCounter = 0;
          myIfReturnExpression = false;
          myReturnStack.clear();
          myBlockType = CfmlElementTypes.TEMPLATE_TEXT;
          myStartExpression = true;
          myCurrentTag = "cfelse";
          myArePoundsEvaluated = 0;
      }

      public int getExtraState() {
        return myArePoundsEvaluated != 0 ? FINAL_STATE : 0;
      }
  }

  private void releaseExpressionState() {
    myCurrentConfiguration.mySharpCounter = 0;
    myCurrentConfiguration.myIfReturnExpression = false;
    myCurrentConfiguration.myReturnStack.clear();
  }

  private IElementType startComment(int stateToReturnTo) {
    myCurrentConfiguration.myReturnStack.push(stateToReturnTo);
    myCurrentConfiguration.myCommentCounter++;
    yybegin(COMMENT);
    return CfmlTokenTypes.COMMENT;
  }

  private IElementType startTag() {
    releaseExpressionState();
    yybegin(TAGOPEN); return CfmlTokenTypes.OPENER;
  }

  private IElementType startCloseTag() {
    // myCurrentConfiguration.myArePoundsEvaluated --;
    yybegin(TAGCLOSE); return CfmlTokenTypes.LSLASH_ANGLEBRACKET;
  }

  private void processCloseTag(String tagName) {
    if ("cfquery".equalsIgnoreCase(tagName) ||
        "cfqueryparam".equalsIgnoreCase(tagName) ||
        "cfoutput".equalsIgnoreCase(tagName) ||
        "cfmail".equalsIgnoreCase(tagName)) {
        myCurrentConfiguration.myArePoundsEvaluated --;
    }
  }

  private IElementType closeStartedTag() {
        myCurrentConfiguration.myStartExpression = true;
        if (myCurrentConfiguration.myCurrentTag.equalsIgnoreCase("cfscript")) {
            myCurrentConfiguration.myStartExpression = false;
            myCurrentConfiguration.myBlockType = CfmlTokenTypes.SCRIPT_EXPRESSION;
            yybegin(YYINITIAL);
        } else if (myCurrentConfiguration.myCurrentTag.equalsIgnoreCase("cfquery")) {
            myCurrentConfiguration.myArePoundsEvaluated++;
            yybegin(YYINITIAL);
        } else if (myCurrentConfiguration.myCurrentTag.equalsIgnoreCase("cfqueryparam")) {
            yybegin(YYINITIAL);
        } else if (myCurrentConfiguration.myCurrentTag.equalsIgnoreCase("cfoutput") ||
                   myCurrentConfiguration.myCurrentTag.equalsIgnoreCase("cfmail")) {
            myCurrentConfiguration.myArePoundsEvaluated++;
            // yybegin(TEXT);
            yybegin(YYINITIAL);
        } else {
            yybegin(YYINITIAL);
        }
        if (CfmlUtil.isSingleCfmlTag(myCurrentConfiguration.myCurrentTag, myProject))
            return CfmlTokenTypes.CLOSER;
        return CfmlTokenTypes.R_ANGLEBRACKET;
  }

  private IElementType startExpression(int stateToReturn) {
        myCurrentConfiguration.mySharpCounter++;
        myCurrentConfiguration.myReturnStack.push(stateToReturn);
        yybegin(SCRIPT_EXPRESSION);
        if (myCurrentConfiguration.mySharpCounter == 1) {
            return myCurrentConfiguration.myStartExpression ? CfmlTokenTypes.START_EXPRESSION : CfmlTokenTypes.SCRIPT_EXPRESSION;
        }
        return CfmlTokenTypes.SCRIPT_EXPRESSION;
  }

  private IElementType closeTag() {
    yybegin(YYINITIAL); return CfmlTokenTypes.CLOSER;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _CfmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yychar = start;
    myCurrentConfiguration.reset();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { if(myCurrentConfiguration.myBlockType == CfmlTokenTypes.SCRIPT_EXPRESSION){ return CfmlTokenTypes.SCRIPT_EXPRESSION;} return CfmlTokenTypes.WHITE_SPACE;
            }
          // fall through
          case 52: break;
          case 2:
            { return CfmlTokenTypes.WHITE_SPACE;
            }
          // fall through
          case 53: break;
          case 3:
            { return CfmlTokenTypes.COMMENT;
            }
          // fall through
          case 54: break;
          case 4:
            { return CfmlElementTypes.CF_SCRIPT;
            }
          // fall through
          case 55: break;
          case 5:
            { return myCurrentConfiguration.myBlockType;
            }
          // fall through
          case 56: break;
          case 6:
            { if (myCurrentConfiguration.myArePoundsEvaluated > 0) {
        return startExpression(YYINITIAL);
    } else {
        return myCurrentConfiguration.myBlockType;
    }
            }
          // fall through
          case 57: break;
          case 7:
            { yybegin(YYINITIAL); return CfmlTokenTypes.BAD_CHARACTER;
            }
          // fall through
          case 58: break;
          case 8:
            { return closeTag();
            }
          // fall through
          case 59: break;
          case 9:
            { yybegin(ASSIGN);
    return CfmlTokenTypes.ATTRIBUTE;
            }
          // fall through
          case 60: break;
          case 10:
            { return closeStartedTag();
            }
          // fall through
          case 61: break;
          case 11:
            { yybegin(ATTRIBUTE_VALUE); return CfmlTokenTypes.BAD_CHARACTER;
            }
          // fall through
          case 62: break;
          case 12:
            { yybegin(ATTRIBUTE_VALUE); return CfmlTokenTypes.ASSIGN;
            }
          // fall through
          case 63: break;
          case 13:
            { yybegin(DOUBLEQUOTE_CLOSER);
    if (myCurrentConfiguration.myIfReturnExpression) {
        return CfmlTokenTypes.SCRIPT_EXPRESSION;
    }
    return CfmlTokenTypes.STRING_TEXT;
            }
          // fall through
          case 64: break;
          case 14:
            { yybegin(myCurrentConfiguration.myReturnStack.pop());
    if (myCurrentConfiguration.myIfReturnExpression) {
        return CfmlTokenTypes.SCRIPT_EXPRESSION;
    }
    return CfmlTokenTypes.DOUBLE_QUOTE_CLOSER;
            }
          // fall through
          case 65: break;
          case 15:
            { return startExpression(DOUBLE_QUOTED_STRING);
            }
          // fall through
          case 66: break;
          case 16:
            { yybegin(SINGLEQUOTE_CLOSER);
    if (myCurrentConfiguration.myIfReturnExpression) {
        return CfmlTokenTypes.SCRIPT_EXPRESSION;
    }
    return CfmlTokenTypes.STRING_TEXT;
            }
          // fall through
          case 67: break;
          case 17:
            { return startExpression(SINGLE_QUOTED_STRING);
            }
          // fall through
          case 68: break;
          case 18:
            { yybegin(myCurrentConfiguration.myReturnStack.pop());
    if (myCurrentConfiguration.myIfReturnExpression) {
        return CfmlTokenTypes.SCRIPT_EXPRESSION;
    }
    return CfmlTokenTypes.SINGLE_QUOTE_CLOSER;
            }
          // fall through
          case 69: break;
          case 19:
            { yybegin(TAGATTR);
    return CfmlElementTypes.CF_SCRIPT;
            }
          // fall through
          case 70: break;
          case 20:
            { myCurrentConfiguration.myReturnStack.push(TAGATTR);
    yybegin(DOUBLE_QUOTED_STRING);
    return CfmlTokenTypes.DOUBLE_QUOTE;
            }
          // fall through
          case 71: break;
          case 21:
            { return startExpression(TAGATTR);
            }
          // fall through
          case 72: break;
          case 22:
            { myCurrentConfiguration.myReturnStack.push(TAGATTR);
    yybegin(SINGLE_QUOTED_STRING);
    return CfmlTokenTypes.SINGLE_QUOTE;
            }
          // fall through
          case 73: break;
          case 23:
            { myCurrentConfiguration.myIfReturnExpression = true;
    return CfmlTokenTypes.SCRIPT_EXPRESSION;
            }
          // fall through
          case 74: break;
          case 24:
            { myCurrentConfiguration.myIfReturnExpression = true;
    myCurrentConfiguration.myReturnStack.push(SCRIPT_EXPRESSION);
    yybegin(DOUBLE_QUOTED_STRING);
    return CfmlTokenTypes.SCRIPT_EXPRESSION;
            }
          // fall through
          case 75: break;
          case 25:
            { myCurrentConfiguration.myIfReturnExpression = true;
    if (!myCurrentConfiguration.myStartExpression && myCurrentConfiguration.mySharpCounter == 0) {
        return startExpression(SCRIPT_EXPRESSION);
    }
    myCurrentConfiguration.mySharpCounter--;
    yybegin(myCurrentConfiguration.myReturnStack.pop());
    if (myCurrentConfiguration.mySharpCounter == 0 && myCurrentConfiguration.myStartExpression) {
        myCurrentConfiguration.myIfReturnExpression = false;
        return CfmlTokenTypes.END_EXPRESSION;
    }
    return CfmlTokenTypes.SCRIPT_EXPRESSION;
            }
          // fall through
          case 76: break;
          case 26:
            { myCurrentConfiguration.myIfReturnExpression = true;
    myCurrentConfiguration.myReturnStack.push(SCRIPT_EXPRESSION);
    yybegin(SINGLE_QUOTED_STRING);
    return CfmlTokenTypes.SCRIPT_EXPRESSION;
            }
          // fall through
          case 77: break;
          case 27:
            { releaseExpressionState(); yybegin(YYINITIAL); return CfmlTokenTypes.BAD_CHARACTER;
            }
          // fall through
          case 78: break;
          case 28:
            { releaseExpressionState(); return closeStartedTag();
            }
          // fall through
          case 79: break;
          case 29:
            { return CfmlElementTypes.TEMPLATE_TEXT;
            }
          // fall through
          case 80: break;
          case 30:
            { return startExpression(TEXT);
            }
          // fall through
          case 81: break;
          case 31:
            { yybegin(CLOSER); processCloseTag(yytext().toString()); return CfmlTokenTypes.CF_TAG_NAME;
            }
          // fall through
          case 82: break;
          case 32:
            { myCurrentConfiguration.myCurrentTag = StringUtil.toLowerCase(yytext().toString());
    if (!CfmlUtil.hasAnyAttributes(myCurrentConfiguration.myCurrentTag, myProject)) {
        myCurrentConfiguration.myStartExpression = false;
        yybegin(SCRIPT_EXPRESSION);
    } else {
        myCurrentConfiguration.myStartExpression = true;
        yybegin(TAGATTR);
    }
    return CfmlTokenTypes.CF_TAG_NAME;
            }
          // fall through
          case 83: break;
          case 33:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { if (myCurrentConfiguration.myIfReturnExpression) {
        return CfmlTokenTypes.SCRIPT_EXPRESSION;
    }
    return CfmlTokenTypes.STRING_TEXT;
            }
          // fall through
          case 84: break;
          case 34:
            { releaseExpressionState(); return closeTag();
            }
          // fall through
          case 85: break;
          case 35:
            { String tagName = yytext().subSequence(1, yylength()).toString();
    boolean startTemplateText =  !"cfinclude".equalsIgnoreCase(tagName) &&
      (myCurrentConfiguration.myBlockType != CfmlElementTypes.SQL ||
       !"cfqueryparam".equals(tagName)
      );
    if (startTemplateText) {
      myCurrentConfiguration.myBlockType = CfmlElementTypes.TEMPLATE_TEXT;
    }
    yypushback(yylength() - 1);
    return startTag();
            }
          // fall through
          case 86: break;
          case 36:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { return startTag();
            }
          // fall through
          case 87: break;
          case 37:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yybegin(TAGOPEN); return CfmlTokenTypes.OPENER;
            }
          // fall through
          case 88: break;
          case 38:
            { yybegin(myCurrentConfiguration.myReturnStack.pop()); return CfmlTokenTypes.COMMENT;
            }
          // fall through
          case 89: break;
          case 39:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { releaseExpressionState(); yybegin(TAGOPEN); return CfmlTokenTypes.OPENER;
            }
          // fall through
          case 90: break;
          case 40:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { myCurrentConfiguration.myBlockType = CfmlElementTypes.TEMPLATE_TEXT; return startCloseTag();
            }
          // fall through
          case 91: break;
          case 41:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { return startCloseTag();
            }
          // fall through
          case 92: break;
          case 42:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { yybegin(TAGCLOSE); return CfmlTokenTypes.LSLASH_ANGLEBRACKET;
            }
          // fall through
          case 93: break;
          case 43:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { myCurrentConfiguration.myCommentCounter--;
    if (myCurrentConfiguration.myCommentCounter == 0) {
        yybegin(COMMENTEND);
    }
    return CfmlTokenTypes.COMMENT;
            }
          // fall through
          case 94: break;
          case 44:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { releaseExpressionState(); yybegin(TAGCLOSE); return CfmlTokenTypes.LSLASH_ANGLEBRACKET;
            }
          // fall through
          case 95: break;
          case 45:
            { return startComment(YYINITIAL);
            }
          // fall through
          case 96: break;
          case 46:
            { return startComment(TAGATTR);
            }
          // fall through
          case 97: break;
          case 47:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { myCurrentConfiguration.myCommentCounter++; return CfmlTokenTypes.COMMENT;
            }
          // fall through
          case 98: break;
          case 48:
            { return startComment(SCRIPT_EXPRESSION);
            }
          // fall through
          case 99: break;
          case 49:
            { return startComment(TEXT);
            }
          // fall through
          case 100: break;
          case 50:
            { if (yychar == 0) { yybegin(EAT_TEST_AS_SCRIPT); return CfmlElementTypes.CF_SCRIPT; }
                                                                 else { return myCurrentConfiguration.myBlockType; }
            }
          // fall through
          case 101: break;
          case 51:
            { return CfmlTokenTypes.VAR_ANNOTATION;
            }
          // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
