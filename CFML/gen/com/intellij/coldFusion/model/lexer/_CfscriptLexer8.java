// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: ColdFusionScript8.flex

package com.intellij.coldFusion.model.lexer;

import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.coldFusion.model.lexer.CfscriptTokenTypes;
import com.intellij.coldFusion.model.lexer.CfmlTokenTypes;
import com.intellij.coldFusion.model.CfmlUtil;
import com.intellij.util.containers.Stack;
import com.intellij.util.ArrayUtil;


class _CfscriptLexer8 implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DOUBLE_QUOTED_STRING = 2;
  public static final int SINGLE_QUOTED_STRING = 4;
  public static final int DOUBLEQUOTE_CLOSER = 6;
  public static final int SINGLEQUOTE_CLOSER = 8;
  public static final int EXPRESSION = 10;
  public static final int X = 12;
  public static final int Y = 14;
  public static final int COMMENT = 16;
  public static final int COMMENTEND = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  5,  5,  5,  5, 
     6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\121\u1100\1\u2700\4\u1100\1\u2800"+
    "\1\u1100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\53\u1100"+
    "\1\u2f00\41\u2000\1\u1100\1\u3000\1\u3100\1\u1100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u1100"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00\1\u5000\1\u5100"+
    "\1\u5200\3\u1100\1\u5300\1\u5400\1\u5500\12\u2000\4\u1100\1\u5600"+
    "\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100\1\u5800\1\u5900\2\u2000"+
    "\1\u5a00\1\u5b00\27\u1100\1\u5c00\4\u1100\1\u5d00\1\u5e00\42\u2000"+
    "\1\u1100\1\u5f00\1\u6000\11\u2000\1\u6100\24\u2000\1\u6200\1\u6300"+
    "\1\u2000\1\u6400\1\u6500\1\u6600\1\u6700\2\u2000\1\u6800\5\u2000"+
    "\1\u6900\1\u6a00\1\u6b00\5\u2000\1\u6c00\1\u6d00\2\u2000\1\u6e00"+
    "\1\u2000\1\u6f00\14\u2000\1\u7000\4\u2000\246\u1100\1\u7100\20\u1100"+
    "\1\u7200\1\u7300\25\u1100\1\u7400\34\u1100\1\u7500\14\u2000\2\u1100"+
    "\1\u7600\5\u2000\23\u1100\1\u7700\u0aec\u2000\1\u7800\1\u7900\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\11\26\1\27\1\30\1\31\1\32\1\33\1\3"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\11\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\11\1\65\1\66\1\67\1\70\1\11"+
    "\1\3\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\11\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\11\1\71\1\72\1\73\1\3\41\0"+
    "\2\3\4\11\4\3\1\11\2\3\1\0\7\3\1\11"+
    "\4\3\1\11\5\3\27\11\1\3\37\11\1\3\70\11"+
    "\2\45\115\11\1\56\u0142\11\4\3\14\11\16\3\5\11"+
    "\7\3\1\11\1\3\1\11\21\3\160\0\5\11\1\3"+
    "\2\11\2\3\4\11\1\3\1\11\6\3\1\11\1\3"+
    "\3\11\1\3\1\11\1\3\24\11\1\3\123\11\1\3"+
    "\213\11\1\3\5\0\2\3\246\11\1\3\46\11\2\3"+
    "\1\11\6\3\51\11\6\3\1\11\1\3\55\0\1\3"+
    "\1\0\1\3\2\0\1\3\2\0\1\3\1\0\10\3"+
    "\33\11\4\3\4\11\15\3\6\0\5\3\1\11\4\3"+
    "\13\0\1\3\1\0\3\3\53\11\37\0\4\3\2\11"+
    "\1\0\143\11\1\3\1\11\10\0\1\3\6\0\2\11"+
    "\2\0\1\3\4\0\2\11\12\0\3\11\2\3\1\11"+
    "\17\3\1\0\1\11\1\0\36\11\33\0\2\3\131\11"+
    "\13\0\1\11\16\3\12\0\41\11\11\0\2\11\4\3"+
    "\1\11\2\3\1\0\30\11\4\0\1\11\11\0\1\11"+
    "\3\0\1\11\5\0\22\3\31\11\3\0\4\3\13\11"+
    "\65\3\25\11\1\3\22\11\13\3\61\0\66\11\3\0"+
    "\1\11\22\0\1\11\7\0\12\11\2\0\2\3\12\0"+
    "\1\3\20\11\3\0\1\3\10\11\2\3\2\11\2\3"+
    "\26\11\1\3\7\11\1\3\1\11\3\3\4\11\2\3"+
    "\1\0\1\11\7\0\2\3\2\0\2\3\3\0\1\11"+
    "\10\3\1\0\4\3\2\11\1\3\3\11\2\0\2\3"+
    "\12\0\4\11\7\3\2\11\1\3\1\0\2\3\3\0"+
    "\1\3\6\11\4\3\2\11\2\3\26\11\1\3\7\11"+
    "\1\3\2\11\1\3\2\11\1\3\2\11\2\3\1\0"+
    "\1\3\5\0\4\3\2\0\2\3\3\0\3\3\1\0"+
    "\7\3\4\11\1\3\1\11\7\3\14\0\3\11\1\0"+
    "\13\3\3\0\1\3\11\11\1\3\3\11\1\3\26\11"+
    "\1\3\7\11\1\3\2\11\1\3\5\11\2\3\1\0"+
    "\1\11\10\0\1\3\3\0\1\3\3\0\2\3\1\11"+
    "\17\3\2\11\2\0\2\3\12\0\1\3\1\11\7\3"+
    "\1\11\6\0\1\3\3\0\1\3\10\11\2\3\2\11"+
    "\2\3\26\11\1\3\7\11\1\3\2\11\1\3\5\11"+
    "\2\3\1\0\1\11\7\0\2\3\2\0\2\3\3\0"+
    "\7\3\3\0\4\3\2\11\1\3\3\11\2\0\2\3"+
    "\12\0\1\3\1\11\20\3\1\0\1\11\1\3\6\11"+
    "\3\3\3\11\1\3\4\11\3\3\2\11\1\3\1\11"+
    "\1\3\2\11\3\3\2\11\3\3\3\11\3\3\14\11"+
    "\4\3\5\0\3\3\3\0\1\3\4\0\2\3\1\11"+
    "\6\3\1\0\16\3\12\0\11\3\1\11\6\3\5\0"+
    "\10\11\1\3\3\11\1\3\27\11\1\3\20\11\3\3"+
    "\1\11\7\0\1\3\3\0\1\3\4\0\7\3\2\0"+
    "\1\3\3\11\5\3\2\11\2\0\2\3\12\0\20\3"+
    "\1\11\3\0\1\3\10\11\1\3\3\11\1\3\27\11"+
    "\1\3\12\11\1\3\5\11\2\3\1\0\1\11\7\0"+
    "\1\3\3\0\1\3\4\0\7\3\2\0\7\3\1\11"+
    "\1\3\2\11\2\0\2\3\12\0\1\3\2\11\15\3"+
    "\4\0\11\11\1\3\3\11\1\3\51\11\2\0\1\11"+
    "\7\0\1\3\3\0\1\3\4\0\1\11\5\3\3\11"+
    "\1\0\7\3\3\11\2\0\2\3\12\0\12\3\6\11"+
    "\1\3\3\0\1\3\22\11\3\3\30\11\1\3\11\11"+
    "\1\3\1\11\2\3\7\11\3\3\1\0\4\3\6\0"+
    "\1\3\1\0\1\3\10\0\6\3\12\0\2\3\2\0"+
    "\15\3\60\11\1\0\2\11\7\0\4\3\10\11\10\0"+
    "\1\3\12\0\47\3\2\11\1\3\1\11\1\3\5\11"+
    "\1\3\30\11\1\3\1\11\1\3\12\11\1\0\2\11"+
    "\11\0\1\11\2\3\5\11\1\3\1\11\1\3\6\0"+
    "\2\3\12\0\2\3\4\11\40\3\1\11\27\3\2\0"+
    "\6\3\12\0\13\3\1\0\1\3\1\0\1\3\1\0"+
    "\4\3\2\0\10\11\1\3\44\11\4\3\24\0\1\3"+
    "\2\0\5\11\13\0\1\3\44\0\11\3\1\0\71\3"+
    "\53\11\24\0\1\11\12\0\6\3\6\11\4\0\4\11"+
    "\3\0\1\11\3\0\2\11\7\0\3\11\4\0\15\11"+
    "\14\0\1\11\17\0\2\3\46\11\1\3\1\11\5\3"+
    "\1\11\2\3\53\11\1\3\u014d\11\1\3\4\11\2\3"+
    "\7\11\1\3\1\11\1\3\4\11\2\3\51\11\1\3"+
    "\4\11\2\3\41\11\1\3\4\11\2\3\7\11\1\3"+
    "\1\11\1\3\4\11\2\3\17\11\1\3\71\11\1\3"+
    "\4\11\2\3\103\11\2\3\3\0\40\3\20\11\20\3"+
    "\126\11\2\3\6\11\3\3\u016c\11\2\3\21\11\1\3"+
    "\32\11\5\3\113\11\3\3\13\11\7\3\15\11\1\3"+
    "\4\11\3\0\13\3\22\11\3\0\13\3\22\11\2\0"+
    "\14\3\15\11\1\3\3\11\1\3\2\0\14\3\64\11"+
    "\40\0\3\3\1\11\3\3\2\11\1\0\2\3\12\0"+
    "\41\3\4\0\1\3\12\0\6\3\131\11\7\3\5\11"+
    "\2\0\42\11\1\0\1\11\5\3\106\11\12\3\37\11"+
    "\1\3\14\0\4\3\14\0\12\3\12\0\36\11\2\3"+
    "\5\11\13\3\54\11\4\3\32\11\6\3\12\0\46\3"+
    "\27\11\5\0\4\3\65\11\12\0\1\3\35\0\2\3"+
    "\13\0\6\3\12\0\15\3\1\11\10\3\16\0\1\3"+
    "\2\0\77\3\5\0\57\11\21\0\7\11\4\3\12\0"+
    "\21\3\11\0\14\3\3\0\36\11\15\0\2\11\12\0"+
    "\54\11\16\0\14\3\44\11\24\0\10\3\12\0\3\3"+
    "\3\11\12\0\44\11\2\3\11\11\7\3\53\11\2\3"+
    "\3\11\20\3\3\0\1\3\25\0\4\11\1\0\6\11"+
    "\1\0\2\11\3\0\1\11\5\3\300\11\72\0\1\3"+
    "\5\0\26\11\2\3\6\11\2\3\46\11\2\3\6\11"+
    "\2\3\10\11\1\3\1\11\1\3\1\11\1\3\1\11"+
    "\1\3\37\11\2\3\65\11\1\3\7\11\1\3\1\11"+
    "\3\3\3\11\1\3\7\11\3\3\4\11\2\3\6\11"+
    "\4\3\15\11\5\3\3\11\1\3\7\11\16\3\5\0"+
    "\32\3\5\0\20\3\2\11\23\3\1\11\13\3\5\0"+
    "\1\3\12\0\1\3\1\11\15\3\1\11\20\3\15\11"+
    "\3\3\40\11\20\3\15\0\4\3\1\0\3\3\14\0"+
    "\21\3\1\11\4\3\1\11\2\3\12\11\1\3\1\11"+
    "\3\3\5\11\6\3\1\11\1\3\1\11\1\3\1\11"+
    "\1\3\1\46\3\11\1\3\13\11\2\3\4\11\5\3"+
    "\5\11\4\3\1\11\21\3\51\11\u0177\3\57\11\1\3"+
    "\57\11\1\3\205\11\6\3\4\11\3\0\2\11\14\3"+
    "\46\11\1\3\1\11\5\3\1\11\2\3\70\11\7\3"+
    "\1\11\17\3\1\0\27\11\11\3\7\11\1\3\7\11"+
    "\1\3\7\11\1\3\7\11\1\3\7\11\1\3\7\11"+
    "\1\3\7\11\1\3\7\11\1\3\40\0\57\3\1\11"+
    "\325\3\3\11\31\3\11\11\6\0\1\3\5\11\2\3"+
    "\5\11\4\3\126\11\2\3\2\0\2\3\3\11\1\3"+
    "\132\11\1\3\4\11\5\3\53\11\1\3\136\11\21\3"+
    "\40\11\60\3\320\11\100\3\375\11\3\3\215\11\103\3"+
    "\56\11\2\3\15\11\3\3\20\11\12\0\2\11\24\3"+
    "\57\11\1\0\4\3\12\0\1\3\37\11\2\0\120\11"+
    "\2\0\45\3\11\11\2\3\147\11\2\3\65\11\2\3"+
    "\11\11\52\3\15\11\1\0\3\11\1\0\4\11\1\0"+
    "\27\11\5\0\4\3\1\0\13\3\1\11\7\3\64\11"+
    "\14\3\2\0\62\11\22\0\12\3\12\0\6\3\22\0"+
    "\6\11\3\3\1\11\1\3\2\11\13\0\34\11\10\0"+
    "\2\3\27\11\15\0\14\3\35\11\3\3\4\0\57\11"+
    "\16\0\16\3\1\11\12\0\6\3\5\11\1\0\12\11"+
    "\12\0\5\11\1\3\51\11\16\0\11\3\3\11\1\0"+
    "\10\11\2\0\2\3\12\0\6\3\27\11\3\3\1\11"+
    "\3\0\62\11\1\0\1\11\3\0\2\11\2\0\5\11"+
    "\2\0\1\11\1\0\1\11\30\3\3\11\2\3\13\11"+
    "\5\0\2\3\3\11\2\0\12\3\6\11\2\3\6\11"+
    "\2\3\6\11\11\3\7\11\1\3\7\11\1\3\53\11"+
    "\1\3\16\11\6\3\163\11\10\0\1\3\2\0\2\3"+
    "\12\0\6\3\244\11\14\3\27\11\4\3\61\11\4\3"+
    "\156\11\2\3\152\11\46\3\7\11\14\3\5\11\5\3"+
    "\1\11\1\0\12\11\1\3\15\11\1\3\5\11\1\3"+
    "\1\11\1\3\2\11\1\3\2\11\1\3\154\11\41\3"+
    "\153\11\22\3\100\11\2\3\66\11\50\3\15\11\3\3"+
    "\20\0\20\3\20\0\3\3\2\11\30\3\3\11\31\3"+
    "\1\11\6\3\5\11\1\3\207\11\2\3\1\0\4\3"+
    "\1\11\13\3\12\0\7\3\32\11\4\3\1\11\1\3"+
    "\32\11\13\3\131\11\3\3\6\11\2\3\6\11\2\3"+
    "\6\11\2\3\3\11\3\3\2\11\3\3\2\11\22\3"+
    "\3\0\4\3\14\11\1\3\32\11\1\3\23\11\1\3"+
    "\2\11\1\3\17\11\2\3\16\11\42\3\173\11\105\3"+
    "\65\11\210\3\1\0\202\3\35\11\3\3\61\11\17\3"+
    "\1\0\37\3\40\11\15\3\36\11\5\3\46\11\5\0"+
    "\5\3\36\11\2\3\44\11\4\3\10\11\1\3\5\11"+
    "\52\3\236\11\2\3\12\0\6\3\44\11\4\3\44\11"+
    "\4\3\50\11\10\3\64\11\234\3\67\11\11\3\26\11"+
    "\12\3\10\11\230\3\6\11\2\3\1\11\1\3\54\11"+
    "\1\3\2\11\3\3\1\11\2\3\27\11\12\3\27\11"+
    "\11\3\37\11\101\3\23\11\1\3\2\11\12\3\26\11"+
    "\12\3\32\11\106\3\70\11\6\3\2\11\100\3\1\11"+
    "\3\0\1\3\2\0\5\3\4\0\4\11\1\3\3\11"+
    "\1\3\35\11\2\3\3\0\4\3\1\0\40\3\35\11"+
    "\3\3\35\11\43\3\10\11\1\3\34\11\2\0\31\3"+
    "\66\11\12\3\26\11\12\3\23\11\15\3\22\11\156\3"+
    "\111\11\67\3\63\11\15\3\63\11\15\3\44\11\4\0"+
    "\10\3\12\0\u0146\3\52\11\1\3\2\0\3\3\2\11"+
    "\116\3\35\11\12\3\1\11\10\3\26\11\13\0\137\3"+
    "\25\11\33\3\27\11\11\3\3\0\65\11\17\0\37\3"+
    "\12\0\17\3\4\0\55\11\13\0\2\3\1\0\17\3"+
    "\1\0\2\3\31\11\7\3\12\0\6\3\3\0\44\11"+
    "\16\0\1\3\12\0\4\3\1\11\2\0\1\11\10\3"+
    "\43\11\1\0\2\3\1\11\11\3\3\0\60\11\16\0"+
    "\4\11\4\3\4\0\1\3\14\0\1\11\1\3\1\11"+
    "\43\3\22\11\1\3\31\11\14\0\6\3\1\0\101\3"+
    "\7\11\1\3\1\11\1\3\4\11\1\3\17\11\1\3"+
    "\12\11\7\3\57\11\14\0\5\3\12\0\6\3\4\0"+
    "\1\3\10\11\2\3\2\11\2\3\26\11\1\3\7\11"+
    "\1\3\2\11\1\3\5\11\1\3\2\0\1\11\7\0"+
    "\2\3\2\0\2\3\3\0\2\3\1\11\6\3\1\0"+
    "\5\3\5\11\2\0\2\3\7\0\3\3\5\0\213\3"+
    "\65\11\22\0\4\11\5\3\12\0\4\3\1\0\3\11"+
    "\36\3\60\11\24\0\2\11\1\3\1\11\10\3\12\0"+
    "\246\3\57\11\7\0\2\3\11\0\27\3\4\11\2\0"+
    "\42\3\60\11\21\0\3\3\1\11\13\3\12\0\46\3"+
    "\53\11\15\0\1\11\7\3\12\0\66\3\33\11\2\3"+
    "\17\0\4\3\12\0\306\3\54\11\17\0\145\3\100\11"+
    "\12\0\25\3\10\11\2\3\1\11\2\3\10\11\1\3"+
    "\2\11\1\3\30\11\6\0\1\3\2\0\2\3\4\0"+
    "\1\11\1\0\1\11\2\0\14\3\12\0\106\3\10\11"+
    "\2\3\47\11\7\0\2\3\7\0\1\11\1\3\1\11"+
    "\1\0\33\3\1\11\12\0\50\11\7\0\1\11\4\0"+
    "\10\3\1\0\10\3\1\11\13\0\56\11\20\0\3\3"+
    "\1\11\42\3\71\11\7\3\11\11\1\3\45\11\10\0"+
    "\1\3\10\0\1\11\17\3\12\0\30\3\36\11\2\3"+
    "\26\0\1\3\16\0\111\3\7\11\1\3\2\11\1\3"+
    "\46\11\6\0\3\3\1\0\1\3\2\0\1\3\7\0"+
    "\1\11\1\0\10\3\12\0\6\3\6\11\1\3\2\11"+
    "\1\3\40\11\5\0\1\3\2\0\1\3\5\0\1\11"+
    "\7\3\12\0\u0136\3\23\11\4\0\271\3\1\11\54\3"+
    "\4\11\37\3\232\11\146\3\157\11\21\3\304\11\274\3"+
    "\57\11\1\3\11\0\307\3\107\11\271\3\71\11\7\3"+
    "\37\11\1\3\12\0\146\3\36\11\2\3\5\0\13\3"+
    "\60\11\7\0\11\3\4\11\14\3\12\0\11\3\25\11"+
    "\5\3\23\11\260\3\100\11\200\3\113\11\4\3\1\0"+
    "\1\11\67\0\7\3\4\0\15\11\100\3\2\11\1\3"+
    "\1\11\1\0\13\3\2\0\16\3\370\11\10\3\326\11"+
    "\52\3\11\11\367\3\37\11\61\3\3\11\21\3\4\11"+
    "\10\3\u018c\11\4\3\153\11\5\3\15\11\3\3\11\11"+
    "\7\3\12\11\3\3\2\0\1\3\4\0\301\3\5\0"+
    "\3\3\26\0\2\3\7\0\36\3\4\0\224\3\3\0"+
    "\273\3\125\11\1\3\107\11\1\3\2\11\2\3\1\11"+
    "\2\3\2\11\2\3\4\11\1\3\14\11\1\3\1\11"+
    "\1\3\7\11\1\3\101\11\1\3\4\11\2\3\10\11"+
    "\1\3\7\11\1\3\34\11\1\3\4\11\1\3\5\11"+
    "\1\3\1\11\3\3\7\11\1\3\u0154\11\2\3\31\11"+
    "\1\3\31\11\1\3\37\11\1\3\31\11\1\3\37\11"+
    "\1\3\31\11\1\3\37\11\1\3\31\11\1\3\37\11"+
    "\1\3\31\11\1\3\10\11\2\3\151\0\4\3\62\0"+
    "\10\3\1\0\16\3\1\0\26\3\5\0\1\3\17\0"+
    "\120\3\7\0\1\3\21\0\2\3\7\0\1\3\2\0"+
    "\1\3\5\0\325\3\55\11\3\3\7\0\7\11\2\3"+
    "\12\0\4\3\1\11\u0171\3\54\11\16\0\5\3\306\11"+
    "\13\3\7\0\51\3\104\11\7\0\1\11\4\3\12\0"+
    "\u0156\3\1\11\117\3\4\11\1\3\33\11\1\3\2\11"+
    "\1\3\1\11\2\3\1\11\1\3\12\11\1\3\4\11"+
    "\1\3\1\11\1\3\1\11\6\3\1\11\4\3\1\11"+
    "\1\3\1\11\1\3\1\11\1\3\3\11\1\3\2\11"+
    "\1\3\1\11\2\3\1\11\1\3\1\11\1\3\1\11"+
    "\1\3\1\11\1\3\1\11\1\3\2\11\1\3\1\11"+
    "\2\3\4\11\1\3\7\11\1\3\4\11\1\3\4\11"+
    "\1\3\1\11\1\3\12\11\1\3\21\11\5\3\3\11"+
    "\1\3\5\11\1\3\21\11\u0134\3\12\0\6\3\336\11"+
    "\42\3\65\11\13\3\336\11\2\3\u0182\11\16\3\u0131\11"+
    "\37\3\36\11\342\3\113\11\266\3\1\0\36\3\140\0"+
    "\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\2\23\1\24\1\25\1\26"+
    "\1\27\1\30\22\7\1\31\1\32\1\33\1\34\1\35"+
    "\1\2\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\40\1\44\1\1\1\3\2\1\1\2\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\2\0"+
    "\1\56\1\57\1\0\1\60\1\61\1\62\6\7\1\63"+
    "\1\7\1\64\4\7\1\65\1\7\1\66\1\67\1\7"+
    "\1\70\1\64\1\71\1\72\3\7\1\73\6\7\1\74"+
    "\1\0\2\75\6\0\2\76\1\0\1\7\1\77\10\7"+
    "\1\100\2\7\1\101\2\7\1\102\1\0\1\7\1\71"+
    "\1\103\1\104\1\105\3\7\1\106\2\7\1\107\2\0"+
    "\1\110\1\111\2\76\2\0\1\112\1\0\2\7\1\113"+
    "\4\7\1\114\4\7\1\0\1\7\1\0\2\7\1\115"+
    "\1\0\1\7\1\116\1\0\1\112\1\0\1\117\1\120"+
    "\1\121\1\122\3\7\1\0\1\64\3\7\3\0\2\7"+
    "\1\123\1\124\1\125\1\0\3\7\1\0\3\7\1\104"+
    "\2\0\1\126\1\127\1\0\2\7\1\130\1\0\1\131"+
    "\2\7\3\0\1\132\1\133\1\0\1\134\6\0\1\72"+
    "\1\104\12\0\1\66\16\0\1\135\2\0\2\136\11\0"+
    "\1\71\2\0\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u01e0\0\u01e0\0\u0294\0\u01e0\0\u02d0"+
    "\0\u01e0\0\u01e0\0\u01e0\0\u030c\0\u0348\0\u01e0\0\u0384\0\u01e0"+
    "\0\u03c0\0\u03fc\0\u0438\0\u01e0\0\u01e0\0\u0474\0\u04b0\0\u04ec"+
    "\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac"+
    "\0\u08e8\0\u0924\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u0960"+
    "\0\u01e0\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u01e0"+
    "\0\u01e0\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u01e0\0\u01e0"+
    "\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u0c30"+
    "\0\u0c6c\0\u01e0\0\u0ca8\0\u0ce4\0\u01e0\0\u01e0\0\u01e0\0\u0d20"+
    "\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00"+
    "\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u0294\0\u102c\0\u1068\0\u0294"+
    "\0\u10a4\0\u0294\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c"+
    "\0\u0294\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u01e0"+
    "\0\u09d8\0\u0a14\0\u0a8c\0\u0ac8\0\u13b0\0\u13ec\0\u1428\0\u1464"+
    "\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u0294\0\u15cc\0\u1608"+
    "\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u0294\0\u17ac"+
    "\0\u17e8\0\u0294\0\u1824\0\u1860\0\u0294\0\u189c\0\u18d8\0\u0294"+
    "\0\u0294\0\u0294\0\u1914\0\u1950\0\u198c\0\u19c8\0\u0294\0\u1a04"+
    "\0\u1a40\0\u0294\0\u1a7c\0\u1ab8\0\u01e0\0\u01e0\0\u01e0\0\u1af4"+
    "\0\u14dc\0\u1b30\0\u14dc\0\u1b6c\0\u1ba8\0\u1be4\0\u0294\0\u1c20"+
    "\0\u1c5c\0\u1c98\0\u1cd4\0\u0294\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4"+
    "\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u0294\0\u1f2c\0\u1f68"+
    "\0\u01e0\0\u1fa4\0\u01e0\0\u1fe0\0\u01e0\0\u0294\0\u0294\0\u0294"+
    "\0\u201c\0\u2058\0\u2094\0\u20d0\0\u0294\0\u210c\0\u2148\0\u2184"+
    "\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u0294\0\u01e0"+
    "\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc"+
    "\0\u01e0\0\u2508\0\u2544\0\u0294\0\u0294\0\u2580\0\u25bc\0\u25f8"+
    "\0\u0294\0\u2634\0\u0294\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760"+
    "\0\u0294\0\u0294\0\u279c\0\u0294\0\u27d8\0\u2814\0\u2850\0\u288c"+
    "\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c"+
    "\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c"+
    "\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c"+
    "\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u01e0\0\u2f94\0\u2fd0"+
    "\0\u01e0\0\u300c\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174"+
    "\0\u31b0\0\u31ec\0\u3228\0\u01e0\0\u3264\0\u32a0\0\u01e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\2\12\1\11\2\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\11\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\16\1\50\1\16\1\51\1\52\1\53"+
    "\1\54\2\16\1\55\1\56\1\57\1\16\1\60\1\61"+
    "\1\62\1\16\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\7\72\1\73\1\74\63\72\10\75\1\76\3\75"+
    "\1\77\57\75\7\11\1\100\100\11\1\101\60\11\2\12"+
    "\1\11\2\12\66\11\1\102\2\103\1\102\2\103\14\102"+
    "\1\104\6\102\1\105\42\102\1\11\2\12\1\11\2\12"+
    "\14\11\1\106\51\11\75\0\2\12\1\0\2\12\120\0"+
    "\1\107\41\0\1\16\10\0\1\16\11\0\1\110\1\0"+
    "\2\16\6\0\30\16\22\0\1\111\16\0\1\112\73\0"+
    "\1\113\61\0\1\114\11\0\1\115\63\0\1\116\7\0"+
    "\1\117\60\0\1\120\4\0\1\121\5\0\1\122\64\0"+
    "\1\123\73\0\1\123\1\0\2\33\53\0\1\124\23\0"+
    "\1\125\73\0\1\126\73\0\1\127\41\0\1\16\10\0"+
    "\1\16\11\0\1\110\1\0\2\16\6\0\1\16\1\130"+
    "\12\16\1\131\13\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\110\1\0\2\16\6\0\20\16\1\132\7\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\110\1\0\2\16\6\0"+
    "\1\133\14\16\1\134\12\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\110\1\0\2\16\6\0\4\16\1\135\10\16"+
    "\1\136\12\16\7\0\1\16\10\0\1\16\11\0\1\110"+
    "\1\0\2\16\6\0\12\16\1\137\4\16\1\140\10\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\110\1\0\2\16"+
    "\6\0\1\141\7\16\1\142\4\16\1\143\5\16\1\144"+
    "\4\16\7\0\1\16\10\0\1\16\11\0\1\110\1\0"+
    "\2\16\6\0\4\16\1\145\13\16\1\146\1\16\1\147"+
    "\5\16\7\0\1\16\10\0\1\16\11\0\1\110\1\0"+
    "\2\16\6\0\5\16\1\150\5\16\1\151\1\152\4\16"+
    "\1\153\6\16\7\0\1\16\10\0\1\16\11\0\1\110"+
    "\1\0\2\16\6\0\4\16\1\154\15\16\1\155\5\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\110\1\0\2\16"+
    "\6\0\15\16\1\156\12\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\110\1\0\2\16\6\0\4\16\1\157\10\16"+
    "\1\160\12\16\7\0\1\16\10\0\1\16\11\0\1\110"+
    "\1\0\2\16\6\0\20\16\1\161\7\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\110\1\0\2\16\6\0\4\16"+
    "\1\162\23\16\7\0\1\16\10\0\1\16\11\0\1\110"+
    "\1\0\2\16\6\0\25\16\1\163\2\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\110\1\0\2\16\6\0\20\16"+
    "\1\164\7\16\7\0\1\16\10\0\1\16\11\0\1\110"+
    "\1\0\2\16\6\0\1\165\27\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\110\1\0\2\16\6\0\7\16\1\166"+
    "\20\16\7\0\1\16\10\0\1\16\11\0\1\110\1\0"+
    "\2\16\6\0\15\16\1\167\12\16\101\0\1\170\1\0"+
    "\7\72\1\171\1\172\63\72\7\0\1\72\74\0\1\72"+
    "\63\0\10\75\1\173\3\75\1\174\57\75\10\0\1\75"+
    "\77\0\1\75\57\0\22\102\1\0\6\102\1\0\43\102"+
    "\2\103\1\102\2\103\14\102\1\0\6\102\1\0\42\102"+
    "\22\0\1\175\57\0\1\176\107\0\1\177\51\0\17\120"+
    "\1\200\54\120\1\201\1\121\1\202\1\201\1\203\1\121"+
    "\66\201\25\0\2\123\67\0\1\204\51\0\1\16\10\0"+
    "\1\16\11\0\1\110\1\0\2\16\6\0\15\16\1\205"+
    "\12\16\7\0\1\16\10\0\1\16\11\0\1\110\1\0"+
    "\2\16\6\0\3\16\1\206\24\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\110\1\0\2\16\6\0\4\16\1\207"+
    "\23\16\7\0\1\16\10\0\1\16\11\0\1\110\1\0"+
    "\2\16\6\0\21\16\1\210\1\211\5\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\110\1\0\2\16\6\0\14\16"+
    "\1\212\13\16\7\0\1\16\10\0\1\16\11\0\1\110"+
    "\1\0\2\16\6\0\5\16\1\213\22\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\110\1\0\2\16\6\0\4\16"+
    "\1\214\23\16\7\0\1\16\10\0\1\16\11\0\1\110"+
    "\1\0\2\16\6\0\21\16\1\215\6\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\110\1\0\2\16\6\0\23\16"+
    "\1\216\1\217\3\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\110\1\0\2\16\6\0\12\16\1\220\15\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\110\1\0\2\16\6\0"+
    "\14\16\1\221\13\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\110\1\0\2\16\6\0\20\16\1\222\7\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\110\1\0\2\16\6\0"+
    "\14\16\1\223\13\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\110\1\0\2\16\6\0\4\16\1\224\23\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\110\1\0\2\16\6\0"+
    "\4\16\1\145\23\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\110\1\0\2\16\6\0\16\16\1\225\11\16\7\0"+
    "\1\16\4\0\1\226\3\0\1\16\11\0\1\110\1\0"+
    "\2\16\6\0\30\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\110\1\0\2\16\6\0\21\16\1\227\6\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\110\1\0\2\16\6\0"+
    "\4\16\1\230\23\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\110\1\0\2\16\6\0\3\16\1\231\24\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\110\1\0\2\16\6\0"+
    "\17\16\1\232\10\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\110\1\0\2\16\6\0\22\16\1\233\5\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\110\1\0\2\16\6\0"+
    "\22\16\1\234\5\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\110\1\0\2\16\6\0\10\16\1\235\17\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\110\1\0\2\16\6\0"+
    "\23\16\1\236\3\16\1\237\7\0\1\16\10\0\1\16"+
    "\11\0\1\110\1\0\2\16\6\0\20\16\1\240\7\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\110\1\0\2\16"+
    "\6\0\10\16\1\241\17\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\110\1\0\2\16\6\0\20\16\1\242\7\16"+
    "\31\0\1\243\73\0\1\244\104\0\1\245\40\0\17\120"+
    "\1\200\4\120\1\246\47\120\2\201\1\247\1\201\1\250"+
    "\67\201\1\0\2\251\1\0\2\251\26\0\1\252\37\0"+
    "\1\201\1\121\1\253\1\201\1\203\1\121\66\201\22\0"+
    "\1\254\51\0\1\16\10\0\1\16\11\0\1\110\1\0"+
    "\2\16\6\0\20\16\1\255\7\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\110\1\0\2\16\6\0\1\256\27\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\110\1\0\2\16"+
    "\6\0\4\16\1\257\23\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\110\1\0\2\16\6\0\2\16\1\260\25\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\110\1\0\2\16"+
    "\6\0\22\16\1\261\5\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\110\1\0\2\16\6\0\1\262\27\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\110\1\0\2\16\6\0"+
    "\21\16\1\263\6\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\110\1\0\2\16\6\0\4\16\1\264\23\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\110\1\0\2\16\6\0"+
    "\1\265\27\16\7\0\1\16\10\0\1\16\11\0\1\110"+
    "\1\0\2\16\6\0\21\16\1\236\6\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\110\1\0\2\16\6\0\1\266"+
    "\27\16\7\0\1\16\10\0\1\16\11\0\1\110\1\0"+
    "\2\16\6\0\2\16\1\267\25\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\110\1\0\2\16\6\0\1\270\27\16"+
    "\60\0\1\271\22\0\1\16\10\0\1\16\11\0\1\110"+
    "\1\0\2\16\6\0\21\16\1\272\6\16\7\0\1\16"+
    "\4\0\1\273\3\0\1\16\11\0\1\110\1\0\2\16"+
    "\6\0\30\16\7\0\1\16\10\0\1\16\11\0\1\110"+
    "\1\0\2\16\6\0\23\16\1\274\4\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\110\1\0\2\16\6\0\22\16"+
    "\1\275\5\16\7\0\1\16\10\0\1\16\11\0\1\110"+
    "\1\0\2\16\6\0\4\16\1\276\23\16\7\0\1\16"+
    "\2\277\1\0\2\277\3\0\1\16\11\0\1\110\1\0"+
    "\2\16\6\0\30\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\110\1\0\2\16\6\0\12\16\1\300\15\16\42\0"+
    "\1\301\62\0\1\302\51\0\2\201\1\303\1\201\1\250"+
    "\67\201\37\0\1\304\56\0\1\305\51\0\1\16\10\0"+
    "\1\16\11\0\1\110\1\0\2\16\6\0\22\16\1\306"+
    "\5\16\7\0\1\16\10\0\1\16\11\0\1\110\1\0"+
    "\2\16\6\0\11\16\1\307\16\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\110\1\0\2\16\6\0\7\16\1\310"+
    "\20\16\7\0\1\16\10\0\1\16\11\0\1\110\1\0"+
    "\2\16\6\0\1\311\7\16\1\312\17\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\110\1\0\2\16\6\0\23\16"+
    "\1\313\4\16\7\0\1\16\4\0\1\314\3\0\1\16"+
    "\11\0\1\110\1\0\2\16\6\0\30\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\110\1\0\2\16\6\0\12\16"+
    "\1\315\15\16\7\0\1\16\10\0\1\16\11\0\1\110"+
    "\1\0\2\16\6\0\12\16\1\316\15\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\110\1\0\2\16\6\0\22\16"+
    "\1\317\5\16\7\0\1\16\10\0\1\16\11\0\1\110"+
    "\1\0\2\16\6\0\22\16\1\320\5\16\61\0\1\321"+
    "\21\0\1\16\4\0\1\322\3\0\1\16\11\0\1\110"+
    "\1\0\2\16\6\0\30\16\50\0\1\323\32\0\1\16"+
    "\10\0\1\16\11\0\1\110\1\0\2\16\6\0\20\16"+
    "\1\324\7\16\7\0\1\16\10\0\1\16\11\0\1\110"+
    "\1\0\2\16\6\0\2\16\1\325\25\16\10\0\2\277"+
    "\1\0\2\277\3\0\1\326\23\0\30\326\7\0\1\16"+
    "\10\0\1\16\11\0\1\110\1\0\2\16\6\0\4\16"+
    "\1\327\23\16\31\0\1\330\113\0\1\331\31\0\1\16"+
    "\10\0\1\16\11\0\1\110\1\0\2\16\6\0\10\16"+
    "\1\332\17\16\7\0\1\16\10\0\1\16\11\0\1\110"+
    "\1\0\2\16\6\0\14\16\1\333\13\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\110\1\0\2\16\6\0\12\16"+
    "\1\334\15\16\60\0\1\335\22\0\1\16\10\0\1\16"+
    "\11\0\1\110\1\0\2\16\6\0\12\16\1\336\15\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\110\1\0\2\16"+
    "\6\0\10\16\1\337\17\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\110\1\0\2\16\6\0\4\16\1\340\23\16"+
    "\66\0\1\341\73\0\1\342\70\0\1\343\17\0\1\16"+
    "\10\0\1\16\11\0\1\110\1\0\2\16\6\0\14\16"+
    "\1\344\13\16\7\0\1\16\10\0\1\16\11\0\1\110"+
    "\1\0\2\16\6\0\7\16\1\345\20\16\7\0\1\326"+
    "\10\0\1\326\13\0\2\326\6\0\30\326\57\0\1\346"+
    "\23\0\1\16\10\0\1\16\11\0\1\110\1\0\2\16"+
    "\6\0\14\16\1\347\13\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\110\1\0\2\16\6\0\23\16\1\350\4\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\110\1\0\2\16"+
    "\6\0\22\16\1\351\5\16\61\0\1\352\21\0\1\16"+
    "\10\0\1\16\11\0\1\110\1\0\2\16\6\0\27\16"+
    "\1\353\7\0\1\16\10\0\1\16\11\0\1\110\1\0"+
    "\2\16\6\0\15\16\1\354\12\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\110\1\0\2\16\6\0\20\16\1\355"+
    "\7\16\53\0\1\356\107\0\1\357\62\0\1\360\24\0"+
    "\1\16\10\0\1\16\11\0\1\110\1\0\2\16\6\0"+
    "\21\16\1\361\6\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\110\1\0\2\16\6\0\4\16\1\362\23\16\66\0"+
    "\1\363\14\0\1\16\10\0\1\16\11\0\1\110\1\0"+
    "\2\16\6\0\14\16\1\364\13\16\7\0\1\16\4\0"+
    "\1\365\3\0\1\16\11\0\1\110\1\0\2\16\6\0"+
    "\30\16\44\0\1\366\73\0\1\367\117\0\1\370\17\0"+
    "\1\371\145\0\1\372\65\0\1\373\71\0\1\374\61\0"+
    "\1\375\75\0\1\376\100\0\1\377\34\0\1\u0100\144\0"+
    "\1\341\72\0\1\u0101\70\0\1\u0102\56\0\1\u0103\110\0"+
    "\1\u0104\66\0\1\u0105\77\0\1\u0106\73\0\1\u0107\77\0"+
    "\1\u0108\53\0\1\u0109\115\0\1\u010a\21\0\1\u010b\73\0"+
    "\1\u010c\124\0\1\u010d\72\0\1\u010e\110\0\1\u010f\62\0"+
    "\1\u0110\101\0\1\u0111\71\0\1\u0112\103\0\1\u0113\72\0"+
    "\1\u0114\60\0\1\u0115\103\0\1\u0116\27\0\1\u0117\146\0"+
    "\1\u0118\13\0\2\u0115\1\u0119\1\u0115\1\u011a\67\u0115\41\0"+
    "\1\u011b\67\0\1\u011c\40\0\1\u0119\145\0\1\u011d\66\0"+
    "\1\u011e\104\0\1\u011f\20\0\1\u0120\123\0\1\u0121\115\0"+
    "\1\u0122\63\0\1\u0123\76\0\1\u0124\26\0\1\u0125\145\0"+
    "\1\u0126\66\0\1\u0127\21\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13020];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\1\0\1\11\2\1\2\11\1\1\1\11"+
    "\1\1\3\11\2\1\1\11\1\1\1\11\3\1\2\11"+
    "\25\1\5\11\1\1\1\11\6\1\2\11\5\1\11\11"+
    "\2\0\1\11\1\1\1\0\3\11\40\1\1\11\1\0"+
    "\2\1\6\0\2\1\1\0\21\1\1\0\14\1\2\0"+
    "\3\11\1\1\2\0\1\1\1\0\14\1\1\0\1\1"+
    "\1\0\3\1\1\0\1\1\1\11\1\0\1\11\1\0"+
    "\1\11\6\1\1\0\4\1\3\0\4\1\1\11\1\0"+
    "\3\1\1\0\3\1\1\11\2\0\2\1\1\0\3\1"+
    "\1\0\3\1\3\0\2\1\1\0\1\1\6\0\2\1"+
    "\12\0\1\1\16\0\1\11\2\0\1\11\1\1\11\0"+
    "\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  Project myProject;
  final CfscriptLexerConfiguration myCurrentConfiguration = new CfscriptLexerConfiguration();

  public class CfscriptLexerConfiguration {
      public int mySharpCounter = 0;
      public int myCommentCounter = 0;
      public Stack<Integer> myReturnStack = new Stack<>();

      public CfscriptLexerConfiguration() {}

      public CfscriptLexerConfiguration(int sharpCounter, int commentCounter,
                                        Stack<Integer> returnStack) {
          mySharpCounter = sharpCounter;
          myCommentCounter = commentCounter;
          myReturnStack = returnStack;
      }

      public void reset() {
          mySharpCounter = 0;
          myCommentCounter = 0;
          myReturnStack.clear();
      }
  }

  public _CfscriptLexer8(Project project) {
    this((java.io.Reader)null);
    myProject = project;
  }
  private IElementType startComment(int stateToReturnTo) {
    myCurrentConfiguration.myCommentCounter = 0;
    myCurrentConfiguration.myReturnStack.push(stateToReturnTo);
    myCurrentConfiguration.myCommentCounter++;
    yybegin(COMMENT);
    return CfmlTokenTypes.COMMENT;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _CfscriptLexer8(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yychar = start;
    myCurrentConfiguration.reset();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return CfmlTokenTypes.COMMENT;
            }
          // fall through
          case 95: break;
          case 2:
            { return CfscriptTokenTypes.BAD_CHARACTER;
            }
          // fall through
          case 96: break;
          case 3:
            { return CfscriptTokenTypes.WHITE_SPACE;
            }
          // fall through
          case 97: break;
          case 4:
            { return CfscriptTokenTypes.NOT;
            }
          // fall through
          case 98: break;
          case 5:
            { yybegin(DOUBLE_QUOTED_STRING);
    return CfmlTokenTypes.DOUBLE_QUOTE;
            }
          // fall through
          case 99: break;
          case 6:
            { if (myCurrentConfiguration.mySharpCounter == 0) {
        myCurrentConfiguration.myReturnStack.push(YYINITIAL);
        myCurrentConfiguration.mySharpCounter = 1;
        return CfscriptTokenTypes.OPENSHARP;
    }
    myCurrentConfiguration.mySharpCounter--;
    yybegin(myCurrentConfiguration.myReturnStack.pop());
    return CfscriptTokenTypes.CLOSESHARP;
            }
          // fall through
          case 100: break;
          case 7:
            { return CfscriptTokenTypes.IDENTIFIER;
            }
          // fall through
          case 101: break;
          case 8:
            { return CfscriptTokenTypes.MOD;
            }
          // fall through
          case 102: break;
          case 9:
            { return CfscriptTokenTypes.CONCAT;
            }
          // fall through
          case 103: break;
          case 10:
            { yybegin(SINGLE_QUOTED_STRING);
    return CfmlTokenTypes.SINGLE_QUOTE;
            }
          // fall through
          case 104: break;
          case 11:
            { return CfscriptTokenTypes.L_BRACKET;
            }
          // fall through
          case 105: break;
          case 12:
            { return CfscriptTokenTypes.R_BRACKET;
            }
          // fall through
          case 106: break;
          case 13:
            { return CfscriptTokenTypes.MUL;
            }
          // fall through
          case 107: break;
          case 14:
            { return CfscriptTokenTypes.ADD;
            }
          // fall through
          case 108: break;
          case 15:
            { return CfscriptTokenTypes.COMMA;
            }
          // fall through
          case 109: break;
          case 16:
            { return CfscriptTokenTypes.MINUS;
            }
          // fall through
          case 110: break;
          case 17:
            { return CfscriptTokenTypes.POINT;
            }
          // fall through
          case 111: break;
          case 18:
            { return CfscriptTokenTypes.DEV;
            }
          // fall through
          case 112: break;
          case 19:
            { return CfscriptTokenTypes.INTEGER;
            }
          // fall through
          case 113: break;
          case 20:
            { return CfscriptTokenTypes.DOTDOT;
            }
          // fall through
          case 114: break;
          case 21:
            { return CfscriptTokenTypes.SEMICOLON;
            }
          // fall through
          case 115: break;
          case 22:
            { return CfscriptTokenTypes.LT;
            }
          // fall through
          case 116: break;
          case 23:
            { return CfmlTokenTypes.ASSIGN;
            }
          // fall through
          case 117: break;
          case 24:
            { return CfscriptTokenTypes.GT;
            }
          // fall through
          case 118: break;
          case 25:
            { return CfscriptTokenTypes.L_SQUAREBRACKET;
            }
          // fall through
          case 119: break;
          case 26:
            { return CfscriptTokenTypes.INT_DEV;
            }
          // fall through
          case 120: break;
          case 27:
            { return CfscriptTokenTypes.R_SQUAREBRACKET;
            }
          // fall through
          case 121: break;
          case 28:
            { return CfscriptTokenTypes.POW;
            }
          // fall through
          case 122: break;
          case 29:
            { return CfscriptTokenTypes.L_CURLYBRACKET;
            }
          // fall through
          case 123: break;
          case 30:
            { return CfscriptTokenTypes.R_CURLYBRACKET;
            }
          // fall through
          case 124: break;
          case 31:
            { yybegin(DOUBLEQUOTE_CLOSER); return CfmlTokenTypes.STRING_TEXT;
            }
          // fall through
          case 125: break;
          case 32:
            { yybegin(YYINITIAL); return CfmlTokenTypes.DOUBLE_QUOTE_CLOSER;
            }
          // fall through
          case 126: break;
          case 33:
            { myCurrentConfiguration.myReturnStack.push(DOUBLE_QUOTED_STRING);
    myCurrentConfiguration.mySharpCounter++;
    yybegin(YYINITIAL);
    return CfscriptTokenTypes.OPENSHARP;
            }
          // fall through
          case 127: break;
          case 34:
            { yybegin(SINGLEQUOTE_CLOSER); return CfmlTokenTypes.STRING_TEXT;
            }
          // fall through
          case 128: break;
          case 35:
            { myCurrentConfiguration.myReturnStack.push(SINGLE_QUOTED_STRING);
    myCurrentConfiguration.mySharpCounter++;
    yybegin(YYINITIAL);
    return CfscriptTokenTypes.OPENSHARP;
            }
          // fall through
          case 129: break;
          case 36:
            { yybegin(YYINITIAL); return CfmlTokenTypes.SINGLE_QUOTE_CLOSER;
            }
          // fall through
          case 130: break;
          case 37:
            { return CfscriptTokenTypes.NEQ;
            }
          // fall through
          case 131: break;
          case 38:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { if (ArrayUtil.find(CfmlUtil.getVariableScopes(myProject), StringUtil.toLowerCase(yytext().toString())) != -1) {
        return CfscriptTokenTypes.SCOPE_KEYWORD;
    } else {
        return CfscriptTokenTypes.IDENTIFIER;
    }
            }
          // fall through
          case 132: break;
          case 39:
            { return CfscriptTokenTypes.AND;
            }
          // fall through
          case 133: break;
          case 40:
            { return CfscriptTokenTypes.CONCAT_EQ;
            }
          // fall through
          case 134: break;
          case 41:
            { return CfscriptTokenTypes.MUL_EQ;
            }
          // fall through
          case 135: break;
          case 42:
            { return CfscriptTokenTypes.INC;
            }
          // fall through
          case 136: break;
          case 43:
            { return CfscriptTokenTypes.ADD_EQ;
            }
          // fall through
          case 137: break;
          case 44:
            { return CfscriptTokenTypes.DEC;
            }
          // fall through
          case 138: break;
          case 45:
            { return CfscriptTokenTypes.MINUS_EQ;
            }
          // fall through
          case 139: break;
          case 46:
            { return CfscriptTokenTypes.DEV_EQ;
            }
          // fall through
          case 140: break;
          case 47:
            { return CfscriptTokenTypes.DOUBLE;
            }
          // fall through
          case 141: break;
          case 48:
            { return CfscriptTokenTypes.LTE;
            }
          // fall through
          case 142: break;
          case 49:
            { return CfscriptTokenTypes.EQEQ;
            }
          // fall through
          case 143: break;
          case 50:
            { return CfscriptTokenTypes.GTE;
            }
          // fall through
          case 144: break;
          case 51:
            { return CfscriptTokenTypes.DO_KEYWORD;
            }
          // fall through
          case 145: break;
          case 52:
            { return CfscriptTokenTypes.EQ_L;
            }
          // fall through
          case 146: break;
          case 53:
            { return CfscriptTokenTypes.GE_L;
            }
          // fall through
          case 147: break;
          case 54:
            { return CfscriptTokenTypes.GT_L;
            }
          // fall through
          case 148: break;
          case 55:
            { return CfscriptTokenTypes.IF_KEYWORD;
            }
          // fall through
          case 149: break;
          case 56:
            { return CfscriptTokenTypes.IN_L;
            }
          // fall through
          case 150: break;
          case 57:
            { return CfscriptTokenTypes.LE_L;
            }
          // fall through
          case 151: break;
          case 58:
            { return CfscriptTokenTypes.LT_L;
            }
          // fall through
          case 152: break;
          case 59:
            { return CfscriptTokenTypes.OR_L;
            }
          // fall through
          case 153: break;
          case 60:
            { return CfscriptTokenTypes.OR;
            }
          // fall through
          case 154: break;
          case 61:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return CfmlTokenTypes.STRING_TEXT;
            }
          // fall through
          case 155: break;
          case 62:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return CfscriptTokenTypes.COMMENT;
            }
          // fall through
          case 156: break;
          case 63:
            { return CfscriptTokenTypes.AND_L;
            }
          // fall through
          case 157: break;
          case 64:
            { return CfscriptTokenTypes.NOT_XOR_L;
            }
          // fall through
          case 158: break;
          case 65:
            { return CfscriptTokenTypes.FOR_KEYWORD;
            }
          // fall through
          case 159: break;
          case 66:
            { return CfscriptTokenTypes.IMP_L;
            }
          // fall through
          case 160: break;
          case 67:
            { return CfscriptTokenTypes.MOD_L;
            }
          // fall through
          case 161: break;
          case 68:
            { return CfscriptTokenTypes.NEQ_L;
            }
          // fall through
          case 162: break;
          case 69:
            { return CfscriptTokenTypes.NOT_L;
            }
          // fall through
          case 163: break;
          case 70:
            { return CfscriptTokenTypes.TRY_KEYWORD;
            }
          // fall through
          case 164: break;
          case 71:
            { return CfscriptTokenTypes.XOR_L;
            }
          // fall through
          case 165: break;
          case 72:
            { yybegin(myCurrentConfiguration.myReturnStack.pop()); return CfmlTokenTypes.COMMENT;
            }
          // fall through
          case 166: break;
          case 73:
            { return CfscriptTokenTypes.COMMENT;
            }
          // fall through
          case 167: break;
          case 74:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return CfscriptTokenTypes.COMMENT;
            }
          // fall through
          case 168: break;
          case 75:
            { return CfscriptTokenTypes.CASE_KEYWORD;
            }
          // fall through
          case 169: break;
          case 76:
            { return CfscriptTokenTypes.ELSE_KEYWORD;
            }
          // fall through
          case 170: break;
          case 77:
            { return CfscriptTokenTypes.BOOLEAN;
            }
          // fall through
          case 171: break;
          case 78:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { myCurrentConfiguration.myCommentCounter--;
    if (myCurrentConfiguration.myCommentCounter == 0) {
        yybegin(COMMENTEND);
    }
    return CfmlTokenTypes.COMMENT;
            }
          // fall through
          case 172: break;
          case 79:
            { return startComment(YYINITIAL);
            }
          // fall through
          case 173: break;
          case 80:
            { return CfscriptTokenTypes.ABORT_KEYWORD;
            }
          // fall through
          case 174: break;
          case 81:
            { return CfscriptTokenTypes.BREAK_KEYWORD;
            }
          // fall through
          case 175: break;
          case 82:
            { return CfscriptTokenTypes.CATCH_KEYWORD;
            }
          // fall through
          case 176: break;
          case 83:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { return CfscriptTokenTypes.VAR_KEYWORD;
            }
          // fall through
          case 177: break;
          case 84:
            { return CfscriptTokenTypes.WHILE_KEYWORD;
            }
          // fall through
          case 178: break;
          case 85:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { myCurrentConfiguration.myCommentCounter++; return CfmlTokenTypes.COMMENT;
            }
          // fall through
          case 179: break;
          case 86:
            { return CfscriptTokenTypes.RETURN_KEYWORD;
            }
          // fall through
          case 180: break;
          case 87:
            { return CfscriptTokenTypes.SWITCH_KEYWORD;
            }
          // fall through
          case 181: break;
          case 88:
            { return CfscriptTokenTypes.DEFAULT_KEYWORD;
            }
          // fall through
          case 182: break;
          case 89:
            { return CfscriptTokenTypes.FINALLY_KEYWORD;
            }
          // fall through
          case 183: break;
          case 90:
            { return CfscriptTokenTypes.CONTAINS_L;
            }
          // fall through
          case 184: break;
          case 91:
            { return CfscriptTokenTypes.CONTINUE_KEYWORD;
            }
          // fall through
          case 185: break;
          case 92:
            { return CfscriptTokenTypes.FUNCTION_KEYWORD;
            }
          // fall through
          case 186: break;
          case 93:
            { return CfscriptTokenTypes.NOT_CONTAINS_L;
            }
          // fall through
          case 187: break;
          case 94:
            { return CfmlTokenTypes.VAR_ANNOTATION;
            }
          // fall through
          case 188: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
