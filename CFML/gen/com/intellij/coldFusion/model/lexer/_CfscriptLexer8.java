/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.intellij.coldFusion.model.lexer;

import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.coldFusion.model.lexer.CfscriptTokenTypes;
import com.intellij.coldFusion.model.lexer.CfmlTokenTypes;
import com.intellij.coldFusion.model.CfmlUtil;
import com.intellij.util.containers.Stack;
import com.intellij.util.ArrayUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ColdFusionScript8.flex</tt>
 */
class _CfscriptLexer8 implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DOUBLE_QUOTED_STRING = 2;
  public static final int SINGLE_QUOTED_STRING = 4;
  public static final int DOUBLEQUOTE_CLOSER = 6;
  public static final int SINGLEQUOTE_CLOSER = 8;
  public static final int EXPRESSION = 10;
  public static final int X = 12;
  public static final int Y = 14;
  public static final int COMMENT = 16;
  public static final int COMMENTEND = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  5,  5,  5,  5, 
     6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14848 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\10\1\11\1\14\4"+
    "\0\1\15\1\16\1\17\1\20\2\21\1\22\3\21\1\22\7\21\1\23\10\21\1\24\50\21\1\25"+
    "\1\21\1\26\1\27\1\30\1\31\2\27\16\0\1\32\1\15\1\33\1\34\2\21\1\35\11\21\1"+
    "\36\21\21\1\37\1\40\23\21\1\27\1\41\3\21\1\22\1\42\1\41\4\21\1\43\1\44\4\0"+
    "\1\45\1\46\1\27\3\21\2\47\1\27\1\50\1\51\1\0\1\52\5\21\1\53\3\0\1\54\1\55"+
    "\13\21\1\56\1\45\1\57\1\60\1\0\1\61\1\27\1\62\1\63\3\21\3\0\1\64\12\21\1\65"+
    "\1\0\1\66\1\27\1\0\1\67\3\21\1\53\1\70\1\20\2\21\1\65\1\71\1\72\1\73\2\27"+
    "\3\21\1\74\10\27\1\75\1\30\6\27\1\76\2\0\1\77\1\100\6\21\1\101\2\0\1\102\1"+
    "\21\1\103\1\0\2\41\1\104\1\105\1\106\2\21\1\75\1\107\1\110\1\111\1\112\1\62"+
    "\1\113\1\103\1\0\1\114\1\51\1\104\1\115\1\106\2\21\1\75\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\0\1\125\1\27\1\104\1\36\1\35\2\21\1\75\1\126\1"+
    "\110\1\45\1\127\1\130\1\27\1\103\1\0\1\42\1\27\1\104\1\105\1\106\2\21\1\75"+
    "\1\126\1\110\1\111\1\121\1\124\1\113\1\103\1\0\1\42\1\27\1\131\1\132\1\133"+
    "\1\134\1\135\1\132\1\21\1\136\1\137\1\140\1\141\1\27\1\124\1\0\1\27\1\42\1"+
    "\104\1\32\1\75\2\21\1\75\1\142\1\143\1\144\1\140\1\145\1\26\1\103\1\0\2\27"+
    "\1\146\1\32\1\75\2\21\1\75\1\142\1\110\1\144\1\140\1\145\1\33\1\103\1\0\1"+
    "\147\1\27\1\146\1\32\1\75\4\21\1\150\1\144\1\151\1\62\1\27\1\103\1\0\1\27"+
    "\1\40\1\146\1\21\1\22\1\40\2\21\1\35\1\152\1\22\1\153\1\154\1\0\2\27\1\155"+
    "\1\27\1\41\5\21\1\156\1\157\1\160\1\77\1\0\1\161\4\27\1\162\1\163\1\164\1"+
    "\41\1\165\1\166\1\156\1\167\1\170\1\171\1\0\1\172\4\27\1\130\2\27\1\161\1"+
    "\0\1\161\1\173\1\174\1\21\1\41\3\21\1\30\1\44\1\0\1\144\1\175\1\0\1\44\3\0"+
    "\1\50\1\176\7\27\5\21\1\53\1\0\1\177\1\0\1\161\1\65\1\200\1\201\1\202\1\203"+
    "\1\21\1\204\1\205\1\0\1\171\4\21\1\36\1\17\5\21\1\206\51\21\1\133\1\22\1\133"+
    "\5\21\1\133\4\21\1\133\1\22\1\133\1\21\1\22\7\21\1\133\10\21\1\207\4\27\2"+
    "\21\2\27\12\21\1\30\1\27\1\41\114\21\1\105\2\21\1\41\2\21\1\47\11\21\1\132"+
    "\1\130\1\27\1\21\1\32\1\210\1\27\2\21\1\210\1\27\2\21\1\211\1\27\1\21\1\32"+
    "\1\212\1\27\6\21\1\213\3\0\1\214\1\215\1\0\1\161\3\27\1\216\1\0\1\161\13\21"+
    "\1\27\5\21\1\217\10\21\1\220\1\27\3\21\1\30\1\0\1\2\1\0\1\2\1\124\1\0\3\21"+
    "\1\220\1\30\1\27\5\21\1\114\2\0\1\55\1\161\1\0\1\161\4\27\2\21\1\160\1\2\6"+
    "\21\1\175\1\77\3\0\1\111\1\0\1\161\1\0\1\161\1\43\13\27\1\221\5\21\1\213\1"+
    "\0\1\221\1\114\1\0\1\161\1\27\1\222\1\2\1\27\1\223\3\21\1\102\1\202\1\0\1"+
    "\67\4\21\1\65\1\0\1\2\1\27\4\21\1\213\2\0\1\27\1\0\1\224\1\0\1\67\3\21\1\220"+
    "\12\27\1\225\2\0\1\226\1\227\1\27\30\21\4\0\1\77\2\27\1\76\42\21\2\220\4\21"+
    "\2\220\1\21\1\230\3\21\1\220\6\21\1\32\1\170\1\231\1\30\1\232\1\114\1\21\1"+
    "\30\1\231\1\30\1\27\1\222\3\27\1\233\1\27\1\43\1\130\1\27\1\234\1\27\1\50"+
    "\1\235\1\42\1\43\2\27\1\21\1\30\3\21\1\47\2\27\1\0\1\50\1\236\1\0\1\237\1"+
    "\27\1\240\1\40\1\152\1\241\1\31\1\242\1\21\1\243\1\244\1\245\2\27\5\21\1\130"+
    "\116\27\5\21\1\22\5\21\1\22\20\21\1\30\1\246\1\247\1\27\4\21\1\36\1\17\7\21"+
    "\1\43\1\27\1\62\2\21\1\22\1\27\10\22\4\0\5\27\1\43\72\27\1\244\3\27\1\41\1"+
    "\204\1\241\1\30\1\41\11\21\1\22\1\250\1\41\12\21\1\206\1\244\4\21\1\220\1"+
    "\41\12\21\1\22\2\27\3\21\1\47\6\27\170\21\1\220\11\27\71\21\1\30\6\27\21\21"+
    "\1\30\10\27\5\21\1\220\41\21\1\30\2\21\1\0\1\247\2\27\5\21\1\160\1\76\1\251"+
    "\3\21\1\62\12\21\1\161\3\27\1\43\1\21\1\40\14\21\1\252\1\114\1\27\1\21\1\47"+
    "\11\27\1\21\1\253\1\254\2\21\1\53\2\27\1\130\6\21\1\114\1\27\1\67\5\21\1\213"+
    "\1\0\1\50\1\27\1\0\1\161\2\0\1\67\1\51\1\0\1\67\2\21\1\65\1\171\2\21\1\160"+
    "\1\0\1\2\1\27\3\21\1\30\1\100\5\21\1\53\1\0\1\237\1\43\1\0\1\161\4\27\5\21"+
    "\1\102\1\77\1\27\1\254\1\255\1\0\1\161\2\21\1\22\1\256\6\21\1\201\1\257\1"+
    "\217\2\27\1\260\1\21\1\53\1\261\1\27\3\262\1\27\2\22\22\27\4\21\1\53\1\263"+
    "\1\0\1\161\64\21\1\114\1\27\2\21\1\22\1\264\5\21\1\114\40\27\55\21\1\220\15"+
    "\21\1\26\4\27\1\22\1\27\1\264\1\265\1\21\1\75\1\22\1\170\1\266\15\21\1\26"+
    "\3\27\1\264\54\21\1\220\2\27\10\21\1\40\6\21\5\27\1\21\1\30\2\0\2\27\1\77"+
    "\1\27\1\135\2\27\1\244\3\27\1\42\1\32\20\21\1\267\1\234\1\27\1\0\1\161\1\41"+
    "\2\21\1\115\1\41\2\21\1\47\1\270\12\21\1\22\3\40\1\271\1\272\2\27\1\273\1"+
    "\21\1\142\2\21\1\22\2\21\1\274\1\21\1\220\1\21\1\220\4\27\17\21\1\47\10\27"+
    "\6\21\1\30\20\27\1\275\20\27\3\21\1\30\6\21\1\130\5\27\3\21\1\22\2\27\3\21"+
    "\1\47\6\27\3\21\1\220\4\21\1\114\1\21\1\241\5\27\23\21\1\220\1\0\1\161\52"+
    "\27\1\220\1\75\4\21\1\36\1\276\2\21\1\220\25\27\2\21\1\220\1\27\3\21\1\26"+
    "\10\27\7\21\1\270\10\27\1\277\1\76\1\142\1\41\2\21\1\114\1\120\4\27\3\21\1"+
    "\30\20\27\6\21\1\220\1\27\2\21\1\220\1\27\2\21\1\47\21\27\11\21\1\130\66\27"+
    "\1\223\6\21\1\0\1\77\3\27\1\124\1\0\2\27\1\223\5\21\1\0\1\300\2\27\3\21\1"+
    "\130\1\0\1\161\1\223\3\21\1\160\1\0\1\144\1\0\10\27\1\223\5\21\1\53\1\0\1"+
    "\301\1\27\1\0\1\161\24\27\5\21\1\53\1\0\1\27\1\0\1\161\46\27\55\21\1\22\22"+
    "\27\14\21\1\47\63\27\5\21\1\22\72\27\7\21\1\130\130\27\10\21\1\30\1\27\1\102"+
    "\4\0\1\77\1\27\1\62\1\223\1\21\14\27\1\26\153\27\1\302\1\303\2\0\1\304\1\2"+
    "\3\27\1\305\22\27\1\306\67\27\12\21\1\32\10\21\1\32\1\307\1\310\1\21\1\311"+
    "\1\142\7\21\1\36\1\312\2\32\3\21\1\313\1\170\1\40\1\75\51\21\1\220\3\21\1"+
    "\75\2\21\1\206\3\21\1\206\2\21\1\32\3\21\1\32\2\21\1\22\3\21\1\22\3\21\1\75"+
    "\3\21\1\75\2\21\1\206\1\314\6\0\1\142\3\21\1\162\1\41\1\206\1\315\1\240\1"+
    "\316\1\162\1\230\1\162\2\206\1\123\1\21\1\35\1\21\1\114\1\317\1\35\1\21\1"+
    "\114\50\27\32\21\1\22\5\27\106\21\1\30\1\27\33\21\1\220\74\27\1\122\3\27\14"+
    "\0\20\27\36\0\2\27");

  /* The ZZ_CMAP_A table has 1664 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\6\1\7\1\21\1\0\1\7\1\20\6\6\4\0\1\72\1\2\1\15\1\17\1\5\1\63\1\47\1\16"+
    "\1\52\1\53\1\23\1\62\1\51\1\3\1\12\1\22\1\10\11\11\1\61\1\60\1\1\1\50\1\4"+
    "\1\0\1\24\1\32\1\34\1\25\1\41\1\35\1\26\1\73\1\45\1\13\1\5\1\36\1\30\1\27"+
    "\1\14\1\37\1\71\1\70\1\33\1\43\1\40\1\42\1\31\1\44\1\67\1\46\1\5\1\54\1\64"+
    "\1\55\1\65\1\5\1\0\1\32\1\34\1\25\1\41\1\35\1\26\1\73\1\67\1\46\1\5\1\56\1"+
    "\66\1\57\1\0\1\6\2\0\4\5\4\0\1\5\2\0\1\6\7\0\1\5\4\0\1\5\5\0\17\5\1\0\2\13"+
    "\15\5\1\43\2\5\4\0\4\5\16\0\5\5\7\0\1\5\1\0\1\5\1\0\5\5\1\0\2\5\6\0\1\5\1"+
    "\0\3\5\1\0\1\5\1\0\4\5\1\0\13\5\1\0\3\5\1\0\5\6\2\0\6\5\1\0\7\5\1\0\1\5\15"+
    "\0\1\5\1\0\15\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6\3\5\5\0\5\6\6\0\1\5\4\0\3"+
    "\6\5\0\3\5\7\6\4\0\2\5\1\6\13\5\1\0\1\5\7\6\2\5\2\6\1\0\4\6\2\5\2\6\3\5\2"+
    "\0\1\5\7\0\1\6\1\5\1\6\6\5\3\6\2\0\11\5\3\6\1\5\6\0\2\6\6\5\4\6\2\5\2\0\2"+
    "\6\1\5\11\6\1\5\3\6\1\5\5\6\2\0\1\5\3\6\4\0\1\5\1\0\6\5\4\0\13\6\1\0\4\6\6"+
    "\5\3\6\1\5\2\6\1\5\7\6\2\5\2\6\2\0\2\6\1\0\3\6\1\0\10\5\2\0\2\5\2\0\6\5\1"+
    "\0\1\5\3\0\4\5\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6\1\5\5\0\2\5\1\0\5\5\4\0\3\5"+
    "\4\0\2\5\1\0\2\5\1\0\2\5\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6\3\0\1\6\7"+
    "\0\4\5\1\0\1\5\7\0\4\6\3\5\1\6\2\0\1\5\1\0\2\5\1\0\3\5\2\6\1\0\3\6\2\0\1\5"+
    "\11\0\1\6\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0"+
    "\2\5\4\0\5\6\3\0\3\6\1\0\4\6\2\0\1\5\6\0\1\6\4\5\1\0\5\5\3\0\1\5\7\6\1\0\2"+
    "\6\5\0\2\6\3\0\2\6\1\0\3\5\1\0\2\5\5\0\3\5\2\0\1\5\3\6\1\0\4\6\1\5\1\0\4\5"+
    "\1\0\1\5\4\0\1\6\4\0\6\6\1\0\1\6\3\0\2\6\4\0\1\5\1\6\2\5\7\6\4\0\10\5\3\6"+
    "\7\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\3\5\1\0\1\5\1\0\1\5\2"+
    "\0\2\5\1\0\3\5\2\6\1\0\2\6\1\5\2\0\5\5\1\0\1\5\1\0\6\6\2\0\2\6\2\0\4\5\5\0"+
    "\1\6\1\0\1\6\1\0\1\6\4\0\2\6\5\5\3\6\6\0\1\6\1\0\7\6\1\5\2\6\4\5\3\6\1\5\3"+
    "\6\2\5\7\6\3\5\4\6\5\5\14\6\1\5\1\6\3\5\1\0\7\5\2\0\3\6\2\5\3\6\3\0\2\5\2"+
    "\6\4\0\1\5\1\0\2\6\4\0\4\5\10\6\3\0\1\5\3\0\2\5\1\6\5\0\3\6\2\0\1\5\1\6\1"+
    "\5\5\0\6\5\2\0\5\6\3\5\3\0\10\6\5\5\2\6\3\0\3\5\3\6\1\0\5\6\4\5\1\6\4\5\3"+
    "\6\2\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\2\0\3\5\1\0\6\5\2\0\2\5\2\0\5\6\5\0"+
    "\1\5\5\0\6\6\1\0\1\6\3\0\4\6\11\0\1\5\4\0\1\5\1\0\5\5\2\0\1\5\1\0\1\36\3\5"+
    "\1\0\3\5\2\0\4\5\5\0\5\5\4\0\1\5\4\0\4\5\3\6\2\5\5\0\2\6\2\0\3\5\6\6\1\0\2"+
    "\5\2\0\4\5\1\0\2\5\1\6\3\5\1\6\4\5\1\6\10\5\2\6\4\0\1\5\1\6\4\0\1\6\5\5\2"+
    "\6\3\0\3\5\4\0\3\5\2\6\2\0\6\5\1\0\3\6\1\0\2\6\5\0\5\5\5\0\1\5\1\6\3\5\1\0"+
    "\2\5\1\0\7\5\2\0\1\6\6\0\2\5\2\0\3\5\3\0\2\5\3\0\2\5\2\0\3\6\4\0\3\5\1\0\2"+
    "\5\1\0\1\5\5\0\1\6\2\0\1\5\3\0\1\5\2\0\2\5\3\6\1\0\2\6\1\0\3\6\2\0\1\6\2\0"+
    "\1\6\4\5\10\0\5\6\3\0\6\6\2\0\3\6\2\0\4\6\4\0\3\6\5\0\1\5\2\0\2\5\2\0\4\5"+
    "\1\0\4\5\1\0\1\5\1\0\6\5\2\0\5\5\1\0\4\5\1\0\4\5\2\0\2\6\1\0\1\5\1\0\1\5\5"+
    "\0\1\5\1\0\1\5\1\0\3\5\1\0\3\5\1\0\3\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\2\11\1\12\2\7\1\13\1\14\1\15"+
    "\1\16\1\17\16\7\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\2\2\7\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\40\1\43\3\1\1\10\1\2\1\0"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\7\1\56\2\7\2\0\1\57\1\60\7\7"+
    "\1\61\1\62\6\7\1\56\1\63\2\7\1\64\2\7"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\2\7\1\73"+
    "\1\74\1\0\1\75\1\0\1\75\4\0\1\76\1\0"+
    "\1\77\1\100\1\0\2\101\1\0\5\7\1\102\1\7"+
    "\1\103\1\7\1\61\1\7\1\104\4\7\1\105\2\7"+
    "\1\106\4\7\1\107\1\7\2\0\1\110\3\0\2\101"+
    "\1\111\2\0\1\112\1\7\1\113\4\7\1\0\3\7"+
    "\1\114\1\7\1\115\5\7\1\0\1\116\1\117\2\0"+
    "\1\111\1\0\1\120\4\7\1\0\1\121\1\122\1\7"+
    "\1\123\1\56\1\7\1\0\1\7\1\124\1\7\1\125"+
    "\1\77\2\0\4\7\1\0\1\126\1\7\1\0\1\127"+
    "\1\7\2\0\2\7\1\130\1\7\1\0\1\131\1\0"+
    "\1\7\2\0\1\132\1\133\1\134\3\0\1\77\1\0"+
    "\1\62\15\0\1\74\16\0\1\135\1\0\2\136\10\0"+
    "\1\61\3\0\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u01e0\0\u03fc\0\u0438\0\u01e0\0\u01e0\0\u01e0\0\u0474"+
    "\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654"+
    "\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834"+
    "\0\u0870\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0"+
    "\0\u01e0\0\u01e0\0\u08ac\0\u01e0\0\u01e0\0\u01e0\0\u08e8\0\u0924"+
    "\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u01e0"+
    "\0\u01e0\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u01e0"+
    "\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u0c6c\0\u030c\0\u030c"+
    "\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u01e0\0\u01e0"+
    "\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194"+
    "\0\u030c\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u01e0\0\u01e0"+
    "\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u12fc\0\u1338\0\u030c\0\u1374"+
    "\0\u09d8\0\u0a14\0\u0a8c\0\u0ac8\0\u13b0\0\u13ec\0\u1428\0\u1464"+
    "\0\u030c\0\u14a0\0\u030c\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc"+
    "\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u030c\0\u1734\0\u030c"+
    "\0\u1770\0\u030c\0\u17ac\0\u030c\0\u17e8\0\u1824\0\u1860\0\u189c"+
    "\0\u030c\0\u18d8\0\u1914\0\u030c\0\u1950\0\u198c\0\u19c8\0\u1a04"+
    "\0\u030c\0\u1a40\0\u1a7c\0\u1ab8\0\u01e0\0\u1af4\0\u1b30\0\u1b6c"+
    "\0\u1ba8\0\u01e0\0\u1590\0\u1590\0\u1be4\0\u01e0\0\u1c20\0\u030c"+
    "\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00"+
    "\0\u030c\0\u1e3c\0\u030c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68"+
    "\0\u1fa4\0\u01e0\0\u01e0\0\u1fe0\0\u201c\0\u01e0\0\u2058\0\u030c"+
    "\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u030c\0\u21fc"+
    "\0\u030c\0\u030c\0\u2238\0\u2274\0\u22b0\0\u030c\0\u22ec\0\u01e0"+
    "\0\u01e0\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490"+
    "\0\u030c\0\u24cc\0\u2508\0\u030c\0\u2544\0\u2580\0\u25bc\0\u25f8"+
    "\0\u2634\0\u030c\0\u2670\0\u26ac\0\u030c\0\u26e8\0\u2724\0\u2760"+
    "\0\u279c\0\u030c\0\u030c\0\u030c\0\u27d8\0\u2814\0\u2850\0\u288c"+
    "\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c"+
    "\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c"+
    "\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c"+
    "\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u01e0\0\u2fd0"+
    "\0\u300c\0\u01e0\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174"+
    "\0\u31b0\0\u31ec\0\u01e0\0\u3228\0\u3264\0\u32a0\0\u01e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\11\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\17\1\30\1\31\1\11\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\16\1\43\1\44"+
    "\1\45\1\16\1\46\1\47\2\16\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\2\16\1\17"+
    "\1\71\15\72\1\73\1\72\1\74\54\72\16\75\1\76"+
    "\1\77\54\75\15\11\1\100\74\11\1\101\64\11\1\17"+
    "\10\11\2\17\50\11\1\17\1\11\1\102\1\103\1\102"+
    "\1\104\3\102\1\105\10\102\2\105\50\102\1\105\1\102"+
    "\3\11\1\106\3\11\1\17\10\11\2\17\50\11\1\17"+
    "\1\11\76\0\1\107\45\0\1\110\73\0\1\111\26\0"+
    "\1\112\44\0\1\113\73\0\1\114\30\0\2\16\1\0"+
    "\2\16\1\115\2\16\10\0\22\16\20\0\3\16\1\0"+
    "\1\16\7\0\1\17\10\0\2\17\50\0\1\17\13\0"+
    "\1\116\71\0\2\21\1\116\66\0\2\16\1\0\2\16"+
    "\1\115\1\16\1\117\10\0\1\16\1\120\1\121\13\16"+
    "\1\122\3\16\20\0\3\16\1\0\1\16\5\0\2\16"+
    "\1\0\2\16\1\115\2\16\10\0\10\16\1\123\1\16"+
    "\1\124\7\16\20\0\3\16\1\0\1\16\22\0\1\125"+
    "\1\126\24\0\1\127\73\0\1\130\30\0\2\16\1\0"+
    "\2\16\1\115\2\16\10\0\5\16\1\131\4\16\1\132"+
    "\7\16\20\0\3\16\1\0\1\16\5\0\2\16\1\0"+
    "\2\16\1\115\1\133\1\16\10\0\5\16\1\134\4\16"+
    "\1\135\2\16\1\136\4\16\20\0\3\16\1\0\1\16"+
    "\5\0\2\16\1\0\2\16\1\115\2\16\10\0\12\16"+
    "\1\137\7\16\20\0\3\16\1\0\1\16\5\0\2\16"+
    "\1\0\2\16\1\115\2\16\10\0\10\16\1\140\2\16"+
    "\1\141\6\16\20\0\3\16\1\0\1\16\5\0\2\16"+
    "\1\0\2\16\1\115\2\16\10\0\5\16\1\142\14\16"+
    "\20\0\3\16\1\0\1\16\5\0\2\16\1\0\2\16"+
    "\1\115\1\16\1\143\10\0\7\16\1\144\12\16\20\0"+
    "\3\16\1\0\1\16\5\0\2\16\1\0\2\16\1\115"+
    "\2\16\10\0\10\16\1\145\11\16\20\0\3\16\1\0"+
    "\1\16\5\0\2\16\1\0\2\16\1\115\2\16\10\0"+
    "\6\16\1\146\13\16\20\0\3\16\1\0\1\16\5\0"+
    "\2\16\1\0\2\16\1\115\2\16\10\0\3\16\1\147"+
    "\16\16\20\0\1\16\1\150\1\16\1\0\1\16\5\0"+
    "\2\16\1\0\2\16\1\115\2\16\10\0\6\16\1\151"+
    "\13\16\20\0\3\16\1\0\1\16\5\0\2\16\1\0"+
    "\2\16\1\115\2\16\10\0\6\16\1\152\13\16\20\0"+
    "\3\16\1\0\1\16\5\0\2\16\1\0\2\16\1\115"+
    "\2\16\10\0\10\16\1\153\1\16\1\154\7\16\20\0"+
    "\3\16\1\0\1\16\5\0\2\16\1\0\2\16\1\115"+
    "\2\16\10\0\17\16\1\155\2\16\20\0\3\16\1\0"+
    "\1\16\5\0\2\16\1\0\2\16\1\115\2\16\10\0"+
    "\20\16\1\156\1\16\20\0\3\16\1\0\1\16\47\0"+
    "\1\157\1\160\73\0\1\161\73\0\1\162\11\0\1\163"+
    "\77\0\1\164\12\0\2\16\1\0\2\16\1\115\2\16"+
    "\10\0\12\16\1\165\7\16\20\0\3\16\1\0\1\16"+
    "\5\0\2\16\1\0\2\16\1\115\2\16\10\0\6\16"+
    "\1\166\1\16\1\167\2\16\1\170\6\16\20\0\3\16"+
    "\1\0\1\16\15\72\1\171\1\72\1\172\54\72\15\0"+
    "\1\72\75\0\1\72\54\0\16\75\1\173\1\174\54\75"+
    "\16\0\1\75\74\0\1\75\54\0\1\102\1\0\1\102"+
    "\1\0\70\102\2\0\1\175\74\0\1\176\70\0\1\102"+
    "\1\0\1\102\1\0\3\102\1\105\10\102\2\105\50\102"+
    "\1\105\1\102\3\0\1\177\73\0\1\200\100\0\2\116"+
    "\67\0\2\16\1\0\2\16\1\115\2\16\10\0\22\16"+
    "\20\0\2\16\1\201\1\0\1\16\5\0\2\16\1\0"+
    "\2\16\1\115\2\16\10\0\22\16\20\0\3\16\1\202"+
    "\1\16\5\0\2\16\1\0\2\16\1\115\2\16\10\0"+
    "\22\16\20\0\1\16\1\203\1\16\1\0\1\16\5\0"+
    "\2\16\1\0\2\16\1\115\2\16\10\0\13\16\1\204"+
    "\6\16\20\0\3\16\1\0\1\16\7\205\1\125\10\205"+
    "\1\206\1\207\50\205\1\125\1\205\23\126\1\210\50\126"+
    "\5\0\2\16\1\0\2\16\1\115\2\16\10\0\13\16"+
    "\1\211\2\16\1\212\3\16\20\0\3\16\1\0\1\16"+
    "\5\0\2\16\1\0\2\16\1\115\1\16\1\213\10\0"+
    "\22\16\20\0\3\16\1\0\1\16\5\0\2\16\1\0"+
    "\2\16\1\115\1\16\1\214\10\0\22\16\20\0\3\16"+
    "\1\0\1\16\5\0\2\16\1\0\2\16\1\115\2\16"+
    "\10\0\3\16\1\215\16\16\20\0\3\16\1\0\1\16"+
    "\5\0\2\16\1\0\2\16\1\115\2\16\10\0\6\16"+
    "\1\216\13\16\20\0\3\16\1\0\1\16\5\0\2\16"+
    "\1\0\2\16\1\115\1\16\1\217\10\0\22\16\20\0"+
    "\3\16\1\0\1\16\5\0\2\16\1\0\2\16\1\115"+
    "\2\16\10\0\14\16\1\220\5\16\20\0\3\16\1\0"+
    "\1\16\5\0\2\16\1\0\2\16\1\115\2\16\10\0"+
    "\16\16\1\221\3\16\20\0\3\16\1\0\1\16\5\0"+
    "\2\16\1\0\2\16\1\115\2\16\10\0\10\16\1\222"+
    "\11\16\20\0\3\16\1\0\1\16\5\0\2\16\1\0"+
    "\2\16\1\115\2\16\10\0\6\16\1\223\13\16\20\0"+
    "\3\16\1\0\1\16\5\0\2\16\1\0\2\16\1\115"+
    "\2\16\10\0\14\16\1\224\5\16\20\0\3\16\1\0"+
    "\1\16\5\0\2\16\1\0\2\16\1\115\2\16\10\0"+
    "\12\16\1\225\7\16\20\0\3\16\1\0\1\16\5\0"+
    "\2\16\1\0\2\16\1\115\2\16\10\0\13\16\1\226"+
    "\6\16\20\0\3\16\1\0\1\16\5\0\2\16\1\0"+
    "\2\16\1\115\2\16\10\0\10\16\1\227\11\16\20\0"+
    "\3\16\1\0\1\16\5\0\2\16\1\0\2\16\1\115"+
    "\2\16\10\0\16\16\1\230\3\16\20\0\3\16\1\0"+
    "\1\16\5\0\2\16\1\0\2\16\1\115\2\16\10\0"+
    "\4\16\1\231\10\16\1\232\4\16\20\0\3\16\1\0"+
    "\1\16\5\0\2\16\1\0\2\16\1\115\2\16\10\0"+
    "\15\16\1\233\3\16\1\234\20\0\3\16\1\0\1\16"+
    "\5\0\2\16\1\0\2\16\1\115\2\16\10\0\1\16"+
    "\1\235\20\16\20\0\3\16\1\0\1\16\5\0\2\16"+
    "\1\0\2\16\1\115\2\16\10\0\10\16\1\236\11\16"+
    "\20\0\3\16\1\0\1\16\5\0\2\16\1\0\2\16"+
    "\1\115\1\237\1\16\10\0\22\16\20\0\3\16\1\0"+
    "\1\16\5\0\2\16\1\0\2\16\1\115\1\240\1\16"+
    "\10\0\22\16\20\0\3\16\1\0\1\16\5\0\2\16"+
    "\1\0\2\16\1\115\2\16\10\0\6\16\1\241\13\16"+
    "\20\0\3\16\1\0\1\16\5\0\2\16\1\0\2\16"+
    "\1\115\2\16\10\0\10\16\1\242\11\16\20\0\3\16"+
    "\1\0\1\16\5\0\2\16\1\0\2\16\1\115\2\16"+
    "\10\0\10\16\1\167\11\16\20\0\3\16\1\0\1\16"+
    "\3\0\1\243\73\0\1\244\74\0\1\245\72\0\1\246"+
    "\104\0\1\247\64\0\2\16\1\0\2\16\1\115\2\16"+
    "\10\0\22\16\20\0\3\16\1\250\1\16\20\205\1\251"+
    "\1\252\61\205\1\125\10\205\1\206\1\253\50\205\1\125"+
    "\1\205\7\0\1\254\10\0\2\254\2\0\1\255\45\0"+
    "\1\254\1\0\22\126\1\256\1\210\50\126\5\0\2\16"+
    "\1\0\2\16\1\115\2\16\10\0\1\257\21\16\20\0"+
    "\3\16\1\0\1\16\5\0\2\16\1\0\2\16\1\115"+
    "\2\16\10\0\10\16\1\260\11\16\20\0\3\16\1\0"+
    "\1\16\5\0\2\16\1\0\2\16\1\115\2\16\10\0"+
    "\13\16\1\261\6\16\20\0\3\16\1\0\1\16\5\0"+
    "\2\16\1\0\2\16\1\115\2\16\10\0\5\16\1\262"+
    "\14\16\20\0\3\16\1\0\1\16\5\0\2\16\1\0"+
    "\2\16\1\115\2\16\10\0\16\16\1\233\3\16\20\0"+
    "\3\16\1\0\1\16\5\0\2\16\1\0\2\16\1\115"+
    "\2\16\10\0\1\263\21\16\20\0\3\16\1\0\1\16"+
    "\5\0\2\16\1\0\2\16\1\115\2\16\10\0\16\16"+
    "\1\264\3\16\20\0\3\16\1\0\1\16\5\0\2\16"+
    "\1\265\2\16\1\115\2\16\3\0\2\265\3\0\22\16"+
    "\20\0\3\16\1\265\1\16\5\0\2\16\1\0\2\16"+
    "\1\115\2\16\10\0\6\16\1\266\13\16\20\0\3\16"+
    "\1\0\1\16\5\0\2\16\1\0\2\16\1\115\2\16"+
    "\10\0\15\16\1\267\4\16\20\0\3\16\1\0\1\16"+
    "\5\0\2\16\1\0\2\16\1\115\2\16\10\0\5\16"+
    "\1\270\14\16\20\0\3\16\1\0\1\16\5\0\2\16"+
    "\1\0\2\16\1\115\2\16\10\0\10\16\1\271\11\16"+
    "\20\0\3\16\1\0\1\16\5\0\2\16\1\0\2\16"+
    "\1\115\2\16\10\0\5\16\1\272\14\16\20\0\3\16"+
    "\1\0\1\16\5\0\2\16\1\0\2\16\1\115\2\16"+
    "\10\0\10\16\1\273\11\16\20\0\3\16\1\0\1\16"+
    "\5\0\2\16\1\0\2\16\1\115\2\16\10\0\5\16"+
    "\1\274\14\16\20\0\3\16\1\0\1\16\5\0\2\16"+
    "\1\0\2\16\1\115\2\16\10\0\16\16\1\275\3\16"+
    "\20\0\3\16\1\0\1\16\5\0\2\16\1\0\2\16"+
    "\1\115\2\16\10\0\13\16\1\276\6\16\20\0\3\16"+
    "\1\0\1\16\5\0\2\16\1\0\2\16\1\115\2\16"+
    "\10\0\3\16\1\277\16\16\20\0\3\16\1\0\1\16"+
    "\5\0\2\16\1\0\2\16\1\115\2\16\10\0\5\16"+
    "\1\300\14\16\20\0\3\16\1\0\1\16\3\0\1\301"+
    "\74\0\1\302\72\0\1\303\127\0\1\304\71\0\1\305"+
    "\36\0\20\205\1\251\1\306\52\205\25\0\1\307\53\0"+
    "\2\16\1\0\2\16\1\115\2\16\10\0\20\16\1\310"+
    "\1\16\20\0\3\16\1\0\1\16\5\0\2\16\1\0"+
    "\2\16\1\115\1\311\1\16\10\0\5\16\1\312\14\16"+
    "\20\0\3\16\1\0\1\16\5\0\2\16\1\0\2\16"+
    "\1\115\2\16\10\0\3\16\1\313\16\16\20\0\3\16"+
    "\1\0\1\16\5\0\2\16\1\0\2\16\1\115\2\16"+
    "\10\0\13\16\1\314\6\16\20\0\3\16\1\0\1\16"+
    "\5\0\2\16\1\0\2\16\1\115\2\16\10\0\22\16"+
    "\20\0\3\16\1\315\1\16\5\0\1\316\1\0\1\265"+
    "\3\0\2\316\3\0\2\265\3\0\22\316\20\0\3\316"+
    "\1\265\1\316\5\0\2\16\1\0\2\16\1\115\2\16"+
    "\10\0\13\16\1\317\6\16\20\0\3\16\1\0\1\16"+
    "\5\0\2\16\1\0\2\16\1\115\2\16\10\0\6\16"+
    "\1\320\13\16\20\0\3\16\1\0\1\16\5\0\2\16"+
    "\1\0\2\16\1\115\2\16\10\0\11\16\1\321\10\16"+
    "\20\0\3\16\1\0\1\16\5\0\2\16\1\0\2\16"+
    "\1\115\2\16\10\0\3\16\1\322\16\16\20\0\3\16"+
    "\1\0\1\16\5\0\2\16\1\0\2\16\1\115\2\16"+
    "\10\0\15\16\1\323\4\16\20\0\3\16\1\0\1\16"+
    "\5\0\2\16\1\0\2\16\1\115\2\16\10\0\22\16"+
    "\20\0\3\16\1\324\1\16\5\0\2\16\1\0\2\16"+
    "\1\115\2\16\10\0\1\325\21\16\20\0\3\16\1\0"+
    "\1\16\5\0\2\16\1\0\2\16\1\115\2\16\10\0"+
    "\10\16\1\326\11\16\20\0\3\16\1\0\1\16\5\0"+
    "\2\16\1\0\2\16\1\115\2\16\10\0\13\16\1\327"+
    "\6\16\20\0\3\16\1\0\1\16\3\0\1\330\130\0"+
    "\1\331\123\0\1\332\31\0\1\333\52\0\2\16\1\0"+
    "\2\16\1\115\1\16\1\334\10\0\22\16\20\0\3\16"+
    "\1\0\1\16\5\0\2\16\1\0\2\16\1\115\1\335"+
    "\1\16\10\0\22\16\20\0\3\16\1\0\1\16\5\0"+
    "\2\16\1\0\2\16\1\115\2\16\10\0\3\16\1\336"+
    "\16\16\20\0\3\16\1\0\1\16\5\0\2\16\1\0"+
    "\2\16\1\115\1\337\1\16\10\0\22\16\20\0\3\16"+
    "\1\0\1\16\40\0\1\340\40\0\2\316\1\0\2\316"+
    "\1\0\2\316\10\0\22\316\20\0\3\316\1\0\1\316"+
    "\5\0\2\16\1\0\2\16\1\115\1\16\1\341\10\0"+
    "\22\16\20\0\3\16\1\0\1\16\5\0\2\16\1\0"+
    "\2\16\1\115\2\16\10\0\3\16\1\342\16\16\20\0"+
    "\3\16\1\0\1\16\14\0\1\343\64\0\2\16\1\0"+
    "\2\16\1\115\2\16\10\0\20\16\1\344\1\16\20\0"+
    "\3\16\1\0\1\16\5\0\2\16\1\0\2\16\1\115"+
    "\2\16\10\0\10\16\1\345\11\16\20\0\3\16\1\0"+
    "\1\16\42\0\1\346\60\0\1\347\51\0\2\16\1\0"+
    "\2\16\1\115\2\16\10\0\15\16\1\350\4\16\20\0"+
    "\3\16\1\0\1\16\5\0\2\16\1\0\2\16\1\115"+
    "\1\16\1\351\10\0\22\16\20\0\3\16\1\0\1\16"+
    "\5\0\2\16\1\0\2\16\1\115\2\16\10\0\21\16"+
    "\1\352\20\0\3\16\1\0\1\16\5\0\2\16\1\0"+
    "\2\16\1\115\2\16\10\0\12\16\1\353\7\16\20\0"+
    "\3\16\1\0\1\16\45\0\1\354\33\0\2\16\1\0"+
    "\2\16\1\115\2\16\10\0\13\16\1\355\6\16\20\0"+
    "\3\16\1\0\1\16\37\0\1\356\41\0\2\16\1\0"+
    "\2\16\1\115\2\16\10\0\6\16\1\357\13\16\20\0"+
    "\3\16\1\0\1\16\32\0\1\360\71\0\1\361\50\0"+
    "\2\16\1\0\2\16\1\115\2\16\10\0\10\16\1\362"+
    "\11\16\20\0\3\16\1\0\1\16\5\0\2\16\1\0"+
    "\2\16\1\115\2\16\10\0\16\16\1\363\3\16\20\0"+
    "\3\16\1\0\1\16\5\0\2\16\1\0\2\16\1\115"+
    "\1\16\1\364\10\0\22\16\20\0\3\16\1\0\1\16"+
    "\32\0\1\365\101\0\1\366\40\0\2\16\1\0\2\16"+
    "\1\115\2\16\10\0\22\16\20\0\3\16\1\367\1\16"+
    "\30\0\1\370\74\0\1\371\56\0\1\372\151\0\1\373"+
    "\41\0\1\374\76\0\1\331\62\0\1\375\133\0\1\376"+
    "\26\0\1\377\113\0\1\u0100\61\0\1\u0101\77\0\1\u0102"+
    "\73\0\1\u0103\66\0\1\u0104\54\0\1\u0105\113\0\1\u0106"+
    "\54\0\1\u0107\73\0\1\u0108\111\0\1\u0109\133\0\1\u010a"+
    "\41\0\1\u010b\125\0\1\u010c\35\0\1\u010d\74\0\1\u010e"+
    "\70\0\1\u010f\100\0\1\u0110\64\0\1\u0111\133\0\1\u0112"+
    "\16\0\1\u0113\113\0\1\u0114\75\0\1\u0115\100\0\1\u0116"+
    "\45\0\1\u0117\151\0\1\u0118\1\0\20\u0115\1\u0119\1\u011a"+
    "\52\u0115\32\0\1\u011b\76\0\1\u011c\57\0\1\u011a\102\0"+
    "\1\u011d\133\0\1\u011e\75\0\1\u011f\43\0\1\u0120\71\0"+
    "\1\u0121\65\0\1\u0122\100\0\1\u0123\64\0\1\u0124\135\0"+
    "\1\u0125\41\0\1\u0126\72\0\1\u0127\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13020];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\1\0\1\11\10\1\1\11\2\1\3\11"+
    "\22\1\11\11\1\1\3\11\11\1\2\11\5\1\1\0"+
    "\6\11\7\1\2\0\2\11\26\1\6\11\4\1\1\0"+
    "\1\1\1\0\1\1\4\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\32\1\2\0\1\11\3\0\1\1\1\11"+
    "\1\1\2\0\1\11\6\1\1\0\13\1\1\0\2\11"+
    "\2\0\1\11\1\0\5\1\1\0\6\1\1\0\3\1"+
    "\2\11\2\0\4\1\1\0\2\1\1\0\2\1\2\0"+
    "\4\1\1\0\1\1\1\0\1\1\2\0\3\1\3\0"+
    "\1\1\1\0\1\1\15\0\1\1\16\0\1\11\1\0"+
    "\1\1\1\11\10\0\1\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  Project myProject;
  final CfscriptLexerConfiguration myCurrentConfiguration = new CfscriptLexerConfiguration();

  public class CfscriptLexerConfiguration {
      public int mySharpCounter = 0;
      public int myCommentCounter = 0;
      public Stack<Integer> myReturnStack = new Stack<>();

      public CfscriptLexerConfiguration() {}

      public CfscriptLexerConfiguration(int sharpCounter, int commentCounter,
                                        Stack<Integer> returnStack) {
          mySharpCounter = sharpCounter;
          myCommentCounter = commentCounter;
          myReturnStack = returnStack;
      }

      public void reset() {
          mySharpCounter = 0;
          myCommentCounter = 0;
          myReturnStack.clear();
      }
  }

  public _CfscriptLexer8(Project project) {
    this((java.io.Reader)null);
    myProject = project;
  }
  private IElementType startComment(int stateToReturnTo) {
    myCurrentConfiguration.myCommentCounter = 0;
    myCurrentConfiguration.myReturnStack.push(stateToReturnTo);
    myCurrentConfiguration.myCommentCounter++;
    yybegin(COMMENT);
    return CfmlTokenTypes.COMMENT;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _CfscriptLexer8(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yychar = start;
    myCurrentConfiguration.reset();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return CfmlTokenTypes.COMMENT;
            } 
            // fall through
          case 95: break;
          case 2: 
            { return CfscriptTokenTypes.BAD_CHARACTER;
            } 
            // fall through
          case 96: break;
          case 3: 
            { return CfscriptTokenTypes.LT;
            } 
            // fall through
          case 97: break;
          case 4: 
            { return CfscriptTokenTypes.NOT;
            } 
            // fall through
          case 98: break;
          case 5: 
            { return CfscriptTokenTypes.MINUS;
            } 
            // fall through
          case 99: break;
          case 6: 
            { return CfscriptTokenTypes.GT;
            } 
            // fall through
          case 100: break;
          case 7: 
            { return CfscriptTokenTypes.IDENTIFIER;
            } 
            // fall through
          case 101: break;
          case 8: 
            { return CfscriptTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 102: break;
          case 9: 
            { return CfscriptTokenTypes.INTEGER;
            } 
            // fall through
          case 103: break;
          case 10: 
            { return CfscriptTokenTypes.POINT;
            } 
            // fall through
          case 104: break;
          case 11: 
            { yybegin(DOUBLE_QUOTED_STRING);
    return CfmlTokenTypes.DOUBLE_QUOTE;
            } 
            // fall through
          case 105: break;
          case 12: 
            { yybegin(SINGLE_QUOTED_STRING);
    return CfmlTokenTypes.SINGLE_QUOTE;
            } 
            // fall through
          case 106: break;
          case 13: 
            { if (myCurrentConfiguration.mySharpCounter == 0) {
        myCurrentConfiguration.myReturnStack.push(YYINITIAL);
        myCurrentConfiguration.mySharpCounter = 1;
        return CfscriptTokenTypes.OPENSHARP;
    }
    myCurrentConfiguration.mySharpCounter--;
    yybegin(myCurrentConfiguration.myReturnStack.pop());
    return CfscriptTokenTypes.CLOSESHARP;
            } 
            // fall through
          case 107: break;
          case 14: 
            { return CfscriptTokenTypes.DEV;
            } 
            // fall through
          case 108: break;
          case 15: 
            { return CfscriptTokenTypes.MUL;
            } 
            // fall through
          case 109: break;
          case 16: 
            { return CfscriptTokenTypes.CONCAT;
            } 
            // fall through
          case 110: break;
          case 17: 
            { return CfmlTokenTypes.ASSIGN;
            } 
            // fall through
          case 111: break;
          case 18: 
            { return CfscriptTokenTypes.COMMA;
            } 
            // fall through
          case 112: break;
          case 19: 
            { return CfscriptTokenTypes.L_BRACKET;
            } 
            // fall through
          case 113: break;
          case 20: 
            { return CfscriptTokenTypes.R_BRACKET;
            } 
            // fall through
          case 114: break;
          case 21: 
            { return CfscriptTokenTypes.L_SQUAREBRACKET;
            } 
            // fall through
          case 115: break;
          case 22: 
            { return CfscriptTokenTypes.R_SQUAREBRACKET;
            } 
            // fall through
          case 116: break;
          case 23: 
            { return CfscriptTokenTypes.L_CURLYBRACKET;
            } 
            // fall through
          case 117: break;
          case 24: 
            { return CfscriptTokenTypes.R_CURLYBRACKET;
            } 
            // fall through
          case 118: break;
          case 25: 
            { return CfscriptTokenTypes.SEMICOLON;
            } 
            // fall through
          case 119: break;
          case 26: 
            { return CfscriptTokenTypes.DOTDOT;
            } 
            // fall through
          case 120: break;
          case 27: 
            { return CfscriptTokenTypes.ADD;
            } 
            // fall through
          case 121: break;
          case 28: 
            { return CfscriptTokenTypes.MOD;
            } 
            // fall through
          case 122: break;
          case 29: 
            { return CfscriptTokenTypes.INT_DEV;
            } 
            // fall through
          case 123: break;
          case 30: 
            { return CfscriptTokenTypes.POW;
            } 
            // fall through
          case 124: break;
          case 31: 
            { yybegin(DOUBLEQUOTE_CLOSER); return CfmlTokenTypes.STRING_TEXT;
            } 
            // fall through
          case 125: break;
          case 32: 
            { yybegin(YYINITIAL); return CfmlTokenTypes.DOUBLE_QUOTE_CLOSER;
            } 
            // fall through
          case 126: break;
          case 33: 
            { myCurrentConfiguration.myReturnStack.push(DOUBLE_QUOTED_STRING);
    myCurrentConfiguration.mySharpCounter++;
    yybegin(YYINITIAL);
    return CfscriptTokenTypes.OPENSHARP;
            } 
            // fall through
          case 127: break;
          case 34: 
            { yybegin(SINGLEQUOTE_CLOSER); return CfmlTokenTypes.STRING_TEXT;
            } 
            // fall through
          case 128: break;
          case 35: 
            { yybegin(YYINITIAL); return CfmlTokenTypes.SINGLE_QUOTE_CLOSER;
            } 
            // fall through
          case 129: break;
          case 36: 
            { myCurrentConfiguration.myReturnStack.push(SINGLE_QUOTED_STRING);
    myCurrentConfiguration.mySharpCounter++;
    yybegin(YYINITIAL);
    return CfscriptTokenTypes.OPENSHARP;
            } 
            // fall through
          case 130: break;
          case 37: 
            { return CfscriptTokenTypes.LTE;
            } 
            // fall through
          case 131: break;
          case 38: 
            { return CfscriptTokenTypes.NEQ;
            } 
            // fall through
          case 132: break;
          case 39: 
            { return CfscriptTokenTypes.DEC;
            } 
            // fall through
          case 133: break;
          case 40: 
            { return CfscriptTokenTypes.MINUS_EQ;
            } 
            // fall through
          case 134: break;
          case 41: 
            { return CfscriptTokenTypes.GTE;
            } 
            // fall through
          case 135: break;
          case 42: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { if (ArrayUtil.find(CfmlUtil.getVariableScopes(myProject), StringUtil.toLowerCase(yytext().toString())) != -1) {
        return CfscriptTokenTypes.SCOPE_KEYWORD;
    } else {
        return CfscriptTokenTypes.IDENTIFIER;
    }
            } 
            // fall through
          case 136: break;
          case 43: 
            { return CfscriptTokenTypes.DOUBLE;
            } 
            // fall through
          case 137: break;
          case 44: 
            { return CfscriptTokenTypes.IN_L;
            } 
            // fall through
          case 138: break;
          case 45: 
            { return CfscriptTokenTypes.IF_KEYWORD;
            } 
            // fall through
          case 139: break;
          case 46: 
            { return CfscriptTokenTypes.EQ_L;
            } 
            // fall through
          case 140: break;
          case 47: 
            { return CfscriptTokenTypes.DEV_EQ;
            } 
            // fall through
          case 141: break;
          case 48: 
            { return CfscriptTokenTypes.MUL_EQ;
            } 
            // fall through
          case 142: break;
          case 49: 
            { return CfscriptTokenTypes.LE_L;
            } 
            // fall through
          case 143: break;
          case 50: 
            { return CfscriptTokenTypes.LT_L;
            } 
            // fall through
          case 144: break;
          case 51: 
            { return CfscriptTokenTypes.OR_L;
            } 
            // fall through
          case 145: break;
          case 52: 
            { return CfscriptTokenTypes.DO_KEYWORD;
            } 
            // fall through
          case 146: break;
          case 53: 
            { return CfscriptTokenTypes.AND;
            } 
            // fall through
          case 147: break;
          case 54: 
            { return CfscriptTokenTypes.CONCAT_EQ;
            } 
            // fall through
          case 148: break;
          case 55: 
            { return CfscriptTokenTypes.EQEQ;
            } 
            // fall through
          case 149: break;
          case 56: 
            { return CfscriptTokenTypes.ADD_EQ;
            } 
            // fall through
          case 150: break;
          case 57: 
            { return CfscriptTokenTypes.INC;
            } 
            // fall through
          case 151: break;
          case 58: 
            { return CfscriptTokenTypes.OR;
            } 
            // fall through
          case 152: break;
          case 59: 
            { return CfscriptTokenTypes.GE_L;
            } 
            // fall through
          case 153: break;
          case 60: 
            { return CfscriptTokenTypes.GT_L;
            } 
            // fall through
          case 154: break;
          case 61: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return CfmlTokenTypes.STRING_TEXT;
            } 
            // fall through
          case 155: break;
          case 62: 
            { return CfscriptTokenTypes.IMP_L;
            } 
            // fall through
          case 156: break;
          case 63: 
            { return CfscriptTokenTypes.NEQ_L;
            } 
            // fall through
          case 157: break;
          case 64: 
            { return CfscriptTokenTypes.NOT_L;
            } 
            // fall through
          case 158: break;
          case 65: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return CfscriptTokenTypes.COMMENT;
            } 
            // fall through
          case 159: break;
          case 66: 
            { return CfscriptTokenTypes.FOR_KEYWORD;
            } 
            // fall through
          case 160: break;
          case 67: 
            { return CfscriptTokenTypes.MOD_L;
            } 
            // fall through
          case 161: break;
          case 68: 
            { return CfscriptTokenTypes.AND_L;
            } 
            // fall through
          case 162: break;
          case 69: 
            { return CfscriptTokenTypes.NOT_XOR_L;
            } 
            // fall through
          case 163: break;
          case 70: 
            { return CfscriptTokenTypes.TRY_KEYWORD;
            } 
            // fall through
          case 164: break;
          case 71: 
            { return CfscriptTokenTypes.XOR_L;
            } 
            // fall through
          case 165: break;
          case 72: 
            { yybegin(myCurrentConfiguration.myReturnStack.pop()); return CfmlTokenTypes.COMMENT;
            } 
            // fall through
          case 166: break;
          case 73: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return CfscriptTokenTypes.COMMENT;
            } 
            // fall through
          case 167: break;
          case 74: 
            { return CfscriptTokenTypes.COMMENT;
            } 
            // fall through
          case 168: break;
          case 75: 
            { return CfscriptTokenTypes.CASE_KEYWORD;
            } 
            // fall through
          case 169: break;
          case 76: 
            { return CfscriptTokenTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 170: break;
          case 77: 
            { return CfscriptTokenTypes.BOOLEAN;
            } 
            // fall through
          case 171: break;
          case 78: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { myCurrentConfiguration.myCommentCounter--;
    if (myCurrentConfiguration.myCommentCounter == 0) {
        yybegin(COMMENTEND);
    }
    return CfmlTokenTypes.COMMENT;
            } 
            // fall through
          case 172: break;
          case 79: 
            { return startComment(YYINITIAL);
            } 
            // fall through
          case 173: break;
          case 80: 
            { return CfscriptTokenTypes.CATCH_KEYWORD;
            } 
            // fall through
          case 174: break;
          case 81: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return CfscriptTokenTypes.VAR_KEYWORD;
            } 
            // fall through
          case 175: break;
          case 82: 
            { return CfscriptTokenTypes.ABORT_KEYWORD;
            } 
            // fall through
          case 176: break;
          case 83: 
            { return CfscriptTokenTypes.BREAK_KEYWORD;
            } 
            // fall through
          case 177: break;
          case 84: 
            { return CfscriptTokenTypes.WHILE_KEYWORD;
            } 
            // fall through
          case 178: break;
          case 85: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { myCurrentConfiguration.myCommentCounter++; return CfmlTokenTypes.COMMENT;
            } 
            // fall through
          case 179: break;
          case 86: 
            { return CfscriptTokenTypes.RETURN_KEYWORD;
            } 
            // fall through
          case 180: break;
          case 87: 
            { return CfscriptTokenTypes.SWITCH_KEYWORD;
            } 
            // fall through
          case 181: break;
          case 88: 
            { return CfscriptTokenTypes.FINALLY_KEYWORD;
            } 
            // fall through
          case 182: break;
          case 89: 
            { return CfscriptTokenTypes.DEFAULT_KEYWORD;
            } 
            // fall through
          case 183: break;
          case 90: 
            { return CfscriptTokenTypes.CONTINUE_KEYWORD;
            } 
            // fall through
          case 184: break;
          case 91: 
            { return CfscriptTokenTypes.CONTAINS_L;
            } 
            // fall through
          case 185: break;
          case 92: 
            { return CfscriptTokenTypes.FUNCTION_KEYWORD;
            } 
            // fall through
          case 186: break;
          case 93: 
            { return CfscriptTokenTypes.NOT_CONTAINS_L;
            } 
            // fall through
          case 187: break;
          case 94: 
            { return CfmlTokenTypes.VAR_ANNOTATION;
            } 
            // fall through
          case 188: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
