// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: ColdFusionScript.flex

package com.intellij.coldFusion.model.lexer;
import com.intellij.openapi.util.text.StringUtil;

import com.intellij.openapi.project.Project;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.coldFusion.model.lexer.CfscriptTokenTypes;
import com.intellij.coldFusion.model.lexer.CfmlTokenTypes;
import com.intellij.coldFusion.model.CfmlUtil;
import com.intellij.util.containers.Stack;
import com.intellij.util.ArrayUtil;


class _CfscriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DOUBLE_QUOTED_STRING = 2;
  public static final int SINGLE_QUOTED_STRING = 4;
  public static final int DOUBLEQUOTE_CLOSER = 6;
  public static final int SINGLEQUOTE_CLOSER = 8;
  public static final int EXPRESSION = 10;
  public static final int X = 12;
  public static final int Y = 14;
  public static final int COMMENT = 16;
  public static final int COMMENTEND = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  5,  5,  5,  5, 
     6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\121\u1100\1\u2700\4\u1100\1\u2800"+
    "\1\u1100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\53\u1100"+
    "\1\u2f00\41\u2000\1\u1100\1\u3000\1\u3100\1\u1100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u1100"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00\1\u5000\1\u5100"+
    "\1\u5200\3\u1100\1\u5300\1\u5400\1\u5500\12\u2000\4\u1100\1\u5600"+
    "\17\u2000\2\u1100\1\u5700\41\u2000\2\u1100\1\u5800\1\u5900\2\u2000"+
    "\1\u5a00\1\u5b00\27\u1100\1\u5c00\4\u1100\1\u5d00\1\u5e00\42\u2000"+
    "\1\u1100\1\u5f00\1\u6000\11\u2000\1\u6100\24\u2000\1\u6200\1\u6300"+
    "\1\u2000\1\u6400\1\u6500\1\u6600\1\u6700\2\u2000\1\u6800\5\u2000"+
    "\1\u6900\1\u6a00\1\u6b00\5\u2000\1\u6c00\1\u6d00\2\u2000\1\u6e00"+
    "\1\u2000\1\u6f00\14\u2000\1\u7000\4\u2000\246\u1100\1\u7100\20\u1100"+
    "\1\u7200\1\u7300\25\u1100\1\u7400\34\u1100\1\u7500\14\u2000\2\u1100"+
    "\1\u7600\5\u2000\23\u1100\1\u7700\u0aec\u2000\1\u7800\1\u7900\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\11\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\11\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\11\1\66\1\67\1\70\1\71\1\11"+
    "\1\3\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\11\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\11\1\72\1\73\1\74\1\3\41\0"+
    "\2\3\4\11\4\3\1\11\2\3\1\0\7\3\1\11"+
    "\4\3\1\11\5\3\27\11\1\3\37\11\1\3\70\11"+
    "\2\46\115\11\1\57\u0142\11\4\3\14\11\16\3\5\11"+
    "\7\3\1\11\1\3\1\11\21\3\160\0\5\11\1\3"+
    "\2\11\2\3\4\11\1\3\1\11\6\3\1\11\1\3"+
    "\3\11\1\3\1\11\1\3\24\11\1\3\123\11\1\3"+
    "\213\11\1\3\5\0\2\3\246\11\1\3\46\11\2\3"+
    "\1\11\6\3\51\11\6\3\1\11\1\3\55\0\1\3"+
    "\1\0\1\3\2\0\1\3\2\0\1\3\1\0\10\3"+
    "\33\11\4\3\4\11\15\3\6\0\5\3\1\11\4\3"+
    "\13\0\1\3\1\0\3\3\53\11\37\0\4\3\2\11"+
    "\1\0\143\11\1\3\1\11\10\0\1\3\6\0\2\11"+
    "\2\0\1\3\4\0\2\11\12\0\3\11\2\3\1\11"+
    "\17\3\1\0\1\11\1\0\36\11\33\0\2\3\131\11"+
    "\13\0\1\11\16\3\12\0\41\11\11\0\2\11\4\3"+
    "\1\11\2\3\1\0\30\11\4\0\1\11\11\0\1\11"+
    "\3\0\1\11\5\0\22\3\31\11\3\0\4\3\13\11"+
    "\65\3\25\11\1\3\22\11\13\3\61\0\66\11\3\0"+
    "\1\11\22\0\1\11\7\0\12\11\2\0\2\3\12\0"+
    "\1\3\20\11\3\0\1\3\10\11\2\3\2\11\2\3"+
    "\26\11\1\3\7\11\1\3\1\11\3\3\4\11\2\3"+
    "\1\0\1\11\7\0\2\3\2\0\2\3\3\0\1\11"+
    "\10\3\1\0\4\3\2\11\1\3\3\11\2\0\2\3"+
    "\12\0\4\11\7\3\2\11\1\3\1\0\2\3\3\0"+
    "\1\3\6\11\4\3\2\11\2\3\26\11\1\3\7\11"+
    "\1\3\2\11\1\3\2\11\1\3\2\11\2\3\1\0"+
    "\1\3\5\0\4\3\2\0\2\3\3\0\3\3\1\0"+
    "\7\3\4\11\1\3\1\11\7\3\14\0\3\11\1\0"+
    "\13\3\3\0\1\3\11\11\1\3\3\11\1\3\26\11"+
    "\1\3\7\11\1\3\2\11\1\3\5\11\2\3\1\0"+
    "\1\11\10\0\1\3\3\0\1\3\3\0\2\3\1\11"+
    "\17\3\2\11\2\0\2\3\12\0\1\3\1\11\7\3"+
    "\1\11\6\0\1\3\3\0\1\3\10\11\2\3\2\11"+
    "\2\3\26\11\1\3\7\11\1\3\2\11\1\3\5\11"+
    "\2\3\1\0\1\11\7\0\2\3\2\0\2\3\3\0"+
    "\7\3\3\0\4\3\2\11\1\3\3\11\2\0\2\3"+
    "\12\0\1\3\1\11\20\3\1\0\1\11\1\3\6\11"+
    "\3\3\3\11\1\3\4\11\3\3\2\11\1\3\1\11"+
    "\1\3\2\11\3\3\2\11\3\3\3\11\3\3\14\11"+
    "\4\3\5\0\3\3\3\0\1\3\4\0\2\3\1\11"+
    "\6\3\1\0\16\3\12\0\11\3\1\11\6\3\5\0"+
    "\10\11\1\3\3\11\1\3\27\11\1\3\20\11\3\3"+
    "\1\11\7\0\1\3\3\0\1\3\4\0\7\3\2\0"+
    "\1\3\3\11\5\3\2\11\2\0\2\3\12\0\20\3"+
    "\1\11\3\0\1\3\10\11\1\3\3\11\1\3\27\11"+
    "\1\3\12\11\1\3\5\11\2\3\1\0\1\11\7\0"+
    "\1\3\3\0\1\3\4\0\7\3\2\0\7\3\1\11"+
    "\1\3\2\11\2\0\2\3\12\0\1\3\2\11\15\3"+
    "\4\0\11\11\1\3\3\11\1\3\51\11\2\0\1\11"+
    "\7\0\1\3\3\0\1\3\4\0\1\11\5\3\3\11"+
    "\1\0\7\3\3\11\2\0\2\3\12\0\12\3\6\11"+
    "\1\3\3\0\1\3\22\11\3\3\30\11\1\3\11\11"+
    "\1\3\1\11\2\3\7\11\3\3\1\0\4\3\6\0"+
    "\1\3\1\0\1\3\10\0\6\3\12\0\2\3\2\0"+
    "\15\3\60\11\1\0\2\11\7\0\4\3\10\11\10\0"+
    "\1\3\12\0\47\3\2\11\1\3\1\11\1\3\5\11"+
    "\1\3\30\11\1\3\1\11\1\3\12\11\1\0\2\11"+
    "\11\0\1\11\2\3\5\11\1\3\1\11\1\3\6\0"+
    "\2\3\12\0\2\3\4\11\40\3\1\11\27\3\2\0"+
    "\6\3\12\0\13\3\1\0\1\3\1\0\1\3\1\0"+
    "\4\3\2\0\10\11\1\3\44\11\4\3\24\0\1\3"+
    "\2\0\5\11\13\0\1\3\44\0\11\3\1\0\71\3"+
    "\53\11\24\0\1\11\12\0\6\3\6\11\4\0\4\11"+
    "\3\0\1\11\3\0\2\11\7\0\3\11\4\0\15\11"+
    "\14\0\1\11\17\0\2\3\46\11\1\3\1\11\5\3"+
    "\1\11\2\3\53\11\1\3\u014d\11\1\3\4\11\2\3"+
    "\7\11\1\3\1\11\1\3\4\11\2\3\51\11\1\3"+
    "\4\11\2\3\41\11\1\3\4\11\2\3\7\11\1\3"+
    "\1\11\1\3\4\11\2\3\17\11\1\3\71\11\1\3"+
    "\4\11\2\3\103\11\2\3\3\0\40\3\20\11\20\3"+
    "\126\11\2\3\6\11\3\3\u016c\11\2\3\21\11\1\3"+
    "\32\11\5\3\113\11\3\3\13\11\7\3\15\11\1\3"+
    "\4\11\3\0\13\3\22\11\3\0\13\3\22\11\2\0"+
    "\14\3\15\11\1\3\3\11\1\3\2\0\14\3\64\11"+
    "\40\0\3\3\1\11\3\3\2\11\1\0\2\3\12\0"+
    "\41\3\4\0\1\3\12\0\6\3\131\11\7\3\5\11"+
    "\2\0\42\11\1\0\1\11\5\3\106\11\12\3\37\11"+
    "\1\3\14\0\4\3\14\0\12\3\12\0\36\11\2\3"+
    "\5\11\13\3\54\11\4\3\32\11\6\3\12\0\46\3"+
    "\27\11\5\0\4\3\65\11\12\0\1\3\35\0\2\3"+
    "\13\0\6\3\12\0\15\3\1\11\10\3\16\0\1\3"+
    "\2\0\77\3\5\0\57\11\21\0\7\11\4\3\12\0"+
    "\21\3\11\0\14\3\3\0\36\11\15\0\2\11\12\0"+
    "\54\11\16\0\14\3\44\11\24\0\10\3\12\0\3\3"+
    "\3\11\12\0\44\11\2\3\11\11\7\3\53\11\2\3"+
    "\3\11\20\3\3\0\1\3\25\0\4\11\1\0\6\11"+
    "\1\0\2\11\3\0\1\11\5\3\300\11\72\0\1\3"+
    "\5\0\26\11\2\3\6\11\2\3\46\11\2\3\6\11"+
    "\2\3\10\11\1\3\1\11\1\3\1\11\1\3\1\11"+
    "\1\3\37\11\2\3\65\11\1\3\7\11\1\3\1\11"+
    "\3\3\3\11\1\3\7\11\3\3\4\11\2\3\6\11"+
    "\4\3\15\11\5\3\3\11\1\3\7\11\16\3\5\0"+
    "\32\3\5\0\20\3\2\11\23\3\1\11\13\3\5\0"+
    "\1\3\12\0\1\3\1\11\15\3\1\11\20\3\15\11"+
    "\3\3\40\11\20\3\15\0\4\3\1\0\3\3\14\0"+
    "\21\3\1\11\4\3\1\11\2\3\12\11\1\3\1\11"+
    "\3\3\5\11\6\3\1\11\1\3\1\11\1\3\1\11"+
    "\1\3\1\47\3\11\1\3\13\11\2\3\4\11\5\3"+
    "\5\11\4\3\1\11\21\3\51\11\u0177\3\57\11\1\3"+
    "\57\11\1\3\205\11\6\3\4\11\3\0\2\11\14\3"+
    "\46\11\1\3\1\11\5\3\1\11\2\3\70\11\7\3"+
    "\1\11\17\3\1\0\27\11\11\3\7\11\1\3\7\11"+
    "\1\3\7\11\1\3\7\11\1\3\7\11\1\3\7\11"+
    "\1\3\7\11\1\3\7\11\1\3\40\0\57\3\1\11"+
    "\325\3\3\11\31\3\11\11\6\0\1\3\5\11\2\3"+
    "\5\11\4\3\126\11\2\3\2\0\2\3\3\11\1\3"+
    "\132\11\1\3\4\11\5\3\53\11\1\3\136\11\21\3"+
    "\40\11\60\3\320\11\100\3\375\11\3\3\215\11\103\3"+
    "\56\11\2\3\15\11\3\3\20\11\12\0\2\11\24\3"+
    "\57\11\1\0\4\3\12\0\1\3\37\11\2\0\120\11"+
    "\2\0\45\3\11\11\2\3\147\11\2\3\65\11\2\3"+
    "\11\11\52\3\15\11\1\0\3\11\1\0\4\11\1\0"+
    "\27\11\5\0\4\3\1\0\13\3\1\11\7\3\64\11"+
    "\14\3\2\0\62\11\22\0\12\3\12\0\6\3\22\0"+
    "\6\11\3\3\1\11\1\3\2\11\13\0\34\11\10\0"+
    "\2\3\27\11\15\0\14\3\35\11\3\3\4\0\57\11"+
    "\16\0\16\3\1\11\12\0\6\3\5\11\1\0\12\11"+
    "\12\0\5\11\1\3\51\11\16\0\11\3\3\11\1\0"+
    "\10\11\2\0\2\3\12\0\6\3\27\11\3\3\1\11"+
    "\3\0\62\11\1\0\1\11\3\0\2\11\2\0\5\11"+
    "\2\0\1\11\1\0\1\11\30\3\3\11\2\3\13\11"+
    "\5\0\2\3\3\11\2\0\12\3\6\11\2\3\6\11"+
    "\2\3\6\11\11\3\7\11\1\3\7\11\1\3\53\11"+
    "\1\3\16\11\6\3\163\11\10\0\1\3\2\0\2\3"+
    "\12\0\6\3\244\11\14\3\27\11\4\3\61\11\4\3"+
    "\156\11\2\3\152\11\46\3\7\11\14\3\5\11\5\3"+
    "\1\11\1\0\12\11\1\3\15\11\1\3\5\11\1\3"+
    "\1\11\1\3\2\11\1\3\2\11\1\3\154\11\41\3"+
    "\153\11\22\3\100\11\2\3\66\11\50\3\15\11\3\3"+
    "\20\0\20\3\20\0\3\3\2\11\30\3\3\11\31\3"+
    "\1\11\6\3\5\11\1\3\207\11\2\3\1\0\4\3"+
    "\1\11\13\3\12\0\7\3\32\11\4\3\1\11\1\3"+
    "\32\11\13\3\131\11\3\3\6\11\2\3\6\11\2\3"+
    "\6\11\2\3\3\11\3\3\2\11\3\3\2\11\22\3"+
    "\3\0\4\3\14\11\1\3\32\11\1\3\23\11\1\3"+
    "\2\11\1\3\17\11\2\3\16\11\42\3\173\11\105\3"+
    "\65\11\210\3\1\0\202\3\35\11\3\3\61\11\17\3"+
    "\1\0\37\3\40\11\15\3\36\11\5\3\46\11\5\0"+
    "\5\3\36\11\2\3\44\11\4\3\10\11\1\3\5\11"+
    "\52\3\236\11\2\3\12\0\6\3\44\11\4\3\44\11"+
    "\4\3\50\11\10\3\64\11\234\3\67\11\11\3\26\11"+
    "\12\3\10\11\230\3\6\11\2\3\1\11\1\3\54\11"+
    "\1\3\2\11\3\3\1\11\2\3\27\11\12\3\27\11"+
    "\11\3\37\11\101\3\23\11\1\3\2\11\12\3\26\11"+
    "\12\3\32\11\106\3\70\11\6\3\2\11\100\3\1\11"+
    "\3\0\1\3\2\0\5\3\4\0\4\11\1\3\3\11"+
    "\1\3\35\11\2\3\3\0\4\3\1\0\40\3\35\11"+
    "\3\3\35\11\43\3\10\11\1\3\34\11\2\0\31\3"+
    "\66\11\12\3\26\11\12\3\23\11\15\3\22\11\156\3"+
    "\111\11\67\3\63\11\15\3\63\11\15\3\44\11\4\0"+
    "\10\3\12\0\u0146\3\52\11\1\3\2\0\3\3\2\11"+
    "\116\3\35\11\12\3\1\11\10\3\26\11\13\0\137\3"+
    "\25\11\33\3\27\11\11\3\3\0\65\11\17\0\37\3"+
    "\12\0\17\3\4\0\55\11\13\0\2\3\1\0\17\3"+
    "\1\0\2\3\31\11\7\3\12\0\6\3\3\0\44\11"+
    "\16\0\1\3\12\0\4\3\1\11\2\0\1\11\10\3"+
    "\43\11\1\0\2\3\1\11\11\3\3\0\60\11\16\0"+
    "\4\11\4\3\4\0\1\3\14\0\1\11\1\3\1\11"+
    "\43\3\22\11\1\3\31\11\14\0\6\3\1\0\101\3"+
    "\7\11\1\3\1\11\1\3\4\11\1\3\17\11\1\3"+
    "\12\11\7\3\57\11\14\0\5\3\12\0\6\3\4\0"+
    "\1\3\10\11\2\3\2\11\2\3\26\11\1\3\7\11"+
    "\1\3\2\11\1\3\5\11\1\3\2\0\1\11\7\0"+
    "\2\3\2\0\2\3\3\0\2\3\1\11\6\3\1\0"+
    "\5\3\5\11\2\0\2\3\7\0\3\3\5\0\213\3"+
    "\65\11\22\0\4\11\5\3\12\0\4\3\1\0\3\11"+
    "\36\3\60\11\24\0\2\11\1\3\1\11\10\3\12\0"+
    "\246\3\57\11\7\0\2\3\11\0\27\3\4\11\2\0"+
    "\42\3\60\11\21\0\3\3\1\11\13\3\12\0\46\3"+
    "\53\11\15\0\1\11\7\3\12\0\66\3\33\11\2\3"+
    "\17\0\4\3\12\0\306\3\54\11\17\0\145\3\100\11"+
    "\12\0\25\3\10\11\2\3\1\11\2\3\10\11\1\3"+
    "\2\11\1\3\30\11\6\0\1\3\2\0\2\3\4\0"+
    "\1\11\1\0\1\11\2\0\14\3\12\0\106\3\10\11"+
    "\2\3\47\11\7\0\2\3\7\0\1\11\1\3\1\11"+
    "\1\0\33\3\1\11\12\0\50\11\7\0\1\11\4\0"+
    "\10\3\1\0\10\3\1\11\13\0\56\11\20\0\3\3"+
    "\1\11\42\3\71\11\7\3\11\11\1\3\45\11\10\0"+
    "\1\3\10\0\1\11\17\3\12\0\30\3\36\11\2\3"+
    "\26\0\1\3\16\0\111\3\7\11\1\3\2\11\1\3"+
    "\46\11\6\0\3\3\1\0\1\3\2\0\1\3\7\0"+
    "\1\11\1\0\10\3\12\0\6\3\6\11\1\3\2\11"+
    "\1\3\40\11\5\0\1\3\2\0\1\3\5\0\1\11"+
    "\7\3\12\0\u0136\3\23\11\4\0\271\3\1\11\54\3"+
    "\4\11\37\3\232\11\146\3\157\11\21\3\304\11\274\3"+
    "\57\11\1\3\11\0\307\3\107\11\271\3\71\11\7\3"+
    "\37\11\1\3\12\0\146\3\36\11\2\3\5\0\13\3"+
    "\60\11\7\0\11\3\4\11\14\3\12\0\11\3\25\11"+
    "\5\3\23\11\260\3\100\11\200\3\113\11\4\3\1\0"+
    "\1\11\67\0\7\3\4\0\15\11\100\3\2\11\1\3"+
    "\1\11\1\0\13\3\2\0\16\3\370\11\10\3\326\11"+
    "\52\3\11\11\367\3\37\11\61\3\3\11\21\3\4\11"+
    "\10\3\u018c\11\4\3\153\11\5\3\15\11\3\3\11\11"+
    "\7\3\12\11\3\3\2\0\1\3\4\0\301\3\5\0"+
    "\3\3\26\0\2\3\7\0\36\3\4\0\224\3\3\0"+
    "\273\3\125\11\1\3\107\11\1\3\2\11\2\3\1\11"+
    "\2\3\2\11\2\3\4\11\1\3\14\11\1\3\1\11"+
    "\1\3\7\11\1\3\101\11\1\3\4\11\2\3\10\11"+
    "\1\3\7\11\1\3\34\11\1\3\4\11\1\3\5\11"+
    "\1\3\1\11\3\3\7\11\1\3\u0154\11\2\3\31\11"+
    "\1\3\31\11\1\3\37\11\1\3\31\11\1\3\37\11"+
    "\1\3\31\11\1\3\37\11\1\3\31\11\1\3\37\11"+
    "\1\3\31\11\1\3\10\11\2\3\151\0\4\3\62\0"+
    "\10\3\1\0\16\3\1\0\26\3\5\0\1\3\17\0"+
    "\120\3\7\0\1\3\21\0\2\3\7\0\1\3\2\0"+
    "\1\3\5\0\325\3\55\11\3\3\7\0\7\11\2\3"+
    "\12\0\4\3\1\11\u0171\3\54\11\16\0\5\3\306\11"+
    "\13\3\7\0\51\3\104\11\7\0\1\11\4\3\12\0"+
    "\u0156\3\1\11\117\3\4\11\1\3\33\11\1\3\2\11"+
    "\1\3\1\11\2\3\1\11\1\3\12\11\1\3\4\11"+
    "\1\3\1\11\1\3\1\11\6\3\1\11\4\3\1\11"+
    "\1\3\1\11\1\3\1\11\1\3\3\11\1\3\2\11"+
    "\1\3\1\11\2\3\1\11\1\3\1\11\1\3\1\11"+
    "\1\3\1\11\1\3\1\11\1\3\2\11\1\3\1\11"+
    "\2\3\4\11\1\3\7\11\1\3\4\11\1\3\4\11"+
    "\1\3\1\11\1\3\12\11\1\3\21\11\5\3\3\11"+
    "\1\3\5\11\1\3\21\11\u0134\3\12\0\6\3\336\11"+
    "\42\3\65\11\13\3\336\11\2\3\u0182\11\16\3\u0131\11"+
    "\37\3\36\11\342\3\113\11\266\3\1\0\36\3\140\0"+
    "\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\2\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\24\7\1\32\1\33\1\34\1\35"+
    "\1\36\1\2\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\41\1\45\1\1\1\3\2\1\1\2\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\2\0\1\57\1\60\1\0\1\61\1\62\1\63\1\64"+
    "\12\7\1\65\1\7\1\66\4\7\1\67\1\7\1\70"+
    "\1\7\1\71\1\7\1\72\1\66\1\73\1\74\4\7"+
    "\1\75\15\7\1\76\1\0\2\77\6\0\2\100\1\0"+
    "\1\7\1\101\1\102\15\7\1\103\2\7\1\104\3\7"+
    "\1\105\2\7\1\0\1\7\1\73\1\106\1\107\1\110"+
    "\13\7\1\111\4\7\1\112\1\113\2\0\1\114\1\115"+
    "\2\100\2\0\1\116\1\0\5\7\1\117\3\7\1\120"+
    "\2\7\1\121\4\7\1\122\3\7\1\0\1\7\1\0"+
    "\14\7\1\123\1\124\1\0\1\7\1\125\1\7\1\126"+
    "\1\0\1\116\1\0\1\127\1\130\1\131\2\7\1\132"+
    "\1\133\4\7\1\0\1\66\6\7\3\0\14\7\1\134"+
    "\1\7\1\135\1\136\1\0\1\137\5\7\1\0\3\7"+
    "\1\140\2\7\1\107\2\0\4\7\1\141\1\142\2\7"+
    "\1\143\1\144\1\145\1\146\1\7\1\0\1\147\3\7"+
    "\1\150\1\0\1\151\2\7\1\152\1\7\2\0\1\153"+
    "\1\154\1\7\1\155\1\7\1\156\1\7\1\0\1\7"+
    "\1\157\1\160\1\0\1\161\1\0\1\7\2\0\1\7"+
    "\1\162\1\7\1\0\1\163\2\0\1\164\1\74\1\107"+
    "\2\7\4\0\2\7\4\0\2\7\2\0\1\70\1\0"+
    "\1\165\1\166\15\0\1\167\2\0\2\170\11\0\1\73"+
    "\2\0\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[415];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u01e8\0\u01e8\0\u029f\0\u01e8\0\u02dc"+
    "\0\u01e8\0\u01e8\0\u01e8\0\u0319\0\u0356\0\u01e8\0\u0393\0\u01e8"+
    "\0\u03d0\0\u040d\0\u044a\0\u01e8\0\u01e8\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9"+
    "\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1"+
    "\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u01e8\0\u01e8\0\u01e8"+
    "\0\u01e8\0\u01e8\0\u0a3f\0\u01e8\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33"+
    "\0\u0b70\0\u0bad\0\u01e8\0\u01e8\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8"+
    "\0\u01e8\0\u01e8\0\u0d1b\0\u0d58\0\u01e8\0\u0d95\0\u0dd2\0\u01e8"+
    "\0\u01e8\0\u01e8\0\u01e8\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03"+
    "\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb"+
    "\0\u1128\0\u1165\0\u11a2\0\u11df\0\u029f\0\u121c\0\u1259\0\u1296"+
    "\0\u029f\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441"+
    "\0\u147e\0\u14bb\0\u029f\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec"+
    "\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4"+
    "\0\u01e8\0\u0ab9\0\u0af6\0\u0b70\0\u0bad\0\u1811\0\u184e\0\u188b"+
    "\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u029f\0\u029f"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1"+
    "\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u029f\0\u1d4f\0\u1d8c"+
    "\0\u029f\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37"+
    "\0\u1f74\0\u029f\0\u029f\0\u029f\0\u1fb1\0\u1fee\0\u202b\0\u2068"+
    "\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250"+
    "\0\u029f\0\u228d\0\u22ca\0\u2307\0\u2344\0\u029f\0\u029f\0\u2381"+
    "\0\u23be\0\u01e8\0\u01e8\0\u01e8\0\u23fb\0\u1942\0\u2438\0\u1942"+
    "\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u029f\0\u25e3"+
    "\0\u2620\0\u265d\0\u029f\0\u269a\0\u26d7\0\u029f\0\u2714\0\u2751"+
    "\0\u278e\0\u27cb\0\u029f\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc"+
    "\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4"+
    "\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u029f\0\u029f\0\u2c52"+
    "\0\u2c8f\0\u029f\0\u2ccc\0\u01e8\0\u2d09\0\u01e8\0\u2d46\0\u01e8"+
    "\0\u029f\0\u029f\0\u2d83\0\u2dc0\0\u029f\0\u029f\0\u2dfd\0\u2e3a"+
    "\0\u2e77\0\u2eb4\0\u2ef1\0\u029f\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5"+
    "\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116\0\u3153\0\u3190\0\u31cd"+
    "\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5"+
    "\0\u33f2\0\u342f\0\u346c\0\u029f\0\u01e8\0\u34a9\0\u029f\0\u34e6"+
    "\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691\0\u36ce"+
    "\0\u029f\0\u370b\0\u3748\0\u01e8\0\u3785\0\u37c2\0\u37ff\0\u383c"+
    "\0\u3879\0\u38b6\0\u029f\0\u029f\0\u38f3\0\u3930\0\u029f\0\u029f"+
    "\0\u029f\0\u029f\0\u396d\0\u39aa\0\u029f\0\u39e7\0\u3a24\0\u3a61"+
    "\0\u029f\0\u3a9e\0\u029f\0\u3adb\0\u3b18\0\u029f\0\u3b55\0\u3b92"+
    "\0\u3bcf\0\u029f\0\u029f\0\u3c0c\0\u029f\0\u3c49\0\u029f\0\u3c86"+
    "\0\u3cc3\0\u3d00\0\u029f\0\u029f\0\u3d3d\0\u029f\0\u3d7a\0\u3db7"+
    "\0\u3df4\0\u3e31\0\u3e6e\0\u029f\0\u3eab\0\u3ee8\0\u029f\0\u3f25"+
    "\0\u3f62\0\u029f\0\u3f9f\0\u3fdc\0\u4019\0\u4056\0\u4093\0\u40d0"+
    "\0\u410d\0\u414a\0\u4187\0\u41c4\0\u4201\0\u423e\0\u427b\0\u42b8"+
    "\0\u42f5\0\u4332\0\u436f\0\u43ac\0\u43e9\0\u4426\0\u029f\0\u029f"+
    "\0\u4463\0\u44a0\0\u44dd\0\u451a\0\u4557\0\u4594\0\u45d1\0\u460e"+
    "\0\u464b\0\u4688\0\u46c5\0\u4702\0\u473f\0\u01e8\0\u477c\0\u47b9"+
    "\0\u01e8\0\u47f6\0\u4833\0\u4870\0\u48ad\0\u48ea\0\u4927\0\u4964"+
    "\0\u49a1\0\u49de\0\u4a1b\0\u01e8\0\u4a58\0\u4a95\0\u01e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[415];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\2\12\1\11\2\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\11\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\16\1\51\1\16\1\52\1\53"+
    "\1\54\1\55\1\56\1\16\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\16\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\7\75\1\76\1\77\64\75\10\100"+
    "\1\101\3\100\1\102\60\100\7\11\1\103\101\11\1\104"+
    "\61\11\2\12\1\11\2\12\67\11\1\105\2\106\1\105"+
    "\2\106\14\105\1\107\6\105\1\110\43\105\1\11\2\12"+
    "\1\11\2\12\14\11\1\111\52\11\76\0\2\12\1\0"+
    "\2\12\121\0\1\112\42\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\30\16\22\0\1\114\16\0"+
    "\1\115\74\0\1\116\62\0\1\117\11\0\1\120\64\0"+
    "\1\121\7\0\1\122\61\0\1\123\4\0\1\124\5\0"+
    "\1\125\65\0\1\126\74\0\1\126\1\0\2\33\54\0"+
    "\1\127\23\0\1\130\74\0\1\131\74\0\1\132\71\0"+
    "\1\133\45\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\1\16\1\134\12\16\1\135\3\16\1\136"+
    "\7\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\10\16\1\137\4\16\1\140\2\16\1\141"+
    "\7\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\1\142\14\16\1\143\12\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\1\144"+
    "\3\16\1\145\10\16\1\146\12\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\12\16\1\147"+
    "\4\16\1\150\10\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\1\151\7\16\1\152\4\16"+
    "\1\153\5\16\1\154\4\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\4\16\1\155\13\16"+
    "\1\156\1\16\1\157\1\160\4\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\5\16\1\161"+
    "\5\16\1\162\1\163\4\16\1\164\6\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\4\16"+
    "\1\165\15\16\1\166\5\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\15\16\1\167\12\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\4\16\1\170\10\16\1\171\5\16\1\172\4\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\20\16\1\173\7\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\1\174\17\16\1\175"+
    "\2\16\1\176\4\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\4\16\1\177\23\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\22\16\1\200\2\16\1\201\2\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\20\16\1\202"+
    "\7\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\23\16\1\203\4\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\1\204\14\16"+
    "\1\205\12\16\7\0\1\16\10\0\1\16\11\0\1\113"+
    "\1\0\2\16\7\0\7\16\1\206\20\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\13\16"+
    "\1\207\1\16\1\210\12\16\102\0\1\211\1\0\7\75"+
    "\1\212\1\213\64\75\7\0\1\75\75\0\1\75\64\0"+
    "\10\100\1\214\3\100\1\215\60\100\10\0\1\100\100\0"+
    "\1\100\60\0\22\105\1\0\6\105\1\0\44\105\2\106"+
    "\1\105\2\106\14\105\1\0\6\105\1\0\43\105\22\0"+
    "\1\216\60\0\1\217\110\0\1\220\52\0\17\123\1\221"+
    "\55\123\1\222\1\124\1\223\1\222\1\224\1\124\67\222"+
    "\25\0\2\126\70\0\1\225\52\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\15\16\1\226\12\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\3\16\1\227\23\16\1\230\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\20\16\1\231"+
    "\7\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\14\16\1\232\13\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\15\16\1\233"+
    "\12\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\4\16\1\234\23\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\21\16\1\235"+
    "\1\236\5\16\7\0\1\16\10\0\1\16\11\0\1\113"+
    "\1\0\2\16\7\0\13\16\1\237\1\240\13\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\22\16\1\241\5\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\5\16\1\242\22\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\4\16\1\243\23\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\21\16\1\244\6\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\23\16\1\245\1\246\3\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\12\16\1\247\15\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\14\16\1\250\13\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\20\16\1\251\7\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\14\16\1\252\13\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\4\16\1\253\23\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\4\16\1\155\23\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\10\16\1\254\17\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\16\16\1\255\11\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\2\16\1\256\17\16"+
    "\1\257\5\16\7\0\1\16\4\0\1\260\3\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\30\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\21\16"+
    "\1\261\6\16\7\0\1\16\10\0\1\16\11\0\1\113"+
    "\1\0\2\16\7\0\4\16\1\262\23\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\3\16"+
    "\1\263\24\16\7\0\1\16\10\0\1\16\11\0\1\113"+
    "\1\0\2\16\7\0\17\16\1\264\10\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\22\16"+
    "\1\265\5\16\7\0\1\16\10\0\1\16\11\0\1\113"+
    "\1\0\2\16\7\0\13\16\1\266\14\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\2\16"+
    "\1\267\3\16\1\270\21\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\10\16\1\271\17\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\1\16\1\272\26\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\13\16\1\273\3\16"+
    "\1\274\2\16\1\275\5\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\20\16\1\276\7\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\10\16\1\277\17\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\23\16\1\300\3\16"+
    "\1\301\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\10\16\1\302\17\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\20\16\1\303"+
    "\7\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\10\16\1\304\17\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\10\16\1\305"+
    "\17\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\12\16\1\306\15\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\20\16\1\307"+
    "\7\16\31\0\1\310\74\0\1\311\105\0\1\312\41\0"+
    "\17\123\1\221\4\123\1\313\50\123\2\222\1\314\1\222"+
    "\1\315\70\222\1\0\2\316\1\0\2\316\27\0\1\317"+
    "\37\0\1\222\1\124\1\320\1\222\1\224\1\124\67\222"+
    "\22\0\1\321\52\0\1\16\10\0\1\16\11\0\1\113"+
    "\1\0\2\16\7\0\20\16\1\322\7\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\1\323"+
    "\27\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\1\324\27\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\12\16\1\325\15\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\1\326\27\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\4\16\1\327\23\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\2\16\1\330\25\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\16\16\1\331\11\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\22\16\1\332\5\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\4\16\1\333\23\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\1\334\27\16\7\0\1\16\10\0\1\16\11\0\1\113"+
    "\1\0\2\16\7\0\21\16\1\335\6\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\4\16"+
    "\1\336\23\16\7\0\1\16\10\0\1\16\11\0\1\113"+
    "\1\0\2\16\7\0\1\337\27\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\21\16\1\300"+
    "\6\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\1\340\27\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\2\16\1\341\25\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\1\342\27\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\3\16\1\343\24\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\15\16\1\344\12\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\12\16\1\345\15\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\4\16\1\346\23\16\61\0\1\347\22\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\21\16\1\350"+
    "\6\16\7\0\1\16\4\0\1\351\3\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\30\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\4\16\1\352"+
    "\23\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\11\16\1\353\16\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\4\16\1\354"+
    "\23\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\24\16\1\355\3\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\12\16\1\356"+
    "\15\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\15\16\1\357\12\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\23\16\1\360"+
    "\4\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\7\16\1\361\13\16\1\362\4\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\10\16\1\363\12\16\1\364\4\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\22\16\1\365"+
    "\5\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\4\16\1\366\23\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\3\16\1\367"+
    "\24\16\7\0\1\16\2\370\1\0\2\370\3\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\10\16\1\371\17\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\3\16\1\372\24\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\12\16\1\373\15\16"+
    "\42\0\1\374\63\0\1\375\52\0\2\222\1\376\1\222"+
    "\1\315\70\222\40\0\1\377\56\0\1\u0100\52\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\22\16"+
    "\1\u0101\5\16\7\0\1\16\10\0\1\16\11\0\1\113"+
    "\1\0\2\16\7\0\27\16\1\u0102\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\20\16\1\u0103"+
    "\7\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\4\16\1\u0104\23\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\11\16\1\u0105"+
    "\16\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\7\16\1\u0106\20\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\15\16\1\u0107"+
    "\12\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\1\u0108\7\16\1\u0109\17\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\23\16"+
    "\1\u010a\4\16\7\0\1\16\4\0\1\u010b\3\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\30\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\12\16"+
    "\1\u010c\15\16\7\0\1\16\10\0\1\16\11\0\1\113"+
    "\1\0\2\16\7\0\12\16\1\u010d\15\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\22\16"+
    "\1\u010e\5\16\7\0\1\16\10\0\1\16\11\0\1\113"+
    "\1\0\2\16\7\0\22\16\1\u010f\5\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\20\16"+
    "\1\u0110\7\16\7\0\1\16\10\0\1\16\11\0\1\113"+
    "\1\0\2\16\7\0\23\16\1\u0111\4\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\20\16"+
    "\1\u0112\7\16\62\0\1\u0113\21\0\1\16\4\0\1\u0114"+
    "\3\0\1\16\11\0\1\113\1\0\2\16\7\0\30\16"+
    "\51\0\1\u0115\32\0\1\16\10\0\1\16\11\0\1\113"+
    "\1\0\2\16\7\0\20\16\1\u0116\7\16\7\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\1\u0117"+
    "\27\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\4\16\1\u0118\23\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\1\u0119\27\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\10\16\1\u011a\17\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\22\16\1\u011b\5\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\10\16\1\u011c\17\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\20\16\1\u011d\7\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\20\16\1\u011e\7\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\14\16\1\u011f\13\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\2\16\1\u0120\25\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\2\16\1\u0121\25\16"+
    "\10\0\2\370\1\0\2\370\3\0\1\u0122\24\0\30\u0122"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\1\u0123\27\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\4\16\1\u0124\23\16\31\0"+
    "\1\u0125\115\0\1\u0126\31\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\27\16\1\u0127\7\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\1\u0128"+
    "\27\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\14\16\1\u0129\13\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\10\16\1\u012a"+
    "\17\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\14\16\1\u012b\13\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\12\16\1\u012c"+
    "\15\16\61\0\1\u012d\22\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\12\16\1\u012e\15\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\10\16\1\u012f\17\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\4\16\1\u0130\23\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\22\16\1\u0131\5\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\3\16\1\u0132\24\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\5\16\1\u0133\22\16\67\0\1\u0134\74\0\1\u0135\71\0"+
    "\1\u0136\17\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\10\16\1\u0137\17\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\6\16\1\u0138"+
    "\21\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\14\16\1\u0139\13\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\22\16\1\u013a"+
    "\5\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\2\16\1\u013b\25\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\4\16\1\u013c"+
    "\23\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\20\16\1\u013d\7\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\15\16\1\u013e"+
    "\12\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\14\16\1\u013f\13\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\6\16\1\u0140"+
    "\21\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\22\16\1\u0141\5\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\7\16\1\u0142"+
    "\20\16\7\0\1\u0122\10\0\1\u0122\13\0\2\u0122\7\0"+
    "\30\u0122\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\1\16\1\u0143\26\16\60\0\1\u0144\23\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\14\16\1\u0145\13\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\4\16\1\u0146\23\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\14\16\1\u0147\13\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\23\16\1\u0148\4\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\22\16\1\u0149\5\16\62\0\1\u014a\21\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\27\16\1\u014b"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\15\16\1\u014c\12\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\20\16\1\u014d\7\16"+
    "\7\0\1\16\10\0\1\16\11\0\1\113\1\0\2\16"+
    "\7\0\4\16\1\u014e\23\16\7\0\1\16\10\0\1\16"+
    "\11\0\1\113\1\0\2\16\7\0\1\u014f\27\16\54\0"+
    "\1\u0150\110\0\1\u0151\13\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\2\16\1\u0152\25\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\4\16\1\u0153\23\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\2\16\1\u0154\25\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\4\16\1\u0155\23\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\4\16\1\u0156\23\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\25\16\1\u0157\2\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\12\16\1\u0158\15\16\57\0"+
    "\1\u0159\24\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\14\16\1\u015a\13\16\7\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\21\16\1\u015b"+
    "\6\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\4\16\1\u015c\23\16\67\0\1\u015d\14\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\14\16\1\u015e\13\16\7\0\1\16\4\0\1\u015f\3\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\30\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\2\16\1\u0160\25\16\45\0\1\u0161\74\0\1\u0162\36\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\15\16\1\u0163\12\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\3\16\1\u0164\24\16\7\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\4\16\1\u0165\23\16\71\0\1\u0166\12\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\22\16\1\u0167"+
    "\5\16\14\0\1\u0168\147\0\1\u0169\14\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\4\16\1\u016a"+
    "\23\16\61\0\1\u016b\72\0\1\u016c\24\0\1\16\10\0"+
    "\1\16\11\0\1\113\1\0\2\16\7\0\3\16\1\u016d"+
    "\24\16\7\0\1\16\10\0\1\16\11\0\1\113\1\0"+
    "\2\16\7\0\14\16\1\u016e\13\16\45\0\1\u016f\76\0"+
    "\1\u0170\101\0\1\u0171\34\0\1\u0172\146\0\1\u0134\15\0"+
    "\1\16\10\0\1\16\11\0\1\113\1\0\2\16\7\0"+
    "\10\16\1\u0173\17\16\7\0\1\16\10\0\1\16\11\0"+
    "\1\113\1\0\2\16\7\0\1\u0174\27\16\65\0\1\u0175"+
    "\71\0\1\u0176\57\0\1\u0177\111\0\1\u0178\21\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\14\16"+
    "\1\u0179\13\16\7\0\1\16\10\0\1\16\11\0\1\113"+
    "\1\0\2\16\7\0\13\16\1\u017a\14\16\55\0\1\u017b"+
    "\100\0\1\u017c\74\0\1\u017d\100\0\1\u017e\16\0\1\16"+
    "\10\0\1\16\11\0\1\113\1\0\2\16\7\0\6\16"+
    "\1\u017f\21\16\7\0\1\16\10\0\1\16\11\0\1\113"+
    "\1\0\2\16\7\0\4\16\1\u0180\23\16\45\0\1\u0181"+
    "\116\0\1\u0182\21\0\1\u0183\74\0\1\u0184\126\0\1\u0185"+
    "\73\0\1\u0186\111\0\1\u0187\63\0\1\u0188\102\0\1\u0189"+
    "\72\0\1\u018a\104\0\1\u018b\73\0\1\u018c\61\0\1\u018d"+
    "\104\0\1\u018e\27\0\1\u018f\150\0\1\u0190\13\0\2\u018d"+
    "\1\u0191\1\u018d\1\u0192\70\u018d\42\0\1\u0193\70\0\1\u0194"+
    "\40\0\1\u0191\147\0\1\u0195\67\0\1\u0196\105\0\1\u0197"+
    "\20\0\1\u0198\125\0\1\u0199\116\0\1\u019a\64\0\1\u019b"+
    "\77\0\1\u019c\26\0\1\u019d\147\0\1\u019e\67\0\1\u019f"+
    "\21\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19154];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\1\0\1\11\2\1\2\11\1\1\1\11"+
    "\1\1\3\11\2\1\1\11\1\1\1\11\3\1\2\11"+
    "\30\1\5\11\1\1\1\11\6\1\2\11\5\1\11\11"+
    "\2\0\1\11\1\1\1\0\4\11\55\1\1\11\1\0"+
    "\2\1\6\0\2\1\1\0\32\1\1\0\27\1\2\0"+
    "\3\11\1\1\2\0\1\1\1\0\25\1\1\0\1\1"+
    "\1\0\16\1\1\0\3\1\1\11\1\0\1\11\1\0"+
    "\1\11\12\1\1\0\7\1\3\0\17\1\1\11\1\0"+
    "\6\1\1\0\6\1\1\11\2\0\15\1\1\0\5\1"+
    "\1\0\5\1\2\0\7\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\2\0\3\1\1\0\1\1\2\0\5\1"+
    "\4\0\2\1\4\0\2\1\2\0\1\1\1\0\2\1"+
    "\15\0\1\11\2\0\1\11\1\1\11\0\1\11\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[415];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  Project myProject;
  final CfscriptLexerConfiguration myCurrentConfiguration = new CfscriptLexerConfiguration();

  public class CfscriptLexerConfiguration {
      public int mySharpCounter = 0;
      public int myCommentCounter = 0;
      public Stack<Integer> myReturnStack = new Stack<>();

      public CfscriptLexerConfiguration() {}

      public CfscriptLexerConfiguration(int sharpCounter, int commentCounter,
                                        Stack<Integer> returnStack) {
          mySharpCounter = sharpCounter;
          myCommentCounter = commentCounter;
          myReturnStack = returnStack;
      }

      public void reset() {
          mySharpCounter = 0;
          myCommentCounter = 0;
          myReturnStack.clear();
      }
  }

  public _CfscriptLexer(Project project) {
    this((java.io.Reader)null);
    myProject = project;
  }

  private IElementType startComment(int stateToReturnTo) {
    myCurrentConfiguration.myCommentCounter = 0;
    myCurrentConfiguration.myReturnStack.push(stateToReturnTo);
    myCurrentConfiguration.myCommentCounter++;
    yybegin(COMMENT);
    return CfmlTokenTypes.COMMENT;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _CfscriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yychar = start;
    myCurrentConfiguration.reset();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return CfmlTokenTypes.COMMENT;
            }
          // fall through
          case 121: break;
          case 2:
            { return CfscriptTokenTypes.BAD_CHARACTER;
            }
          // fall through
          case 122: break;
          case 3:
            { return CfscriptTokenTypes.WHITE_SPACE;
            }
          // fall through
          case 123: break;
          case 4:
            { return CfscriptTokenTypes.NOT;
            }
          // fall through
          case 124: break;
          case 5:
            { yybegin(DOUBLE_QUOTED_STRING);
    return CfmlTokenTypes.DOUBLE_QUOTE;
            }
          // fall through
          case 125: break;
          case 6:
            { if (myCurrentConfiguration.mySharpCounter == 0) {
        myCurrentConfiguration.myReturnStack.push(YYINITIAL);
        myCurrentConfiguration.mySharpCounter = 1;
        return CfscriptTokenTypes.OPENSHARP;
    }
    myCurrentConfiguration.mySharpCounter--;
    yybegin(myCurrentConfiguration.myReturnStack.pop());
    return CfscriptTokenTypes.CLOSESHARP;
            }
          // fall through
          case 126: break;
          case 7:
            { return CfscriptTokenTypes.IDENTIFIER;
            }
          // fall through
          case 127: break;
          case 8:
            { return CfscriptTokenTypes.MOD;
            }
          // fall through
          case 128: break;
          case 9:
            { return CfscriptTokenTypes.CONCAT;
            }
          // fall through
          case 129: break;
          case 10:
            { yybegin(SINGLE_QUOTED_STRING);
    return CfmlTokenTypes.SINGLE_QUOTE;
            }
          // fall through
          case 130: break;
          case 11:
            { return CfscriptTokenTypes.L_BRACKET;
            }
          // fall through
          case 131: break;
          case 12:
            { return CfscriptTokenTypes.R_BRACKET;
            }
          // fall through
          case 132: break;
          case 13:
            { return CfscriptTokenTypes.MUL;
            }
          // fall through
          case 133: break;
          case 14:
            { return CfscriptTokenTypes.ADD;
            }
          // fall through
          case 134: break;
          case 15:
            { return CfscriptTokenTypes.COMMA;
            }
          // fall through
          case 135: break;
          case 16:
            { return CfscriptTokenTypes.MINUS;
            }
          // fall through
          case 136: break;
          case 17:
            { return CfscriptTokenTypes.POINT;
            }
          // fall through
          case 137: break;
          case 18:
            { return CfscriptTokenTypes.DEV;
            }
          // fall through
          case 138: break;
          case 19:
            { return CfscriptTokenTypes.INTEGER;
            }
          // fall through
          case 139: break;
          case 20:
            { return CfscriptTokenTypes.DOTDOT;
            }
          // fall through
          case 140: break;
          case 21:
            { return CfscriptTokenTypes.SEMICOLON;
            }
          // fall through
          case 141: break;
          case 22:
            { return CfscriptTokenTypes.LT;
            }
          // fall through
          case 142: break;
          case 23:
            { return CfmlTokenTypes.ASSIGN;
            }
          // fall through
          case 143: break;
          case 24:
            { return CfscriptTokenTypes.GT;
            }
          // fall through
          case 144: break;
          case 25:
            { return CfscriptTokenTypes.QUESTION;
            }
          // fall through
          case 145: break;
          case 26:
            { return CfscriptTokenTypes.L_SQUAREBRACKET;
            }
          // fall through
          case 146: break;
          case 27:
            { return CfscriptTokenTypes.INT_DEV;
            }
          // fall through
          case 147: break;
          case 28:
            { return CfscriptTokenTypes.R_SQUAREBRACKET;
            }
          // fall through
          case 148: break;
          case 29:
            { return CfscriptTokenTypes.POW;
            }
          // fall through
          case 149: break;
          case 30:
            { return CfscriptTokenTypes.L_CURLYBRACKET;
            }
          // fall through
          case 150: break;
          case 31:
            { return CfscriptTokenTypes.R_CURLYBRACKET;
            }
          // fall through
          case 151: break;
          case 32:
            { yybegin(DOUBLEQUOTE_CLOSER); return CfmlTokenTypes.STRING_TEXT;
            }
          // fall through
          case 152: break;
          case 33:
            { yybegin(YYINITIAL); return CfmlTokenTypes.DOUBLE_QUOTE_CLOSER;
            }
          // fall through
          case 153: break;
          case 34:
            { myCurrentConfiguration.myReturnStack.push(DOUBLE_QUOTED_STRING);
    myCurrentConfiguration.mySharpCounter++;
    yybegin(YYINITIAL);
    return CfscriptTokenTypes.OPENSHARP;
            }
          // fall through
          case 154: break;
          case 35:
            { yybegin(SINGLEQUOTE_CLOSER); return CfmlTokenTypes.STRING_TEXT;
            }
          // fall through
          case 155: break;
          case 36:
            { myCurrentConfiguration.myReturnStack.push(SINGLE_QUOTED_STRING);
    myCurrentConfiguration.mySharpCounter++;
    yybegin(YYINITIAL);
    return CfscriptTokenTypes.OPENSHARP;
            }
          // fall through
          case 156: break;
          case 37:
            { yybegin(YYINITIAL); return CfmlTokenTypes.SINGLE_QUOTE_CLOSER;
            }
          // fall through
          case 157: break;
          case 38:
            { return CfscriptTokenTypes.NEQ;
            }
          // fall through
          case 158: break;
          case 39:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { if (ArrayUtil.find(CfmlUtil.getVariableScopes(myProject), StringUtil.toLowerCase(yytext().toString())) != -1) {
        return CfscriptTokenTypes.SCOPE_KEYWORD;
    } else {
        return CfscriptTokenTypes.IDENTIFIER;
    }
            }
          // fall through
          case 159: break;
          case 40:
            { return CfscriptTokenTypes.AND;
            }
          // fall through
          case 160: break;
          case 41:
            { return CfscriptTokenTypes.CONCAT_EQ;
            }
          // fall through
          case 161: break;
          case 42:
            { return CfscriptTokenTypes.MUL_EQ;
            }
          // fall through
          case 162: break;
          case 43:
            { return CfscriptTokenTypes.INC;
            }
          // fall through
          case 163: break;
          case 44:
            { return CfscriptTokenTypes.ADD_EQ;
            }
          // fall through
          case 164: break;
          case 45:
            { return CfscriptTokenTypes.DEC;
            }
          // fall through
          case 165: break;
          case 46:
            { return CfscriptTokenTypes.MINUS_EQ;
            }
          // fall through
          case 166: break;
          case 47:
            { return CfscriptTokenTypes.DEV_EQ;
            }
          // fall through
          case 167: break;
          case 48:
            { return CfscriptTokenTypes.DOUBLE;
            }
          // fall through
          case 168: break;
          case 49:
            { return CfscriptTokenTypes.LTE;
            }
          // fall through
          case 169: break;
          case 50:
            { return CfscriptTokenTypes.EQEQ;
            }
          // fall through
          case 170: break;
          case 51:
            { return CfscriptTokenTypes.GTE;
            }
          // fall through
          case 171: break;
          case 52:
            { return CfscriptTokenTypes.ELVIS;
            }
          // fall through
          case 172: break;
          case 53:
            { return CfscriptTokenTypes.DO_KEYWORD;
            }
          // fall through
          case 173: break;
          case 54:
            { return CfscriptTokenTypes.EQ_L;
            }
          // fall through
          case 174: break;
          case 55:
            { return CfscriptTokenTypes.GE_L;
            }
          // fall through
          case 175: break;
          case 56:
            { return CfscriptTokenTypes.GT_L;
            }
          // fall through
          case 176: break;
          case 57:
            { return CfscriptTokenTypes.IF_KEYWORD;
            }
          // fall through
          case 177: break;
          case 58:
            { return CfscriptTokenTypes.IN_L;
            }
          // fall through
          case 178: break;
          case 59:
            { return CfscriptTokenTypes.LE_L;
            }
          // fall through
          case 179: break;
          case 60:
            { return CfscriptTokenTypes.LT_L;
            }
          // fall through
          case 180: break;
          case 61:
            { return CfscriptTokenTypes.OR_L;
            }
          // fall through
          case 181: break;
          case 62:
            { return CfscriptTokenTypes.OR;
            }
          // fall through
          case 182: break;
          case 63:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return CfmlTokenTypes.STRING_TEXT;
            }
          // fall through
          case 183: break;
          case 64:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return CfscriptTokenTypes.COMMENT;
            }
          // fall through
          case 184: break;
          case 65:
            { return CfscriptTokenTypes.AND_L;
            }
          // fall through
          case 185: break;
          case 66:
            { return CfscriptTokenTypes.ANY_TYPE;
            }
          // fall through
          case 186: break;
          case 67:
            { return CfscriptTokenTypes.NOT_XOR_L;
            }
          // fall through
          case 187: break;
          case 68:
            { return CfscriptTokenTypes.FOR_KEYWORD;
            }
          // fall through
          case 188: break;
          case 69:
            { return CfscriptTokenTypes.IMP_L;
            }
          // fall through
          case 189: break;
          case 70:
            { return CfscriptTokenTypes.MOD_L;
            }
          // fall through
          case 190: break;
          case 71:
            { return CfscriptTokenTypes.NEQ_L;
            }
          // fall through
          case 191: break;
          case 72:
            { return CfscriptTokenTypes.NOT_L;
            }
          // fall through
          case 192: break;
          case 73:
            { return CfscriptTokenTypes.TRY_KEYWORD;
            }
          // fall through
          case 193: break;
          case 74:
            { return CfscriptTokenTypes.XML_TYPE;
            }
          // fall through
          case 194: break;
          case 75:
            { return CfscriptTokenTypes.XOR_L;
            }
          // fall through
          case 195: break;
          case 76:
            { yybegin(myCurrentConfiguration.myReturnStack.pop()); return CfmlTokenTypes.COMMENT;
            }
          // fall through
          case 196: break;
          case 77:
            { return CfscriptTokenTypes.COMMENT;
            }
          // fall through
          case 197: break;
          case 78:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { return CfscriptTokenTypes.COMMENT;
            }
          // fall through
          case 198: break;
          case 79:
            { return CfscriptTokenTypes.CASE_KEYWORD;
            }
          // fall through
          case 199: break;
          case 80:
            { return CfscriptTokenTypes.DATE_TYPE;
            }
          // fall through
          case 200: break;
          case 81:
            { return CfscriptTokenTypes.ELSE_KEYWORD;
            }
          // fall through
          case 201: break;
          case 82:
            { return CfscriptTokenTypes.GUID_TYPE;
            }
          // fall through
          case 202: break;
          case 83:
            { return CfscriptTokenTypes.BOOLEAN;
            }
          // fall through
          case 203: break;
          case 84:
            { return CfscriptTokenTypes.UUID_TYPE;
            }
          // fall through
          case 204: break;
          case 85:
            { return CfscriptTokenTypes.VOID_TYPE;
            }
          // fall through
          case 205: break;
          case 86:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { myCurrentConfiguration.myCommentCounter--;
    if (myCurrentConfiguration.myCommentCounter == 0) {
        yybegin(COMMENTEND);
    }
    return CfmlTokenTypes.COMMENT;
            }
          // fall through
          case 206: break;
          case 87:
            { return startComment(YYINITIAL);
            }
          // fall through
          case 207: break;
          case 88:
            { return CfscriptTokenTypes.ABORT_KEYWORD;
            }
          // fall through
          case 208: break;
          case 89:
            { return CfscriptTokenTypes.ARRAY_TYPE;
            }
          // fall through
          case 209: break;
          case 90:
            { return CfscriptTokenTypes.BREAK_KEYWORD;
            }
          // fall through
          case 210: break;
          case 91:
            { return CfscriptTokenTypes.CATCH_KEYWORD;
            }
          // fall through
          case 211: break;
          case 92:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { return CfscriptTokenTypes.VAR_KEYWORD;
            }
          // fall through
          case 212: break;
          case 93:
            { return CfscriptTokenTypes.WHILE_KEYWORD;
            }
          // fall through
          case 213: break;
          case 94:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { myCurrentConfiguration.myCommentCounter++; return CfmlTokenTypes.COMMENT;
            }
          // fall through
          case 214: break;
          case 95:
            { return CfscriptTokenTypes.BINARY_TYPE;
            }
          // fall through
          case 215: break;
          case 96:
            { return CfscriptTokenTypes.IMPORT_KEYWORD;
            }
          // fall through
          case 216: break;
          case 97:
            { return CfscriptTokenTypes.PUBLIC_KEYWORD;
            }
          // fall through
          case 217: break;
          case 98:
            { return CfscriptTokenTypes.REMOTE_KEYWORD;
            }
          // fall through
          case 218: break;
          case 99:
            { return CfscriptTokenTypes.RETURN_KEYWORD;
            }
          // fall through
          case 219: break;
          case 100:
            { return CfscriptTokenTypes.STRING_TYPE;
            }
          // fall through
          case 220: break;
          case 101:
            { return CfscriptTokenTypes.STRUCT_TYPE;
            }
          // fall through
          case 221: break;
          case 102:
            { return CfscriptTokenTypes.SWITCH_KEYWORD;
            }
          // fall through
          case 222: break;
          case 103:
            { return CfscriptTokenTypes.BOOLAEN_TYPE;
            }
          // fall through
          case 223: break;
          case 104:
            { return CfscriptTokenTypes.DEFAULT_KEYWORD;
            }
          // fall through
          case 224: break;
          case 105:
            { return CfscriptTokenTypes.FINALLY_KEYWORD;
            }
          // fall through
          case 225: break;
          case 106:
            { return CfscriptTokenTypes.INCLUDE_KEYWORD;
            }
          // fall through
          case 226: break;
          case 107:
            { return CfscriptTokenTypes.NUMERIC_TYPE;
            }
          // fall through
          case 227: break;
          case 108:
            { return CfscriptTokenTypes.PACKAGE_KEYWORD;
            }
          // fall through
          case 228: break;
          case 109:
            { return CfscriptTokenTypes.PRIVATE_KEYWORD;
            }
          // fall through
          case 229: break;
          case 110:
            { return CfscriptTokenTypes.RETHROW_KEYWORD;
            }
          // fall through
          case 230: break;
          case 111:
            { return CfscriptTokenTypes.CONTAINS_L;
            }
          // fall through
          case 231: break;
          case 112:
            { return CfscriptTokenTypes.CONTINUE_KEYWORD;
            }
          // fall through
          case 232: break;
          case 113:
            { return CfscriptTokenTypes.FUNCTION_KEYWORD;
            }
          // fall through
          case 233: break;
          case 114:
            { return CfscriptTokenTypes.REQUIRED_KEYWORD;
            }
          // fall through
          case 234: break;
          case 115:
            { return CfscriptTokenTypes.COMPONENT_KEYWORD;
            }
          // fall through
          case 235: break;
          case 116:
            { return CfscriptTokenTypes.INTERFACE_KEYWORD;
            }
          // fall through
          case 236: break;
          case 117:
            { return CfscriptTokenTypes.PAGEENCODING_KEYWORD;
            }
          // fall through
          case 237: break;
          case 118:
            { return CfscriptTokenTypes.VARIABLENAME_TYPE;
            }
          // fall through
          case 238: break;
          case 119:
            { return CfscriptTokenTypes.NOT_CONTAINS_L;
            }
          // fall through
          case 239: break;
          case 120:
            { return CfmlTokenTypes.VAR_ANNOTATION;
            }
          // fall through
          case 240: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
