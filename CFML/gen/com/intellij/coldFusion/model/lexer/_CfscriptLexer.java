/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.intellij.coldFusion.model.lexer;
import com.intellij.openapi.util.text.StringUtil;

import com.intellij.openapi.project.Project;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.coldFusion.model.lexer.CfscriptTokenTypes;
import com.intellij.coldFusion.model.lexer.CfmlTokenTypes;
import com.intellij.coldFusion.model.CfmlUtil;
import com.intellij.util.containers.Stack;
import com.intellij.util.ArrayUtil;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ColdFusionScript.flex</tt>
 */
class _CfscriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DOUBLE_QUOTED_STRING = 2;
  public static final int SINGLE_QUOTED_STRING = 4;
  public static final int DOUBLEQUOTE_CLOSER = 6;
  public static final int SINGLEQUOTE_CLOSER = 8;
  public static final int EXPRESSION = 10;
  public static final int X = 12;
  public static final int Y = 14;
  public static final int COMMENT = 16;
  public static final int COMMENTEND = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  5,  5,  5,  5, 
     6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14848 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\10\1\11\1\14\4"+
    "\0\1\15\1\16\1\17\1\20\2\21\1\22\3\21\1\22\7\21\1\23\10\21\1\24\50\21\1\25"+
    "\1\21\1\26\1\27\1\30\1\31\2\27\16\0\1\32\1\15\1\33\1\34\2\21\1\35\11\21\1"+
    "\36\21\21\1\37\1\40\23\21\1\27\1\41\3\21\1\22\1\42\1\41\4\21\1\43\1\44\4\0"+
    "\1\45\1\46\1\27\3\21\2\47\1\27\1\50\1\51\1\0\1\52\5\21\1\53\3\0\1\54\1\55"+
    "\13\21\1\56\1\45\1\57\1\60\1\0\1\61\1\27\1\62\1\63\3\21\3\0\1\64\12\21\1\65"+
    "\1\0\1\66\1\27\1\0\1\67\3\21\1\53\1\70\1\20\2\21\1\65\1\71\1\72\1\73\2\27"+
    "\3\21\1\74\10\27\1\75\1\30\6\27\1\76\2\0\1\77\1\100\6\21\1\101\2\0\1\102\1"+
    "\21\1\103\1\0\2\41\1\104\1\105\1\106\2\21\1\75\1\107\1\110\1\111\1\112\1\62"+
    "\1\113\1\103\1\0\1\114\1\51\1\104\1\115\1\106\2\21\1\75\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\0\1\125\1\27\1\104\1\36\1\35\2\21\1\75\1\126\1"+
    "\110\1\45\1\127\1\130\1\27\1\103\1\0\1\42\1\27\1\104\1\105\1\106\2\21\1\75"+
    "\1\126\1\110\1\111\1\121\1\124\1\113\1\103\1\0\1\42\1\27\1\131\1\132\1\133"+
    "\1\134\1\135\1\132\1\21\1\136\1\137\1\140\1\141\1\27\1\124\1\0\1\27\1\42\1"+
    "\104\1\32\1\75\2\21\1\75\1\142\1\143\1\144\1\140\1\145\1\26\1\103\1\0\2\27"+
    "\1\146\1\32\1\75\2\21\1\75\1\142\1\110\1\144\1\140\1\145\1\33\1\103\1\0\1"+
    "\147\1\27\1\146\1\32\1\75\4\21\1\150\1\144\1\151\1\62\1\27\1\103\1\0\1\27"+
    "\1\40\1\146\1\21\1\22\1\40\2\21\1\35\1\152\1\22\1\153\1\154\1\0\2\27\1\155"+
    "\1\27\1\41\5\21\1\156\1\157\1\160\1\77\1\0\1\161\4\27\1\162\1\163\1\164\1"+
    "\41\1\165\1\166\1\156\1\167\1\170\1\171\1\0\1\172\4\27\1\130\2\27\1\161\1"+
    "\0\1\161\1\173\1\174\1\21\1\41\3\21\1\30\1\44\1\0\1\144\1\175\1\0\1\44\3\0"+
    "\1\50\1\176\7\27\5\21\1\53\1\0\1\177\1\0\1\161\1\65\1\200\1\201\1\202\1\203"+
    "\1\21\1\204\1\205\1\0\1\171\4\21\1\36\1\17\5\21\1\206\51\21\1\133\1\22\1\133"+
    "\5\21\1\133\4\21\1\133\1\22\1\133\1\21\1\22\7\21\1\133\10\21\1\207\4\27\2"+
    "\21\2\27\12\21\1\30\1\27\1\41\114\21\1\105\2\21\1\41\2\21\1\47\11\21\1\132"+
    "\1\130\1\27\1\21\1\32\1\210\1\27\2\21\1\210\1\27\2\21\1\211\1\27\1\21\1\32"+
    "\1\212\1\27\6\21\1\213\3\0\1\214\1\215\1\0\1\161\3\27\1\216\1\0\1\161\13\21"+
    "\1\27\5\21\1\217\10\21\1\220\1\27\3\21\1\30\1\0\1\2\1\0\1\2\1\124\1\0\3\21"+
    "\1\220\1\30\1\27\5\21\1\114\2\0\1\55\1\161\1\0\1\161\4\27\2\21\1\160\1\2\6"+
    "\21\1\175\1\77\3\0\1\111\1\0\1\161\1\0\1\161\1\43\13\27\1\221\5\21\1\213\1"+
    "\0\1\221\1\114\1\0\1\161\1\27\1\222\1\2\1\27\1\223\3\21\1\102\1\202\1\0\1"+
    "\67\4\21\1\65\1\0\1\2\1\27\4\21\1\213\2\0\1\27\1\0\1\224\1\0\1\67\3\21\1\220"+
    "\12\27\1\225\2\0\1\226\1\227\1\27\30\21\4\0\1\77\2\27\1\76\42\21\2\220\4\21"+
    "\2\220\1\21\1\230\3\21\1\220\6\21\1\32\1\170\1\231\1\30\1\232\1\114\1\21\1"+
    "\30\1\231\1\30\1\27\1\222\3\27\1\233\1\27\1\43\1\130\1\27\1\234\1\27\1\50"+
    "\1\235\1\42\1\43\2\27\1\21\1\30\3\21\1\47\2\27\1\0\1\50\1\236\1\0\1\237\1"+
    "\27\1\240\1\40\1\152\1\241\1\31\1\242\1\21\1\243\1\244\1\245\2\27\5\21\1\130"+
    "\116\27\5\21\1\22\5\21\1\22\20\21\1\30\1\246\1\247\1\27\4\21\1\36\1\17\7\21"+
    "\1\43\1\27\1\62\2\21\1\22\1\27\10\22\4\0\5\27\1\43\72\27\1\244\3\27\1\41\1"+
    "\204\1\241\1\30\1\41\11\21\1\22\1\250\1\41\12\21\1\206\1\244\4\21\1\220\1"+
    "\41\12\21\1\22\2\27\3\21\1\47\6\27\170\21\1\220\11\27\71\21\1\30\6\27\21\21"+
    "\1\30\10\27\5\21\1\220\41\21\1\30\2\21\1\0\1\247\2\27\5\21\1\160\1\76\1\251"+
    "\3\21\1\62\12\21\1\161\3\27\1\43\1\21\1\40\14\21\1\252\1\114\1\27\1\21\1\47"+
    "\11\27\1\21\1\253\1\254\2\21\1\53\2\27\1\130\6\21\1\114\1\27\1\67\5\21\1\213"+
    "\1\0\1\50\1\27\1\0\1\161\2\0\1\67\1\51\1\0\1\67\2\21\1\65\1\171\2\21\1\160"+
    "\1\0\1\2\1\27\3\21\1\30\1\100\5\21\1\53\1\0\1\237\1\43\1\0\1\161\4\27\5\21"+
    "\1\102\1\77\1\27\1\254\1\255\1\0\1\161\2\21\1\22\1\256\6\21\1\201\1\257\1"+
    "\217\2\27\1\260\1\21\1\53\1\261\1\27\3\262\1\27\2\22\22\27\4\21\1\53\1\263"+
    "\1\0\1\161\64\21\1\114\1\27\2\21\1\22\1\264\5\21\1\114\40\27\55\21\1\220\15"+
    "\21\1\26\4\27\1\22\1\27\1\264\1\265\1\21\1\75\1\22\1\170\1\266\15\21\1\26"+
    "\3\27\1\264\54\21\1\220\2\27\10\21\1\40\6\21\5\27\1\21\1\30\2\0\2\27\1\77"+
    "\1\27\1\135\2\27\1\244\3\27\1\42\1\32\20\21\1\267\1\234\1\27\1\0\1\161\1\41"+
    "\2\21\1\115\1\41\2\21\1\47\1\270\12\21\1\22\3\40\1\271\1\272\2\27\1\273\1"+
    "\21\1\142\2\21\1\22\2\21\1\274\1\21\1\220\1\21\1\220\4\27\17\21\1\47\10\27"+
    "\6\21\1\30\20\27\1\275\20\27\3\21\1\30\6\21\1\130\5\27\3\21\1\22\2\27\3\21"+
    "\1\47\6\27\3\21\1\220\4\21\1\114\1\21\1\241\5\27\23\21\1\220\1\0\1\161\52"+
    "\27\1\220\1\75\4\21\1\36\1\276\2\21\1\220\25\27\2\21\1\220\1\27\3\21\1\26"+
    "\10\27\7\21\1\270\10\27\1\277\1\76\1\142\1\41\2\21\1\114\1\120\4\27\3\21\1"+
    "\30\20\27\6\21\1\220\1\27\2\21\1\220\1\27\2\21\1\47\21\27\11\21\1\130\66\27"+
    "\1\223\6\21\1\0\1\77\3\27\1\124\1\0\2\27\1\223\5\21\1\0\1\300\2\27\3\21\1"+
    "\130\1\0\1\161\1\223\3\21\1\160\1\0\1\144\1\0\10\27\1\223\5\21\1\53\1\0\1"+
    "\301\1\27\1\0\1\161\24\27\5\21\1\53\1\0\1\27\1\0\1\161\46\27\55\21\1\22\22"+
    "\27\14\21\1\47\63\27\5\21\1\22\72\27\7\21\1\130\130\27\10\21\1\30\1\27\1\102"+
    "\4\0\1\77\1\27\1\62\1\223\1\21\14\27\1\26\153\27\1\302\1\303\2\0\1\304\1\2"+
    "\3\27\1\305\22\27\1\306\67\27\12\21\1\32\10\21\1\32\1\307\1\310\1\21\1\311"+
    "\1\142\7\21\1\36\1\312\2\32\3\21\1\313\1\170\1\40\1\75\51\21\1\220\3\21\1"+
    "\75\2\21\1\206\3\21\1\206\2\21\1\32\3\21\1\32\2\21\1\22\3\21\1\22\3\21\1\75"+
    "\3\21\1\75\2\21\1\206\1\314\6\0\1\142\3\21\1\162\1\41\1\206\1\315\1\240\1"+
    "\316\1\162\1\230\1\162\2\206\1\123\1\21\1\35\1\21\1\114\1\317\1\35\1\21\1"+
    "\114\50\27\32\21\1\22\5\27\106\21\1\30\1\27\33\21\1\220\74\27\1\122\3\27\14"+
    "\0\20\27\36\0\2\27");

  /* The ZZ_CMAP_A table has 1664 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\6\1\7\1\21\1\0\1\7\1\20\6\6\4\0\1\74\1\2\1\15\1\17\1\5\1\70\1\55\1\16"+
    "\1\60\1\61\1\23\1\67\1\57\1\3\1\12\1\22\1\10\11\11\1\54\1\66\1\1\1\56\1\4"+
    "\1\53\1\24\1\32\1\34\1\25\1\41\1\35\1\26\1\50\1\45\1\13\1\5\1\36\1\30\1\27"+
    "\1\14\1\37\1\47\1\51\1\33\1\43\1\40\1\42\1\31\1\44\1\52\1\46\1\5\1\62\1\71"+
    "\1\63\1\72\1\5\1\0\1\32\1\34\1\25\1\41\1\35\1\26\1\50\1\52\1\46\1\5\1\64\1"+
    "\73\1\65\1\0\1\6\2\0\4\5\4\0\1\5\2\0\1\6\7\0\1\5\4\0\1\5\5\0\17\5\1\0\2\13"+
    "\15\5\1\43\2\5\4\0\4\5\16\0\5\5\7\0\1\5\1\0\1\5\1\0\5\5\1\0\2\5\6\0\1\5\1"+
    "\0\3\5\1\0\1\5\1\0\4\5\1\0\13\5\1\0\3\5\1\0\5\6\2\0\6\5\1\0\7\5\1\0\1\5\15"+
    "\0\1\5\1\0\15\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6\3\5\5\0\5\6\6\0\1\5\4\0\3"+
    "\6\5\0\3\5\7\6\4\0\2\5\1\6\13\5\1\0\1\5\7\6\2\5\2\6\1\0\4\6\2\5\2\6\3\5\2"+
    "\0\1\5\7\0\1\6\1\5\1\6\6\5\3\6\2\0\11\5\3\6\1\5\6\0\2\6\6\5\4\6\2\5\2\0\2"+
    "\6\1\5\11\6\1\5\3\6\1\5\5\6\2\0\1\5\3\6\4\0\1\5\1\0\6\5\4\0\13\6\1\0\4\6\6"+
    "\5\3\6\1\5\2\6\1\5\7\6\2\5\2\6\2\0\2\6\1\0\3\6\1\0\10\5\2\0\2\5\2\0\6\5\1"+
    "\0\1\5\3\0\4\5\2\0\1\6\1\5\7\6\2\0\2\6\2\0\3\6\1\5\5\0\2\5\1\0\5\5\4\0\3\5"+
    "\4\0\2\5\1\0\2\5\1\0\2\5\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6\3\0\1\6\7"+
    "\0\4\5\1\0\1\5\7\0\4\6\3\5\1\6\2\0\1\5\1\0\2\5\1\0\3\5\2\6\1\0\3\6\2\0\1\5"+
    "\11\0\1\6\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0"+
    "\2\5\4\0\5\6\3\0\3\6\1\0\4\6\2\0\1\5\6\0\1\6\4\5\1\0\5\5\3\0\1\5\7\6\1\0\2"+
    "\6\5\0\2\6\3\0\2\6\1\0\3\5\1\0\2\5\5\0\3\5\2\0\1\5\3\6\1\0\4\6\1\5\1\0\4\5"+
    "\1\0\1\5\4\0\1\6\4\0\6\6\1\0\1\6\3\0\2\6\4\0\1\5\1\6\2\5\7\6\4\0\10\5\3\6"+
    "\7\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\3\5\1\0\1\5\1\0\1\5\2"+
    "\0\2\5\1\0\3\5\2\6\1\0\2\6\1\5\2\0\5\5\1\0\1\5\1\0\6\6\2\0\2\6\2\0\4\5\5\0"+
    "\1\6\1\0\1\6\1\0\1\6\4\0\2\6\5\5\3\6\6\0\1\6\1\0\7\6\1\5\2\6\4\5\3\6\1\5\3"+
    "\6\2\5\7\6\3\5\4\6\5\5\14\6\1\5\1\6\3\5\1\0\7\5\2\0\3\6\2\5\3\6\3\0\2\5\2"+
    "\6\4\0\1\5\1\0\2\6\4\0\4\5\10\6\3\0\1\5\3\0\2\5\1\6\5\0\3\6\2\0\1\5\1\6\1"+
    "\5\5\0\6\5\2\0\5\6\3\5\3\0\10\6\5\5\2\6\3\0\3\5\3\6\1\0\5\6\4\5\1\6\4\5\3"+
    "\6\2\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\2\0\3\5\1\0\6\5\2\0\2\5\2\0\5\6\5\0"+
    "\1\5\5\0\6\6\1\0\1\6\3\0\4\6\11\0\1\5\4\0\1\5\1\0\5\5\2\0\1\5\1\0\1\36\3\5"+
    "\1\0\3\5\2\0\4\5\5\0\5\5\4\0\1\5\4\0\4\5\3\6\2\5\5\0\2\6\2\0\3\5\6\6\1\0\2"+
    "\5\2\0\4\5\1\0\2\5\1\6\3\5\1\6\4\5\1\6\10\5\2\6\4\0\1\5\1\6\4\0\1\6\5\5\2"+
    "\6\3\0\3\5\4\0\3\5\2\6\2\0\6\5\1\0\3\6\1\0\2\6\5\0\5\5\5\0\1\5\1\6\3\5\1\0"+
    "\2\5\1\0\7\5\2\0\1\6\6\0\2\5\2\0\3\5\3\0\2\5\3\0\2\5\2\0\3\6\4\0\3\5\1\0\2"+
    "\5\1\0\1\5\5\0\1\6\2\0\1\5\3\0\1\5\2\0\2\5\3\6\1\0\2\6\1\0\3\6\2\0\1\6\2\0"+
    "\1\6\4\5\10\0\5\6\3\0\6\6\2\0\3\6\2\0\4\6\4\0\3\6\5\0\1\5\2\0\2\5\2\0\4\5"+
    "\1\0\4\5\1\0\1\5\1\0\6\5\2\0\5\5\1\0\4\5\1\0\4\5\2\0\2\6\1\0\1\5\1\0\1\5\5"+
    "\0\1\5\1\0\1\5\1\0\3\5\1\0\3\5\1\0\3\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\2\11\1\12\2\7\1\13\1\14\1\15"+
    "\1\16\1\17\22\7\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\2\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\41\1\44\3\1\1\10\1\2\1\0"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\7\1\57\3\7\2\0\1\60\1\61\7\7"+
    "\1\62\1\63\12\7\1\57\1\64\3\7\1\65\10\7"+
    "\1\66\1\67\3\7\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\0\1\77\1\0\1\77\4\0\2\7"+
    "\1\100\1\0\1\101\1\102\1\7\1\0\2\103\1\0"+
    "\6\7\1\104\1\7\1\105\1\7\1\62\2\7\1\106"+
    "\1\107\11\7\1\110\2\7\1\111\15\7\1\112\1\113"+
    "\2\0\1\114\1\0\3\7\2\0\1\7\2\103\1\115"+
    "\2\0\1\116\1\7\1\117\5\7\1\0\1\7\1\120"+
    "\11\7\1\121\1\7\1\122\1\123\2\7\1\124\11\7"+
    "\1\125\1\0\1\126\1\127\3\7\2\0\1\7\1\115"+
    "\1\0\1\130\5\7\1\0\1\131\1\7\1\132\1\133"+
    "\5\7\1\134\1\7\1\57\1\7\1\0\3\7\1\135"+
    "\5\7\1\136\2\7\1\137\1\101\1\0\1\7\1\0"+
    "\5\7\1\0\1\7\1\140\1\141\2\7\1\142\2\7"+
    "\1\0\1\143\1\144\1\145\3\7\1\146\1\7\1\147"+
    "\1\7\1\0\1\150\1\0\3\7\1\151\1\7\1\0"+
    "\1\7\1\152\1\7\1\153\1\154\1\0\1\155\1\7"+
    "\1\156\2\7\2\0\1\157\1\160\1\7\1\161\1\0"+
    "\1\7\1\162\1\0\1\7\1\0\1\163\1\101\1\0"+
    "\1\164\1\63\1\7\1\0\1\7\3\0\1\7\1\0"+
    "\1\7\3\0\1\7\1\0\1\7\3\0\1\165\1\0"+
    "\1\166\1\67\16\0\1\167\1\0\2\170\10\0\1\62"+
    "\3\0\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[415];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u01e8\0\u040d\0\u044a\0\u01e8\0\u01e8\0\u01e8\0\u0487"+
    "\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f"+
    "\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857"+
    "\0\u0894\0\u08d1\0\u090e\0\u094b\0\u01e8\0\u0988\0\u09c5\0\u01e8"+
    "\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u0a02"+
    "\0\u01e8\0\u01e8\0\u01e8\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33"+
    "\0\u0b70\0\u0bad\0\u01e8\0\u01e8\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8"+
    "\0\u0d58\0\u0d95\0\u0319\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6"+
    "\0\u0f03\0\u0f40\0\u01e8\0\u01e8\0\u0f7d\0\u0fba\0\u0ff7\0\u1034"+
    "\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c"+
    "\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404"+
    "\0\u0319\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af"+
    "\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u0319\0\u171d\0\u175a"+
    "\0\u1797\0\u17d4\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8\0\u01e8"+
    "\0\u01e8\0\u0ab9\0\u0af6\0\u0b70\0\u0bad\0\u1811\0\u184e\0\u188b"+
    "\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u0319\0\u19f9\0\u1a36"+
    "\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e"+
    "\0\u1c5b\0\u1c98\0\u0319\0\u1cd5\0\u0319\0\u1d12\0\u0319\0\u1d4f"+
    "\0\u1d8c\0\u0319\0\u0319\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd"+
    "\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u0319\0\u1fee\0\u202b\0\u0319"+
    "\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213"+
    "\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u0319\0\u0319\0\u2381"+
    "\0\u23be\0\u01e8\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c"+
    "\0\u2569\0\u25a6\0\u01e8\0\u1aed\0\u1aed\0\u25e3\0\u01e8\0\u2620"+
    "\0\u0319\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb"+
    "\0\u0319\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976"+
    "\0\u29b3\0\u29f0\0\u0319\0\u2a2d\0\u0319\0\u0319\0\u2a6a\0\u2aa7"+
    "\0\u0319\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52"+
    "\0\u2c8f\0\u2ccc\0\u0319\0\u2d09\0\u01e8\0\u01e8\0\u2d46\0\u2d83"+
    "\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u01e8\0\u2eb4\0\u0319\0\u2ef1"+
    "\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u0319"+
    "\0\u0319\0\u30d9\0\u3116\0\u3153\0\u3190\0\u31cd\0\u0319\0\u320a"+
    "\0\u0319\0\u3247\0\u3284\0\u32c1\0\u32fe\0\u333b\0\u0319\0\u3378"+
    "\0\u33b5\0\u33f2\0\u342f\0\u346c\0\u01e8\0\u34a9\0\u34e6\0\u0319"+
    "\0\u01e8\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691"+
    "\0\u36ce\0\u370b\0\u3748\0\u0319\0\u0319\0\u3785\0\u37c2\0\u0319"+
    "\0\u37ff\0\u383c\0\u3879\0\u0319\0\u0319\0\u0319\0\u38b6\0\u38f3"+
    "\0\u3930\0\u0319\0\u396d\0\u0319\0\u39aa\0\u39e7\0\u0319\0\u3a24"+
    "\0\u3a61\0\u3a9e\0\u3adb\0\u0319\0\u3b18\0\u3b55\0\u3b92\0\u0319"+
    "\0\u3bcf\0\u0319\0\u0319\0\u3c0c\0\u0319\0\u3c49\0\u0319\0\u3c86"+
    "\0\u3cc3\0\u3d00\0\u3d3d\0\u0319\0\u0319\0\u3d7a\0\u0319\0\u3db7"+
    "\0\u3df4\0\u0319\0\u3e31\0\u3e6e\0\u3eab\0\u0319\0\u3ee8\0\u3f25"+
    "\0\u0319\0\u3f62\0\u3f9f\0\u3fdc\0\u4019\0\u4056\0\u4093\0\u40d0"+
    "\0\u410d\0\u414a\0\u4187\0\u41c4\0\u4201\0\u423e\0\u427b\0\u42b8"+
    "\0\u42f5\0\u4332\0\u436f\0\u43ac\0\u0319\0\u43e9\0\u0319\0\u4426"+
    "\0\u4463\0\u44a0\0\u44dd\0\u451a\0\u4557\0\u4594\0\u45d1\0\u460e"+
    "\0\u464b\0\u4688\0\u46c5\0\u4702\0\u473f\0\u477c\0\u01e8\0\u47b9"+
    "\0\u47f6\0\u01e8\0\u4833\0\u4870\0\u48ad\0\u48ea\0\u4927\0\u4964"+
    "\0\u49a1\0\u49de\0\u01e8\0\u4a1b\0\u4a58\0\u4a95\0\u01e8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[415];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\11\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\17\1\30\1\31\1\11\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\16\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\2\16\1\51\1\52\1\16"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\17\15\75\1\76\1\75\1\77\55\75"+
    "\16\100\1\101\1\102\55\100\15\11\1\103\75\11\1\104"+
    "\65\11\1\17\10\11\2\17\52\11\1\17\1\105\1\106"+
    "\1\105\1\107\3\105\1\110\10\105\2\110\52\105\1\110"+
    "\3\11\1\111\3\11\1\17\10\11\2\17\52\11\1\17"+
    "\77\0\1\112\53\0\1\113\74\0\1\114\21\0\1\115"+
    "\52\0\1\116\74\0\1\117\23\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\26\16\31\0\1\17\10\0\2\17"+
    "\52\0\1\17\12\0\1\121\72\0\2\21\1\121\67\0"+
    "\2\16\1\0\2\16\1\120\1\16\1\122\10\0\1\16"+
    "\1\123\1\124\13\16\1\125\7\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\10\16\1\126\1\16\1\127"+
    "\2\16\1\130\10\16\44\0\1\131\1\132\32\0\1\133"+
    "\74\0\1\134\23\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\5\16\1\135\4\16\1\136\13\16\27\0\2\16"+
    "\1\0\2\16\1\120\1\137\1\16\10\0\5\16\1\140"+
    "\4\16\1\141\2\16\1\142\10\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\12\16\1\143\13\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\10\16\1\144"+
    "\2\16\1\145\12\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\5\16\1\146\4\16\1\147\13\16\27\0"+
    "\2\16\1\0\2\16\1\120\1\16\1\150\10\0\6\16"+
    "\1\151\1\152\16\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\10\16\1\153\15\16\27\0\2\16\1\0"+
    "\2\16\1\120\1\154\1\16\10\0\6\16\1\155\3\16"+
    "\1\156\13\16\27\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\3\16\1\157\20\16\1\160\1\16\27\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\6\16\1\161\17\16"+
    "\27\0\2\16\1\0\2\16\1\120\2\16\10\0\6\16"+
    "\1\162\17\16\27\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\5\16\1\163\2\16\1\164\1\16\1\165\13\16"+
    "\27\0\2\16\1\0\2\16\1\120\2\16\10\0\15\16"+
    "\1\166\10\16\27\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\13\16\1\167\3\16\1\170\6\16\27\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\20\16\1\171\5\16"+
    "\27\0\2\16\1\0\2\16\1\120\2\16\10\0\5\16"+
    "\1\172\1\173\6\16\1\174\10\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\6\16\1\175\1\16\1\176"+
    "\2\16\1\177\1\16\1\200\10\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\2\16\1\201\7\16\1\202"+
    "\13\16\76\0\1\203\75\0\1\204\1\205\74\0\1\206"+
    "\74\0\1\207\10\0\1\210\100\0\1\211\1\0\15\75"+
    "\1\212\1\75\1\213\55\75\15\0\1\75\76\0\1\75"+
    "\55\0\16\100\1\214\1\215\55\100\16\0\1\100\75\0"+
    "\1\100\55\0\1\105\1\0\1\105\1\0\71\105\2\0"+
    "\1\216\75\0\1\217\71\0\1\105\1\0\1\105\1\0"+
    "\3\105\1\110\10\105\2\110\52\105\1\110\3\0\1\220"+
    "\74\0\1\221\101\0\2\121\70\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\1\222\12\16\1\223\12\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\22\16\1\224"+
    "\3\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\26\16\21\0\1\225\5\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\24\16\1\226\1\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\13\16\1\227\12\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\2\16\1\230"+
    "\23\16\22\0\7\231\1\131\10\231\1\232\1\233\52\231"+
    "\1\131\23\132\1\234\51\132\5\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\13\16\1\235\2\16\1\236\7\16"+
    "\27\0\2\16\1\0\2\16\1\120\1\16\1\237\10\0"+
    "\2\16\1\240\23\16\27\0\2\16\1\0\2\16\1\120"+
    "\1\16\1\241\10\0\26\16\27\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\3\16\1\242\22\16\27\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\6\16\1\243\17\16"+
    "\27\0\2\16\1\0\2\16\1\120\1\16\1\244\10\0"+
    "\26\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\14\16\1\245\11\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\16\16\1\246\7\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\10\16\1\247\15\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\6\16\1\250"+
    "\17\16\27\0\2\16\1\0\2\16\1\120\1\251\1\16"+
    "\10\0\26\16\27\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\14\16\1\252\4\16\1\253\4\16\27\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\6\16\1\254\17\16"+
    "\27\0\2\16\1\0\2\16\1\120\2\16\10\0\12\16"+
    "\1\255\13\16\27\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\2\16\1\256\10\16\1\257\10\16\1\260\1\16"+
    "\27\0\2\16\1\0\2\16\1\120\1\16\1\261\10\0"+
    "\26\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\10\16\1\262\15\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\12\16\1\263\13\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\16\16\1\264\7\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\4\16\1\265"+
    "\10\16\1\266\10\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\15\16\1\267\3\16\1\270\4\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\13\16\1\271"+
    "\12\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\1\16\1\272\24\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\10\16\1\273\15\16\27\0\2\16\1\0"+
    "\2\16\1\120\1\274\1\16\10\0\26\16\27\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\6\16\1\275\17\16"+
    "\27\0\2\16\1\0\2\16\1\120\1\276\1\16\10\0"+
    "\26\16\27\0\2\16\1\0\2\16\1\120\1\277\1\16"+
    "\10\0\26\16\27\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\1\300\22\16\1\301\2\16\27\0\2\16\1\0"+
    "\2\16\1\120\1\302\1\16\10\0\26\16\27\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\7\16\1\303\16\16"+
    "\27\0\2\16\1\0\2\16\1\120\2\16\10\0\10\16"+
    "\1\304\15\16\27\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\10\16\1\176\15\16\27\0\2\16\1\0\2\16"+
    "\1\120\1\305\1\16\10\0\26\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\3\16\1\306\22\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\6\16\1\307"+
    "\17\16\25\0\1\310\74\0\1\311\75\0\1\312\73\0"+
    "\1\313\76\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\3\16\1\314\22\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\10\16\1\315\15\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\12\16\1\316\13\16\36\0"+
    "\1\317\65\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\26\16\21\0\1\320\5\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\10\16\1\321\15\16\22\0\20\231\1\322"+
    "\1\323\62\231\1\131\10\231\1\232\1\324\52\231\1\131"+
    "\7\0\1\325\10\0\2\325\2\0\1\326\47\0\1\325"+
    "\22\132\1\327\1\234\51\132\5\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\1\330\25\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\10\16\1\331\15\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\13\16\1\332"+
    "\12\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\22\16\1\333\3\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\5\16\1\334\20\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\16\16\1\267\7\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\1\335\25\16"+
    "\27\0\2\16\1\0\2\16\1\120\2\16\10\0\16\16"+
    "\1\336\7\16\27\0\2\16\1\337\2\16\1\120\1\340"+
    "\1\16\3\0\2\337\3\0\26\16\21\0\1\337\5\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\14\16\1\341"+
    "\11\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\5\16\1\342\20\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\6\16\1\343\17\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\12\16\1\344\13\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\15\16\1\345"+
    "\2\16\1\346\5\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\15\16\1\347\10\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\5\16\1\350\20\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\5\16\1\351"+
    "\20\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\3\16\1\352\22\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\10\16\1\353\15\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\5\16\1\354\20\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\10\16\1\355"+
    "\15\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\10\16\1\356\15\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\5\16\1\357\20\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\16\16\1\360\7\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\14\16\1\361"+
    "\11\16\27\0\2\16\1\0\2\16\1\120\1\362\1\16"+
    "\10\0\15\16\1\363\10\16\27\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\13\16\1\364\12\16\27\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\3\16\1\365\22\16"+
    "\27\0\2\16\1\0\2\16\1\120\2\16\10\0\11\16"+
    "\1\366\14\16\27\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\10\16\1\367\15\16\27\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\4\16\1\370\21\16\27\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\3\16\1\371\22\16"+
    "\27\0\2\16\1\0\2\16\1\120\2\16\10\0\5\16"+
    "\1\372\20\16\27\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\14\16\1\373\11\16\25\0\1\374\75\0\1\375"+
    "\73\0\1\376\76\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\15\16\1\377\10\16\27\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\6\16\1\u0100\17\16\27\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\6\16\1\u0101\17\16"+
    "\61\0\1\u0102\72\0\1\u0103\44\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\6\16\1\u0104\17\16\22\0\20\231"+
    "\1\322\1\u0105\53\231\25\0\1\u0106\54\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\20\16\1\u0107\5\16\27\0"+
    "\2\16\1\0\2\16\1\120\1\u0108\1\16\10\0\5\16"+
    "\1\u0109\20\16\27\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\12\16\1\u010a\13\16\27\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\3\16\1\u010b\22\16\27\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\13\16\1\u010c\12\16"+
    "\27\0\2\16\1\0\2\16\1\120\2\16\10\0\26\16"+
    "\21\0\1\u010d\5\0\1\u010e\1\0\1\337\3\0\2\u010e"+
    "\3\0\2\337\3\0\26\u010e\21\0\1\337\5\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\5\16\1\u010f\20\16"+
    "\27\0\2\16\1\0\2\16\1\120\2\16\10\0\21\16"+
    "\1\u0110\4\16\27\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\13\16\1\u0111\12\16\27\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\13\16\1\u0112\12\16\27\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\6\16\1\u0113\17\16"+
    "\27\0\2\16\1\0\2\16\1\120\2\16\10\0\6\16"+
    "\1\u0114\17\16\27\0\2\16\1\0\2\16\1\120\1\u0115"+
    "\1\16\10\0\26\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\6\16\1\u0116\17\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\11\16\1\u0117\14\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\10\16\1\u0118"+
    "\15\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\3\16\1\u0119\22\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\15\16\1\u011a\10\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\26\16\21\0\1\u011b\5\0"+
    "\2\16\1\0\2\16\1\120\1\16\1\u011c\10\0\26\16"+
    "\27\0\2\16\1\0\2\16\1\120\2\16\10\0\1\u011d"+
    "\25\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\1\u011e\25\16\27\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\10\16\1\u011f\15\16\27\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\5\16\1\u0120\20\16\27\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\10\16\1\u0121\15\16"+
    "\27\0\2\16\1\0\2\16\1\120\2\16\10\0\5\16"+
    "\1\u0122\20\16\27\0\2\16\1\0\2\16\1\120\1\u0123"+
    "\1\16\10\0\26\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\13\16\1\u0124\12\16\25\0\1\u0125\76\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\14\16\1\u0126"+
    "\11\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\1\16\1\u0127\24\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\13\16\1\u0128\12\16\62\0\1\u0129\105\0"+
    "\1\u012a\30\0\2\16\1\0\2\16\1\120\1\u012b\1\16"+
    "\10\0\26\16\50\0\1\u012c\53\0\2\16\1\0\2\16"+
    "\1\120\1\16\1\u012d\10\0\26\16\27\0\2\16\1\0"+
    "\2\16\1\120\1\u012e\1\16\10\0\26\16\27\0\2\16"+
    "\1\0\2\16\1\120\1\16\1\u012f\10\0\26\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\3\16\1\u0130"+
    "\22\16\27\0\2\16\1\0\2\16\1\120\1\u0131\1\16"+
    "\10\0\26\16\62\0\1\u0132\41\0\2\u010e\1\0\2\u010e"+
    "\1\0\2\u010e\10\0\26\u010e\27\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\7\16\1\u0133\16\16\27\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\10\16\1\u0134\15\16"+
    "\27\0\2\16\1\0\2\16\1\120\1\16\1\u0135\10\0"+
    "\26\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\12\16\1\u0136\13\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\6\16\1\u0137\17\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\21\16\1\u0138\4\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\5\16\1\u0139"+
    "\20\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\3\16\1\u013a\22\16\36\0\1\u013b\65\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\23\16\1\u013c\2\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\13\16\1\u013d"+
    "\12\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\20\16\1\u013e\5\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\23\16\1\u013f\2\16\27\0\2\16\1\0"+
    "\2\16\1\120\1\16\1\u0140\10\0\26\16\27\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\13\16\1\u0141\12\16"+
    "\27\0\2\16\1\0\2\16\1\120\2\16\10\0\1\u0142"+
    "\25\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\10\16\1\u0143\15\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\10\16\1\u0144\15\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\5\16\1\u0145\20\16\64\0"+
    "\1\u0146\37\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\1\u0147\25\16\51\0\1\u0148\52\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\15\16\1\u0149\10\16\27\0\2\16"+
    "\1\0\2\16\1\120\1\16\1\u014a\10\0\26\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\10\16\1\u014b"+
    "\15\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\21\16\1\u014c\4\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\12\16\1\u014d\13\16\67\0\1\u014e\34\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\3\16\1\u014f"+
    "\22\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\17\16\1\u0150\6\16\27\0\2\16\1\0\2\16\1\120"+
    "\2\16\10\0\10\16\1\u0151\15\16\27\0\2\16\1\0"+
    "\2\16\1\120\1\16\1\u0152\10\0\26\16\27\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\13\16\1\u0153\12\16"+
    "\61\0\1\u0154\42\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\10\16\1\u0155\15\16\27\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\1\u0156\25\16\27\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\10\16\1\u0157\15\16\27\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\6\16\1\u0158"+
    "\17\16\27\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\1\u0159\25\16\54\0\1\u015a\72\0\1\u015b\51\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\10\16\1\u015c\15\16"+
    "\27\0\2\16\1\0\2\16\1\120\2\16\10\0\16\16"+
    "\1\u015d\7\16\27\0\2\16\1\0\2\16\1\120\1\16"+
    "\1\u015e\10\0\26\16\27\0\2\16\1\0\2\16\1\120"+
    "\1\16\1\u015f\10\0\26\16\54\0\1\u0160\47\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\10\16\1\u0161\15\16"+
    "\27\0\2\16\1\0\2\16\1\120\2\16\10\0\14\16"+
    "\1\u0162\11\16\62\0\1\u0163\41\0\2\16\1\0\2\16"+
    "\1\120\2\16\10\0\12\16\1\u0164\13\16\27\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\26\16\21\0\1\u0165"+
    "\5\0\2\16\1\0\2\16\1\120\2\16\10\0\10\16"+
    "\1\u0166\15\16\52\0\1\u0167\75\0\1\u0168\50\0\2\16"+
    "\1\0\2\16\1\120\2\16\10\0\13\16\1\u0169\12\16"+
    "\36\0\1\u016a\65\0\2\16\1\0\2\16\1\120\1\16"+
    "\1\u016b\10\0\26\16\116\0\1\u016c\5\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\14\16\1\u016d\11\16\62\0"+
    "\1\u016e\77\0\1\u0129\63\0\1\u016f\136\0\1\u0170\5\0"+
    "\2\16\1\0\2\16\1\120\2\16\10\0\5\16\1\u0171"+
    "\20\16\47\0\1\u0172\54\0\2\16\1\0\2\16\1\120"+
    "\1\u0173\1\16\10\0\26\16\67\0\1\u0174\62\0\1\u0175"+
    "\100\0\1\u0176\42\0\2\16\1\0\2\16\1\120\2\16"+
    "\10\0\2\16\1\u0177\23\16\61\0\1\u0178\42\0\2\16"+
    "\1\0\2\16\1\120\1\16\1\u0179\10\0\26\16\54\0"+
    "\1\u017a\55\0\1\u017b\114\0\1\u017c\46\0\2\16\1\0"+
    "\2\16\1\120\2\16\10\0\10\16\1\u017d\15\16\36\0"+
    "\1\u017e\65\0\2\16\1\0\2\16\1\120\2\16\10\0"+
    "\23\16\1\u017f\2\16\36\0\1\u0180\112\0\1\u0181\136\0"+
    "\1\u0182\40\0\1\u0183\130\0\1\u0184\34\0\1\u0185\75\0"+
    "\1\u0186\71\0\1\u0187\101\0\1\u0188\65\0\1\u0189\115\0"+
    "\1\u018a\36\0\1\u018b\114\0\1\u018c\76\0\1\u018d\101\0"+
    "\1\u018e\46\0\1\u018f\154\0\1\u0190\20\u018d\1\u0191\1\u0192"+
    "\53\u018d\32\0\1\u0193\77\0\1\u0194\60\0\1\u0192\103\0"+
    "\1\u0195\115\0\1\u0196\117\0\1\u0197\42\0\1\u0198\72\0"+
    "\1\u0199\66\0\1\u019a\101\0\1\u019b\65\0\1\u019c\140\0"+
    "\1\u019d\40\0\1\u019e\73\0\1\u019f\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19154];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\1\0\1\11\10\1\1\11\2\1\3\11"+
    "\25\1\1\11\2\1\10\11\1\1\3\11\7\1\2\11"+
    "\5\1\1\0\6\11\10\1\2\0\2\11\46\1\7\11"+
    "\1\0\1\1\1\0\1\1\4\0\3\1\1\0\3\1"+
    "\1\0\2\1\1\0\53\1\2\0\1\11\1\0\3\1"+
    "\2\0\2\1\1\11\1\1\2\0\1\11\7\1\1\0"+
    "\34\1\1\0\2\11\3\1\2\0\1\1\1\11\1\0"+
    "\6\1\1\0\15\1\1\0\11\1\1\11\3\1\1\11"+
    "\1\0\1\1\1\0\5\1\1\0\10\1\1\0\12\1"+
    "\1\0\1\1\1\0\5\1\1\0\5\1\1\0\5\1"+
    "\2\0\4\1\1\0\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\3\1\1\0\1\1\3\0\1\1\1\0\1\1"+
    "\3\0\1\1\1\0\1\1\3\0\1\1\1\0\2\1"+
    "\16\0\1\11\1\0\1\1\1\11\10\0\1\11\3\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[415];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  Project myProject;
  final CfscriptLexerConfiguration myCurrentConfiguration = new CfscriptLexerConfiguration();

  public class CfscriptLexerConfiguration {
      public int mySharpCounter = 0;
      public int myCommentCounter = 0;
      public Stack<Integer> myReturnStack = new Stack<>();

      public CfscriptLexerConfiguration() {}

      public CfscriptLexerConfiguration(int sharpCounter, int commentCounter,
                                        Stack<Integer> returnStack) {
          mySharpCounter = sharpCounter;
          myCommentCounter = commentCounter;
          myReturnStack = returnStack;
      }

      public void reset() {
          mySharpCounter = 0;
          myCommentCounter = 0;
          myReturnStack.clear();
      }
  }

  public _CfscriptLexer(Project project) {
    this((java.io.Reader)null);
    myProject = project;
  }

  private IElementType startComment(int stateToReturnTo) {
    myCurrentConfiguration.myCommentCounter = 0;
    myCurrentConfiguration.myReturnStack.push(stateToReturnTo);
    myCurrentConfiguration.myCommentCounter++;
    yybegin(COMMENT);
    return CfmlTokenTypes.COMMENT;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _CfscriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yychar = start;
    myCurrentConfiguration.reset();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return CfmlTokenTypes.COMMENT;
            } 
            // fall through
          case 121: break;
          case 2: 
            { return CfscriptTokenTypes.BAD_CHARACTER;
            } 
            // fall through
          case 122: break;
          case 3: 
            { return CfscriptTokenTypes.LT;
            } 
            // fall through
          case 123: break;
          case 4: 
            { return CfscriptTokenTypes.NOT;
            } 
            // fall through
          case 124: break;
          case 5: 
            { return CfscriptTokenTypes.MINUS;
            } 
            // fall through
          case 125: break;
          case 6: 
            { return CfscriptTokenTypes.GT;
            } 
            // fall through
          case 126: break;
          case 7: 
            { return CfscriptTokenTypes.IDENTIFIER;
            } 
            // fall through
          case 127: break;
          case 8: 
            { return CfscriptTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 128: break;
          case 9: 
            { return CfscriptTokenTypes.INTEGER;
            } 
            // fall through
          case 129: break;
          case 10: 
            { return CfscriptTokenTypes.POINT;
            } 
            // fall through
          case 130: break;
          case 11: 
            { yybegin(DOUBLE_QUOTED_STRING);
    return CfmlTokenTypes.DOUBLE_QUOTE;
            } 
            // fall through
          case 131: break;
          case 12: 
            { yybegin(SINGLE_QUOTED_STRING);
    return CfmlTokenTypes.SINGLE_QUOTE;
            } 
            // fall through
          case 132: break;
          case 13: 
            { if (myCurrentConfiguration.mySharpCounter == 0) {
        myCurrentConfiguration.myReturnStack.push(YYINITIAL);
        myCurrentConfiguration.mySharpCounter = 1;
        return CfscriptTokenTypes.OPENSHARP;
    }
    myCurrentConfiguration.mySharpCounter--;
    yybegin(myCurrentConfiguration.myReturnStack.pop());
    return CfscriptTokenTypes.CLOSESHARP;
            } 
            // fall through
          case 133: break;
          case 14: 
            { return CfscriptTokenTypes.DEV;
            } 
            // fall through
          case 134: break;
          case 15: 
            { return CfscriptTokenTypes.MUL;
            } 
            // fall through
          case 135: break;
          case 16: 
            { return CfscriptTokenTypes.QUESTION;
            } 
            // fall through
          case 136: break;
          case 17: 
            { return CfscriptTokenTypes.DOTDOT;
            } 
            // fall through
          case 137: break;
          case 18: 
            { return CfscriptTokenTypes.CONCAT;
            } 
            // fall through
          case 138: break;
          case 19: 
            { return CfmlTokenTypes.ASSIGN;
            } 
            // fall through
          case 139: break;
          case 20: 
            { return CfscriptTokenTypes.COMMA;
            } 
            // fall through
          case 140: break;
          case 21: 
            { return CfscriptTokenTypes.L_BRACKET;
            } 
            // fall through
          case 141: break;
          case 22: 
            { return CfscriptTokenTypes.R_BRACKET;
            } 
            // fall through
          case 142: break;
          case 23: 
            { return CfscriptTokenTypes.L_SQUAREBRACKET;
            } 
            // fall through
          case 143: break;
          case 24: 
            { return CfscriptTokenTypes.R_SQUAREBRACKET;
            } 
            // fall through
          case 144: break;
          case 25: 
            { return CfscriptTokenTypes.L_CURLYBRACKET;
            } 
            // fall through
          case 145: break;
          case 26: 
            { return CfscriptTokenTypes.R_CURLYBRACKET;
            } 
            // fall through
          case 146: break;
          case 27: 
            { return CfscriptTokenTypes.SEMICOLON;
            } 
            // fall through
          case 147: break;
          case 28: 
            { return CfscriptTokenTypes.ADD;
            } 
            // fall through
          case 148: break;
          case 29: 
            { return CfscriptTokenTypes.MOD;
            } 
            // fall through
          case 149: break;
          case 30: 
            { return CfscriptTokenTypes.INT_DEV;
            } 
            // fall through
          case 150: break;
          case 31: 
            { return CfscriptTokenTypes.POW;
            } 
            // fall through
          case 151: break;
          case 32: 
            { yybegin(DOUBLEQUOTE_CLOSER); return CfmlTokenTypes.STRING_TEXT;
            } 
            // fall through
          case 152: break;
          case 33: 
            { yybegin(YYINITIAL); return CfmlTokenTypes.DOUBLE_QUOTE_CLOSER;
            } 
            // fall through
          case 153: break;
          case 34: 
            { myCurrentConfiguration.myReturnStack.push(DOUBLE_QUOTED_STRING);
    myCurrentConfiguration.mySharpCounter++;
    yybegin(YYINITIAL);
    return CfscriptTokenTypes.OPENSHARP;
            } 
            // fall through
          case 154: break;
          case 35: 
            { yybegin(SINGLEQUOTE_CLOSER); return CfmlTokenTypes.STRING_TEXT;
            } 
            // fall through
          case 155: break;
          case 36: 
            { yybegin(YYINITIAL); return CfmlTokenTypes.SINGLE_QUOTE_CLOSER;
            } 
            // fall through
          case 156: break;
          case 37: 
            { myCurrentConfiguration.myReturnStack.push(SINGLE_QUOTED_STRING);
    myCurrentConfiguration.mySharpCounter++;
    yybegin(YYINITIAL);
    return CfscriptTokenTypes.OPENSHARP;
            } 
            // fall through
          case 157: break;
          case 38: 
            { return CfscriptTokenTypes.LTE;
            } 
            // fall through
          case 158: break;
          case 39: 
            { return CfscriptTokenTypes.NEQ;
            } 
            // fall through
          case 159: break;
          case 40: 
            { return CfscriptTokenTypes.DEC;
            } 
            // fall through
          case 160: break;
          case 41: 
            { return CfscriptTokenTypes.MINUS_EQ;
            } 
            // fall through
          case 161: break;
          case 42: 
            { return CfscriptTokenTypes.GTE;
            } 
            // fall through
          case 162: break;
          case 43: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { if (ArrayUtil.find(CfmlUtil.getVariableScopes(myProject), StringUtil.toLowerCase(yytext().toString())) != -1) {
        return CfscriptTokenTypes.SCOPE_KEYWORD;
    } else {
        return CfscriptTokenTypes.IDENTIFIER;
    }
            } 
            // fall through
          case 163: break;
          case 44: 
            { return CfscriptTokenTypes.DOUBLE;
            } 
            // fall through
          case 164: break;
          case 45: 
            { return CfscriptTokenTypes.IN_L;
            } 
            // fall through
          case 165: break;
          case 46: 
            { return CfscriptTokenTypes.IF_KEYWORD;
            } 
            // fall through
          case 166: break;
          case 47: 
            { return CfscriptTokenTypes.EQ_L;
            } 
            // fall through
          case 167: break;
          case 48: 
            { return CfscriptTokenTypes.DEV_EQ;
            } 
            // fall through
          case 168: break;
          case 49: 
            { return CfscriptTokenTypes.MUL_EQ;
            } 
            // fall through
          case 169: break;
          case 50: 
            { return CfscriptTokenTypes.LE_L;
            } 
            // fall through
          case 170: break;
          case 51: 
            { return CfscriptTokenTypes.LT_L;
            } 
            // fall through
          case 171: break;
          case 52: 
            { return CfscriptTokenTypes.OR_L;
            } 
            // fall through
          case 172: break;
          case 53: 
            { return CfscriptTokenTypes.DO_KEYWORD;
            } 
            // fall through
          case 173: break;
          case 54: 
            { return CfscriptTokenTypes.GE_L;
            } 
            // fall through
          case 174: break;
          case 55: 
            { return CfscriptTokenTypes.GT_L;
            } 
            // fall through
          case 175: break;
          case 56: 
            { return CfscriptTokenTypes.ELVIS;
            } 
            // fall through
          case 176: break;
          case 57: 
            { return CfscriptTokenTypes.AND;
            } 
            // fall through
          case 177: break;
          case 58: 
            { return CfscriptTokenTypes.CONCAT_EQ;
            } 
            // fall through
          case 178: break;
          case 59: 
            { return CfscriptTokenTypes.EQEQ;
            } 
            // fall through
          case 179: break;
          case 60: 
            { return CfscriptTokenTypes.ADD_EQ;
            } 
            // fall through
          case 180: break;
          case 61: 
            { return CfscriptTokenTypes.INC;
            } 
            // fall through
          case 181: break;
          case 62: 
            { return CfscriptTokenTypes.OR;
            } 
            // fall through
          case 182: break;
          case 63: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return CfmlTokenTypes.STRING_TEXT;
            } 
            // fall through
          case 183: break;
          case 64: 
            { return CfscriptTokenTypes.IMP_L;
            } 
            // fall through
          case 184: break;
          case 65: 
            { return CfscriptTokenTypes.NEQ_L;
            } 
            // fall through
          case 185: break;
          case 66: 
            { return CfscriptTokenTypes.NOT_L;
            } 
            // fall through
          case 186: break;
          case 67: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { return CfscriptTokenTypes.COMMENT;
            } 
            // fall through
          case 187: break;
          case 68: 
            { return CfscriptTokenTypes.FOR_KEYWORD;
            } 
            // fall through
          case 188: break;
          case 69: 
            { return CfscriptTokenTypes.MOD_L;
            } 
            // fall through
          case 189: break;
          case 70: 
            { return CfscriptTokenTypes.AND_L;
            } 
            // fall through
          case 190: break;
          case 71: 
            { return CfscriptTokenTypes.ANY_TYPE;
            } 
            // fall through
          case 191: break;
          case 72: 
            { return CfscriptTokenTypes.NOT_XOR_L;
            } 
            // fall through
          case 192: break;
          case 73: 
            { return CfscriptTokenTypes.TRY_KEYWORD;
            } 
            // fall through
          case 193: break;
          case 74: 
            { return CfscriptTokenTypes.XML_TYPE;
            } 
            // fall through
          case 194: break;
          case 75: 
            { return CfscriptTokenTypes.XOR_L;
            } 
            // fall through
          case 195: break;
          case 76: 
            { yybegin(myCurrentConfiguration.myReturnStack.pop()); return CfmlTokenTypes.COMMENT;
            } 
            // fall through
          case 196: break;
          case 77: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -2);
            { return CfscriptTokenTypes.COMMENT;
            } 
            // fall through
          case 197: break;
          case 78: 
            { return CfscriptTokenTypes.COMMENT;
            } 
            // fall through
          case 198: break;
          case 79: 
            { return CfscriptTokenTypes.CASE_KEYWORD;
            } 
            // fall through
          case 199: break;
          case 80: 
            { return CfscriptTokenTypes.VOID_TYPE;
            } 
            // fall through
          case 200: break;
          case 81: 
            { return CfscriptTokenTypes.ELSE_KEYWORD;
            } 
            // fall through
          case 201: break;
          case 82: 
            { return CfscriptTokenTypes.BOOLEAN;
            } 
            // fall through
          case 202: break;
          case 83: 
            { return CfscriptTokenTypes.DATE_TYPE;
            } 
            // fall through
          case 203: break;
          case 84: 
            { return CfscriptTokenTypes.UUID_TYPE;
            } 
            // fall through
          case 204: break;
          case 85: 
            { return CfscriptTokenTypes.GUID_TYPE;
            } 
            // fall through
          case 205: break;
          case 86: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { myCurrentConfiguration.myCommentCounter--;
    if (myCurrentConfiguration.myCommentCounter == 0) {
        yybegin(COMMENTEND);
    }
    return CfmlTokenTypes.COMMENT;
            } 
            // fall through
          case 206: break;
          case 87: 
            { return startComment(YYINITIAL);
            } 
            // fall through
          case 207: break;
          case 88: 
            { return CfscriptTokenTypes.CATCH_KEYWORD;
            } 
            // fall through
          case 208: break;
          case 89: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { return CfscriptTokenTypes.VAR_KEYWORD;
            } 
            // fall through
          case 209: break;
          case 90: 
            { return CfscriptTokenTypes.ARRAY_TYPE;
            } 
            // fall through
          case 210: break;
          case 91: 
            { return CfscriptTokenTypes.ABORT_KEYWORD;
            } 
            // fall through
          case 211: break;
          case 92: 
            { return CfscriptTokenTypes.BREAK_KEYWORD;
            } 
            // fall through
          case 212: break;
          case 93: 
            { return CfscriptTokenTypes.WHILE_KEYWORD;
            } 
            // fall through
          case 213: break;
          case 94: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { myCurrentConfiguration.myCommentCounter++; return CfmlTokenTypes.COMMENT;
            } 
            // fall through
          case 214: break;
          case 95: 
            { return CfscriptTokenTypes.IMPORT_KEYWORD;
            } 
            // fall through
          case 215: break;
          case 96: 
            { return CfscriptTokenTypes.REMOTE_KEYWORD;
            } 
            // fall through
          case 216: break;
          case 97: 
            { return CfscriptTokenTypes.RETURN_KEYWORD;
            } 
            // fall through
          case 217: break;
          case 98: 
            { return CfscriptTokenTypes.BINARY_TYPE;
            } 
            // fall through
          case 218: break;
          case 99: 
            { return CfscriptTokenTypes.STRING_TYPE;
            } 
            // fall through
          case 219: break;
          case 100: 
            { return CfscriptTokenTypes.STRUCT_TYPE;
            } 
            // fall through
          case 220: break;
          case 101: 
            { return CfscriptTokenTypes.SWITCH_KEYWORD;
            } 
            // fall through
          case 221: break;
          case 102: 
            { return CfscriptTokenTypes.PUBLIC_KEYWORD;
            } 
            // fall through
          case 222: break;
          case 103: 
            { return CfscriptTokenTypes.INCLUDE_KEYWORD;
            } 
            // fall through
          case 223: break;
          case 104: 
            { return CfscriptTokenTypes.NUMERIC_TYPE;
            } 
            // fall through
          case 224: break;
          case 105: 
            { return CfscriptTokenTypes.FINALLY_KEYWORD;
            } 
            // fall through
          case 225: break;
          case 106: 
            { return CfscriptTokenTypes.RETHROW_KEYWORD;
            } 
            // fall through
          case 226: break;
          case 107: 
            { return CfscriptTokenTypes.BOOLAEN_TYPE;
            } 
            // fall through
          case 227: break;
          case 108: 
            { return CfscriptTokenTypes.DEFAULT_KEYWORD;
            } 
            // fall through
          case 228: break;
          case 109: 
            { return CfscriptTokenTypes.PACKAGE_KEYWORD;
            } 
            // fall through
          case 229: break;
          case 110: 
            { return CfscriptTokenTypes.PRIVATE_KEYWORD;
            } 
            // fall through
          case 230: break;
          case 111: 
            { return CfscriptTokenTypes.CONTINUE_KEYWORD;
            } 
            // fall through
          case 231: break;
          case 112: 
            { return CfscriptTokenTypes.CONTAINS_L;
            } 
            // fall through
          case 232: break;
          case 113: 
            { return CfscriptTokenTypes.FUNCTION_KEYWORD;
            } 
            // fall through
          case 233: break;
          case 114: 
            { return CfscriptTokenTypes.REQUIRED_KEYWORD;
            } 
            // fall through
          case 234: break;
          case 115: 
            { return CfscriptTokenTypes.INTERFACE_KEYWORD;
            } 
            // fall through
          case 235: break;
          case 116: 
            { return CfscriptTokenTypes.COMPONENT_KEYWORD;
            } 
            // fall through
          case 236: break;
          case 117: 
            { return CfscriptTokenTypes.VARIABLENAME_TYPE;
            } 
            // fall through
          case 237: break;
          case 118: 
            { return CfscriptTokenTypes.PAGEENCODING_KEYWORD;
            } 
            // fall through
          case 238: break;
          case 119: 
            { return CfscriptTokenTypes.NOT_CONTAINS_L;
            } 
            // fall through
          case 239: break;
          case 120: 
            { return CfmlTokenTypes.VAR_ANNOTATION;
            } 
            // fall through
          case 240: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
