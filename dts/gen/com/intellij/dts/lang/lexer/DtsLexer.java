/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.intellij.dts.lang.lexer;

import java.util.Stack;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import com.intellij.dts.lang.psi.DtsTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/Daniel.Brauner/Projects/intellij/contrib/dts/src/com/intellij/dts/lang/lexer/dts.flex</tt>
 */
class DtsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_CELL = 2;
  public static final int WAITING_BYTE = 4;
  public static final int WAITING_VALUE = 6;
  public static final int WAITING_BITS = 8;
  public static final int WAITING_EXPR = 10;
  public static final int WAITING_STRING = 12;
  public static final int WAITING_CHAR = 14;
  public static final int WAITING_HANDLE = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\1\2\27\1\2\22\0\1\4\1\74\1\26\1\35\1\0\1\70\1\55\1\30\1\60\1\61"+
    "\1\34\1\67\1\54\1\40\1\15\1\16\1\22\1\42\6\32\1\33\1\20\1\66\1\51\1\64\1\52"+
    "\1\65\1\75\1\15\6\21\5\17\1\25\10\17\1\24\2\17\1\23\2\17\1\62\1\3\1\63\1\72"+
    "\1\17\1\0\1\21\1\53\1\7\1\12\1\13\1\14\1\44\1\17\1\5\2\17\1\10\1\45\1\6\1"+
    "\47\1\43\1\17\1\46\1\37\1\36\1\11\1\41\1\17\1\31\1\50\1\17\1\56\1\71\1\57"+
    "\1\73\6\0\1\27\242\0\2\27\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\1\3\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\3\2\1\2\21\1\22\1\1\1\23"+
    "\1\24\1\1\1\25\1\4\1\26\2\27\1\1\1\3"+
    "\1\30\2\21\1\31\1\32\1\1\1\26\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\3\50\1\51\1\50\4\52\1\53"+
    "\1\52\2\54\1\55\1\56\1\54\1\57\1\60\2\0"+
    "\1\61\6\0\4\3\1\0\2\21\5\0\1\62\2\27"+
    "\5\0\2\21\1\0\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\50\1\61\5\50\1\52\1\0"+
    "\3\56\10\0\5\3\2\21\5\0\2\27\5\0\2\21"+
    "\1\50\1\61\7\50\2\52\4\56\3\0\1\73\4\0"+
    "\4\3\10\0\1\50\1\73\4\50\1\56\1\73\7\0"+
    "\3\3\6\0\4\50\1\56\6\0\1\74\1\3\1\75"+
    "\1\3\4\0\2\50\1\75\1\50\1\56\6\0\1\75"+
    "\1\50\1\75\1\56\2\0\1\76\1\77\2\0\1\75"+
    "\1\50\2\75\1\56\5\0\1\50\1\56\13\0\2\75"+
    "\2\0\1\100\1\0\1\101\7\0\1\102\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u022e\0\u0326\0\u022e"+
    "\0\u022e\0\u022e\0\u022e\0\u022e\0\u022e\0\u022e\0\u022e\0\u022e"+
    "\0\u022e\0\u022e\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u022e"+
    "\0\u049a\0\u022e\0\u022e\0\u04d8\0\u022e\0\u0516\0\u03a2\0\u0554"+
    "\0\u0592\0\u05d0\0\u060e\0\u03e0\0\u064c\0\u068a\0\u022e\0\u022e"+
    "\0\u06c8\0\u022e\0\u0706\0\u022e\0\u022e\0\u0744\0\u0782\0\u022e"+
    "\0\u022e\0\u022e\0\u07c0\0\u022e\0\u022e\0\u07fe\0\u022e\0\u083c"+
    "\0\u087a\0\u08b8\0\u022e\0\u08f6\0\u022e\0\u026c\0\u0934\0\u03e0"+
    "\0\u022e\0\u05d0\0\u022e\0\u026c\0\u0972\0\u09b0\0\u05d0\0\u022e"+
    "\0\u022e\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62"+
    "\0\u0ba0\0\u05d0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u03a2\0\u0cd6"+
    "\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u03a2\0\u0e88"+
    "\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078"+
    "\0\u10b6\0\u022e\0\u022e\0\u022e\0\u022e\0\u022e\0\u022e\0\u022e"+
    "\0\u022e\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268"+
    "\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458"+
    "\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648"+
    "\0\u1686\0\u16c4\0\u03a2\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa"+
    "\0\u1838\0\u022e\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac"+
    "\0\u022e\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e"+
    "\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e"+
    "\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u022e\0\u1e84\0\u1ec2\0\u1f00"+
    "\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0"+
    "\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u083c\0\u22a2"+
    "\0\u22e0\0\u231e\0\u235c\0\u239a\0\u1d10\0\u23d8\0\u2416\0\u2454"+
    "\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644"+
    "\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834"+
    "\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24"+
    "\0\u022e\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6"+
    "\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6"+
    "\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6"+
    "\0\u2ff4\0\u022e\0\u022e\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a"+
    "\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a"+
    "\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a"+
    "\0\u3548\0\u3586\0\u35c4\0\u3602\0\u022e\0\u34cc\0\u3640\0\u367e"+
    "\0\u022e\0\u36bc\0\u022e\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2"+
    "\0\u3830\0\u386e\0\u022e\0\u022e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\1\12\1\13\11\14\1\15\7\14\1\16"+
    "\2\12\4\14\1\17\13\14\1\20\1\21\2\14\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\12\1\14\5\12\1\14\1\12\2\13\1\12\1\13"+
    "\10\33\1\34\1\35\1\33\1\36\1\33\1\37\3\33"+
    "\2\12\1\40\1\33\2\36\1\34\1\41\2\33\1\34"+
    "\1\33\1\36\6\33\2\12\1\33\1\34\1\22\2\12"+
    "\1\42\4\12\1\43\1\12\1\34\5\12\1\34\1\12"+
    "\2\13\1\12\1\13\2\34\1\44\2\34\3\44\1\34"+
    "\1\35\1\34\3\44\3\34\3\12\1\34\2\44\1\34"+
    "\1\41\4\34\1\44\6\34\2\12\1\44\1\34\6\12"+
    "\1\45\3\12\1\34\5\12\1\34\1\12\2\13\1\12"+
    "\1\13\10\33\1\34\1\46\1\33\1\34\1\33\1\34"+
    "\3\33\1\16\2\12\1\33\3\34\1\41\2\33\1\34"+
    "\1\33\1\34\6\33\2\12\1\33\1\47\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\12"+
    "\1\34\5\12\1\34\1\12\2\13\1\12\1\13\11\12"+
    "\1\35\1\12\1\50\1\12\1\51\7\12\2\50\1\12"+
    "\1\52\4\12\1\50\34\12\2\13\1\12\1\13\10\53"+
    "\1\12\1\54\1\53\1\55\1\53\1\56\3\53\2\12"+
    "\1\40\1\53\2\55\1\57\1\52\2\53\1\60\1\53"+
    "\1\55\6\53\1\12\1\61\1\53\1\62\1\63\2\12"+
    "\1\64\1\65\2\12\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\3\100\1\101\12\100"+
    "\1\102\7\100\1\103\6\100\1\104\40\100\1\105\2\106"+
    "\1\107\1\106\11\105\1\110\11\105\1\111\4\105\1\112"+
    "\40\105\1\113\2\114\1\113\1\114\10\115\1\113\1\116"+
    "\1\115\1\113\1\115\1\113\3\115\3\113\1\115\3\113"+
    "\1\117\2\115\1\113\1\115\1\113\6\115\2\113\1\115"+
    "\2\113\1\23\1\120\16\113\77\0\2\13\1\0\1\13"+
    "\76\0\11\14\1\0\7\14\3\0\20\14\2\0\2\14"+
    "\11\0\1\121\1\14\5\0\1\14\5\0\1\122\4\0"+
    "\1\123\3\0\1\124\15\0\1\125\6\0\1\126\1\0"+
    "\1\127\1\0\1\130\3\0\1\131\26\0\1\132\1\133"+
    "\3\14\1\134\1\135\1\136\2\14\1\0\7\14\3\0"+
    "\20\14\2\0\2\14\11\0\1\121\1\14\5\0\1\14"+
    "\5\0\10\33\1\137\1\0\7\33\3\0\3\33\2\137"+
    "\2\33\1\137\10\33\2\0\1\33\1\137\11\0\1\121"+
    "\1\137\5\0\1\137\5\0\11\137\1\0\7\137\3\0"+
    "\20\137\2\0\2\137\11\0\1\121\1\137\5\0\1\137"+
    "\5\0\1\122\10\0\1\124\15\0\1\125\46\0\11\137"+
    "\1\0\1\137\1\36\1\137\1\36\1\137\1\140\1\141"+
    "\3\0\1\137\2\36\6\137\1\36\6\137\2\0\2\137"+
    "\11\0\1\121\1\137\5\0\1\137\5\0\11\137\1\0"+
    "\1\137\1\36\1\137\1\36\1\142\1\140\1\141\3\0"+
    "\1\142\2\36\6\137\1\36\6\137\2\0\2\137\11\0"+
    "\1\121\1\137\5\0\1\137\4\0\1\132\1\143\3\137"+
    "\1\144\1\145\1\146\2\137\1\0\7\137\3\0\20\137"+
    "\2\0\2\137\11\0\1\121\1\137\5\0\1\137\5\0"+
    "\2\137\1\147\2\137\3\147\1\137\1\0\1\137\3\147"+
    "\3\137\3\0\1\137\2\147\6\137\1\147\6\137\2\0"+
    "\1\147\1\137\11\0\1\121\1\137\5\0\1\137\5\0"+
    "\1\122\10\0\1\124\15\0\1\125\16\0\1\131\42\0"+
    "\1\50\1\0\1\50\1\0\1\150\1\151\4\0\2\50"+
    "\6\0\1\50\53\0\1\50\1\0\1\50\1\152\1\150"+
    "\1\151\3\0\1\152\2\50\6\0\1\50\37\0\1\132"+
    "\1\153\3\0\1\154\1\155\1\156\67\0\10\53\2\0"+
    "\7\53\3\0\3\53\2\0\2\53\1\0\10\53\2\0"+
    "\1\53\42\0\1\55\1\0\1\55\1\0\1\157\1\160"+
    "\4\0\2\55\6\0\1\55\53\0\1\55\1\0\1\55"+
    "\1\161\1\157\1\160\3\0\1\161\2\55\6\0\1\55"+
    "\105\0\1\162\100\0\1\163\72\0\1\164\11\0\1\165"+
    "\63\0\1\166\12\0\1\167\101\0\1\170\56\0\1\171"+
    "\23\0\3\100\1\101\22\100\1\0\52\100\1\101\75\100"+
    "\1\101\1\100\1\172\10\100\1\173\7\100\1\0\5\100"+
    "\1\174\44\100\1\101\1\104\1\175\3\100\1\176\1\177"+
    "\1\200\12\100\1\0\47\100\22\105\1\201\6\105\1\202"+
    "\1\201\7\105\1\201\33\105\5\0\10\115\2\0\7\115"+
    "\3\0\3\115\2\0\2\115\1\0\10\115\2\0\1\115"+
    "\27\0\1\203\10\204\1\124\7\204\3\0\3\204\1\205"+
    "\14\204\2\0\2\204\12\0\1\204\5\0\1\204\6\0"+
    "\1\206\102\0\1\207\22\0\1\210\37\0\1\124\2\0"+
    "\73\124\34\125\1\211\41\125\10\0\1\212\100\0\1\213"+
    "\127\0\1\214\35\0\1\215\75\0\1\14\1\216\5\14"+
    "\1\217\1\14\1\0\7\14\3\0\20\14\2\0\2\14"+
    "\11\0\1\121\1\14\5\0\1\14\5\0\1\14\1\220"+
    "\7\14\1\0\7\14\3\0\20\14\2\0\2\14\11\0"+
    "\1\121\1\14\5\0\1\14\5\0\6\14\1\221\2\14"+
    "\1\0\7\14\3\0\20\14\2\0\2\14\11\0\1\121"+
    "\1\14\5\0\1\14\5\0\1\14\1\222\7\14\1\0"+
    "\7\14\3\0\20\14\2\0\2\14\11\0\1\121\1\14"+
    "\5\0\1\14\5\0\11\137\1\0\6\137\1\141\3\0"+
    "\20\137\2\0\2\137\11\0\1\121\1\137\5\0\1\137"+
    "\5\0\11\137\1\0\6\137\1\223\3\0\20\137\2\0"+
    "\2\137\11\0\1\121\1\137\5\0\1\137\5\0\2\137"+
    "\1\224\2\137\3\224\1\137\1\0\1\137\3\224\3\137"+
    "\3\0\1\137\2\224\6\137\1\224\6\137\2\0\1\224"+
    "\1\137\11\0\1\121\1\137\5\0\1\137\5\0\1\137"+
    "\1\225\5\137\1\226\1\137\1\0\7\137\3\0\20\137"+
    "\2\0\2\137\11\0\1\121\1\137\5\0\1\137\5\0"+
    "\1\137\1\227\7\137\1\0\7\137\3\0\20\137\2\0"+
    "\2\137\11\0\1\121\1\137\5\0\1\137\5\0\6\137"+
    "\1\230\2\137\1\0\7\137\3\0\20\137\2\0\2\137"+
    "\11\0\1\121\1\137\5\0\1\137\5\0\1\137\1\231"+
    "\7\137\1\0\7\137\3\0\20\137\2\0\2\137\11\0"+
    "\1\121\1\137\5\0\1\137\25\0\1\151\75\0\1\232"+
    "\57\0\1\233\2\0\3\233\3\0\3\233\7\0\2\233"+
    "\6\0\1\233\10\0\1\233\30\0\1\234\5\0\1\235"+
    "\67\0\1\236\102\0\1\237\70\0\1\240\114\0\1\160"+
    "\75\0\1\241\57\0\1\242\2\0\3\242\3\0\3\242"+
    "\7\0\2\242\6\0\1\242\10\0\1\242\22\0\3\100"+
    "\1\101\2\100\1\243\17\100\1\0\47\100\1\173\2\100"+
    "\1\244\22\173\1\124\47\173\3\174\1\245\22\174\1\125"+
    "\5\174\1\246\41\174\3\100\1\101\2\100\1\247\5\100"+
    "\1\250\11\100\1\0\52\100\1\101\2\100\1\251\17\100"+
    "\1\0\52\100\1\101\7\100\1\252\12\100\1\0\52\100"+
    "\1\101\2\100\1\253\17\100\1\0\47\100\22\0\1\254"+
    "\7\0\2\254\6\0\1\254\42\0\1\255\2\0\3\255"+
    "\3\0\3\255\7\0\2\255\6\0\1\255\10\0\1\255"+
    "\27\0\1\204\1\256\7\204\1\257\7\204\3\0\20\204"+
    "\2\0\2\204\12\0\1\204\5\0\1\204\5\0\11\204"+
    "\1\257\7\204\3\0\20\204\2\0\2\204\12\0\1\204"+
    "\5\0\1\204\5\125\11\205\1\260\7\205\3\125\3\205"+
    "\1\261\14\205\2\125\2\205\12\125\1\205\5\125\1\205"+
    "\7\0\1\262\76\0\1\263\124\0\1\264\36\0\16\125"+
    "\1\265\57\125\11\0\1\266\131\0\1\267\35\0\1\270"+
    "\126\0\1\271\44\0\2\14\1\272\6\14\1\0\7\14"+
    "\3\0\20\14\2\0\2\14\11\0\1\121\1\14\5\0"+
    "\1\14\5\0\1\14\1\220\3\14\1\273\3\14\1\0"+
    "\7\14\3\0\20\14\2\0\2\14\11\0\1\121\1\14"+
    "\5\0\1\14\5\0\5\14\1\273\3\14\1\0\7\14"+
    "\3\0\20\14\2\0\2\14\11\0\1\121\1\14\5\0"+
    "\1\14\5\0\7\14\1\274\1\14\1\0\7\14\3\0"+
    "\20\14\2\0\2\14\11\0\1\121\1\14\5\0\1\14"+
    "\5\0\5\14\1\275\3\14\1\0\7\14\3\0\20\14"+
    "\2\0\2\14\11\0\1\121\1\14\5\0\1\14\5\0"+
    "\2\137\1\224\2\137\3\224\1\137\1\0\1\137\3\224"+
    "\1\137\1\140\1\141\3\0\1\137\2\224\6\137\1\224"+
    "\6\137\2\0\1\224\1\137\11\0\1\121\1\137\5\0"+
    "\1\137\5\0\2\137\1\276\6\137\1\0\7\137\3\0"+
    "\20\137\2\0\2\137\11\0\1\121\1\137\5\0\1\137"+
    "\5\0\1\137\1\227\3\137\1\277\3\137\1\0\7\137"+
    "\3\0\20\137\2\0\2\137\11\0\1\121\1\137\5\0"+
    "\1\137\5\0\5\137\1\277\3\137\1\0\7\137\3\0"+
    "\20\137\2\0\2\137\11\0\1\121\1\137\5\0\1\137"+
    "\5\0\7\137\1\300\1\137\1\0\7\137\3\0\20\137"+
    "\2\0\2\137\11\0\1\121\1\137\5\0\1\137\5\0"+
    "\5\137\1\301\3\137\1\0\7\137\3\0\20\137\2\0"+
    "\2\137\11\0\1\121\1\137\5\0\1\137\7\0\1\233"+
    "\2\0\3\233\3\0\3\233\1\0\1\150\1\151\4\0"+
    "\2\233\6\0\1\233\10\0\1\233\31\0\1\302\74\0"+
    "\1\236\3\0\1\303\75\0\1\303\77\0\1\304\73\0"+
    "\1\305\72\0\1\242\2\0\3\242\3\0\3\242\1\0"+
    "\1\157\1\160\4\0\2\242\6\0\1\242\10\0\1\242"+
    "\22\0\3\100\1\101\3\100\1\306\16\100\1\0\47\100"+
    "\1\173\2\100\1\244\72\173\3\174\1\245\30\174\1\246"+
    "\44\174\1\245\12\174\1\307\7\174\1\125\47\174\3\100"+
    "\1\101\3\100\1\310\16\100\1\0\52\100\1\101\2\100"+
    "\1\251\3\100\1\311\13\100\1\0\52\100\1\101\6\100"+
    "\1\311\13\100\1\0\52\100\1\101\10\100\1\312\11\100"+
    "\1\0\52\100\1\101\6\100\1\313\13\100\1\0\47\100"+
    "\22\0\1\105\7\0\2\105\6\0\1\105\42\0\1\105"+
    "\2\0\3\105\3\0\3\105\7\0\2\105\6\0\1\105"+
    "\10\0\1\105\27\0\2\204\1\314\6\204\1\257\7\204"+
    "\3\0\20\204\2\0\2\204\12\0\1\204\5\0\1\204"+
    "\5\0\11\204\1\0\7\204\3\0\20\204\2\0\2\204"+
    "\12\0\1\204\5\0\1\204\5\125\11\205\1\125\7\205"+
    "\3\125\3\205\1\261\14\205\2\125\2\205\12\125\1\205"+
    "\5\125\1\205\5\125\11\205\1\315\7\205\3\125\20\205"+
    "\2\125\2\205\12\125\1\205\5\125\1\205\10\0\1\316"+
    "\100\0\1\317\122\0\1\320\101\0\1\321\77\0\1\322"+
    "\65\0\1\323\76\0\1\324\43\0\3\14\1\325\5\14"+
    "\1\0\7\14\3\0\20\14\2\0\2\14\11\0\1\121"+
    "\1\14\5\0\1\14\5\0\6\14\1\326\2\14\1\0"+
    "\7\14\3\0\20\14\2\0\2\14\11\0\1\121\1\14"+
    "\5\0\1\14\5\0\1\327\10\14\1\0\7\14\3\0"+
    "\20\14\2\0\2\14\11\0\1\121\1\14\5\0\1\14"+
    "\5\0\1\326\10\14\1\0\7\14\3\0\20\14\2\0"+
    "\2\14\11\0\1\121\1\14\5\0\1\14\5\0\3\137"+
    "\1\330\5\137\1\0\7\137\3\0\20\137\2\0\2\137"+
    "\11\0\1\121\1\137\5\0\1\137\5\0\6\137\1\331"+
    "\2\137\1\0\7\137\3\0\20\137\2\0\2\137\11\0"+
    "\1\121\1\137\5\0\1\137\5\0\1\332\10\137\1\0"+
    "\7\137\3\0\20\137\2\0\2\137\11\0\1\121\1\137"+
    "\5\0\1\137\5\0\1\331\10\137\1\0\7\137\3\0"+
    "\20\137\2\0\2\137\11\0\1\121\1\137\5\0\1\137"+
    "\10\0\1\333\100\0\1\334\67\0\1\335\75\0\1\334"+
    "\70\0\3\100\1\101\4\100\1\336\15\100\1\0\52\100"+
    "\1\101\4\100\1\337\15\100\1\0\52\100\1\101\7\100"+
    "\1\340\12\100\1\0\52\100\1\101\1\100\1\341\20\100"+
    "\1\0\52\100\1\101\1\100\1\340\20\100\1\0\47\100"+
    "\5\0\3\204\1\342\5\204\1\257\7\204\3\0\20\204"+
    "\2\0\2\204\12\0\1\204\5\0\1\204\11\0\1\343"+
    "\122\0\1\344\100\0\1\345\41\0\1\346\103\0\1\347"+
    "\122\0\1\350\53\0\1\351\64\0\4\14\1\352\4\14"+
    "\1\0\7\14\3\0\20\14\2\0\2\14\11\0\1\121"+
    "\1\14\5\0\1\14\5\0\7\14\1\353\1\14\1\0"+
    "\7\14\3\0\20\14\2\0\2\14\11\0\1\121\1\14"+
    "\5\0\1\14\5\0\1\14\1\354\7\14\1\0\7\14"+
    "\3\0\20\14\2\0\2\14\11\0\1\121\1\14\5\0"+
    "\1\14\5\0\4\137\1\355\4\137\1\0\7\137\3\0"+
    "\20\137\2\0\2\137\11\0\1\121\1\137\5\0\1\137"+
    "\5\0\7\137\1\353\1\137\1\0\7\137\3\0\20\137"+
    "\2\0\2\137\11\0\1\121\1\137\5\0\1\137\5\0"+
    "\1\137\1\356\7\137\1\0\7\137\3\0\20\137\2\0"+
    "\2\137\11\0\1\121\1\137\5\0\1\137\11\0\1\357"+
    "\100\0\1\353\67\0\1\360\67\0\3\100\1\101\5\100"+
    "\1\361\14\100\1\0\52\100\1\101\5\100\1\362\14\100"+
    "\1\0\52\100\1\101\10\100\1\363\11\100\1\0\52\100"+
    "\1\101\2\100\1\364\17\100\1\0\47\100\5\0\4\204"+
    "\1\365\4\204\1\257\7\204\3\0\20\204\2\0\2\204"+
    "\12\0\1\204\5\0\1\204\12\0\1\366\76\0\1\367"+
    "\124\0\1\370\41\0\1\371\126\0\1\372\43\0\1\373"+
    "\75\0\5\14\1\354\3\14\1\0\7\14\3\0\20\14"+
    "\2\0\2\14\11\0\1\121\1\14\5\0\1\14\1\353"+
    "\2\0\1\374\23\353\1\0\46\353\5\0\6\14\1\353"+
    "\2\14\1\0\7\14\3\0\20\14\2\0\2\14\11\0"+
    "\1\121\1\14\5\0\1\14\5\0\5\137\1\356\3\137"+
    "\1\0\7\137\3\0\20\137\2\0\2\137\11\0\1\121"+
    "\1\137\5\0\1\137\5\0\6\137\1\353\2\137\1\0"+
    "\7\137\3\0\20\137\2\0\2\137\11\0\1\121\1\137"+
    "\5\0\1\137\12\0\1\360\76\0\1\353\62\0\3\100"+
    "\1\101\6\100\1\375\13\100\1\0\52\100\1\101\6\100"+
    "\1\364\13\100\1\0\47\100\1\363\2\100\1\376\22\363"+
    "\1\353\1\100\46\363\3\100\1\101\7\100\1\363\12\100"+
    "\1\0\47\100\5\0\5\204\1\377\3\204\1\257\7\204"+
    "\3\0\20\204\2\0\2\204\12\0\1\204\5\0\1\204"+
    "\13\0\1\u0100\122\0\1\u0101\53\0\1\u0102\75\0\1\u0103"+
    "\72\0\1\u0104\76\0\1\u0105\61\0\2\353\1\u0106\2\374"+
    "\22\353\1\0\46\353\3\100\1\101\7\100\1\u0107\12\100"+
    "\1\0\47\100\2\363\1\u0108\1\376\1\u0109\22\363\1\100"+
    "\46\363\5\0\6\204\1\u010a\2\204\1\257\7\204\3\0"+
    "\20\204\2\0\2\204\12\0\1\204\5\0\1\204\16\0"+
    "\1\u010b\65\0\1\u010c\34\0\1\u010d\100\0\1\u010e\67\0"+
    "\1\u010f\35\0\2\353\1\0\1\374\23\353\1\0\46\353"+
    "\3\100\1\101\12\100\1\u0110\7\100\1\0\47\100\2\363"+
    "\1\100\1\376\22\363\1\353\1\100\50\363\1\u0108\1\376"+
    "\1\u0109\21\363\1\353\1\100\46\363\5\0\11\204\1\u0111"+
    "\7\204\3\0\20\204\2\0\2\204\12\0\1\204\5\0"+
    "\1\204\4\0\1\u010b\21\0\1\u0112\116\0\1\u0113\74\0"+
    "\1\u0114\70\0\1\u0115\42\0\1\u0116\67\0\3\100\1\101"+
    "\1\u0110\21\100\1\u0112\47\100\4\0\1\u010b\11\204\1\0"+
    "\7\204\1\u0112\2\0\20\204\2\0\2\204\12\0\1\204"+
    "\5\0\1\204\3\u0117\1\u0118\22\u0117\1\0\47\u0117\12\0"+
    "\1\u0119\132\0\1\u011a\41\0\1\u011b\131\0\1\u011c\26\0"+
    "\3\u0117\1\u0118\22\u0117\1\u011d\52\u0117\1\u0118\22\u0117\1\u011e"+
    "\47\u0117\13\0\1\u011f\125\0\1\u0120\50\0\1\u0121\117\0"+
    "\1\u0122\53\0\1\u0123\72\0\1\u0124\130\0\1\u0125\75\0"+
    "\1\u0126\42\0\1\u0127\120\0\1\u0128\53\0\1\u0129\131\0"+
    "\1\u012a\43\0\1\u012b\75\0\1\u012c\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14508];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\3\1\1\11\1\1\13\11\5\1\1\11"+
    "\1\1\2\11\1\1\1\11\11\1\2\11\1\1\1\11"+
    "\1\1\2\11\2\1\3\11\1\1\2\11\1\1\1\11"+
    "\3\1\1\11\1\1\1\11\3\1\1\11\1\1\1\11"+
    "\4\1\2\11\2\0\1\1\6\0\4\1\1\0\2\1"+
    "\5\0\3\1\5\0\2\1\1\0\10\11\10\1\1\0"+
    "\3\1\10\0\7\1\5\0\1\11\1\1\5\0\1\11"+
    "\20\1\3\0\1\11\4\0\4\1\10\0\10\1\7\0"+
    "\3\1\6\0\5\1\6\0\1\11\3\1\4\0\5\1"+
    "\6\0\4\1\2\0\2\11\2\0\5\1\5\0\2\1"+
    "\13\0\1\11\1\1\2\0\1\11\1\0\1\11\7\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[300];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private final Stack<Integer> stack = new Stack<>();

    private void pushState(int state) {
        stack.push(yystate());
        yybegin(state);
    }

    private void popState() {
        assert !stack.empty();
        yybegin(stack.pop());
    }

    private void resetState() {
        stack.clear();
        yybegin(YYINITIAL);
    }
    private int parenCount = 0;

    private void beginExpr() {
        parenCount = 0;
        pushState(WAITING_EXPR);
    }

    private void openParen() {
        parenCount++;
    }

    private void closeParen() {
        if (parenCount == 0) {
            popState();
        } else {
            parenCount--;
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  DtsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { if (yystate() != YYINITIAL) {
      resetState();
      yypushback(1);
    } else {
      return TokenType.BAD_CHARACTER;
    }
            } 
            // fall through
          case 68: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 69: break;
          case 3: 
            { return DtsTypes.NAME;
            } 
            // fall through
          case 70: break;
          case 4: 
            { return DtsTypes.SLASH;
            } 
            // fall through
          case 71: break;
          case 5: 
            { pushState(WAITING_STRING); return DtsTypes.DQUOTE;
            } 
            // fall through
          case 72: break;
          case 6: 
            { return DtsTypes.SEMICOLON;
            } 
            // fall through
          case 73: break;
          case 7: 
            { pushState(WAITING_VALUE); return DtsTypes.ASSIGN;
            } 
            // fall through
          case 74: break;
          case 8: 
            { pushState(WAITING_HANDLE); return DtsTypes.HANDLE;
            } 
            // fall through
          case 75: break;
          case 9: 
            { return DtsTypes.LBRACE;
            } 
            // fall through
          case 76: break;
          case 10: 
            { return DtsTypes.RBRACE;
            } 
            // fall through
          case 77: break;
          case 11: 
            { return DtsTypes.LPAREN;
            } 
            // fall through
          case 78: break;
          case 12: 
            { return DtsTypes.RPAREN;
            } 
            // fall through
          case 79: break;
          case 13: 
            { pushState(WAITING_BYTE); return DtsTypes.LBRAC;
            } 
            // fall through
          case 80: break;
          case 14: 
            { return DtsTypes.RBRAC;
            } 
            // fall through
          case 81: break;
          case 15: 
            { pushState(WAITING_CELL); return DtsTypes.LANGL;
            } 
            // fall through
          case 82: break;
          case 16: 
            { return DtsTypes.RANGL;
            } 
            // fall through
          case 83: break;
          case 17: 
            { return DtsTypes.INT;
            } 
            // fall through
          case 84: break;
          case 18: 
            { pushState(WAITING_CHAR); return DtsTypes.SQUOTE;
            } 
            // fall through
          case 85: break;
          case 19: 
            { beginExpr(); return DtsTypes.LPAREN;
            } 
            // fall through
          case 86: break;
          case 20: 
            { popState(); return DtsTypes.RANGL;
            } 
            // fall through
          case 87: break;
          case 21: 
            { popState(); return DtsTypes.RBRAC;
            } 
            // fall through
          case 88: break;
          case 22: 
            { return DtsTypes.COMMA;
            } 
            // fall through
          case 89: break;
          case 23: 
            { popState(); return DtsTypes.INT;
            } 
            // fall through
          case 90: break;
          case 24: 
            { return DtsTypes.DIV;
            } 
            // fall through
          case 91: break;
          case 25: 
            { return DtsTypes.MUL;
            } 
            // fall through
          case 92: break;
          case 26: 
            { return DtsTypes.SUB;
            } 
            // fall through
          case 93: break;
          case 27: 
            { return DtsTypes.AND;
            } 
            // fall through
          case 94: break;
          case 28: 
            { openParen(); return DtsTypes.LPAREN;
            } 
            // fall through
          case 95: break;
          case 29: 
            { closeParen(); return DtsTypes.RPAREN;
            } 
            // fall through
          case 96: break;
          case 30: 
            { return DtsTypes.LES;
            } 
            // fall through
          case 97: break;
          case 31: 
            { return DtsTypes.GRT;
            } 
            // fall through
          case 98: break;
          case 32: 
            { return DtsTypes.COLON;
            } 
            // fall through
          case 99: break;
          case 33: 
            { return DtsTypes.ADD;
            } 
            // fall through
          case 100: break;
          case 34: 
            { return DtsTypes.MOD;
            } 
            // fall through
          case 101: break;
          case 35: 
            { return DtsTypes.OR;
            } 
            // fall through
          case 102: break;
          case 36: 
            { return DtsTypes.XOR;
            } 
            // fall through
          case 103: break;
          case 37: 
            { return DtsTypes.NOT;
            } 
            // fall through
          case 104: break;
          case 38: 
            { return DtsTypes.L_NOT;
            } 
            // fall through
          case 105: break;
          case 39: 
            { return DtsTypes.TERNARY;
            } 
            // fall through
          case 106: break;
          case 40: 
            { return DtsTypes.STRING_VALUE;
            } 
            // fall through
          case 107: break;
          case 41: 
            { popState(); return DtsTypes.DQUOTE;
            } 
            // fall through
          case 108: break;
          case 42: 
            { return DtsTypes.CHAR_VALUE;
            } 
            // fall through
          case 109: break;
          case 43: 
            { popState(); return DtsTypes.SQUOTE;
            } 
            // fall through
          case 110: break;
          case 44: 
            { popState(); yypushback(1);
            } 
            // fall through
          case 111: break;
          case 45: 
            { popState(); return DtsTypes.NAME;
            } 
            // fall through
          case 112: break;
          case 46: 
            { return DtsTypes.PATH;
            } 
            // fall through
          case 113: break;
          case 47: 
            { popState(); return DtsTypes.RBRACE;
            } 
            // fall through
          case 114: break;
          case 48: 
            { return DtsTypes.LABEL;
            } 
            // fall through
          case 115: break;
          case 49: 
            { return DtsTypes.COMMENT_EOL;
            } 
            // fall through
          case 116: break;
          case 50: 
            { return DtsTypes.BYTE;
            } 
            // fall through
          case 117: break;
          case 51: 
            { return DtsTypes.EQ;
            } 
            // fall through
          case 118: break;
          case 52: 
            { return DtsTypes.L_AND;
            } 
            // fall through
          case 119: break;
          case 53: 
            { return DtsTypes.LEQ;
            } 
            // fall through
          case 120: break;
          case 54: 
            { return DtsTypes.LSH;
            } 
            // fall through
          case 121: break;
          case 55: 
            { return DtsTypes.GEQ;
            } 
            // fall through
          case 122: break;
          case 56: 
            { return DtsTypes.RSH;
            } 
            // fall through
          case 123: break;
          case 57: 
            { return DtsTypes.L_OR;
            } 
            // fall through
          case 124: break;
          case 58: 
            { return DtsTypes.NEQ;
            } 
            // fall through
          case 125: break;
          case 59: 
            { return DtsTypes.COMMENT_C;
            } 
            // fall through
          case 126: break;
          case 60: 
            { pushState(WAITING_BITS); return DtsTypes.BITS;
            } 
            // fall through
          case 127: break;
          case 61: 
            { return DtsTypes.PP_STATEMENT;
            } 
            // fall through
          case 128: break;
          case 62: 
            { return DtsTypes.V1;
            } 
            // fall through
          case 129: break;
          case 63: 
            { return DtsTypes.PLUGIN;
            } 
            // fall through
          case 130: break;
          case 64: 
            { pushState(WAITING_CELL); return DtsTypes.MEMRESERVE;
            } 
            // fall through
          case 131: break;
          case 65: 
            { return DtsTypes.DELETE_NODE;
            } 
            // fall through
          case 132: break;
          case 66: 
            { return DtsTypes.OMIT_NODE;
            } 
            // fall through
          case 133: break;
          case 67: 
            { return DtsTypes.DELETE_PROP;
            } 
            // fall through
          case 134: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
