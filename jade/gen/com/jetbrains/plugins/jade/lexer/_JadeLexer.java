// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: jade.flex

package com.jetbrains.plugins.jade.lexer;

import java.util.Stack;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.jetbrains.plugins.jade.psi.JadeTokenTypes;
import com.intellij.psi.xml.XmlTokenType;
import com.intellij.openapi.util.text.StringUtil;

/* Auto generated File */


import java.util.BitSet;

public class _JadeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENT_DONE = 2;
  public static final int TEXT = 4;
  public static final int ATTRIBUTES = 6;
  public static final int MIXIN_ATTRIBUTES = 8;
  public static final int BLOCK = 10;
  public static final int JS_META_BLOCK = 12;
  public static final int TAG = 14;
  public static final int ATTRIBUTE_VALUE = 16;
  public static final int STRING = 18;
  public static final int INTERPOLATION = 20;
  public static final int CODE = 22;
  public static final int EXPR = 24;
  public static final int EACH_EXPR = 26;
  public static final int WHEN_EXPR = 28;
  public static final int PRECEDING_WHITESPACE = 30;
  public static final int FILE_PATH = 32;
  public static final int PRECEDING_INDENT = 34;
  public static final int CLASS = 36;
  public static final int ATTRIBUTE_NAME_WITH_QUOTES = 38;
  public static final int FILTER = 40;
  public static final int INCLUDE_WITH_FILTER = 42;
  public static final int MIXIN_DECL = 44;
  public static final int JS_MIXIN_PARAMS = 46;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\11\2\0\1\12\1\13\1\14\1\15"+
    "\1\0\1\16\1\17\1\20\1\21\1\22\12\23\1\24"+
    "\1\0\1\25\1\26\1\27\1\30\1\31\6\32\24\33"+
    "\1\34\1\35\1\36\1\0\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\33\1\47\1\50\2\33"+
    "\1\51\1\52\1\53\1\54\1\55\1\33\1\56\1\57"+
    "\1\60\1\61\1\33\1\62\1\63\1\64\1\33\1\65"+
    "\1\66\1\67\7\0\1\3\32\0\140\70\u0128\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\0\1\2\20\0\1\3\1\4\1\5"+
    "\2\3\1\6\1\3\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\3\1\17\1\20\12\21\1\22"+
    "\1\23\1\24\1\25\2\24\1\26\1\27\1\30\3\3"+
    "\1\31\1\32\1\15\1\33\1\3\1\34\1\3\5\34"+
    "\1\24\1\35\1\30\2\3\1\14\1\36\1\21\1\37"+
    "\1\40\1\41\2\37\1\42\1\43\1\44\2\37\1\1"+
    "\1\45\1\3\1\1\1\46\1\47\1\2\2\1\2\50"+
    "\1\1\1\51\1\6\1\31\1\11\1\14\1\52\1\53"+
    "\5\54\1\55\1\3\1\56\1\3\1\57\1\60\1\61"+
    "\2\57\1\62\1\63\1\64\1\65\1\66\1\67\1\53"+
    "\4\70\1\71\1\72\1\70\14\0\1\73\2\0\1\74"+
    "\1\0\1\75\2\0\1\76\3\0\1\77\1\0\1\100"+
    "\1\0\1\101\1\102\2\0\15\21\1\22\1\0\1\24"+
    "\1\0\1\103\20\0\1\104\14\0\1\105\1\106\1\0"+
    "\1\107\4\0\2\110\3\0\2\111\7\0\1\112\3\54"+
    "\1\0\1\56\1\0\1\113\10\0\1\114\1\115\1\75"+
    "\1\0\1\100\1\101\1\116\1\0\1\117\10\21\2\120"+
    "\1\121\7\21\1\122\1\123\10\0\1\123\1\124\7\0"+
    "\1\26\22\0\1\125\15\0\2\54\2\56\11\0\2\75"+
    "\1\77\2\100\5\21\1\126\7\21\72\0\1\56\12\0"+
    "\1\75\1\100\2\127\2\21\2\130\4\21\2\131\1\21"+
    "\33\0\1\110\13\0\1\111\6\0\1\56\10\0\1\75"+
    "\1\100\2\21\1\0\2\21\2\132\2\133\23\0\1\56"+
    "\4\0\1\75\1\100\1\21\1\114\1\0\2\21\5\0"+
    "\1\56\1\0\1\75\1\100\2\134\1\135\2\136\2\137"+
    "\2\0\1\135\1\140\3\0\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[577];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u063c\0\u06ae"+
    "\0\u06e7\0\u0720\0\u0759\0\u063c\0\u063c\0\u0792\0\u063c\0\u07cb"+
    "\0\u0804\0\u083d\0\u0876\0\u08af\0\u063c\0\u08e8\0\u0921\0\u095a"+
    "\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22"+
    "\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea"+
    "\0\u063c\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u063c\0\u063c\0\u063c"+
    "\0\u0e07\0\u0e40\0\u0e40\0\u063c\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24"+
    "\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec"+
    "\0\u063c\0\u1125\0\u115e\0\u1197\0\u11d0\0\u063c\0\u063c\0\u063c"+
    "\0\u1209\0\u1242\0\u127b\0\u063c\0\u12b4\0\u12ed\0\u063c\0\u063c"+
    "\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u063c"+
    "\0\u063c\0\u063c\0\u063c\0\u063c\0\u063c\0\u14b5\0\u14ee\0\u1527"+
    "\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u063c\0\u063c"+
    "\0\u063c\0\u0dce\0\u0e07\0\u063c\0\u16b6\0\u16ef\0\u063c\0\u063c"+
    "\0\u063c\0\u1728\0\u063c\0\u1761\0\u179a\0\u17d3\0\u063c\0\u063c"+
    "\0\u180c\0\u0558\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962"+
    "\0\u199b\0\u19d4\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u06e7"+
    "\0\u063c\0\u1af1\0\u1b2a\0\u1b63\0\u0759\0\u063c\0\u1b9c\0\u0792"+
    "\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64"+
    "\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c"+
    "\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u063c\0\u20bb"+
    "\0\u063c\0\u0c78\0\u063c\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8"+
    "\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0"+
    "\0\u0e40\0\u23d9\0\u2412\0\u063c\0\u244b\0\u2484\0\u24bd\0\u24f6"+
    "\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be"+
    "\0\u063c\0\u063c\0\u26f7\0\u063c\0\u2730\0\u2769\0\u27a2\0\u27db"+
    "\0\u063c\0\u2814\0\u115e\0\u284d\0\u2886\0\u063c\0\u28bf\0\u1197"+
    "\0\u28f8\0\u11d0\0\u2931\0\u1209\0\u1242\0\u12b4\0\u063c\0\u296a"+
    "\0\u29a3\0\u29dc\0\u167d\0\u2a15\0\u179a\0\u063c\0\u2a4e\0\u17d3"+
    "\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u063c\0\u063c"+
    "\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u063c\0\u2d33"+
    "\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb"+
    "\0\u2f34\0\u063c\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a"+
    "\0\u30c3\0\u063c\0\u063c\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0"+
    "\0\u3219\0\u3252\0\u328b\0\u06e7\0\u063c\0\u32c4\0\u32fd\0\u3336"+
    "\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u063c\0\u3453\0\u348c\0\u34c5"+
    "\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d"+
    "\0\u36c6\0\u36ff\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855"+
    "\0\u388e\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4\0\u3a1d"+
    "\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73\0\u3bac\0\u3be5"+
    "\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74\0\u3dad"+
    "\0\u3de6\0\u1a0d\0\u3e1f\0\u3e58\0\u063c\0\u3e91\0\u3eca\0\u3f03"+
    "\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7\0\u4020\0\u4059\0\u4092\0\u40cb"+
    "\0\u4104\0\u413d\0\u4176\0\u41af\0\u41e8\0\u4221\0\u425a\0\u4293"+
    "\0\u42cc\0\u4305\0\u433e\0\u4377\0\u43b0\0\u43e9\0\u4422\0\u445b"+
    "\0\u4494\0\u44cd\0\u4506\0\u453f\0\u4578\0\u45b1\0\u45ea\0\u4623"+
    "\0\u465c\0\u4695\0\u46ce\0\u4707\0\u4740\0\u4779\0\u47b2\0\u47eb"+
    "\0\u4824\0\u485d\0\u4896\0\u48cf\0\u4908\0\u4941\0\u497a\0\u49b3"+
    "\0\u49ec\0\u4a25\0\u4a5e\0\u4a97\0\u4ad0\0\u4b09\0\u4b42\0\u4b7b"+
    "\0\u4bb4\0\u4bed\0\u4c26\0\u4c5f\0\u4c98\0\u4cd1\0\u4d0a\0\u4d43"+
    "\0\u4d7c\0\u4db5\0\u4dee\0\u4e27\0\u4e60\0\u4e99\0\u4ed2\0\u4f0b"+
    "\0\u4f44\0\u4f7d\0\u4fb6\0\u4fef\0\u5028\0\u5061\0\u509a\0\u50d3"+
    "\0\u510c\0\u5145\0\u517e\0\u51b7\0\u51f0\0\u5229\0\u5262\0\u529b"+
    "\0\u52d4\0\u530d\0\u5346\0\u537f\0\u53b8\0\u53f1\0\u542a\0\u5463"+
    "\0\u549c\0\u54d5\0\u550e\0\u5547\0\u5580\0\u55b9\0\u55f2\0\u562b"+
    "\0\u5664\0\u569d\0\u56d6\0\u570f\0\u5748\0\u5781\0\u57ba\0\u57f3"+
    "\0\u582c\0\u5865\0\u589e\0\u58d7\0\u5910\0\u5949\0\u5982\0\u59bb"+
    "\0\u59f4\0\u5a2d\0\u5a66\0\u4b09\0\u5a9f\0\u5ad8\0\u5b11\0\u5b4a"+
    "\0\u5b83\0\u5bbc\0\u5bf5\0\u5c2e\0\u5c67\0\u5ca0\0\u5cd9\0\u4d7c"+
    "\0\u5d12\0\u5d4b\0\u5d84\0\u5dbd\0\u5df6\0\u5e2f\0\u5e68\0\u5ea1"+
    "\0\u5eda\0\u5f13\0\u5f4c\0\u5f85\0\u5fbe\0\u5ff7\0\u6030\0\u6069"+
    "\0\u60a2\0\u60db\0\u6114\0\u614d\0\u6186\0\u61bf\0\u61f8\0\u6231"+
    "\0\u626a\0\u62a3\0\u62dc\0\u6315\0\u634e\0\u6387\0\u63c0\0\u63f9"+
    "\0\u6432\0\u646b\0\u64a4\0\u64dd\0\u6516\0\u654f\0\u6588\0\u65c1"+
    "\0\u65fa\0\u6633\0\u666c\0\u66a5\0\u66de\0\u6717\0\u6750\0\u6789"+
    "\0\u67c2\0\u67fb\0\u6834\0\u686d\0\u68a6\0\u0921\0\u68df\0\u6918"+
    "\0\u6951\0\u698a\0\u69c3\0\u69fc\0\u6a35\0\u6a6e\0\u6aa7\0\u6ae0"+
    "\0\u6b19\0\u6b52\0\u6b8b\0\u6bc4\0\u1d9d\0\u6bfd\0\u6c36\0\u6c6f"+
    "\0\u6ca8\0\u6ce1\0\u6d1a\0\u063c\0\u6d53\0\u6d8c\0\u6dc5\0\u6dfe"+
    "\0\u063c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[577];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\35\1\36\1\37\1\35\1\36\1\35\1\36\1\40"+
    "\1\41\1\42\1\35\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\3\35"+
    "\2\57\3\35\1\57\1\35\2\57\1\60\1\61\1\62"+
    "\1\63\1\57\1\64\1\57\1\65\6\57\1\66\1\67"+
    "\1\57\1\70\1\35\1\71\3\35\1\72\1\37\1\35"+
    "\1\72\1\35\1\72\1\40\1\41\1\42\1\35\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\3\35\2\57\3\35\1\57\1\35"+
    "\2\57\1\60\1\61\1\62\1\63\1\57\1\64\1\57"+
    "\1\65\6\57\1\66\1\67\1\57\1\70\1\35\1\71"+
    "\2\35\1\73\1\74\1\37\1\73\1\74\1\73\1\74"+
    "\1\75\1\73\1\75\23\73\1\76\33\73\1\77\1\100"+
    "\1\101\1\77\1\100\1\35\1\100\1\102\1\103\2\77"+
    "\1\104\1\105\1\106\1\77\1\47\2\77\1\107\2\77"+
    "\1\35\1\110\1\35\4\77\1\111\1\77\1\35\32\77"+
    "\1\112\1\100\1\101\1\113\1\100\1\35\1\100\1\114"+
    "\1\115\2\112\1\116\1\117\1\106\1\112\1\114\2\112"+
    "\1\114\2\112\3\114\4\112\1\120\1\112\1\114\32\112"+
    "\1\73\1\121\1\122\1\73\1\121\1\73\1\121\1\75"+
    "\1\73\1\75\23\73\1\76\34\73\1\121\1\123\1\73"+
    "\1\121\1\73\1\121\1\75\1\73\1\75\23\73\1\76"+
    "\33\73\1\35\1\72\1\37\1\35\1\72\1\35\1\72"+
    "\1\124\1\41\1\42\1\125\1\43\1\44\1\45\1\46"+
    "\1\47\1\35\1\126\1\52\1\53\1\127\1\35\1\56"+
    "\3\35\2\130\3\35\1\130\1\35\24\130\4\35\1\131"+
    "\1\132\1\133\1\35\1\132\1\35\1\132\1\131\1\134"+
    "\2\131\1\135\1\136\1\137\1\131\1\140\4\131\1\137"+
    "\3\131\1\136\1\131\2\141\1\136\1\131\1\137\1\141"+
    "\1\142\24\141\1\136\1\131\1\137\1\131\2\143\1\37"+
    "\5\143\1\144\24\143\1\145\33\143\2\146\1\37\11\146"+
    "\1\147\1\150\16\146\1\147\1\146\1\150\26\146\1\147"+
    "\1\146\1\150\1\146\2\151\1\37\66\151\1\152\1\153"+
    "\1\37\1\152\1\153\1\152\1\153\62\152\1\154\1\155"+
    "\1\37\1\154\1\155\1\154\1\155\62\154\1\156\1\153"+
    "\1\37\1\156\1\153\1\156\1\153\15\156\1\127\44\156"+
    "\1\35\1\157\1\37\1\35\1\157\1\35\1\157\1\35"+
    "\1\41\1\160\1\35\1\43\1\161\1\45\1\162\1\47"+
    "\1\35\1\163\1\107\1\53\2\35\1\164\3\35\2\165"+
    "\3\35\1\165\1\35\24\165\4\35\1\166\1\167\1\37"+
    "\1\166\1\167\1\166\1\167\1\166\1\170\2\166\1\171"+
    "\6\166\1\172\46\166\1\35\1\173\1\101\1\35\1\173"+
    "\1\35\1\173\1\35\1\41\1\160\1\35\1\43\1\161"+
    "\1\45\1\162\1\47\1\35\1\163\1\52\1\53\2\35"+
    "\1\164\3\35\2\165\3\35\1\165\1\35\24\165\6\35"+
    "\1\37\5\35\1\41\1\160\1\35\1\43\1\161\1\45"+
    "\1\162\1\47\1\174\1\163\1\52\1\53\2\35\1\164"+
    "\3\35\2\175\1\35\1\176\1\35\1\175\1\35\24\175"+
    "\3\35\1\175\1\77\2\177\1\77\4\177\1\200\2\77"+
    "\1\201\1\202\1\177\1\77\1\177\2\77\1\177\2\77"+
    "\3\177\4\77\1\203\1\77\1\177\32\77\2\35\1\37"+
    "\6\35\1\160\2\35\1\204\1\45\1\162\1\47\1\35"+
    "\1\163\1\52\1\53\2\35\1\164\3\35\2\205\3\35"+
    "\1\205\1\35\24\205\5\35\1\206\1\37\1\35\1\206"+
    "\1\35\1\206\2\35\1\160\2\35\1\204\1\45\1\162"+
    "\1\47\1\35\1\163\1\107\1\53\1\207\1\35\1\164"+
    "\3\35\2\205\3\35\1\205\1\35\24\205\5\35\1\100"+
    "\1\37\1\35\1\100\1\35\1\100\2\35\1\160\2\35"+
    "\1\210\1\211\1\162\1\47\1\35\1\163\1\52\1\53"+
    "\2\35\1\164\3\35\2\212\3\35\1\212\1\35\24\212"+
    "\4\35\1\213\1\214\1\37\1\35\1\214\1\35\1\214"+
    "\1\213\1\215\2\213\1\216\1\217\1\220\14\213\2\221"+
    "\1\217\1\213\1\220\1\221\1\213\24\221\1\217\1\213"+
    "\1\220\1\213\1\0\1\222\2\0\1\222\1\0\1\222"+
    "\63\0\2\223\1\0\1\223\1\0\1\223\1\0\1\224"+
    "\4\0\1\225\2\0\1\226\2\0\1\226\1\227\1\0"+
    "\1\230\2\0\1\227\2\231\3\0\1\231\1\0\24\231"+
    "\22\0\1\222\72\0\1\232\2\0\1\232\6\0\2\233"+
    "\3\0\1\233\1\0\24\233\2\0\1\234\73\0\1\36"+
    "\2\0\1\36\1\0\1\36\71\0\1\235\16\0\1\236"+
    "\36\0\1\237\3\0\2\240\1\0\5\240\1\241\24\240"+
    "\1\242\33\240\20\0\1\243\2\0\1\243\6\0\2\243"+
    "\1\0\1\244\1\0\1\243\1\0\24\243\1\237\2\0"+
    "\1\243\2\245\1\0\10\245\1\246\21\245\1\247\33\245"+
    "\1\0\1\250\2\0\1\250\1\0\1\250\1\251\1\0"+
    "\1\251\20\0\2\252\3\0\1\252\1\0\24\252\5\0"+
    "\1\50\2\0\1\50\1\0\1\50\102\0\1\253\11\0"+
    "\2\254\1\0\1\255\1\0\1\254\1\0\24\254\3\0"+
    "\1\254\22\0\1\256\71\0\1\53\77\0\2\257\3\0"+
    "\1\257\1\0\24\257\5\0\1\56\2\0\1\56\1\0"+
    "\1\56\63\0\1\260\2\0\1\260\1\0\1\260\11\0"+
    "\1\130\2\0\1\57\1\261\5\0\2\57\3\0\1\57"+
    "\1\0\24\57\5\0\1\260\2\0\1\260\1\0\1\260"+
    "\11\0\1\130\2\0\1\57\1\261\5\0\2\57\3\0"+
    "\1\57\1\0\1\262\23\57\5\0\1\260\2\0\1\260"+
    "\1\0\1\260\11\0\1\130\2\0\1\57\1\261\5\0"+
    "\2\57\3\0\1\57\1\0\4\57\1\263\6\57\1\264"+
    "\10\57\5\0\1\260\2\0\1\260\1\0\1\260\11\0"+
    "\1\130\2\0\1\57\1\261\5\0\2\57\3\0\1\57"+
    "\1\0\1\265\7\57\1\266\11\57\1\267\1\57\5\0"+
    "\1\260\2\0\1\260\1\0\1\260\11\0\1\130\2\0"+
    "\1\57\1\261\5\0\2\57\3\0\1\57\1\0\13\57"+
    "\1\270\10\57\5\0\1\260\2\0\1\260\1\0\1\260"+
    "\11\0\1\130\2\0\1\57\1\261\5\0\2\57\3\0"+
    "\1\57\1\0\5\57\1\271\4\57\1\272\11\57\5\0"+
    "\1\260\2\0\1\260\1\0\1\260\11\0\1\130\2\0"+
    "\1\57\1\261\5\0\2\57\3\0\1\57\1\0\7\57"+
    "\1\273\14\57\5\0\1\260\2\0\1\260\1\0\1\260"+
    "\11\0\1\130\2\0\1\57\1\261\5\0\2\57\3\0"+
    "\1\57\1\0\12\57\1\274\11\57\5\0\1\260\2\0"+
    "\1\260\1\0\1\260\11\0\1\130\2\0\1\57\1\261"+
    "\5\0\2\57\3\0\1\57\1\0\6\57\1\275\15\57"+
    "\5\0\1\260\2\0\1\260\1\0\1\260\11\0\1\130"+
    "\2\0\1\57\1\261\5\0\2\57\3\0\1\57\1\0"+
    "\7\57\1\276\14\57\12\0\1\277\63\0\1\72\2\0"+
    "\1\72\1\0\1\72\62\0\1\73\2\0\1\73\1\0"+
    "\1\73\2\0\1\73\1\0\23\73\1\0\33\73\1\0"+
    "\1\74\2\0\1\74\1\0\1\74\147\0\1\300\12\0"+
    "\1\301\1\0\1\301\23\0\1\302\33\0\1\77\2\0"+
    "\1\77\5\0\2\77\3\0\1\77\1\0\2\77\1\0"+
    "\2\77\3\0\4\77\1\0\1\77\1\0\32\77\1\0"+
    "\1\100\2\0\1\100\1\0\1\100\110\0\1\303\42\0"+
    "\1\304\1\240\1\0\1\304\4\240\1\241\2\304\1\240"+
    "\1\305\1\240\1\304\1\240\2\304\1\240\2\304\3\240"+
    "\4\304\1\306\1\307\1\240\32\304\1\310\1\245\1\0"+
    "\1\310\5\245\2\310\1\246\1\311\1\245\1\310\1\245"+
    "\2\310\1\245\2\310\3\245\4\310\1\312\1\313\1\245"+
    "\32\310\1\314\2\0\1\314\5\0\2\314\3\0\1\314"+
    "\1\0\2\314\1\0\2\314\3\0\4\314\1\315\1\314"+
    "\1\0\32\314\1\316\2\0\1\316\5\0\2\316\1\0"+
    "\1\317\1\0\1\316\1\0\2\316\1\0\2\316\3\0"+
    "\4\316\1\320\1\316\1\0\32\316\1\321\2\322\1\321"+
    "\1\322\1\0\1\322\1\323\1\0\2\321\3\0\1\321"+
    "\1\0\2\321\1\0\2\321\1\0\1\324\1\0\4\321"+
    "\1\0\1\321\1\0\32\321\1\325\2\0\1\325\5\0"+
    "\2\325\1\0\1\326\1\0\1\325\1\0\2\325\1\0"+
    "\2\325\3\0\4\325\1\327\1\325\1\0\32\325\1\330"+
    "\2\0\1\330\5\0\2\330\1\0\1\331\1\0\1\330"+
    "\1\0\2\330\1\0\2\330\3\0\4\330\1\332\1\330"+
    "\1\0\32\330\1\333\2\0\1\333\5\0\2\333\3\0"+
    "\1\333\1\0\2\333\1\0\2\333\3\0\4\333\1\334"+
    "\1\333\1\0\32\333\1\335\2\0\1\335\5\0\2\335"+
    "\1\0\1\336\1\0\1\335\1\0\2\335\1\0\2\335"+
    "\3\0\4\335\1\337\1\335\1\0\32\335\1\0\1\121"+
    "\2\0\1\121\1\0\1\121\63\0\1\122\2\0\1\122"+
    "\1\0\1\122\15\0\1\340\44\0\1\341\1\123\1\342"+
    "\1\341\1\123\1\341\1\123\11\341\1\342\50\341\26\0"+
    "\1\236\36\0\1\237\44\0\1\343\31\0\1\344\3\0"+
    "\1\345\11\0\1\253\11\0\2\254\1\0\1\255\1\0"+
    "\1\254\1\0\24\254\3\0\1\254\1\0\1\127\2\0"+
    "\1\127\1\0\1\127\102\0\1\130\2\0\1\130\1\261"+
    "\5\0\2\130\3\0\1\130\1\0\24\130\5\0\1\132"+
    "\1\346\1\0\1\132\1\0\1\132\1\0\1\347\2\0"+
    "\1\350\1\0\1\351\6\0\1\351\4\0\1\351\2\352"+
    "\3\0\1\352\1\0\24\352\5\0\2\353\1\0\1\353"+
    "\1\0\1\353\1\0\1\354\2\0\1\355\1\0\1\356"+
    "\6\0\1\356\4\0\1\356\2\357\3\0\1\357\1\0"+
    "\24\357\4\0\2\360\1\0\5\360\1\131\24\360\1\361"+
    "\33\360\2\362\1\0\10\362\1\131\21\362\1\363\33\362"+
    "\21\0\1\364\1\0\1\364\6\0\2\364\3\0\1\364"+
    "\1\365\24\364\4\0\40\365\1\131\30\365\2\143\1\0"+
    "\5\143\1\0\24\143\1\366\33\143\2\0\1\143\5\0"+
    "\1\143\42\0\1\143\15\0\2\146\1\0\11\146\2\0"+
    "\16\146\1\0\1\146\1\0\26\146\1\0\1\146\1\0"+
    "\1\146\2\151\1\0\66\151\1\152\2\0\1\152\1\0"+
    "\1\152\1\0\62\152\1\0\1\153\1\367\1\0\1\153"+
    "\1\0\1\153\62\0\1\154\2\0\1\154\1\0\1\154"+
    "\1\0\62\154\1\0\1\155\1\367\1\0\1\155\1\0"+
    "\1\155\62\0\1\156\2\0\1\156\1\0\1\156\1\0"+
    "\15\156\1\0\44\156\1\0\1\157\2\0\1\157\1\0"+
    "\1\157\62\0\1\166\2\0\1\166\1\0\1\166\1\0"+
    "\62\166\1\0\1\167\1\367\1\0\1\167\1\0\1\167"+
    "\62\0\1\170\1\240\1\0\1\170\1\240\1\170\1\240"+
    "\1\170\1\166\24\170\1\370\33\170\1\171\1\245\1\0"+
    "\1\171\1\245\1\171\1\245\4\171\1\166\21\171\1\371"+
    "\33\171\1\166\2\0\1\166\1\0\1\166\1\0\13\166"+
    "\1\372\46\166\1\0\1\173\2\0\1\173\1\0\1\173"+
    "\114\0\2\175\1\0\1\373\1\0\1\175\1\0\24\175"+
    "\3\0\1\175\20\0\1\175\2\0\1\175\6\0\2\175"+
    "\1\0\1\373\1\0\1\175\1\0\24\175\3\0\3\175"+
    "\1\0\1\175\2\0\15\175\1\374\6\175\1\374\6\175"+
    "\6\374\22\175\20\0\1\205\2\0\1\205\6\0\2\205"+
    "\3\0\1\205\1\0\24\205\5\0\1\206\2\0\1\206"+
    "\1\0\1\206\102\0\1\212\2\0\1\212\6\0\2\212"+
    "\3\0\1\212\1\0\24\212\5\0\1\214\2\0\1\214"+
    "\1\0\1\214\62\0\2\375\1\0\5\375\1\376\24\375"+
    "\1\377\33\375\2\u0100\1\0\10\u0100\1\376\21\u0100\1\u0101"+
    "\33\u0100\23\0\1\221\6\0\2\221\3\0\1\221\1\0"+
    "\24\221\5\0\2\223\1\0\1\223\1\0\1\223\4\0"+
    "\1\u0102\55\0\1\u0103\2\0\1\u0103\5\0\2\u0103\2\0"+
    "\1\u0104\1\u0103\1\0\2\u0103\1\0\2\u0103\3\0\4\u0103"+
    "\1\0\1\u0103\1\u0105\32\u0103\1\0\2\225\1\0\1\225"+
    "\1\0\1\225\4\0\1\u0102\75\0\1\226\2\0\1\226"+
    "\6\0\2\231\3\0\1\231\1\0\24\231\5\0\2\227"+
    "\1\0\1\227\1\0\1\227\63\0\2\223\1\0\1\223"+
    "\1\0\2\223\3\0\1\u0102\56\0\2\227\1\0\1\227"+
    "\1\0\1\227\11\0\1\226\2\0\1\226\6\0\2\231"+
    "\3\0\1\231\1\0\24\231\24\0\1\232\2\0\1\232"+
    "\6\0\2\233\3\0\1\233\1\0\24\233\4\0\2\234"+
    "\1\0\62\234\1\u0106\1\234\1\0\1\234\7\0\1\u0107"+
    "\62\0\1\236\2\0\1\236\1\0\1\236\62\0\2\237"+
    "\1\0\64\237\1\u0108\1\237\2\0\1\240\5\0\1\240"+
    "\42\0\1\240\35\0\1\243\2\0\1\243\6\0\2\243"+
    "\1\0\1\244\1\0\1\243\1\0\24\243\3\0\3\243"+
    "\1\0\1\243\2\0\15\243\1\u0109\6\243\1\u0109\6\243"+
    "\6\u0109\22\243\13\245\1\246\21\245\1\247\33\245\65\0"+
    "\1\u010a\23\0\1\252\2\0\1\252\6\0\2\252\3\0"+
    "\1\252\1\0\24\252\36\0\2\254\1\0\1\255\1\0"+
    "\1\254\1\0\24\254\3\0\1\254\20\0\1\254\2\0"+
    "\1\254\6\0\2\254\1\0\1\255\1\0\1\254\1\0"+
    "\24\254\3\0\3\254\1\0\1\254\2\0\15\254\1\u010b"+
    "\6\254\1\u010b\6\254\6\u010b\22\254\2\u010c\1\0\15\u010c"+
    "\1\u010d\50\u010c\23\0\1\257\6\0\2\257\3\0\1\257"+
    "\1\0\24\257\5\0\1\260\2\0\1\260\1\0\1\260"+
    "\1\u010e\16\0\1\u010f\74\0\2\u0110\3\0\1\u0110\1\0"+
    "\24\u0110\5\0\1\260\2\0\1\260\1\0\1\260\11\0"+
    "\1\130\2\0\1\57\1\261\5\0\2\57\3\0\1\57"+
    "\1\0\16\57\1\u0111\5\57\5\0\1\260\2\0\1\260"+
    "\1\0\1\260\11\0\1\130\2\0\1\57\1\261\5\0"+
    "\2\57\3\0\1\57\1\0\5\57\1\u0112\16\57\5\0"+
    "\1\260\2\0\1\260\1\0\1\260\11\0\1\130\2\0"+
    "\1\57\1\261\5\0\2\57\3\0\1\57\1\0\2\57"+
    "\1\u0113\21\57\5\0\1\260\2\0\1\260\1\0\1\260"+
    "\11\0\1\130\2\0\1\57\1\261\5\0\2\57\3\0"+
    "\1\57\1\0\2\57\1\u0114\21\57\5\0\1\260\2\0"+
    "\1\260\1\0\1\260\11\0\1\130\2\0\1\57\1\261"+
    "\5\0\2\57\3\0\1\57\1\0\16\57\1\u0115\5\57"+
    "\5\0\1\260\2\0\1\260\1\0\1\260\11\0\1\130"+
    "\2\0\1\57\1\261\5\0\2\57\3\0\1\57\1\0"+
    "\17\57\1\u0116\4\57\5\0\1\260\2\0\1\260\1\0"+
    "\1\260\11\0\1\130\2\0\1\57\1\261\5\0\2\57"+
    "\3\0\1\57\1\0\15\57\1\u0117\6\57\5\0\1\u0118"+
    "\1\u0119\1\0\1\u0118\1\0\1\u0118\5\0\1\u011a\3\0"+
    "\1\130\2\0\1\57\1\261\5\0\2\57\3\0\1\57"+
    "\1\0\24\57\5\0\1\260\2\0\1\260\1\0\1\260"+
    "\11\0\1\130\2\0\1\57\1\261\5\0\2\57\3\0"+
    "\1\57\1\0\2\57\1\u011b\21\57\5\0\1\260\2\0"+
    "\1\260\1\0\1\260\11\0\1\130\2\0\1\57\1\261"+
    "\5\0\2\57\3\0\1\57\1\0\22\57\1\u011c\1\57"+
    "\5\0\1\260\2\0\1\260\1\0\1\260\11\0\1\130"+
    "\2\0\1\57\1\261\5\0\2\57\3\0\1\57\1\0"+
    "\10\57\1\u011d\6\57\1\u011e\4\57\5\0\1\260\2\0"+
    "\1\260\1\0\1\260\11\0\1\130\2\0\1\57\1\261"+
    "\5\0\2\57\3\0\1\57\1\0\4\57\1\u011f\2\57"+
    "\1\u0120\14\57\5\0\1\260\2\0\1\260\1\0\1\260"+
    "\11\0\1\130\2\0\1\57\1\261\5\0\2\57\3\0"+
    "\1\57\1\0\4\57\1\u0121\17\57\4\0\2\300\1\0"+
    "\64\300\1\u0122\1\300\1\304\1\240\1\0\1\304\4\240"+
    "\1\u0123\2\304\3\240\1\304\1\240\2\304\1\240\2\304"+
    "\3\240\4\304\1\240\1\307\1\240\32\304\1\u0124\1\240"+
    "\1\0\1\u0124\4\240\1\241\2\u0124\3\240\1\u0124\1\240"+
    "\2\u0124\1\240\2\u0124\3\240\4\u0124\1\u0125\1\u0126\1\240"+
    "\32\u0124\1\u0127\1\240\1\0\1\u0127\4\240\1\241\2\u0127"+
    "\1\240\1\u0128\1\240\1\u0127\1\240\2\u0127\1\240\2\u0127"+
    "\3\240\4\u0127\1\u0129\1\u012a\1\240\32\u0127\1\u012b\1\0"+
    "\1\240\1\u012b\4\0\1\u012c\2\u012b\3\0\1\u012b\1\0"+
    "\2\u012b\1\0\2\u012b\3\0\4\u012b\1\0\1\u012b\1\0"+
    "\14\u012b\1\304\15\u012b\1\310\1\245\1\0\1\310\5\245"+
    "\2\310\1\u012d\2\245\1\310\1\245\2\310\1\245\2\310"+
    "\3\245\4\310\1\245\1\313\1\245\32\310\1\u012e\1\245"+
    "\1\0\1\u012e\5\245\2\u012e\1\246\2\245\1\u012e\1\245"+
    "\2\u012e\1\245\2\u012e\3\245\4\u012e\1\u012f\1\u0130\1\245"+
    "\32\u012e\1\u0131\1\245\1\0\1\u0131\5\245\2\u0131\1\246"+
    "\1\u0132\1\245\1\u0131\1\245\2\u0131\1\245\2\u0131\3\245"+
    "\4\u0131\1\u0133\1\u0134\1\245\32\u0131\1\310\2\245\1\310"+
    "\5\245\2\310\1\u012d\2\245\1\310\1\245\2\310\1\245"+
    "\2\310\3\245\4\310\1\245\1\313\1\245\32\310\1\314"+
    "\2\0\1\314\5\0\2\314\2\0\1\u0135\1\314\1\0"+
    "\2\314\1\0\2\314\3\0\4\314\1\0\1\314\1\0"+
    "\32\314\1\u0136\2\0\1\u0136\5\0\2\u0136\3\0\1\u0136"+
    "\1\0\2\u0136\1\0\2\u0136\3\0\4\u0136\1\0\1\u0136"+
    "\1\0\32\u0136\1\316\2\0\1\316\5\0\2\316\3\0"+
    "\1\316\1\0\2\316\1\0\2\316\3\0\4\316\1\0"+
    "\1\316\1\u0135\32\316\1\u0137\2\0\1\u0137\5\0\2\u0137"+
    "\3\0\1\u0137\1\0\2\u0137\1\0\2\u0137\3\0\4\u0137"+
    "\1\u0138\1\u0137\1\0\32\u0137\1\u0139\2\0\1\u0139\5\0"+
    "\2\u0139\3\0\1\u0139\1\0\2\u0139\1\0\2\u0139\3\0"+
    "\4\u0139\1\0\1\u0139\1\0\32\u0139\1\0\2\322\1\0"+
    "\1\322\1\0\1\322\1\323\16\0\1\324\70\0\1\324"+
    "\42\0\1\325\2\0\1\325\4\0\1\322\2\325\3\0"+
    "\1\325\1\0\2\325\1\0\2\325\3\0\4\325\1\0"+
    "\1\325\1\0\32\325\1\u013a\2\0\1\u013a\5\0\2\u013a"+
    "\3\0\1\u013a\1\0\2\u013a\1\0\2\u013a\3\0\4\u013a"+
    "\1\u013b\1\u013a\1\0\32\u013a\1\u013c\2\0\1\u013c\5\0"+
    "\2\u013c\1\0\1\u013d\1\0\1\u013c\1\0\2\u013c\1\0"+
    "\2\u013c\3\0\4\u013c\1\u013e\1\u013c\1\0\32\u013c\1\330"+
    "\2\0\1\330\5\0\2\330\1\322\2\0\1\330\1\0"+
    "\2\330\1\0\2\330\3\0\4\330\1\0\1\330\1\0"+
    "\32\330\1\u013f\2\0\1\u013f\5\0\2\u013f\3\0\1\u013f"+
    "\1\0\2\u013f\1\0\2\u013f\3\0\4\u013f\1\u0140\1\u013f"+
    "\1\0\32\u013f\1\u0141\2\0\1\u0141\5\0\2\u0141\1\0"+
    "\1\u0142\1\0\1\u0141\1\0\2\u0141\1\0\2\u0141\3\0"+
    "\4\u0141\1\u0143\1\u0141\1\0\32\u0141\1\333\2\0\1\333"+
    "\5\0\2\333\2\0\1\322\1\333\1\0\2\333\1\0"+
    "\2\333\3\0\4\333\1\0\1\333\1\0\32\333\1\u0144"+
    "\2\0\1\u0144\5\0\2\u0144\3\0\1\u0144\1\0\2\u0144"+
    "\1\0\2\u0144\3\0\4\u0144\1\0\1\u0144\1\0\32\u0144"+
    "\1\335\2\0\1\335\5\0\2\335\3\0\1\335\1\0"+
    "\2\335\1\0\2\335\3\0\4\335\1\0\1\335\1\322"+
    "\32\335\1\u0145\2\0\1\u0145\5\0\2\u0145\3\0\1\u0145"+
    "\1\0\2\u0145\1\0\2\u0145\3\0\4\u0145\1\u0146\1\u0145"+
    "\1\0\32\u0145\1\u0147\2\0\1\u0147\5\0\2\u0147\3\0"+
    "\1\u0147\1\0\2\u0147\1\0\2\u0147\3\0\4\u0147\1\0"+
    "\1\u0147\1\0\32\u0147\32\0\2\u0148\3\0\1\u0148\1\0"+
    "\24\u0148\64\0\1\u0149\10\0\2\345\1\344\66\345\1\0"+
    "\2\346\1\0\1\346\1\0\1\346\1\0\1\347\2\0"+
    "\1\350\1\0\1\351\6\0\1\351\4\0\1\351\2\352"+
    "\3\0\1\352\1\0\24\352\4\0\1\u014a\2\0\1\u014a"+
    "\5\0\2\u014a\1\0\1\u014b\1\0\1\u014a\1\0\2\u014a"+
    "\1\0\2\u014a\3\0\4\u014a\1\u014c\1\u014a\1\0\32\u014a"+
    "\1\u014d\2\0\1\u014d\5\0\2\u014d\1\0\1\u014e\1\0"+
    "\1\u014d\1\0\2\u014d\1\0\2\u014d\3\0\4\u014d\1\u014f"+
    "\1\u014d\1\0\32\u014d\20\0\1\352\2\0\1\352\6\0"+
    "\2\352\3\0\1\352\1\0\24\352\4\0\1\u0150\2\0"+
    "\1\u0150\5\0\2\u0150\1\0\1\u0151\1\0\1\u0150\1\0"+
    "\2\u0150\1\0\2\u0150\3\0\4\u0150\1\u0152\1\u0150\1\0"+
    "\32\u0150\1\u0153\2\0\1\u0153\5\0\2\u0153\1\0\1\u0154"+
    "\1\0\1\u0153\1\0\2\u0153\1\0\2\u0153\3\0\4\u0153"+
    "\1\u0155\1\u0153\1\0\32\u0153\20\0\1\357\2\0\1\357"+
    "\6\0\2\357\3\0\1\357\1\0\24\357\6\0\1\360"+
    "\5\0\1\360\42\0\1\360\15\0\13\362\1\131\21\362"+
    "\1\363\33\362\1\166\1\0\1\240\1\166\1\0\1\166"+
    "\1\0\1\166\1\170\42\166\1\170\15\166\1\171\2\245"+
    "\1\171\1\245\1\171\1\245\4\171\1\166\21\171\1\371"+
    "\33\171\1\u0156\1\u010c\1\0\1\u0156\1\u010c\1\u0156\1\u010c"+
    "\11\u0156\1\u0157\50\u0156\1\0\2\175\1\0\1\175\1\u0158"+
    "\1\175\11\0\1\175\2\0\1\u0159\6\0\1\u0159\1\175"+
    "\1\0\1\373\1\0\1\175\1\0\6\u0159\16\175\3\0"+
    "\1\175\2\0\1\375\5\0\1\375\42\0\1\375\15\0"+
    "\13\u0100\1\376\21\u0100\1\u0101\33\u0100\1\u015a\2\0\1\u015a"+
    "\5\0\2\u015a\2\0\1\u015b\1\u015a\1\0\2\u015a\1\0"+
    "\2\u015a\3\0\4\u015a\1\0\1\u015a\1\u015c\32\u015a\1\u0103"+
    "\2\0\1\u0103\4\0\1\227\2\u0103\3\0\1\u0103\1\0"+
    "\2\u0103\1\0\2\u0103\3\0\4\u0103\1\0\1\u0103\1\0"+
    "\32\u0103\1\u015d\2\0\1\u015d\5\0\2\u015d\3\0\1\u015d"+
    "\1\0\2\u015d\1\0\2\u015d\3\0\4\u015d\1\0\1\u015d"+
    "\1\u015e\32\u015d\1\u015f\2\0\1\u015f\5\0\2\u015f\2\0"+
    "\1\u0160\1\u015f\1\0\2\u015f\1\0\2\u015f\3\0\4\u015f"+
    "\1\0\1\u015f\1\u0161\32\u015f\2\234\1\0\4\234\1\u0162"+
    "\1\234\1\u0162\53\234\1\u0106\1\234\1\0\1\234\1\0"+
    "\2\243\1\0\1\243\1\u0163\1\243\11\0\1\243\2\0"+
    "\1\u0164\6\0\1\u0164\1\243\1\0\1\244\1\0\1\243"+
    "\1\0\6\u0164\16\243\3\0\1\243\2\u010a\1\0\64\u010a"+
    "\1\u0165\1\u010a\1\0\2\254\1\0\1\254\1\u0166\1\254"+
    "\11\0\1\254\2\0\1\u0167\6\0\1\u0167\1\254\1\0"+
    "\1\255\1\0\1\254\1\0\6\u0167\16\254\3\0\1\254"+
    "\2\u010c\1\0\66\u010c\2\u010d\1\0\66\u010d\26\0\1\u010f"+
    "\62\0\1\u0110\2\0\1\u0110\6\0\2\u0110\3\0\1\u0110"+
    "\1\0\24\u0110\5\0\1\260\2\0\1\260\1\0\1\260"+
    "\11\0\1\130\2\0\1\57\1\261\5\0\2\57\3\0"+
    "\1\57\1\0\4\57\1\u0168\17\57\5\0\1\260\2\0"+
    "\1\260\1\0\1\260\11\0\1\130\2\0\1\57\1\261"+
    "\5\0\2\57\3\0\1\57\1\0\1\u0169\23\57\5\0"+
    "\1\260\2\0\1\260\1\0\1\260\11\0\1\130\2\0"+
    "\1\57\1\261\5\0\2\57\3\0\1\57\1\0\17\57"+
    "\1\u016a\4\57\5\0\1\260\2\0\1\260\1\0\1\260"+
    "\11\0\1\130\2\0\1\57\1\261\5\0\2\57\3\0"+
    "\1\57\1\0\6\57\1\u0117\15\57\5\0\1\260\2\0"+
    "\1\260\1\0\1\260\11\0\1\130\2\0\1\57\1\261"+
    "\5\0\2\57\3\0\1\57\1\0\4\57\1\u016b\17\57"+
    "\5\0\1\260\2\0\1\260\1\0\1\260\11\0\1\130"+
    "\2\0\1\57\1\261\5\0\2\57\3\0\1\57\1\0"+
    "\4\57\1\u016c\17\57\5\0\1\u016d\2\0\1\u016d\1\0"+
    "\1\u016d\11\0\1\130\2\0\1\57\1\261\5\0\2\57"+
    "\3\0\1\57\1\0\24\57\5\0\1\u0118\1\u0119\1\0"+
    "\1\u0118\1\0\1\u0118\1\u010e\16\0\1\u010f\43\0\2\u0119"+
    "\1\0\1\u0119\1\0\1\u0119\63\0\1\260\2\0\1\260"+
    "\1\0\1\260\11\0\1\130\2\0\1\57\1\261\5\0"+
    "\2\57\3\0\1\57\1\0\10\57\1\u016e\13\57\5\0"+
    "\1\260\2\0\1\260\1\0\1\260\11\0\1\130\2\0"+
    "\1\57\1\261\5\0\2\57\3\0\1\57\1\0\7\57"+
    "\1\u016f\14\57\5\0\1\260\2\0\1\260\1\0\1\260"+
    "\11\0\1\130\2\0\1\57\1\261\5\0\2\57\3\0"+
    "\1\57\1\0\4\57\1\u0170\17\57\5\0\1\260\2\0"+
    "\1\260\1\0\1\260\11\0\1\130\2\0\1\57\1\261"+
    "\5\0\2\57\3\0\1\57\1\0\7\57\1\u0171\14\57"+
    "\5\0\1\260\2\0\1\260\1\0\1\260\11\0\1\130"+
    "\2\0\1\57\1\261\5\0\2\57\3\0\1\57\1\0"+
    "\12\57\1\u0172\11\57\5\0\1\260\2\0\1\260\1\0"+
    "\1\260\11\0\1\130\2\0\1\57\1\261\5\0\2\57"+
    "\3\0\1\57\1\0\10\57\1\u0173\13\57\5\0\1\260"+
    "\2\0\1\260\1\0\1\260\11\0\1\130\2\0\1\57"+
    "\1\261\5\0\2\57\3\0\1\57\1\0\10\57\1\u0174"+
    "\13\57\4\0\1\u0124\1\240\1\0\1\u0124\4\240\1\241"+
    "\2\u0124\2\240\1\u0175\1\u0124\1\240\2\u0124\1\240\2\u0124"+
    "\3\240\4\u0124\1\240\1\u0126\1\240\32\u0124\1\u0176\1\240"+
    "\1\0\1\u0176\4\240\1\241\2\u0176\3\240\1\u0176\1\240"+
    "\2\u0176\1\240\2\u0176\3\240\4\u0176\1\240\1\u0177\1\240"+
    "\32\u0176\1\u0178\1\0\1\240\1\u0178\4\0\1\240\2\u0178"+
    "\2\0\1\u0179\1\u0178\1\0\2\u0178\1\0\2\u0178\3\0"+
    "\4\u0178\1\0\1\u0178\1\0\14\u0178\1\u0124\15\u0178\1\u0127"+
    "\1\240\1\0\1\u0127\4\240\1\241\2\u0127\3\240\1\u0127"+
    "\1\240\2\u0127\1\240\2\u0127\3\240\4\u0127\1\240\1\u012a"+
    "\1\u0175\32\u0127\1\u017a\1\240\1\0\1\u017a\4\240\1\241"+
    "\2\u017a\3\240\1\u017a\1\240\2\u017a\1\240\2\u017a\3\240"+
    "\4\u017a\1\u017b\1\u017c\1\240\32\u017a\1\u017d\1\240\1\0"+
    "\1\u017d\4\240\1\241\2\u017d\3\240\1\u017d\1\240\2\u017d"+
    "\1\240\2\u017d\3\240\4\u017d\1\240\1\u017e\1\240\32\u017d"+
    "\1\u017f\1\0\1\240\1\u017f\4\0\1\240\2\u017f\3\0"+
    "\1\u017f\1\0\2\u017f\1\0\2\u017f\3\0\4\u017f\1\0"+
    "\1\u017f\1\u0179\14\u017f\1\u0127\15\u017f\1\u012b\2\0\1\u012b"+
    "\4\0\1\u0123\2\u012b\3\0\1\u012b\1\0\2\u012b\1\0"+
    "\2\u012b\3\0\4\u012b\1\0\1\u012b\1\0\32\u012b\1\u012e"+
    "\1\245\1\0\1\u012e\5\245\2\u012e\1\246\1\245\1\u0180"+
    "\1\u012e\1\245\2\u012e\1\245\2\u012e\3\245\4\u012e\1\245"+
    "\1\u0130\1\245\32\u012e\1\u0181\1\245\1\0\1\u0181\5\245"+
    "\2\u0181\1\246\2\245\1\u0181\1\245\2\u0181\1\245\2\u0181"+
    "\3\245\4\u0181\1\245\1\u0182\1\245\32\u0181\1\u012e\2\245"+
    "\1\u012e\5\245\2\u012e\1\246\1\245\1\u0180\1\u012e\1\245"+
    "\2\u012e\1\245\2\u012e\3\245\4\u012e\1\245\1\u0130\1\245"+
    "\32\u012e\1\u0131\1\245\1\0\1\u0131\5\245\2\u0131\1\246"+
    "\2\245\1\u0131\1\245\2\u0131\1\245\2\u0131\3\245\4\u0131"+
    "\1\245\1\u0134\1\u0180\32\u0131\1\u0183\1\245\1\0\1\u0183"+
    "\5\245\2\u0183\1\246\2\245\1\u0183\1\245\2\u0183\1\245"+
    "\2\u0183\3\245\4\u0183\1\u0184\1\u0185\1\245\32\u0183\1\u0186"+
    "\1\245\1\0\1\u0186\5\245\2\u0186\1\246\2\245\1\u0186"+
    "\1\245\2\u0186\1\245\2\u0186\3\245\4\u0186\1\245\1\u0187"+
    "\1\245\32\u0186\1\u0131\2\245\1\u0131\5\245\2\u0131\1\246"+
    "\2\245\1\u0131\1\245\2\u0131\1\245\2\u0131\3\245\4\u0131"+
    "\1\245\1\u0134\1\u0180\32\u0131\1\u0136\2\0\1\u0136\5\0"+
    "\2\u0136\3\0\1\u0136\1\0\2\u0136\1\0\2\u0136\3\0"+
    "\4\u0136\1\0\1\u0136\1\u0188\32\u0136\1\u0137\2\0\1\u0137"+
    "\5\0\2\u0137\2\0\1\u0189\1\u0137\1\0\2\u0137\1\0"+
    "\2\u0137\3\0\4\u0137\1\0\1\u0137\1\0\32\u0137\1\u018a"+
    "\2\0\1\u018a\5\0\2\u018a\3\0\1\u018a\1\0\2\u018a"+
    "\1\0\2\u018a\3\0\4\u018a\1\0\1\u018a\1\0\32\u018a"+
    "\1\u0139\2\0\1\u0139\5\0\2\u0139\3\0\1\u0139\1\0"+
    "\2\u0139\1\0\2\u0139\3\0\4\u0139\1\0\1\u0139\1\u0189"+
    "\32\u0139\1\u013a\2\0\1\u013a\5\0\2\u013a\2\0\1\u018b"+
    "\1\u013a\1\0\2\u013a\1\0\2\u013a\3\0\4\u013a\1\0"+
    "\1\u013a\1\0\32\u013a\1\u018c\2\0\1\u018c\5\0\2\u018c"+
    "\3\0\1\u018c\1\0\2\u018c\1\0\2\u018c\3\0\4\u018c"+
    "\1\0\1\u018c\1\0\32\u018c\1\u013c\2\0\1\u013c\5\0"+
    "\2\u013c\3\0\1\u013c\1\0\2\u013c\1\0\2\u013c\3\0"+
    "\4\u013c\1\0\1\u013c\1\u018b\32\u013c\1\u018d\2\0\1\u018d"+
    "\5\0\2\u018d\3\0\1\u018d\1\0\2\u018d\1\0\2\u018d"+
    "\3\0\4\u018d\1\u018e\1\u018d\1\0\32\u018d\1\u018f\2\0"+
    "\1\u018f\5\0\2\u018f\3\0\1\u018f\1\0\2\u018f\1\0"+
    "\2\u018f\3\0\4\u018f\1\0\1\u018f\1\0\32\u018f\1\u013f"+
    "\2\0\1\u013f\5\0\2\u013f\2\0\1\u0190\1\u013f\1\0"+
    "\2\u013f\1\0\2\u013f\3\0\4\u013f\1\0\1\u013f\1\0"+
    "\32\u013f\1\u0191\2\0\1\u0191\5\0\2\u0191\3\0\1\u0191"+
    "\1\0\2\u0191\1\0\2\u0191\3\0\4\u0191\1\0\1\u0191"+
    "\1\0\32\u0191\1\u0141\2\0\1\u0141\5\0\2\u0141\3\0"+
    "\1\u0141\1\0\2\u0141\1\0\2\u0141\3\0\4\u0141\1\0"+
    "\1\u0141\1\u0190\32\u0141\1\u0192\2\0\1\u0192\5\0\2\u0192"+
    "\3\0\1\u0192\1\0\2\u0192\1\0\2\u0192\3\0\4\u0192"+
    "\1\u0193\1\u0192\1\0\32\u0192\1\u0194\2\0\1\u0194\5\0"+
    "\2\u0194\3\0\1\u0194\1\0\2\u0194\1\0\2\u0194\3\0"+
    "\4\u0194\1\0\1\u0194\1\0\32\u0194\1\u0144\2\0\1\u0144"+
    "\5\0\2\u0144\3\0\1\u0144\1\0\2\u0144\1\0\2\u0144"+
    "\3\0\4\u0144\1\0\1\u0144\1\u0195\32\u0144\1\u0145\2\0"+
    "\1\u0145\5\0\2\u0145\2\0\1\u0196\1\u0145\1\0\2\u0145"+
    "\1\0\2\u0145\3\0\4\u0145\1\0\1\u0145\1\0\32\u0145"+
    "\1\u0197\2\0\1\u0197\5\0\2\u0197\3\0\1\u0197\1\0"+
    "\2\u0197\1\0\2\u0197\3\0\4\u0197\1\0\1\u0197\1\0"+
    "\32\u0197\1\u0147\2\0\1\u0147\5\0\2\u0147\3\0\1\u0147"+
    "\1\0\2\u0147\1\0\2\u0147\3\0\4\u0147\1\0\1\u0147"+
    "\1\u0196\32\u0147\23\0\1\u0148\6\0\2\u0148\3\0\1\u0148"+
    "\1\0\24\u0148\64\0\1\u0198\10\0\1\u014a\2\0\1\u014a"+
    "\4\0\1\351\2\u014a\3\0\1\u014a\1\0\2\u014a\1\0"+
    "\2\u014a\3\0\4\u014a\1\0\1\u014a\1\0\32\u014a\1\u0199"+
    "\2\0\1\u0199\5\0\2\u0199\3\0\1\u0199\1\0\2\u0199"+
    "\1\0\2\u0199\3\0\4\u0199\1\u019a\1\u0199\1\0\32\u0199"+
    "\1\u019b\2\0\1\u019b\5\0\2\u019b\1\0\1\u019c\1\0"+
    "\1\u019b\1\0\2\u019b\1\0\2\u019b\3\0\4\u019b\1\u019d"+
    "\1\u019b\1\0\32\u019b\1\u014d\2\0\1\u014d\5\0\2\u014d"+
    "\1\u019e\2\0\1\u014d\1\0\2\u014d\1\0\2\u014d\3\0"+
    "\4\u014d\1\0\1\u014d\1\0\32\u014d\1\u019f\2\0\1\u019f"+
    "\5\0\2\u019f\3\0\1\u019f\1\0\2\u019f\1\0\2\u019f"+
    "\3\0\4\u019f\1\u01a0\1\u019f\1\0\32\u019f\1\u01a1\2\0"+
    "\1\u01a1\5\0\2\u01a1\1\0\1\u01a2\1\0\1\u01a1\1\0"+
    "\2\u01a1\1\0\2\u01a1\3\0\4\u01a1\1\u01a3\1\u01a1\1\0"+
    "\32\u01a1\1\u0150\2\0\1\u0150\4\0\1\356\2\u0150\3\0"+
    "\1\u0150\1\0\2\u0150\1\0\2\u0150\3\0\4\u0150\1\0"+
    "\1\u0150\1\0\32\u0150\1\u01a4\2\0\1\u01a4\5\0\2\u01a4"+
    "\3\0\1\u01a4\1\0\2\u01a4\1\0\2\u01a4\3\0\4\u01a4"+
    "\1\u01a5\1\u01a4\1\0\32\u01a4\1\u01a6\2\0\1\u01a6\5\0"+
    "\2\u01a6\1\0\1\u01a7\1\0\1\u01a6\1\0\2\u01a6\1\0"+
    "\2\u01a6\3\0\4\u01a6\1\u01a8\1\u01a6\1\0\32\u01a6\1\u0153"+
    "\2\0\1\u0153\5\0\2\u0153\1\u01a9\2\0\1\u0153\1\0"+
    "\2\u0153\1\0\2\u0153\3\0\4\u0153\1\0\1\u0153\1\0"+
    "\32\u0153\1\u01aa\2\0\1\u01aa\5\0\2\u01aa\3\0\1\u01aa"+
    "\1\0\2\u01aa\1\0\2\u01aa\3\0\4\u01aa\1\u01ab\1\u01aa"+
    "\1\0\32\u01aa\1\u01ac\2\0\1\u01ac\5\0\2\u01ac\1\0"+
    "\1\u01ad\1\0\1\u01ac\1\0\2\u01ac\1\0\2\u01ac\3\0"+
    "\4\u01ac\1\u01ae\1\u01ac\1\0\32\u01ac\1\u0156\1\u010c\1\0"+
    "\1\u0156\1\u010c\1\u0156\1\u010c\62\u0156\1\u0157\1\u010d\1\0"+
    "\1\u0157\1\u010d\1\u0157\1\u010d\62\u0157\2\0\1\175\15\0"+
    "\1\175\2\0\1\175\6\0\2\175\1\0\1\373\1\0"+
    "\1\175\1\0\24\175\3\0\1\175\1\0\2\175\1\0"+
    "\1\175\1\u0158\1\175\11\0\1\175\2\0\1\u01af\6\0"+
    "\1\u01af\1\175\1\0\1\373\1\0\1\175\1\0\6\u01af"+
    "\16\175\3\0\1\175\1\u015a\2\0\1\u015a\5\0\2\u015a"+
    "\1\227\2\0\1\u015a\1\0\2\u015a\1\0\2\u015a\3\0"+
    "\4\u015a\1\0\1\u015a\1\0\32\u015a\1\u01b0\2\0\1\u01b0"+
    "\5\0\2\u01b0\3\0\1\u01b0\1\0\2\u01b0\1\0\2\u01b0"+
    "\3\0\4\u01b0\1\0\1\u01b0\1\u01b1\32\u01b0\1\u01b2\2\0"+
    "\1\u01b2\5\0\2\u01b2\2\0\1\u01b3\1\u01b2\1\0\2\u01b2"+
    "\1\0\2\u01b2\3\0\4\u01b2\1\0\1\u01b2\1\u01b4\32\u01b2"+
    "\1\u015d\2\0\1\u015d\5\0\2\u015d\1\0\1\u01b5\1\0"+
    "\1\u015d\1\0\2\u015d\1\0\2\u015d\3\0\4\u015d\1\0"+
    "\1\u015d\1\0\32\u015d\1\u01b6\2\0\1\u01b6\5\0\2\u01b6"+
    "\3\0\1\u01b6\1\0\2\u01b6\1\0\2\u01b6\3\0\4\u01b6"+
    "\1\0\1\u01b6\1\0\32\u01b6\1\u015f\2\0\1\u015f\5\0"+
    "\2\u015f\3\0\1\u015f\1\0\2\u015f\1\0\2\u015f\3\0"+
    "\4\u015f\1\u01b5\1\u015f\1\0\32\u015f\1\u01b7\2\0\1\u01b7"+
    "\5\0\2\u01b7\3\0\1\u01b7\1\0\2\u01b7\1\0\2\u01b7"+
    "\3\0\4\u01b7\1\0\1\u01b7\1\u01b8\32\u01b7\1\u01b9\2\0"+
    "\1\u01b9\5\0\2\u01b9\3\0\1\u01b9\1\0\2\u01b9\1\0"+
    "\2\u01b9\3\0\4\u01b9\1\0\1\u01b9\1\0\32\u01b9\2\0"+
    "\1\243\15\0\1\243\2\0\1\243\6\0\2\243\1\0"+
    "\1\244\1\0\1\243\1\0\24\243\3\0\1\243\1\0"+
    "\2\243\1\0\1\243\1\u0163\1\243\11\0\1\243\2\0"+
    "\1\u01ba\6\0\1\u01ba\1\243\1\0\1\244\1\0\1\243"+
    "\1\0\6\u01ba\16\243\3\0\1\243\2\0\1\254\15\0"+
    "\1\254\2\0\1\254\6\0\2\254\1\0\1\255\1\0"+
    "\1\254\1\0\24\254\3\0\1\254\1\0\2\254\1\0"+
    "\1\254\1\u0166\1\254\11\0\1\254\2\0\1\u01bb\6\0"+
    "\1\u01bb\1\254\1\0\1\255\1\0\1\254\1\0\6\u01bb"+
    "\16\254\3\0\1\254\1\0\1\u01bc\1\u01bd\1\0\1\u01bc"+
    "\1\0\1\u01bc\11\0\1\130\2\0\1\57\1\261\5\0"+
    "\2\57\3\0\1\57\1\0\24\57\5\0\1\260\2\0"+
    "\1\260\1\0\1\260\11\0\1\130\2\0\1\57\1\261"+
    "\5\0\2\57\3\0\1\57\1\0\20\57\1\u01be\3\57"+
    "\5\0\1\260\2\0\1\260\1\0\1\260\11\0\1\130"+
    "\2\0\1\57\1\261\5\0\2\57\3\0\1\57\1\0"+
    "\23\57\1\u01bf\5\0\1\u01c0\1\u01c1\1\0\1\u01c0\1\0"+
    "\1\u01c0\11\0\1\130\2\0\1\57\1\261\5\0\2\57"+
    "\3\0\1\57\1\0\24\57\5\0\1\260\2\0\1\260"+
    "\1\0\1\260\11\0\1\130\2\0\1\57\1\261\5\0"+
    "\2\57\3\0\1\57\1\0\12\57\1\u01c2\11\57\5\0"+
    "\1\u016d\2\0\1\u016d\1\0\1\u016d\1\u010e\16\0\1\u010f"+
    "\43\0\1\260\2\0\1\260\1\0\1\260\11\0\1\130"+
    "\2\0\1\57\1\261\5\0\2\57\3\0\1\57\1\0"+
    "\20\57\1\u01c3\3\57\5\0\1\260\2\0\1\260\1\0"+
    "\1\260\11\0\1\130\2\0\1\57\1\261\5\0\2\57"+
    "\3\0\1\57\1\0\12\57\1\u01c4\11\57\5\0\1\260"+
    "\2\0\1\260\1\0\1\260\11\0\1\130\2\0\1\57"+
    "\1\261\5\0\2\57\3\0\1\57\1\0\16\57\1\u01c5"+
    "\5\57\5\0\1\260\2\0\1\260\1\0\1\260\11\0"+
    "\1\130\2\0\1\57\1\261\5\0\2\57\3\0\1\57"+
    "\1\0\10\57\1\271\13\57\5\0\1\u01c6\1\u01c7\1\0"+
    "\1\u01c6\1\0\1\u01c6\11\0\1\130\2\0\1\57\1\261"+
    "\5\0\2\57\3\0\1\57\1\0\24\57\5\0\1\260"+
    "\2\0\1\260\1\0\1\260\11\0\1\130\2\0\1\57"+
    "\1\261\5\0\2\57\3\0\1\57\1\0\4\57\1\271"+
    "\17\57\5\0\1\260\2\0\1\260\1\0\1\260\11\0"+
    "\1\130\2\0\1\57\1\261\5\0\2\57\3\0\1\57"+
    "\1\0\3\57\1\u01c8\20\57\4\0\2\240\1\0\5\240"+
    "\1\u0123\24\240\1\242\33\240\1\u0176\1\240\1\0\1\u0176"+
    "\4\240\1\241\2\u0176\3\240\1\u0176\1\240\2\u0176\1\240"+
    "\2\u0176\3\240\4\u0176\1\240\1\u0177\1\u01c9\32\u0176\1\u01ca"+
    "\1\0\1\240\1\u01ca\4\0\1\240\2\u01ca\3\0\1\u01ca"+
    "\1\0\2\u01ca\1\0\2\u01ca\3\0\4\u01ca\1\0\1\u01ca"+
    "\1\u01cb\14\u01ca\1\u0176\15\u01ca\1\u0178\2\0\1\u0178\5\0"+
    "\2\u0178\2\0\1\u0179\1\u0178\1\0\2\u0178\1\0\2\u0178"+
    "\3\0\4\u0178\1\0\1\u0178\1\0\32\u0178\10\0\1\u0123"+
    "\60\0\1\u017a\1\240\1\0\1\u017a\4\240\1\241\2\u017a"+
    "\2\240\1\u01cc\1\u017a\1\240\2\u017a\1\240\2\u017a\3\240"+
    "\4\u017a\1\240\1\u017c\1\240\32\u017a\1\u01cd\1\240\1\0"+
    "\1\u01cd\4\240\1\241\2\u01cd\3\240\1\u01cd\1\240\2\u01cd"+
    "\1\240\2\u01cd\3\240\4\u01cd\1\240\1\u01ce\1\240\32\u01cd"+
    "\1\u01cf\1\0\1\240\1\u01cf\4\0\1\240\2\u01cf\2\0"+
    "\1\u01d0\1\u01cf\1\0\2\u01cf\1\0\2\u01cf\3\0\4\u01cf"+
    "\1\0\1\u01cf\1\0\14\u01cf\1\u017a\15\u01cf\1\u017d\1\240"+
    "\1\0\1\u017d\4\240\1\241\2\u017d\3\240\1\u017d\1\240"+
    "\2\u017d\1\240\2\u017d\3\240\4\u017d\1\240\1\u017e\1\u01cc"+
    "\32\u017d\1\u01d1\1\0\1\240\1\u01d1\4\0\1\240\2\u01d1"+
    "\3\0\1\u01d1\1\0\2\u01d1\1\0\2\u01d1\3\0\4\u01d1"+
    "\1\0\1\u01d1\1\u01d0\14\u01d1\1\u017d\15\u01d1\1\u017f\2\0"+
    "\1\u017f\5\0\2\u017f\3\0\1\u017f\1\0\2\u017f\1\0"+
    "\2\u017f\3\0\4\u017f\1\0\1\u017f\1\u0179\32\u017f\2\245"+
    "\1\0\10\245\1\u012d\21\245\1\247\33\245\1\u0181\1\245"+
    "\1\0\1\u0181\5\245\2\u0181\1\246\2\245\1\u0181\1\245"+
    "\2\u0181\1\245\2\u0181\3\245\4\u0181\1\245\1\u0182\1\u01d2"+
    "\33\u0181\2\245\1\u0181\5\245\2\u0181\1\246\2\245\1\u0181"+
    "\1\245\2\u0181\1\245\2\u0181\3\245\4\u0181\1\245\1\u0182"+
    "\1\u01d2\32\u0181\1\u0183\1\245\1\0\1\u0183\5\245\2\u0183"+
    "\1\246\1\245\1\u01d3\1\u0183\1\245\2\u0183\1\245\2\u0183"+
    "\3\245\4\u0183\1\245\1\u0185\1\245\32\u0183\1\u01d4\1\245"+
    "\1\0\1\u01d4\5\245\2\u01d4\1\246\2\245\1\u01d4\1\245"+
    "\2\u01d4\1\245\2\u01d4\3\245\4\u01d4\1\245\1\u01d5\1\245"+
    "\32\u01d4\1\u0183\2\245\1\u0183\5\245\2\u0183\1\246\1\245"+
    "\1\u01d3\1\u0183\1\245\2\u0183\1\245\2\u0183\3\245\4\u0183"+
    "\1\245\1\u0185\1\245\32\u0183\1\u0186\1\245\1\0\1\u0186"+
    "\5\245\2\u0186\1\246\2\245\1\u0186\1\245\2\u0186\1\245"+
    "\2\u0186\3\245\4\u0186\1\245\1\u0187\1\u01d3\33\u0186\2\245"+
    "\1\u0186\5\245\2\u0186\1\246\2\245\1\u0186\1\245\2\u0186"+
    "\1\245\2\u0186\3\245\4\u0186\1\245\1\u0187\1\u01d3\32\u0186"+
    "\15\0\1\u0135\111\0\1\u0135\32\0\1\u018a\2\0\1\u018a"+
    "\5\0\2\u018a\3\0\1\u018a\1\0\2\u018a\1\0\2\u018a"+
    "\3\0\4\u018a\1\0\1\u018a\1\u01d6\32\u018a\10\0\1\322"+
    "\60\0\1\u018c\2\0\1\u018c\5\0\2\u018c\3\0\1\u018c"+
    "\1\0\2\u018c\1\0\2\u018c\3\0\4\u018c\1\0\1\u018c"+
    "\1\u01d7\32\u018c\1\u018d\2\0\1\u018d\5\0\2\u018d\2\0"+
    "\1\u01d8\1\u018d\1\0\2\u018d\1\0\2\u018d\3\0\4\u018d"+
    "\1\0\1\u018d\1\0\32\u018d\1\u01d9\2\0\1\u01d9\5\0"+
    "\2\u01d9\3\0\1\u01d9\1\0\2\u01d9\1\0\2\u01d9\3\0"+
    "\4\u01d9\1\0\1\u01d9\1\0\32\u01d9\1\u018f\2\0\1\u018f"+
    "\5\0\2\u018f\3\0\1\u018f\1\0\2\u018f\1\0\2\u018f"+
    "\3\0\4\u018f\1\0\1\u018f\1\u01d8\32\u018f\13\0\1\322"+
    "\55\0\1\u0191\2\0\1\u0191\5\0\2\u0191\3\0\1\u0191"+
    "\1\0\2\u0191\1\0\2\u0191\3\0\4\u0191\1\0\1\u0191"+
    "\1\u01da\32\u0191\1\u0192\2\0\1\u0192\5\0\2\u0192\2\0"+
    "\1\u01db\1\u0192\1\0\2\u0192\1\0\2\u0192\3\0\4\u0192"+
    "\1\0\1\u0192\1\0\32\u0192\1\u01dc\2\0\1\u01dc\5\0"+
    "\2\u01dc\3\0\1\u01dc\1\0\2\u01dc\1\0\2\u01dc\3\0"+
    "\4\u01dc\1\0\1\u01dc\1\0\32\u01dc\1\u0194\2\0\1\u0194"+
    "\5\0\2\u0194\3\0\1\u0194\1\0\2\u0194\1\0\2\u0194"+
    "\3\0\4\u0194\1\0\1\u0194\1\u01db\32\u0194\15\0\1\322"+
    "\111\0\1\322\32\0\1\u0197\2\0\1\u0197\5\0\2\u0197"+
    "\3\0\1\u0197\1\0\2\u0197\1\0\2\u0197\3\0\4\u0197"+
    "\1\0\1\u0197\1\u01dd\32\u0197\56\0\1\u01de\12\0\1\u0199"+
    "\2\0\1\u0199\5\0\2\u0199\2\0\1\u01df\1\u0199\1\0"+
    "\2\u0199\1\0\2\u0199\3\0\4\u0199\1\0\1\u0199\1\0"+
    "\32\u0199\1\u01e0\2\0\1\u01e0\5\0\2\u01e0\3\0\1\u01e0"+
    "\1\0\2\u01e0\1\0\2\u01e0\3\0\4\u01e0\1\0\1\u01e0"+
    "\1\0\32\u01e0\1\u019b\2\0\1\u019b\5\0\2\u019b\3\0"+
    "\1\u019b\1\0\2\u019b\1\0\2\u019b\3\0\4\u019b\1\0"+
    "\1\u019b\1\u01df\32\u019b\1\u01e1\2\0\1\u01e1\5\0\2\u01e1"+
    "\3\0\1\u01e1\1\0\2\u01e1\1\0\2\u01e1\3\0\4\u01e1"+
    "\1\u01e2\1\u01e1\1\0\32\u01e1\1\u01e3\2\0\1\u01e3\5\0"+
    "\2\u01e3\3\0\1\u01e3\1\0\2\u01e3\1\0\2\u01e3\3\0"+
    "\4\u01e3\1\0\1\u01e3\1\0\32\u01e3\1\0\2\u01e4\1\0"+
    "\1\u01e4\1\0\1\u01e4\1\u01e5\5\0\1\351\10\0\1\351"+
    "\42\0\1\u019f\2\0\1\u019f\5\0\2\u019f\2\0\1\u01e6"+
    "\1\u019f\1\0\2\u019f\1\0\2\u019f\3\0\4\u019f\1\0"+
    "\1\u019f\1\0\32\u019f\1\u01e7\2\0\1\u01e7\5\0\2\u01e7"+
    "\3\0\1\u01e7\1\0\2\u01e7\1\0\2\u01e7\3\0\4\u01e7"+
    "\1\0\1\u01e7\1\0\32\u01e7\1\u01a1\2\0\1\u01a1\5\0"+
    "\2\u01a1\3\0\1\u01a1\1\0\2\u01a1\1\0\2\u01a1\3\0"+
    "\4\u01a1\1\0\1\u01a1\1\u01e6\32\u01a1\1\u01e8\2\0\1\u01e8"+
    "\5\0\2\u01e8\3\0\1\u01e8\1\0\2\u01e8\1\0\2\u01e8"+
    "\3\0\4\u01e8\1\u01e9\1\u01e8\1\0\32\u01e8\1\u01ea\2\0"+
    "\1\u01ea\5\0\2\u01ea\3\0\1\u01ea\1\0\2\u01ea\1\0"+
    "\2\u01ea\3\0\4\u01ea\1\0\1\u01ea\1\0\32\u01ea\1\u01a4"+
    "\2\0\1\u01a4\5\0\2\u01a4\2\0\1\u01eb\1\u01a4\1\0"+
    "\2\u01a4\1\0\2\u01a4\3\0\4\u01a4\1\0\1\u01a4\1\0"+
    "\32\u01a4\1\u01ec\2\0\1\u01ec\5\0\2\u01ec\3\0\1\u01ec"+
    "\1\0\2\u01ec\1\0\2\u01ec\3\0\4\u01ec\1\0\1\u01ec"+
    "\1\0\32\u01ec\1\u01a6\2\0\1\u01a6\5\0\2\u01a6\3\0"+
    "\1\u01a6\1\0\2\u01a6\1\0\2\u01a6\3\0\4\u01a6\1\0"+
    "\1\u01a6\1\u01eb\32\u01a6\1\u01ed\2\0\1\u01ed\5\0\2\u01ed"+
    "\3\0\1\u01ed\1\0\2\u01ed\1\0\2\u01ed\3\0\4\u01ed"+
    "\1\u01ee\1\u01ed\1\0\32\u01ed\1\u01ef\2\0\1\u01ef\5\0"+
    "\2\u01ef\3\0\1\u01ef\1\0\2\u01ef\1\0\2\u01ef\3\0"+
    "\4\u01ef\1\0\1\u01ef\1\0\32\u01ef\1\0\2\u01f0\1\0"+
    "\1\u01f0\1\0\1\u01f0\1\u01f1\5\0\1\356\10\0\1\356"+
    "\42\0\1\u01aa\2\0\1\u01aa\5\0\2\u01aa\2\0\1\u01f2"+
    "\1\u01aa\1\0\2\u01aa\1\0\2\u01aa\3\0\4\u01aa\1\0"+
    "\1\u01aa\1\0\32\u01aa\1\u01f3\2\0\1\u01f3\5\0\2\u01f3"+
    "\3\0\1\u01f3\1\0\2\u01f3\1\0\2\u01f3\3\0\4\u01f3"+
    "\1\0\1\u01f3\1\0\32\u01f3\1\u01ac\2\0\1\u01ac\5\0"+
    "\2\u01ac\3\0\1\u01ac\1\0\2\u01ac\1\0\2\u01ac\3\0"+
    "\4\u01ac\1\0\1\u01ac\1\u01f2\32\u01ac\1\u01f4\2\0\1\u01f4"+
    "\5\0\2\u01f4\3\0\1\u01f4\1\0\2\u01f4\1\0\2\u01f4"+
    "\3\0\4\u01f4\1\u01f5\1\u01f4\1\0\32\u01f4\1\u01f6\2\0"+
    "\1\u01f6\5\0\2\u01f6\3\0\1\u01f6\1\0\2\u01f6\1\0"+
    "\2\u01f6\3\0\4\u01f6\1\0\1\u01f6\1\0\32\u01f6\1\0"+
    "\2\175\1\0\1\175\1\u0158\1\175\11\0\1\175\2\0"+
    "\1\u01f7\6\0\1\u01f7\1\175\1\0\1\373\1\0\1\175"+
    "\1\0\6\u01f7\16\175\3\0\1\175\1\u01b0\2\0\1\u01b0"+
    "\5\0\2\u01b0\1\0\1\u01f8\1\0\1\u01b0\1\0\2\u01b0"+
    "\1\0\2\u01b0\3\0\4\u01b0\1\0\1\u01b0\1\0\32\u01b0"+
    "\1\u01f9\2\0\1\u01f9\5\0\2\u01f9\3\0\1\u01f9\1\0"+
    "\2\u01f9\1\0\2\u01f9\3\0\4\u01f9\1\0\1\u01f9\1\0"+
    "\32\u01f9\1\u01b2\2\0\1\u01b2\5\0\2\u01b2\3\0\1\u01b2"+
    "\1\0\2\u01b2\1\0\2\u01b2\3\0\4\u01b2\1\u01f8\1\u01b2"+
    "\1\0\32\u01b2\1\u01fa\2\0\1\u01fa\5\0\2\u01fa\3\0"+
    "\1\u01fa\1\0\2\u01fa\1\0\2\u01fa\3\0\4\u01fa\1\0"+
    "\1\u01fa\1\u01fb\32\u01fa\1\u01fc\2\0\1\u01fc\5\0\2\u01fc"+
    "\3\0\1\u01fc\1\0\2\u01fc\1\0\2\u01fc\3\0\4\u01fc"+
    "\1\0\1\u01fc\1\0\32\u01fc\10\0\1\227\60\0\1\u01b6"+
    "\2\0\1\u01b6\5\0\2\u01b6\3\0\1\u01b6\1\0\2\u01b6"+
    "\1\0\2\u01b6\3\0\4\u01b6\1\u01fd\1\u01b6\1\0\32\u01b6"+
    "\1\u01b7\2\0\1\u01b7\5\0\2\u01b7\1\0\1\u01fe\1\0"+
    "\1\u01b7\1\0\2\u01b7\1\0\2\u01b7\3\0\4\u01b7\1\0"+
    "\1\u01b7\1\0\32\u01b7\1\u01ff\2\0\1\u01ff\5\0\2\u01ff"+
    "\3\0\1\u01ff\1\0\2\u01ff\1\0\2\u01ff\3\0\4\u01ff"+
    "\1\0\1\u01ff\1\0\32\u01ff\1\u01b9\2\0\1\u01b9\5\0"+
    "\2\u01b9\3\0\1\u01b9\1\0\2\u01b9\1\0\2\u01b9\3\0"+
    "\4\u01b9\1\u01fe\1\u01b9\1\0\32\u01b9\1\0\2\243\1\0"+
    "\1\243\1\u0163\1\243\11\0\1\243\2\0\1\u0200\6\0"+
    "\1\u0200\1\243\1\0\1\244\1\0\1\243\1\0\6\u0200"+
    "\16\243\3\0\1\243\1\0\2\254\1\0\1\254\1\u0166"+
    "\1\254\11\0\1\254\2\0\1\u0201\6\0\1\u0201\1\254"+
    "\1\0\1\255\1\0\1\254\1\0\6\u0201\16\254\3\0"+
    "\1\254\1\0\1\u01bc\1\u01bd\1\0\1\u01bc\1\0\1\u01bc"+
    "\1\u010e\16\0\1\u010f\43\0\2\u01bd\1\0\1\u01bd\1\0"+
    "\1\u01bd\63\0\1\260\2\0\1\260\1\0\1\260\11\0"+
    "\1\130\2\0\1\57\1\261\5\0\2\57\3\0\1\57"+
    "\1\0\10\57\1\u0202\13\57\5\0\1\260\2\0\1\260"+
    "\1\0\1\260\11\0\1\130\2\0\1\57\1\261\5\0"+
    "\2\57\3\0\1\57\1\0\14\57\1\u0203\7\57\5\0"+
    "\1\u01c0\1\u01c1\1\0\1\u01c0\1\0\1\u01c0\1\u010e\16\0"+
    "\1\u010f\21\0\1\u0204\21\0\2\u01c1\1\0\1\u01c1\1\0"+
    "\1\u01c1\63\0\1\260\2\0\1\260\1\0\1\260\11\0"+
    "\1\130\2\0\1\57\1\261\5\0\2\57\3\0\1\57"+
    "\1\0\3\57\1\u0205\20\57\5\0\1\260\2\0\1\260"+
    "\1\0\1\260\11\0\1\130\2\0\1\57\1\261\5\0"+
    "\2\57\3\0\1\57\1\0\3\57\1\u0206\20\57\5\0"+
    "\1\u0207\1\u0208\1\0\1\u0207\1\0\1\u0207\11\0\1\130"+
    "\2\0\1\57\1\261\5\0\2\57\3\0\1\57\1\0"+
    "\24\57\5\0\1\260\2\0\1\260\1\0\1\260\11\0"+
    "\1\130\2\0\1\57\1\261\5\0\2\57\3\0\1\57"+
    "\1\0\16\57\1\271\5\57\5\0\1\u01c6\1\u01c7\1\0"+
    "\1\u01c6\1\0\1\u01c6\1\u010e\16\0\1\u010f\43\0\2\u01c7"+
    "\1\0\1\u01c7\1\0\1\u01c7\63\0\1\u0209\1\u020a\1\0"+
    "\1\u0209\1\0\1\u0209\11\0\1\130\2\0\1\57\1\261"+
    "\5\0\2\57\3\0\1\57\1\0\24\57\4\0\2\240"+
    "\1\0\5\240\1\241\4\240\1\u0175\17\240\1\242\33\240"+
    "\1\u01ca\2\0\1\u01ca\5\0\2\u01ca\3\0\1\u01ca\1\0"+
    "\2\u01ca\1\0\2\u01ca\3\0\4\u01ca\1\0\1\u01ca\1\u01cb"+
    "\32\u01ca\15\0\1\u0179\53\0\2\240\1\0\5\240\1\241"+
    "\24\240\1\242\1\u0175\32\240\1\u01cd\1\240\1\0\1\u01cd"+
    "\4\240\1\241\2\u01cd\3\240\1\u01cd\1\240\2\u01cd\1\240"+
    "\2\u01cd\3\240\4\u01cd\1\240\1\u01ce\1\u020b\32\u01cd\1\u020c"+
    "\1\0\1\240\1\u020c\4\0\1\240\2\u020c\3\0\1\u020c"+
    "\1\0\2\u020c\1\0\2\u020c\3\0\4\u020c\1\0\1\u020c"+
    "\1\u020d\14\u020c\1\u01cd\15\u020c\1\u01cf\2\0\1\u01cf\5\0"+
    "\2\u01cf\2\0\1\u01d0\1\u01cf\1\0\2\u01cf\1\0\2\u01cf"+
    "\3\0\4\u01cf\1\0\1\u01cf\1\0\32\u01cf\36\0\1\u0179"+
    "\32\0\1\u01d1\2\0\1\u01d1\5\0\2\u01d1\3\0\1\u01d1"+
    "\1\0\2\u01d1\1\0\2\u01d1\3\0\4\u01d1\1\0\1\u01d1"+
    "\1\u01d0\32\u01d1\2\245\1\0\10\245\1\246\1\245\1\u0180"+
    "\17\245\1\247\35\245\1\0\10\245\1\246\21\245\1\247"+
    "\1\u0180\32\245\1\u01d4\1\245\1\0\1\u01d4\5\245\2\u01d4"+
    "\1\246\2\245\1\u01d4\1\245\2\u01d4\1\245\2\u01d4\3\245"+
    "\4\u01d4\1\245\1\u01d5\1\u020e\33\u01d4\2\245\1\u01d4\5\245"+
    "\2\u01d4\1\246\2\245\1\u01d4\1\245\2\u01d4\1\245\2\u01d4"+
    "\3\245\4\u01d4\1\245\1\u01d5\1\u020e\32\u01d4\15\0\1\u0189"+
    "\70\0\1\u018b\111\0\1\u018b\32\0\1\u01d9\2\0\1\u01d9"+
    "\5\0\2\u01d9\3\0\1\u01d9\1\0\2\u01d9\1\0\2\u01d9"+
    "\3\0\4\u01d9\1\0\1\u01d9\1\u020f\32\u01d9\15\0\1\u0190"+
    "\111\0\1\u0190\32\0\1\u01dc\2\0\1\u01dc\5\0\2\u01dc"+
    "\3\0\1\u01dc\1\0\2\u01dc\1\0\2\u01dc\3\0\4\u01dc"+
    "\1\0\1\u01dc\1\u0210\32\u01dc\15\0\1\u0196\123\0\1\u0211"+
    "\30\0\1\351\60\0\1\u01e0\2\0\1\u01e0\5\0\2\u01e0"+
    "\3\0\1\u01e0\1\0\2\u01e0\1\0\2\u01e0\3\0\4\u01e0"+
    "\1\0\1\u01e0\1\u0212\32\u01e0\1\u01e1\2\0\1\u01e1\5\0"+
    "\2\u01e1\2\0\1\u0213\1\u01e1\1\0\2\u01e1\1\0\2\u01e1"+
    "\3\0\4\u01e1\1\0\1\u01e1\1\0\32\u01e1\1\u0214\2\0"+
    "\1\u0214\5\0\2\u0214\3\0\1\u0214\1\0\2\u0214\1\0"+
    "\2\u0214\3\0\4\u0214\1\0\1\u0214\1\0\32\u0214\1\u01e3"+
    "\2\0\1\u01e3\5\0\2\u01e3\3\0\1\u01e3\1\0\2\u01e3"+
    "\1\0\2\u01e3\3\0\4\u01e3\1\0\1\u01e3\1\u0213\32\u01e3"+
    "\26\0\1\351\55\0\1\u019e\55\0\1\u01e7\2\0\1\u01e7"+
    "\5\0\2\u01e7\3\0\1\u01e7\1\0\2\u01e7\1\0\2\u01e7"+
    "\3\0\4\u01e7\1\0\1\u01e7\1\u0215\32\u01e7\1\u01e8\2\0"+
    "\1\u01e8\5\0\2\u01e8\2\0\1\u0216\1\u01e8\1\0\2\u01e8"+
    "\1\0\2\u01e8\3\0\4\u01e8\1\0\1\u01e8\1\0\32\u01e8"+
    "\1\u0217\2\0\1\u0217\5\0\2\u0217\3\0\1\u0217\1\0"+
    "\2\u0217\1\0\2\u0217\3\0\4\u0217\1\0\1\u0217\1\0"+
    "\32\u0217\1\u01ea\2\0\1\u01ea\5\0\2\u01ea\3\0\1\u01ea"+
    "\1\0\2\u01ea\1\0\2\u01ea\3\0\4\u01ea\1\0\1\u01ea"+
    "\1\u0216\32\u01ea\10\0\1\356\60\0\1\u01ec\2\0\1\u01ec"+
    "\5\0\2\u01ec\3\0\1\u01ec\1\0\2\u01ec\1\0\2\u01ec"+
    "\3\0\4\u01ec\1\0\1\u01ec\1\u0218\32\u01ec\1\u01ed\2\0"+
    "\1\u01ed\5\0\2\u01ed\2\0\1\u0219\1\u01ed\1\0\2\u01ed"+
    "\1\0\2\u01ed\3\0\4\u01ed\1\0\1\u01ed\1\0\32\u01ed"+
    "\1\u021a\2\0\1\u021a\5\0\2\u021a\3\0\1\u021a\1\0"+
    "\2\u021a\1\0\2\u021a\3\0\4\u021a\1\0\1\u021a\1\0"+
    "\32\u021a\1\u01ef\2\0\1\u01ef\5\0\2\u01ef\3\0\1\u01ef"+
    "\1\0\2\u01ef\1\0\2\u01ef\3\0\4\u01ef\1\0\1\u01ef"+
    "\1\u0219\32\u01ef\26\0\1\356\55\0\1\u01a9\55\0\1\u01f3"+
    "\2\0\1\u01f3\5\0\2\u01f3\3\0\1\u01f3\1\0\2\u01f3"+
    "\1\0\2\u01f3\3\0\4\u01f3\1\0\1\u01f3\1\u021b\32\u01f3"+
    "\1\u01f4\2\0\1\u01f4\5\0\2\u01f4\2\0\1\u021c\1\u01f4"+
    "\1\0\2\u01f4\1\0\2\u01f4\3\0\4\u01f4\1\0\1\u01f4"+
    "\1\0\32\u01f4\1\u021d\2\0\1\u021d\5\0\2\u021d\3\0"+
    "\1\u021d\1\0\2\u021d\1\0\2\u021d\3\0\4\u021d\1\0"+
    "\1\u021d\1\0\32\u021d\1\u01f6\2\0\1\u01f6\5\0\2\u01f6"+
    "\3\0\1\u01f6\1\0\2\u01f6\1\0\2\u01f6\3\0\4\u01f6"+
    "\1\0\1\u01f6\1\u021c\32\u01f6\1\0\2\175\1\0\1\175"+
    "\1\u0158\1\175\11\0\1\175\2\0\1\u021e\6\0\1\u021e"+
    "\1\175\1\0\1\373\1\0\1\175\1\0\6\u021e\16\175"+
    "\3\0\1\175\13\0\1\227\55\0\1\u01f9\2\0\1\u01f9"+
    "\5\0\2\u01f9\3\0\1\u01f9\1\0\2\u01f9\1\0\2\u01f9"+
    "\3\0\4\u01f9\1\u021f\1\u01f9\1\0\32\u01f9\1\u01fa\2\0"+
    "\1\u01fa\5\0\2\u01fa\1\0\1\u0220\1\0\1\u01fa\1\0"+
    "\2\u01fa\1\0\2\u01fa\3\0\4\u01fa\1\0\1\u01fa\1\0"+
    "\32\u01fa\1\u0221\2\0\1\u0221\5\0\2\u0221\3\0\1\u0221"+
    "\1\0\2\u0221\1\0\2\u0221\3\0\4\u0221\1\0\1\u0221"+
    "\1\0\32\u0221\1\u01fc\2\0\1\u01fc\5\0\2\u01fc\3\0"+
    "\1\u01fc\1\0\2\u01fc\1\0\2\u01fc\3\0\4\u01fc\1\u0220"+
    "\1\u01fc\1\0\32\u01fc\14\0\1\u01b5\110\0\1\u01b5\34\0"+
    "\1\u01ff\2\0\1\u01ff\5\0\2\u01ff\3\0\1\u01ff\1\0"+
    "\2\u01ff\1\0\2\u01ff\3\0\4\u01ff\1\u0222\1\u01ff\1\0"+
    "\32\u01ff\1\0\2\243\1\0\1\243\1\u0163\1\243\11\0"+
    "\1\243\2\0\1\u0223\6\0\1\u0223\1\243\1\0\1\244"+
    "\1\0\1\243\1\0\6\u0223\16\243\3\0\1\243\1\0"+
    "\2\254\1\0\1\254\1\u0166\1\254\11\0\1\254\2\0"+
    "\1\u0224\6\0\1\u0224\1\254\1\0\1\255\1\0\1\254"+
    "\1\0\6\u0224\16\254\3\0\1\254\1\0\1\260\2\0"+
    "\1\260\1\0\1\260\11\0\1\130\2\0\1\57\1\261"+
    "\5\0\2\57\3\0\1\57\1\0\17\57\1\u0225\4\57"+
    "\5\0\1\260\2\0\1\260\1\0\1\260\11\0\1\130"+
    "\2\0\1\57\1\261\5\0\2\57\3\0\1\57\1\0"+
    "\4\57\1\u0226\17\57\52\0\1\u0227\23\0\1\260\2\0"+
    "\1\260\1\0\1\260\11\0\1\130\2\0\1\57\1\261"+
    "\5\0\2\57\3\0\1\57\1\0\16\57\1\u0228\5\57"+
    "\5\0\1\260\2\0\1\260\1\0\1\260\11\0\1\130"+
    "\2\0\1\57\1\261\5\0\2\57\3\0\1\57\1\0"+
    "\4\57\1\u0229\17\57\5\0\1\u0207\1\u0208\1\0\1\u0207"+
    "\1\0\1\u0207\1\u010e\16\0\1\u010f\43\0\2\u0208\1\0"+
    "\1\u0208\1\0\1\u0208\63\0\1\u0209\1\u020a\1\0\1\u0209"+
    "\1\0\1\u0209\1\u010e\16\0\1\u010f\43\0\2\u020a\1\0"+
    "\1\u020a\1\0\1\u020a\62\0\2\240\1\0\5\240\1\241"+
    "\4\240\1\u01cc\17\240\1\242\33\240\1\u020c\2\0\1\u020c"+
    "\5\0\2\u020c\3\0\1\u020c\1\0\2\u020c\1\0\2\u020c"+
    "\3\0\4\u020c\1\0\1\u020c\1\u020d\32\u020c\15\0\1\u01d0"+
    "\53\0\2\245\1\0\10\245\1\246\1\245\1\u01d3\17\245"+
    "\1\247\33\245\15\0\1\u01d8\70\0\1\u01db\115\0\1\u022a"+
    "\43\0\1\u01df\111\0\1\u01df\32\0\1\u0214\2\0\1\u0214"+
    "\5\0\2\u0214\3\0\1\u0214\1\0\2\u0214\1\0\2\u0214"+
    "\3\0\4\u0214\1\0\1\u0214\1\u022b\32\u0214\15\0\1\u01e6"+
    "\111\0\1\u01e6\32\0\1\u0217\2\0\1\u0217\5\0\2\u0217"+
    "\3\0\1\u0217\1\0\2\u0217\1\0\2\u0217\3\0\4\u0217"+
    "\1\0\1\u0217\1\u022c\32\u0217\15\0\1\u01eb\111\0\1\u01eb"+
    "\32\0\1\u021a\2\0\1\u021a\5\0\2\u021a\3\0\1\u021a"+
    "\1\0\2\u021a\1\0\2\u021a\3\0\4\u021a\1\0\1\u021a"+
    "\1\u022d\32\u021a\15\0\1\u01f2\111\0\1\u01f2\32\0\1\u021d"+
    "\2\0\1\u021d\5\0\2\u021d\3\0\1\u021d\1\0\2\u021d"+
    "\1\0\2\u021d\3\0\4\u021d\1\0\1\u021d\1\u022e\32\u021d"+
    "\1\0\2\175\1\0\1\175\1\u0158\1\175\11\0\1\175"+
    "\2\0\1\u022f\6\0\1\u022f\1\175\1\0\1\373\1\0"+
    "\1\175\1\0\6\u022f\16\175\3\0\1\175\14\0\1\u01f8"+
    "\110\0\1\u01f8\34\0\1\u0221\2\0\1\u0221\5\0\2\u0221"+
    "\3\0\1\u0221\1\0\2\u0221\1\0\2\u0221\3\0\4\u0221"+
    "\1\u0230\1\u0221\1\0\32\u0221\14\0\1\u01fe\55\0\2\243"+
    "\1\0\1\243\1\u0163\1\243\11\0\1\243\2\0\1\u0231"+
    "\6\0\1\u0231\1\243\1\0\1\244\1\0\1\243\1\0"+
    "\6\u0231\16\243\3\0\1\243\1\0\2\254\1\0\1\254"+
    "\1\u0166\1\254\11\0\1\254\2\0\1\u0232\6\0\1\u0232"+
    "\1\254\1\0\1\255\1\0\1\254\1\0\6\u0232\16\254"+
    "\3\0\1\254\1\0\1\u0233\1\u0234\1\0\1\u0233\1\0"+
    "\1\u0233\11\0\1\130\2\0\1\57\1\u0235\5\0\2\57"+
    "\3\0\1\57\1\0\24\57\5\0\2\u0119\1\0\1\u0119"+
    "\1\0\1\u0119\5\0\1\u011a\55\0\1\u0236\1\u0237\1\0"+
    "\1\u0236\1\0\1\u0236\11\0\1\130\2\0\1\57\1\261"+
    "\5\0\2\57\3\0\1\57\1\0\24\57\5\0\1\u0238"+
    "\1\u0239\1\0\1\u0238\1\0\1\u0238\11\0\1\130\2\0"+
    "\1\57\1\u023a\5\0\2\57\3\0\1\57\1\0\24\57"+
    "\65\0\1\u023b\24\0\1\u0213\70\0\1\u0216\70\0\1\u0219"+
    "\70\0\1\u021c\54\0\2\175\1\0\1\175\1\u0158\1\175"+
    "\11\0\1\175\2\0\1\175\6\0\2\175\1\0\1\373"+
    "\1\0\1\175\1\0\24\175\3\0\1\175\14\0\1\u0220"+
    "\55\0\2\243\1\0\1\243\1\u0163\1\243\11\0\1\243"+
    "\2\0\1\243\6\0\2\243\1\0\1\244\1\0\1\243"+
    "\1\0\24\243\3\0\1\243\1\0\2\254\1\0\1\254"+
    "\1\u0166\1\254\11\0\1\254\2\0\1\254\6\0\2\254"+
    "\1\0\1\255\1\0\1\254\1\0\24\254\3\0\1\254"+
    "\1\0\1\u0233\1\u0234\1\0\1\u0233\1\0\1\u0233\1\u010e"+
    "\14\0\1\u023c\1\0\1\u010f\43\0\2\u0234\1\0\1\u0234"+
    "\1\0\1\u0234\63\0\1\u0236\1\u0237\1\0\1\u0236\1\0"+
    "\1\u0236\1\u010e\16\0\1\u010f\43\0\2\u0237\1\0\1\u0237"+
    "\1\0\1\u0237\63\0\1\u0238\1\u0239\1\0\1\u0238\1\0"+
    "\1\u0238\1\u010e\16\0\1\u010f\43\0\2\u0239\1\0\1\u0239"+
    "\1\0\1\u0239\114\0\2\u023d\3\0\1\u023d\1\0\24\u023d"+
    "\64\0\1\u023e\30\0\1\u023d\2\0\1\u023d\6\0\2\u023d"+
    "\3\0\1\u023d\1\0\24\u023d\51\0\1\u023f\102\0\1\u0240"+
    "\11\0\23\u0241\1\0\6\u0241\2\0\5\u0241\24\0\4\u0241";

  private static int [] zzUnpacktrans() {
    int [] result = new int[28215];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\1\1\0\1\1\20\0\1\11\1\1\1\11"+
    "\4\1\2\11\1\1\1\11\5\1\1\11\23\1\1\11"+
    "\4\1\3\11\3\1\1\11\14\1\1\11\4\1\3\11"+
    "\3\1\1\11\2\1\2\11\7\1\6\11\11\1\3\11"+
    "\2\1\1\11\2\1\3\11\1\1\1\11\3\1\2\11"+
    "\2\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1\2\0\1\11\1\0\1\1\2\0"+
    "\1\11\3\0\1\1\1\0\1\1\1\0\2\1\2\0"+
    "\15\1\1\11\1\0\1\11\1\0\1\11\20\0\1\11"+
    "\14\0\2\11\1\0\1\11\4\0\1\11\1\1\3\0"+
    "\1\11\1\1\7\0\1\11\3\1\1\0\1\1\1\0"+
    "\1\11\10\0\2\11\1\1\1\0\3\1\1\0\1\11"+
    "\12\1\1\11\7\1\2\11\10\0\1\1\1\11\7\0"+
    "\1\11\22\0\1\1\15\0\4\1\10\0\3\1\1\11"+
    "\17\1\72\0\1\1\12\0\17\1\33\0\1\1\13\0"+
    "\1\1\6\0\1\1\10\0\4\1\1\0\6\1\23\0"+
    "\1\1\4\0\4\1\1\0\2\1\5\0\1\1\1\0"+
    "\11\1\2\0\1\11\1\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[577];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private BitSet zzFin = null;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

  private static class BlockInfo {
    int indent;
    IElementType tokenType;
    int parentState;
    State state;

    public BlockInfo(int indent, IElementType tokenType, int parentState, State state) {
      this.indent = indent;
      this.tokenType = tokenType;
      this.parentState = parentState;
      this.state = state;
    }

    public enum State {
      PREDICTED,
      CREATED,
      STARTED_NO_INDENT,
      STARTED
    }
  }

  private CharSequence tagName;
  protected int myTabSize;

  private final Stack<Integer> stateToGo = new Stack<>();
  private final Stack<String> parenthesisStack = new Stack<>();
  private final Stack<BlockInfo> blockStack = new Stack<>();
  private StringBuilder valueTail = new StringBuilder();

  private char attributeNameQuoteType = '"';

  private boolean isMixin = false;
  private IElementType myForcedWhitespaceType;
  private int whiteSpacesToEat;


  protected void resetInternal(int tabSize) {
    stateToGo.clear();
    parenthesisStack.clear();
    blockStack.clear();

    tagName = null;
    myTabSize = tabSize;
  }

  private void indentDone() {
    if (yystate() == YYINITIAL) {
      yybegin(INDENT_DONE);
    }
  }

  private int calcNextLineIndent() {
    return IndentUtil.calcIndent(zzBuffer, getTokenStart() + 1, myTabSize);
  }

  private int calcCurrentLineIndent(int offsetFromTokenStart) {
    int loc = getTokenStart() + offsetFromTokenStart;
    while (loc >= 0 && zzBuffer.charAt(loc) != '\n') {
      loc--;
    }
    return IndentUtil.calcIndent(zzBuffer, loc + 1, myTabSize);
  }

  private void pushBackUpTo(char c) {
    int loc = getTokenEnd();
    while (zzBuffer.charAt(loc - 1) != c) {
      loc--;
    }
    yypushback(getTokenEnd() - loc + 1);
  }

  private void pushBackWhile(String chars) {
    int i = 0;
    while (chars.indexOf(zzBuffer.charAt(getTokenEnd() - i - 1)) != -1) {
      i++;
    }
    yypushback(i);
    whiteSpacesToEat = i;
  }

  private IElementType startBlock(IElementType type, BlockInfo.State state) {
    return startBlock(type, state, calcCurrentLineIndent(0));
  }

  private IElementType startBlock(IElementType type, BlockInfo.State state, int blockIndent) {
    if (!blockStack.isEmpty() && blockStack.peek().state == BlockInfo.State.PREDICTED) {
      pushTopBlockState();
      return blockStack.peek().tokenType;
    }
    blockStack.push(new BlockInfo(blockIndent, type, yystate(), state));

    if (state == BlockInfo.State.STARTED || state == BlockInfo.State.STARTED_NO_INDENT) {
      yybegin(BLOCK);
    }
    return type;
  }

  private void pushTopBlockState() {
    BlockInfo topBlock = blockStack.peek();
    if (topBlock == null) return;
    if (topBlock.state == BlockInfo.State.STARTED_NO_INDENT ||
        topBlock.state == BlockInfo.State.CREATED) {
      topBlock.state = BlockInfo.State.STARTED;
    }
    else if (topBlock.state == BlockInfo.State.PREDICTED) {
      topBlock.state = BlockInfo.State.CREATED;
    }
  }

  private IElementType endBlockOrContinueOnNewline() {
    final int nextLineIndent = calcNextLineIndent();
    boolean deletedSomething = false;
    int stateToGo = 0;

    while (!blockStack.isEmpty()) {
      BlockInfo topBlock = blockStack.peek();

      if (topBlock.state == BlockInfo.State.STARTED && nextLineIndent >= topBlock.indent
        || topBlock.state == BlockInfo.State.STARTED_NO_INDENT && nextLineIndent > topBlock.indent) {
        if (deletedSomething)
          break;

        updateBlockIndent(topBlock, nextLineIndent);
        return topBlock.tokenType;
      }

      blockStack.pop();
      deletedSomething = true;

      stateToGo = getParentStateToGo(topBlock.parentState);
    }

    return optionalPrecedingWhitespace(JadeTokenTypes.EOL, stateToGo, JadeTokenTypes.INDENT);
  }

  private int getParentStateToGo(int state) {
    if (state != BLOCK) {
      return YYINITIAL;
    }
    return state;
  }

  private IElementType getCurrentBlockTokenType() {
    if (blockStack.isEmpty())
      return JadeTokenTypes.TEXT;
    else
      return blockStack.peek().tokenType;
  }

  private void updateBlockIndent(BlockInfo block, int indent) {
    if (block.state == BlockInfo.State.CREATED || block.state == BlockInfo.State.STARTED_NO_INDENT) {
      pushTopBlockState();
      block.indent = indent;
    }
  }

  private IElementType doRegularEol() {
    yybegin(YYINITIAL);
    tagName = null;
    return JadeTokenTypes.EOL;
  }

  private IElementType processEol() {
    tagName = null;
    if (!blockStack.isEmpty()) {
      BlockInfo topBlock = blockStack.peek();
      if (topBlock.state == BlockInfo.State.CREATED || topBlock.state == BlockInfo.State.STARTED_NO_INDENT) {
        int nextLineIndent = calcNextLineIndent();
        if (nextLineIndent > topBlock.indent) {
          updateBlockIndent(topBlock, nextLineIndent);
          yybegin(PRECEDING_INDENT);
          return JadeTokenTypes.EOL;
        }
        else {
          blockStack.pop();
        }
      }
    }

    return doRegularEol();
  }

  private IElementType optionalPrecedingWhitespace(IElementType tokenType, int state) {
    return optionalPrecedingWhitespace(tokenType, state, TokenType.WHITE_SPACE);
  }

  private IElementType optionalPrecedingWhitespace(IElementType tokenType, int state, IElementType forcedWhitespaceType) {
    myForcedWhitespaceType = forcedWhitespaceType;
    if (Character.isWhitespace(zzBuffer.charAt(getTokenEnd()-1))) {
      stateToGo.push(state);
      yybegin(PRECEDING_WHITESPACE);
      pushBackWhile(" \t\f");
      return tokenType;
    }
    else {
      yybegin(state);
      return tokenType;
    }
  }

  private boolean isScriptOrStyleTag() {
    String s;
    return tagName != null && ((s = tagName.toString()).equals("script") || s.equals("style"));
  }

  private IElementType processClosingBracket(String exitBracket, IElementType exitBracketType, IElementType defaultType) {
    String bracket = yytext().toString();
    String paired = "";
    if (bracket.equals(")")) paired = "(";
    if (bracket.equals("]")) paired = "[";
    if (bracket.equals("}")) paired = "{";
    // We need to treat conditional as brackets to ensure that
    // we continue lexing the attribute value correctly
    if (bracket.equals(":")) {
      paired = "?";
      if (parenthesisStack.isEmpty() || !parenthesisStack.peek().equals(paired)) {
        return defaultType;
      }
    }

    if (parenthesisStack.isEmpty()) {
      if (bracket.equals(exitBracket)) {
        return exitBracketType;
      }
      return JadeTokenTypes.BAD_CHARACTER;
    }
    if (!parenthesisStack.peek().equals(paired)) {
      return JadeTokenTypes.BAD_CHARACTER;
    }
    parenthesisStack.pop();

    return defaultType;
  }

  private void beginTag() {
    if (yystate() != TAG) {
      isMixin = false;
    }
    yybegin(TAG);
  }

  private void clearValueTail() {
    valueTail = new StringBuilder();
  }

  private boolean isEmptyTail() {
    return valueTail.length() == 0;
  }

  private void updateValueTail() {
    valueTail.append(yytext());
    if (valueTail.length() > 20) {
      valueTail = new StringBuilder(valueTail.substring(valueTail.length() - 10));
    }
  }

  private boolean canFinishValue() {
    if (!parenthesisStack.isEmpty()) {
      return false;
    }

    if (isEmptyTail()) {
      return false;
    }

    String tail = valueTail.toString();
    if (tail.endsWith("+")) return false;
    if (tail.endsWith("*")) return false;
    if (tail.endsWith("/")) return false;
    if (tail.endsWith("-")) return false;
    if (tail.endsWith("^")) return false;
    if (tail.endsWith("&")) return false;
    if (tail.endsWith("|")) return false;
    if (tail.endsWith("%")) return false;
    if (tail.endsWith("<")) return false;
    if (tail.endsWith(">")) return false;
    if (tail.endsWith("=")) return false;
    if (tail.endsWith("~")) return false;
    if (tail.endsWith("new")) return false;
    if (tail.endsWith("delete")) return false;
    if (tail.endsWith("return")) return false;
    if (tail.endsWith("?")) return false;
    if (tail.endsWith(":")) return false;
    return true;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JadeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return JadeTokenTypes.JS_EXPR;
            }
          // fall through
          case 98: break;
          case 2:
            { return JadeTokenTypes.JS_CODE_BLOCK_PATCHED;
            }
          // fall through
          case 99: break;
          case 3:
            { beginTag(); return JadeTokenTypes.BAD_CHARACTER;
            }
          // fall through
          case 100: break;
          case 4:
            { indentDone(); return JadeTokenTypes.INDENT;
            }
          // fall through
          case 101: break;
          case 5:
            { return processEol();
            }
          // fall through
          case 102: break;
          case 6:
            { indentDone(); return JadeTokenTypes.HASH;
            }
          // fall through
          case 103: break;
          case 7:
            { stateToGo.push(TAG);
    if (isMixin)
      yybegin(MIXIN_ATTRIBUTES);
    else
      yybegin(ATTRIBUTES);
    return JadeTokenTypes.LPAREN;
            }
          // fall through
          case 104: break;
          case 8:
            { indentDone(); return JadeTokenTypes.RPAREN;
            }
          // fall through
          case 105: break;
          case 9:
            { return JadeTokenTypes.PLUS;
            }
          // fall through
          case 106: break;
          case 10:
            { indentDone(); return JadeTokenTypes.COMMA;
            }
          // fall through
          case 107: break;
          case 11:
            { startBlock(JadeTokenTypes.JS_META_CODE, BlockInfo.State.STARTED);
    yybegin(JS_META_BLOCK);
    return JadeTokenTypes.JS_META_CODE;
            }
          // fall through
          case 108: break;
          case 12:
            { return JadeTokenTypes.DOT;
            }
          // fall through
          case 109: break;
          case 13:
            { indentDone(); return JadeTokenTypes.DIV;
            }
          // fall through
          case 110: break;
          case 14:
            { indentDone(); return JadeTokenTypes.NUMBER;
            }
          // fall through
          case 111: break;
          case 15:
            { yybegin(TEXT); return JadeTokenTypes.TEXT;
            }
          // fall through
          case 112: break;
          case 16:
            { return optionalPrecedingWhitespace(JadeTokenTypes.EQ, EXPR);
            }
          // fall through
          case 113: break;
          case 17:
            { beginTag();
    if (tagName == null) {
      tagName = yytext();
    }
    return JadeTokenTypes.TAG_NAME;
            }
          // fall through
          case 114: break;
          case 18:
            { return optionalPrecedingWhitespace(JadeTokenTypes.PIPE, TEXT);
            }
          // fall through
          case 115: break;
          case 19:
            { if (isScriptOrStyleTag()) {
      startBlock(tagName.toString().equals("script") ? JadeTokenTypes.JS_CODE_BLOCK : JadeTokenTypes.STYLE_BLOCK,
                       BlockInfo.State.STARTED, 1000);
      tagName = null;

      return TokenType.WHITE_SPACE;

    } else {
      yybegin(TEXT); return TokenType.WHITE_SPACE;
    }
            }
          // fall through
          case 116: break;
          case 20:
            { return getCurrentBlockTokenType();
            }
          // fall through
          case 117: break;
          case 21:
            { return JadeTokenTypes.TEXT;
            }
          // fall through
          case 118: break;
          case 22:
            { return JadeTokenTypes.ATTRIBUTE_NAME;
            }
          // fall through
          case 119: break;
          case 23:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 120: break;
          case 24:
            { return JadeTokenTypes.EOL;
            }
          // fall through
          case 121: break;
          case 25:
            { beginTag(); return JadeTokenTypes.LPAREN;
            }
          // fall through
          case 122: break;
          case 26:
            { yybegin(stateToGo.pop()); return JadeTokenTypes.RPAREN;
            }
          // fall through
          case 123: break;
          case 27:
            { parenthesisStack.clear(); stateToGo.push(yystate()); clearValueTail(); yybegin(ATTRIBUTE_VALUE); return JadeTokenTypes.EQ;
            }
          // fall through
          case 124: break;
          case 28:
            { stateToGo.push(yystate());
    clearValueTail();
    yybegin(ATTRIBUTE_VALUE);
    yypushback(yylength());
            }
          // fall through
          case 125: break;
          case 29:
            { boolean hasWhitespace = yylength() > 1;

    IElementType recoverType = endBlockOrContinueOnNewline();
    if (!hasWhitespace && yystate() == PRECEDING_WHITESPACE) {
      yybegin(stateToGo.pop());
    }
    return recoverType;
            }
          // fall through
          case 126: break;
          case 30:
            { return optionalPrecedingWhitespace(JadeTokenTypes.COLON, INDENT_DONE);
            }
          // fall through
          case 127: break;
          case 31:
            { updateValueTail(); return JadeTokenTypes.JS_EXPR;
            }
          // fall through
          case 128: break;
          case 32:
            { return isEmptyTail() ? TokenType.WHITE_SPACE : JadeTokenTypes.JS_EXPR;
            }
          // fall through
          case 129: break;
          case 33:
            { return isEmptyTail() ? JadeTokenTypes.EOL : JadeTokenTypes.JS_EXPR;
            }
          // fall through
          case 130: break;
          case 34:
            { updateValueTail(); parenthesisStack.push(yytext().toString()); return JadeTokenTypes.JS_EXPR;
            }
          // fall through
          case 131: break;
          case 35:
            { updateValueTail();
    IElementType result = processClosingBracket(")", JadeTokenTypes.RPAREN, JadeTokenTypes.JS_EXPR);
    if (result == JadeTokenTypes.RPAREN) {
      stateToGo.pop();
      yybegin(stateToGo.pop());
    }
    return result;
            }
          // fall through
          case 132: break;
          case 36:
            { if (parenthesisStack.isEmpty()) {
          yybegin(stateToGo.pop());
          return JadeTokenTypes.COMMA;
        }
        updateValueTail();
        return JadeTokenTypes.JS_EXPR;
            }
          // fall through
          case 133: break;
          case 37:
            { yybegin(stateToGo.pop());
         return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
            }
          // fall through
          case 134: break;
          case 38:
            { parenthesisStack.push(yytext().toString()); return JadeTokenTypes.JS_EXPR;
            }
          // fall through
          case 135: break;
          case 39:
            { IElementType result = processClosingBracket("}", JadeTokenTypes.TEXT, JadeTokenTypes.JS_EXPR);
    if (result == JadeTokenTypes.TEXT) {
      yybegin(stateToGo.pop());
    }
    return result;
            }
          // fall through
          case 136: break;
          case 40:
            { return JadeTokenTypes.JS_EACH_EXPR;
            }
          // fall through
          case 137: break;
          case 41:
            { yybegin(stateToGo.pop());
    yypushback(yylength() - whiteSpacesToEat);
    return myForcedWhitespaceType;
            }
          // fall through
          case 138: break;
          case 42:
            { indentDone(); return JadeTokenTypes.EQ;
            }
          // fall through
          case 139: break;
          case 43:
            { return JadeTokenTypes.IDENTIFIER;
            }
          // fall through
          case 140: break;
          case 44:
            { return JadeTokenTypes.FILE_PATH;
            }
          // fall through
          case 141: break;
          case 45:
            { BlockInfo topBlock = blockStack.peek();
    yybegin(BLOCK);
    return JadeTokenTypes.INDENT;
            }
          // fall through
          case 142: break;
          case 46:
            { beginTag(); return JadeTokenTypes.TAG_CLASS;
            }
          // fall through
          case 143: break;
          case 47:
            { yybegin(ATTRIBUTES); return JadeTokenTypes.BAD_CHARACTER;
            }
          // fall through
          case 144: break;
          case 48:
            { if (attributeNameQuoteType == '"') {
        yybegin(ATTRIBUTES);
        return JadeTokenTypes.DOUBLE_QUOTE;
      }
      else {
        return JadeTokenTypes.BAD_CHARACTER;
      }
            }
          // fall through
          case 145: break;
          case 49:
            { if (attributeNameQuoteType == '\'') {
        yybegin(ATTRIBUTES);
        return JadeTokenTypes.DOUBLE_QUOTE;
      }
      else {
        return JadeTokenTypes.BAD_CHARACTER;
      }
            }
          // fall through
          case 146: break;
          case 50:
            { stateToGo.push(yystate()); yybegin(ATTRIBUTES); return JadeTokenTypes.LPAREN;
            }
          // fall through
          case 147: break;
          case 51:
            { return JadeTokenTypes.FILTER_NAME;
            }
          // fall through
          case 148: break;
          case 52:
            { yybegin(FILE_PATH); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 149: break;
          case 53:
            { return JadeTokenTypes.COLON;
            }
          // fall through
          case 150: break;
          case 54:
            { yybegin(JS_MIXIN_PARAMS); parenthesisStack.clear(); return JadeTokenTypes.JS_MIXIN_PARAMS;
            }
          // fall through
          case 151: break;
          case 55:
            { return JadeTokenTypes.RPAREN;
            }
          // fall through
          case 152: break;
          case 56:
            { return JadeTokenTypes.JS_MIXIN_PARAMS;
            }
          // fall through
          case 153: break;
          case 57:
            { parenthesisStack.push(yytext().toString()); return JadeTokenTypes.JS_MIXIN_PARAMS;
            }
          // fall through
          case 154: break;
          case 58:
            { IElementType result = processClosingBracket(")", JadeTokenTypes.TEXT, JadeTokenTypes.JS_MIXIN_PARAMS);
    if (result == JadeTokenTypes.TEXT) {
      yybegin(MIXIN_DECL);
    }
    return JadeTokenTypes.JS_MIXIN_PARAMS;
            }
          // fall through
          case 155: break;
          case 59:
            { return optionalPrecedingWhitespace(JadeTokenTypes.NEQ, EXPR);
            }
          // fall through
          case 156: break;
          case 60:
            { indentDone(); return JadeTokenTypes.STRING_LITERAL;
            }
          // fall through
          case 157: break;
          case 61:
            { beginTag(); return JadeTokenTypes.TAG_ID;
            }
          // fall through
          case 158: break;
          case 62:
            { indentDone(); return JadeTokenTypes.CHAR_LITERAL;
            }
          // fall through
          case 159: break;
          case 63:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 26;
              int zzFPos = zzStartRead;
              if (zzFin == null || zzFin.size() <= zzBufferL.length()) {
                zzFin = new BitSet(zzBufferL.length()+1);
              }
              BitSet zzFinL = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL.set(zzFPos, ((zzAttrL[zzFState] & 1) == 1));
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL.set(zzFPos++, ((zzAttrL[zzFState] & 1) == 1));
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL.clear(zzFPos++);
              }

              zzFState = 27;
              zzFPos = zzMarkedPos;
              while (!zzFinL.get(zzFPos) || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { isMixin = true; return optionalPrecedingWhitespace(JadeTokenTypes.PLUS, TAG);
            }
          // fall through
          case 160: break;
          case 64:
            { yybegin(CLASS); yypushback(yylength()-1); return JadeTokenTypes.DOT;
            }
          // fall through
          case 161: break;
          case 65:
            { return startBlock(JadeTokenTypes.COMMENT, BlockInfo.State.STARTED_NO_INDENT);
            }
          // fall through
          case 162: break;
          case 66:
            { startBlock(JadeTokenTypes.FILTER_CODE, BlockInfo.State.CREATED);
    yypushback(yylength() - 1);
    yybegin(FILTER);
    return JadeTokenTypes.COLON;
            }
          // fall through
          case 163: break;
          case 67:
            { parenthesisStack.clear(); stateToGo.push(yystate()); clearValueTail(); yybegin(ATTRIBUTE_VALUE); return JadeTokenTypes.NEQ;
            }
          // fall through
          case 164: break;
          case 68:
            { yybegin(ATTRIBUTES);
    yypushback(yylength());
            }
          // fall through
          case 165: break;
          case 69:
            { yypushback(1);
    boolean hasWhitespace = yylength() > 1;

    IElementType recoverType = endBlockOrContinueOnNewline();
    if (!hasWhitespace && yystate() == PRECEDING_WHITESPACE) {
      yybegin(stateToGo.pop());
      yypushback(yylength());
    }
    else if (!blockStack.isEmpty() && calcNextLineIndent() == blockStack.peek().indent) {
      blockStack.pop();
      doRegularEol();
      yypushback(yylength());
    }
    return recoverType;
            }
          // fall through
          case 166: break;
          case 70:
            { yypushback(1);
    boolean hasWhitespace = yylength() > 1;

    IElementType recoverType = endBlockOrContinueOnNewline();
    if (!hasWhitespace && yystate() == PRECEDING_WHITESPACE) {
      yybegin(stateToGo.pop());
    }
    return recoverType;
            }
          // fall through
          case 167: break;
          case 71:
            { if (isScriptOrStyleTag()) {
      yypushback(1);
      startBlock(tagName.toString().equals("script") ? JadeTokenTypes.JS_CODE_BLOCK : JadeTokenTypes.STYLE_BLOCK,
                       BlockInfo.State.CREATED);

      return JadeTokenTypes.DOT;
    } else {
      yypushback(1); startBlock(JadeTokenTypes.TEXT, BlockInfo.State.CREATED); return JadeTokenTypes.DOT;
    }
            }
          // fall through
          case 168: break;
          case 72:
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 24;
              int zzFPos = zzStartRead;
              if (zzFin == null || zzFin.size() <= zzBufferL.length()) {
                zzFin = new BitSet(zzBufferL.length()+1);
              }
              BitSet zzFinL = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL.set(zzFPos, ((zzAttrL[zzFState] & 1) == 1));
                zzInput = Character.codePointAt(zzBufferL, zzFPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              }
              if (zzFState != -1) {
                zzFinL.set(zzFPos++, ((zzAttrL[zzFState] & 1) == 1));
              }
              while (zzFPos <= zzMarkedPos) {
                zzFinL.clear(zzFPos++);
              }

              zzFState = 25;
              zzFPos = zzMarkedPos;
              while (!zzFinL.get(zzFPos) || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMap(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { if (canFinishValue()) {
                                         yybegin(stateToGo.pop());
                                         return TokenType.WHITE_SPACE;
                                       }
                                       return isEmptyTail() ? TokenType.WHITE_SPACE : JadeTokenTypes.JS_EXPR;
            }
          // fall through
          case 169: break;
          case 73:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { if (canFinishValue()) {
                                           yybegin(stateToGo.pop());
                                           return JadeTokenTypes.EOL;
                                         }
                                         return isEmptyTail() ? JadeTokenTypes.EOL : JadeTokenTypes.JS_EXPR;
            }
          // fall through
          case 170: break;
          case 74:
            { yypushback(1); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 171: break;
          case 75:
            { indentDone(); return JadeTokenTypes.JS_MIXIN_PARAMS;
            }
          // fall through
          case 172: break;
          case 76:
            { beginTag(); return JadeTokenTypes.DOCTYPE_KEYWORD;
            }
          // fall through
          case 173: break;
          case 77:
            { beginTag();
    if (tagName == null) {
      tagName = yytext();
    }

    yypushback(yylength()-2);
    stateToGo.push(yystate());
    yybegin(INTERPOLATION);
    return JadeTokenTypes.TEXT;
            }
          // fall through
          case 174: break;
          case 78:
            { return startBlock(JadeTokenTypes.UNBUF_COMMENT, BlockInfo.State.STARTED_NO_INDENT);
            }
          // fall through
          case 175: break;
          case 79:
            { if (tagName != null && StringUtil.contains(tagName, 0, tagName.length(), ':')) {
      beginTag();
      yypushback(2);
      pushBackWhile(" \t\f");
      return JadeTokenTypes.TAG_NAME;
    }
    else {
      yybegin(CODE);
      return JadeTokenTypes.JS_CODE_BLOCK_PATCHED;
    }
            }
          // fall through
          case 176: break;
          case 80:
            { return optionalPrecedingWhitespace(JadeTokenTypes.COND_KEYWORD, EXPR);
            }
          // fall through
          case 177: break;
          case 81:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { return optionalPrecedingWhitespace(JadeTokenTypes.COND_KEYWORD, EXPR);
            }
          // fall through
          case 178: break;
          case 82:
            { if (yystate() == TEXT || getCurrentBlockTokenType() == JadeTokenTypes.TEXT) {
      yypushback(yylength()-2);
      stateToGo.push(yystate());
      yybegin(INTERPOLATION);
      return JadeTokenTypes.TEXT;
    }
    else {
      return getCurrentBlockTokenType();
    }
            }
          // fall through
          case 179: break;
          case 83:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { attributeNameQuoteType = '"'; yybegin(ATTRIBUTE_NAME_WITH_QUOTES); return JadeTokenTypes.DOUBLE_QUOTE;
            }
          // fall through
          case 180: break;
          case 84:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { attributeNameQuoteType = '\''; yybegin(ATTRIBUTE_NAME_WITH_QUOTES); return JadeTokenTypes.DOUBLE_QUOTE;
            }
          // fall through
          case 181: break;
          case 85:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { endBlockOrContinueOnNewline();
    startBlock(JadeTokenTypes.FILTER_CODE, BlockInfo.State.PREDICTED);
    return doRegularEol();
            }
          // fall through
          case 182: break;
          case 86:
            { return optionalPrecedingWhitespace(JadeTokenTypes.JS_EACH_EXPR, EACH_EXPR, JadeTokenTypes.JS_EACH_EXPR);
            }
          // fall through
          case 183: break;
          case 87:
            { return optionalPrecedingWhitespace(JadeTokenTypes.CASE, EXPR);
            }
          // fall through
          case 184: break;
          case 88:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { return JadeTokenTypes.ELSE_KEYWORD;
            }
          // fall through
          case 185: break;
          case 89:
            { return optionalPrecedingWhitespace(JadeTokenTypes.WHEN, WHEN_EXPR);
            }
          // fall through
          case 186: break;
          case 90:
            { return optionalPrecedingWhitespace(JadeTokenTypes.MIXIN_KEYWORD, MIXIN_DECL);
            }
          // fall through
          case 187: break;
          case 91:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 5);
            { return JadeTokenTypes.YIELD_KEYWORD;
            }
          // fall through
          case 188: break;
          case 92:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 7);
            { return JadeTokenTypes.DEFAULT_KEYWORD;
            }
          // fall through
          case 189: break;
          case 93:
            { yypushback(yylength() - "default".length());
    yybegin(WHEN_EXPR);
    return JadeTokenTypes.DEFAULT_KEYWORD;
            }
          // fall through
          case 190: break;
          case 94:
            { return optionalPrecedingWhitespace(JadeTokenTypes.EXTENDS_KEYWORD, FILE_PATH);
            }
          // fall through
          case 191: break;
          case 95:
            { return optionalPrecedingWhitespace(JadeTokenTypes.INCLUDE_KEYWORD, FILE_PATH);
            }
          // fall through
          case 192: break;
          case 96:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 7);
            { yybegin(INCLUDE_WITH_FILTER); return JadeTokenTypes.INCLUDE_KEYWORD;
            }
          // fall through
          case 193: break;
          case 97:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 11);
            { isMixin = true; return JadeTokenTypes.ATTRIBUTES_KEYWORD;
            }
          // fall through
          case 194: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
