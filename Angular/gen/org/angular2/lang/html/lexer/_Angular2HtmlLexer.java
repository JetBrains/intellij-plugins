// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Angular2Html.flex

package org.angular2.lang.html.lexer;

import com.intellij.lang.javascript.JSTokenTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.util.Pair;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.xml.XmlTokenType;
import org.angular2.codeInsight.blocks.Angular2HtmlBlockUtils;
import org.angular2.lang.expr.parser.Angular2EmbeddedExprTokenType;
import org.angular2.lang.html.Angular2TemplateSyntax;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;

public class _Angular2HtmlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DOC_TYPE = 2;
  public static final int COMMENT = 4;
  public static final int START_TAG_NAME = 6;
  public static final int END_TAG_NAME = 8;
  public static final int BEFORE_TAG_ATTRIBUTES = 10;
  public static final int TAG_ATTRIBUTES = 12;
  public static final int ATTRIBUTE_VALUE_START = 14;
  public static final int ATTRIBUTE_VALUE_DQ = 16;
  public static final int ATTRIBUTE_VALUE_SQ = 18;
  public static final int PROCESSING_INSTRUCTION = 20;
  public static final int TAG_CHARACTERS = 22;
  public static final int C_COMMENT_START = 24;
  public static final int C_COMMENT_END = 26;
  public static final int EXPANSION_FORM_CONTENT = 28;
  public static final int EXPANSION_FORM_CASE_END = 30;
  public static final int INTERPOLATION = 32;
  public static final int UNTERMINATED_INTERPOLATION = 34;
  public static final int INTERPOLATION_END = 36;
  public static final int INTERPOLATION_SQ = 38;
  public static final int INTERPOLATION_DQ = 40;
  public static final int UNTERMINATED_INTERPOLATION_SQ = 42;
  public static final int UNTERMINATED_INTERPOLATION_DQ = 44;
  public static final int INTERPOLATION_END_SQ = 46;
  public static final int INTERPOLATION_END_DQ = 48;
  public static final int BLOCK_NAME = 50;
  public static final int BLOCK_PARAMETERS_START = 52;
  public static final int BLOCK_PARAMETER = 54;
  public static final int BLOCK_PARAMETER_END = 56;
  public static final int BLOCK_PARAMETERS_END = 58;
  public static final int BLOCK_START = 60;
  public static final int LET_WHITESPACE = 62;
  public static final int LET_NAME = 64;
  public static final int LET_EQ = 66;
  public static final int LET_VALUE = 68;
  public static final int LET_VALUE_END = 70;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20,  9,  9,  8,  8, 21, 21,
    21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28,
    29, 29, 30, 30, 31, 31, 32, 32
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\3\1\1\1\4"+
    "\1\5\1\6\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\2\0\1\14\1\15\1\16\1\17\12\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\30\1\35\1\36\1\37\2\35\1\40"+
    "\1\41\1\35\1\42\1\43\3\35\1\44\1\45\2\35"+
    "\1\46\1\47\1\35\1\50\1\51\1\52\1\0\1\53"+
    "\1\54\1\55\1\56\1\32\1\33\1\34\1\30\1\57"+
    "\1\36\1\37\2\35\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\35\1\66\1\67\1\70\2\35\1\46\1\47"+
    "\1\35\1\71\1\72\1\73\7\0\1\74\32\0\1\3"+
    "\11\0\1\75\12\0\1\75\4\0\1\75\5\0\27\75"+
    "\1\0\37\75\1\0\u01ca\75\4\0\14\75\16\0\5\75"+
    "\7\0\1\75\1\0\1\75\201\0\5\75\1\0\2\75"+
    "\2\0\4\75\1\0\1\75\6\0\1\75\1\0\3\75"+
    "\1\0\1\75\1\0\24\75\1\0\123\75\1\0\213\75"+
    "\10\0\246\75\1\0\46\75\2\0\1\75\6\0\51\75"+
    "\107\0\33\75\4\0\4\75\55\0\53\75\43\0\2\75"+
    "\1\0\143\75\1\0\1\75\17\0\2\75\7\0\2\75"+
    "\12\0\3\75\2\0\1\75\20\0\1\75\1\0\36\75"+
    "\35\0\131\75\13\0\1\75\30\0\41\75\11\0\2\75"+
    "\4\0\1\75\5\0\26\75\4\0\1\75\11\0\1\75"+
    "\3\0\1\75\27\0\31\75\7\0\13\75\65\0\25\75"+
    "\1\0\10\75\106\0\66\75\3\0\1\75\22\0\1\75"+
    "\7\0\12\75\17\0\20\75\4\0\10\75\2\0\2\75"+
    "\2\0\26\75\1\0\7\75\1\0\1\75\3\0\4\75"+
    "\3\0\1\75\20\0\1\75\15\0\2\75\1\0\3\75"+
    "\16\0\2\75\12\0\1\75\10\0\6\75\4\0\2\75"+
    "\2\0\26\75\1\0\7\75\1\0\2\75\1\0\2\75"+
    "\1\0\2\75\37\0\4\75\1\0\1\75\23\0\3\75"+
    "\20\0\11\75\1\0\3\75\1\0\26\75\1\0\7\75"+
    "\1\0\2\75\1\0\5\75\3\0\1\75\22\0\1\75"+
    "\17\0\2\75\27\0\1\75\13\0\10\75\2\0\2\75"+
    "\2\0\26\75\1\0\7\75\1\0\2\75\1\0\5\75"+
    "\3\0\1\75\36\0\2\75\1\0\3\75\17\0\1\75"+
    "\21\0\1\75\1\0\6\75\3\0\3\75\1\0\4\75"+
    "\3\0\2\75\1\0\1\75\1\0\2\75\3\0\2\75"+
    "\3\0\3\75\3\0\14\75\26\0\1\75\64\0\10\75"+
    "\1\0\3\75\1\0\27\75\1\0\20\75\3\0\1\75"+
    "\32\0\3\75\5\0\2\75\36\0\1\75\4\0\10\75"+
    "\1\0\3\75\1\0\27\75\1\0\12\75\1\0\5\75"+
    "\3\0\1\75\40\0\1\75\1\0\2\75\17\0\2\75"+
    "\22\0\10\75\1\0\3\75\1\0\51\75\2\0\1\75"+
    "\20\0\1\75\5\0\3\75\10\0\3\75\30\0\6\75"+
    "\5\0\22\75\3\0\30\75\1\0\11\75\1\0\1\75"+
    "\2\0\7\75\72\0\60\75\1\0\2\75\14\0\7\75"+
    "\72\0\2\75\1\0\1\75\1\0\5\75\1\0\30\75"+
    "\1\0\1\75\1\0\12\75\1\0\2\75\11\0\1\75"+
    "\2\0\5\75\1\0\1\75\25\0\4\75\40\0\1\75"+
    "\77\0\10\75\1\0\44\75\33\0\5\75\163\0\53\75"+
    "\24\0\1\75\20\0\6\75\4\0\4\75\3\0\1\75"+
    "\3\0\2\75\7\0\3\75\4\0\15\75\14\0\1\75"+
    "\21\0\46\75\1\0\1\75\5\0\1\75\2\0\53\75"+
    "\1\0\115\75\1\0\4\75\2\0\7\75\1\0\1\75"+
    "\1\0\4\75\2\0\51\75\1\0\4\75\2\0\41\75"+
    "\1\0\4\75\2\0\7\75\1\0\1\75\1\0\4\75"+
    "\2\0\17\75\1\0\71\75\1\0\4\75\2\0\103\75"+
    "\45\0\20\75\20\0\126\75\2\0\6\75\3\0\u016c\75"+
    "\2\0\21\75\1\0\32\75\5\0\113\75\6\0\10\75"+
    "\7\0\15\75\1\0\4\75\16\0\22\75\16\0\22\75"+
    "\16\0\15\75\1\0\3\75\17\0\64\75\43\0\1\75"+
    "\4\0\1\75\103\0\131\75\7\0\5\75\2\0\42\75"+
    "\1\0\1\75\5\0\106\75\12\0\37\75\61\0\36\75"+
    "\2\0\5\75\13\0\54\75\4\0\32\75\66\0\27\75"+
    "\11\0\65\75\122\0\1\75\135\0\57\75\21\0\7\75"+
    "\67\0\36\75\15\0\2\75\12\0\54\75\32\0\44\75"+
    "\51\0\3\75\12\0\44\75\2\0\11\75\7\0\53\75"+
    "\2\0\3\75\51\0\4\75\1\0\6\75\1\0\2\75"+
    "\3\0\1\75\5\0\300\75\100\0\26\75\2\0\6\75"+
    "\2\0\46\75\2\0\6\75\2\0\10\75\1\0\1\75"+
    "\1\0\1\75\1\0\1\75\1\0\37\75\2\0\65\75"+
    "\1\0\7\75\1\0\1\75\3\0\3\75\1\0\7\75"+
    "\3\0\4\75\2\0\6\75\4\0\15\75\5\0\3\75"+
    "\1\0\7\75\53\0\2\74\107\0\1\75\15\0\1\75"+
    "\20\0\15\75\145\0\1\75\4\0\1\75\2\0\12\75"+
    "\1\0\1\75\3\0\5\75\6\0\1\75\1\0\1\75"+
    "\1\0\1\75\1\0\4\75\1\0\13\75\2\0\4\75"+
    "\5\0\5\75\4\0\1\75\64\0\2\75\u017b\0\57\75"+
    "\1\0\57\75\1\0\205\75\6\0\4\75\3\0\2\75"+
    "\14\0\46\75\1\0\1\75\5\0\1\75\2\0\70\75"+
    "\7\0\1\75\20\0\27\75\11\0\7\75\1\0\7\75"+
    "\1\0\7\75\1\0\7\75\1\0\7\75\1\0\7\75"+
    "\1\0\7\75\1\0\7\75\120\0\1\75\325\0\2\75"+
    "\52\0\5\75\5\0\2\75\4\0\126\75\6\0\3\75"+
    "\1\0\132\75\1\0\4\75\5\0\53\75\1\0\136\75"+
    "\21\0\33\75\65\0\306\75\112\0\360\75\20\0\215\75"+
    "\103\0\56\75\2\0\15\75\3\0\20\75\12\0\2\75"+
    "\24\0\57\75\20\0\37\75\2\0\106\75\61\0\11\75"+
    "\2\0\147\75\2\0\65\75\2\0\5\75\60\0\13\75"+
    "\1\0\3\75\1\0\4\75\1\0\27\75\35\0\64\75"+
    "\16\0\62\75\76\0\6\75\3\0\1\75\1\0\2\75"+
    "\13\0\34\75\12\0\27\75\31\0\35\75\7\0\57\75"+
    "\34\0\1\75\20\0\5\75\1\0\12\75\12\0\5\75"+
    "\1\0\51\75\27\0\3\75\1\0\10\75\24\0\27\75"+
    "\3\0\1\75\3\0\62\75\1\0\1\75\3\0\2\75"+
    "\2\0\5\75\2\0\1\75\1\0\1\75\30\0\3\75"+
    "\2\0\13\75\7\0\3\75\14\0\6\75\2\0\6\75"+
    "\2\0\6\75\11\0\7\75\1\0\7\75\1\0\53\75"+
    "\1\0\14\75\10\0\163\75\35\0\244\75\14\0\27\75"+
    "\4\0\61\75\4\0\156\75\2\0\152\75\46\0\7\75"+
    "\14\0\5\75\5\0\1\75\1\0\12\75\1\0\15\75"+
    "\1\0\5\75\1\0\1\75\1\0\2\75\1\0\2\75"+
    "\1\0\154\75\41\0\153\75\22\0\100\75\2\0\66\75"+
    "\50\0\14\75\164\0\5\75\1\0\207\75\44\0\32\75"+
    "\6\0\32\75\13\0\131\75\3\0\6\75\2\0\6\75"+
    "\2\0\6\75\2\0\3\75\43\0\14\75\1\0\32\75"+
    "\1\0\23\75\1\0\2\75\1\0\17\75\2\0\16\75"+
    "\42\0\173\75\205\0\35\75\3\0\61\75\57\0\40\75"+
    "\15\0\24\75\1\0\10\75\6\0\46\75\12\0\36\75"+
    "\2\0\44\75\4\0\10\75\60\0\236\75\22\0\44\75"+
    "\4\0\44\75\4\0\50\75\10\0\64\75\234\0\67\75"+
    "\11\0\26\75\12\0\10\75\230\0\6\75\2\0\1\75"+
    "\1\0\54\75\1\0\2\75\3\0\1\75\2\0\27\75"+
    "\12\0\27\75\11\0\37\75\101\0\23\75\1\0\2\75"+
    "\12\0\26\75\12\0\32\75\106\0\70\75\6\0\2\75"+
    "\100\0\1\75\17\0\4\75\1\0\3\75\1\0\35\75"+
    "\52\0\35\75\3\0\35\75\43\0\10\75\1\0\34\75"+
    "\33\0\66\75\12\0\26\75\12\0\23\75\15\0\22\75"+
    "\156\0\111\75\67\0\63\75\15\0\63\75\15\0\44\75"+
    "\334\0\35\75\12\0\1\75\10\0\26\75\232\0\27\75"+
    "\14\0\65\75\113\0\55\75\40\0\31\75\32\0\44\75"+
    "\35\0\1\75\13\0\43\75\3\0\1\75\14\0\60\75"+
    "\16\0\4\75\25\0\1\75\1\0\1\75\43\0\22\75"+
    "\1\0\31\75\124\0\7\75\1\0\1\75\1\0\4\75"+
    "\1\0\17\75\1\0\12\75\7\0\57\75\46\0\10\75"+
    "\2\0\2\75\2\0\26\75\1\0\7\75\1\0\2\75"+
    "\1\0\5\75\3\0\1\75\22\0\1\75\14\0\5\75"+
    "\236\0\65\75\22\0\4\75\24\0\1\75\40\0\60\75"+
    "\24\0\2\75\1\0\1\75\270\0\57\75\51\0\4\75"+
    "\44\0\60\75\24\0\1\75\73\0\53\75\15\0\1\75"+
    "\107\0\33\75\345\0\54\75\164\0\100\75\37\0\1\75"+
    "\240\0\10\75\2\0\47\75\20\0\1\75\1\0\1\75"+
    "\34\0\1\75\12\0\50\75\7\0\1\75\25\0\1\75"+
    "\13\0\56\75\23\0\1\75\42\0\71\75\7\0\11\75"+
    "\1\0\45\75\21\0\1\75\61\0\36\75\160\0\7\75"+
    "\1\0\2\75\1\0\46\75\25\0\1\75\31\0\6\75"+
    "\1\0\2\75\1\0\40\75\16\0\1\75\u0147\0\23\75"+
    "\15\0\232\75\346\0\304\75\274\0\57\75\321\0\107\75"+
    "\271\0\71\75\7\0\37\75\161\0\36\75\22\0\60\75"+
    "\20\0\4\75\37\0\25\75\5\0\23\75\260\0\100\75"+
    "\200\0\113\75\5\0\1\75\102\0\15\75\100\0\2\75"+
    "\1\0\1\75\34\0\370\75\10\0\363\75\15\0\37\75"+
    "\61\0\3\75\21\0\4\75\10\0\u018c\75\4\0\153\75"+
    "\5\0\15\75\3\0\11\75\7\0\12\75\146\0\125\75"+
    "\1\0\107\75\1\0\2\75\2\0\1\75\2\0\2\75"+
    "\2\0\4\75\1\0\14\75\1\0\1\75\1\0\7\75"+
    "\1\0\101\75\1\0\4\75\2\0\10\75\1\0\7\75"+
    "\1\0\34\75\1\0\4\75\1\0\5\75\1\0\1\75"+
    "\3\0\7\75\1\0\u0154\75\2\0\31\75\1\0\31\75"+
    "\1\0\37\75\1\0\31\75\1\0\37\75\1\0\31\75"+
    "\1\0\37\75\1\0\31\75\1\0\37\75\1\0\31\75"+
    "\1\0\10\75\64\0\55\75\12\0\7\75\20\0\1\75"+
    "\u0171\0\54\75\24\0\305\75\73\0\104\75\7\0\1\75"+
    "\264\0\4\75\1\0\33\75\1\0\2\75\1\0\1\75"+
    "\2\0\1\75\1\0\12\75\1\0\4\75\1\0\1\75"+
    "\1\0\1\75\6\0\1\75\4\0\1\75\1\0\1\75"+
    "\1\0\1\75\1\0\3\75\1\0\2\75\1\0\1\75"+
    "\2\0\1\75\1\0\1\75\1\0\1\75\1\0\1\75"+
    "\1\0\1\75\1\0\2\75\1\0\1\75\2\0\4\75"+
    "\1\0\7\75\1\0\4\75\1\0\4\75\1\0\1\75"+
    "\1\0\12\75\1\0\21\75\5\0\3\75\1\0\5\75"+
    "\1\0\21\75\104\0\327\75\51\0\65\75\13\0\336\75"+
    "\2\0\u0182\75\16\0\u0131\75\37\0\36\75\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\24\0\1\2\1\0\1\3\1\4\3\5"+
    "\1\6\1\3\1\7\1\10\3\7\1\11\2\7\4\12"+
    "\1\13\1\14\2\15\1\16\1\17\1\15\1\20\1\15"+
    "\1\21\1\22\1\23\1\10\1\24\1\25\1\26\1\24"+
    "\1\10\1\27\1\30\1\27\2\31\1\1\1\32\1\7"+
    "\3\33\3\34\1\12\1\34\1\35\1\36\1\37\1\40"+
    "\2\41\1\42\1\43\4\42\1\5\2\44\2\45\1\46"+
    "\2\45\1\47\2\50\1\7\2\51\1\52\1\53\1\54"+
    "\4\43\1\55\1\56\1\57\1\60\2\43\1\61\1\62"+
    "\1\63\1\62\1\64\3\65\1\66\1\2\1\67\1\2"+
    "\1\70\1\71\7\0\1\72\1\73\1\74\1\75\1\0"+
    "\1\76\5\0\1\72\1\77\1\24\2\0\1\100\1\101"+
    "\1\102\1\0\1\103\3\43\1\0\6\2\2\0\1\104"+
    "\7\0\1\105\3\0\1\106\1\0\1\107\7\2\1\110"+
    "\2\0\1\111\1\0\1\22\1\0\1\112\1\7\2\2"+
    "\3\0\1\113\2\0\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592"+
    "\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782"+
    "\0\u07c0\0\u07fe\0\u083c\0\u07fe\0\u087a\0\u08b8\0\u08f6\0\u0934"+
    "\0\u07fe\0\u0972\0\u09b0\0\u087a\0\u09ee\0\u07fe\0\u0a2c\0\u0a6a"+
    "\0\u07fe\0\u087a\0\u0aa8\0\u0ae6\0\u07fe\0\u07fe\0\u07fe\0\u087a"+
    "\0\u0b24\0\u07fe\0\u0b62\0\u0ba0\0\u0bde\0\u07fe\0\u0c1c\0\u07fe"+
    "\0\u0c5a\0\u0c98\0\u07fe\0\u07fe\0\u0cd6\0\u0d14\0\u07fe\0\u07fe"+
    "\0\u087a\0\u07fe\0\u087a\0\u0d52\0\u07fe\0\u0d90\0\u07fe\0\u087a"+
    "\0\u0bde\0\u07fe\0\u087a\0\u0dce\0\u0e0c\0\u0e4a\0\u07fe\0\u07fe"+
    "\0\u07fe\0\u07fe\0\u07fe\0\u087a\0\u07fe\0\u0e88\0\u087a\0\u0ec6"+
    "\0\u08b8\0\u0f04\0\u0f42\0\u07fe\0\u087a\0\u07fe\0\u087a\0\u07fe"+
    "\0\u0ec6\0\u0f04\0\u07fe\0\u07fe\0\u087a\0\u0f80\0\u07fe\0\u087a"+
    "\0\u07fe\0\u07fe\0\u07fe\0\u07fe\0\u0fbe\0\u087a\0\u0ffc\0\u07fe"+
    "\0\u07fe\0\u07fe\0\u07fe\0\u103a\0\u1078\0\u07fe\0\u07fe\0\u10b6"+
    "\0\u087a\0\u10f4\0\u07fe\0\u1132\0\u087a\0\u07fe\0\u1170\0\u07fe"+
    "\0\u11ae\0\u07fe\0\u07fe\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4"+
    "\0\u1322\0\u1360\0\u139e\0\u13dc\0\u07fe\0\u07fe\0\u09b0\0\u07fe"+
    "\0\u09ee\0\u141a\0\u1458\0\u1496\0\u14d4\0\u07fe\0\u07fe\0\u1512"+
    "\0\u1550\0\u158e\0\u07fe\0\u07fe\0\u07fe\0\u0f80\0\u0f80\0\u15cc"+
    "\0\u160a\0\u1648\0\u1132\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e"+
    "\0\u17bc\0\u17fa\0\u1838\0\u07fe\0\u1876\0\u18b4\0\u18f2\0\u1930"+
    "\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u07fe"+
    "\0\u1b20\0\u07fe\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94"+
    "\0\u1cd2\0\u07fe\0\u1d10\0\u1d4e\0\u07fe\0\u1d8c\0\u07fe\0\u1dca"+
    "\0\u07fe\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u07fe"+
    "\0\u1f7c\0\u1fba\0\u07fe";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\42\2\43\3\42\2\44\1\45\12\42\1\46\3\42"+
    "\1\47\21\42\1\50\22\42\1\43\1\42\1\51\2\52"+
    "\2\51\1\53\2\51\1\54\1\55\13\51\1\56\10\51"+
    "\1\57\4\51\1\60\20\51\1\60\7\51\1\52\1\51"+
    "\10\61\1\62\4\61\1\63\5\61\1\64\1\61\1\65"+
    "\22\61\1\66\25\61\1\67\2\52\5\67\1\70\10\67"+
    "\1\71\1\67\1\72\4\67\20\71\3\67\1\71\1\67"+
    "\14\71\3\67\1\52\1\71\1\67\2\52\5\67\1\70"+
    "\10\67\1\71\1\67\1\73\4\67\20\71\3\67\1\71"+
    "\1\67\14\71\3\67\1\52\1\71\1\67\2\74\5\67"+
    "\1\70\6\67\1\75\5\67\1\76\46\67\1\74\1\67"+
    "\1\77\2\52\2\77\1\67\3\77\1\67\5\77\1\75"+
    "\3\77\1\67\1\100\1\76\46\77\1\101\1\77\1\102"+
    "\2\52\2\102\1\103\3\102\1\104\5\102\1\105\5\102"+
    "\1\76\46\102\1\106\1\102\5\107\1\110\2\107\1\111"+
    "\65\107\10\112\1\113\1\110\64\112\25\114\1\115\1\116"+
    "\47\114\1\117\2\52\5\117\1\120\6\117\1\121\3\117"+
    "\1\72\1\117\1\76\46\117\1\52\1\117\10\122\1\123"+
    "\4\122\1\124\12\122\20\125\2\122\1\126\2\122\14\125"+
    "\4\122\1\125\10\122\1\123\4\122\1\124\12\122\20\125"+
    "\2\122\1\127\2\122\14\125\4\122\1\125\1\44\2\52"+
    "\5\44\1\45\3\44\1\130\54\44\1\131\1\44\1\132"+
    "\1\52\1\44\10\133\1\134\65\133\1\135\2\136\5\135"+
    "\1\137\6\135\1\140\3\135\1\141\25\135\1\142\22\135"+
    "\1\136\1\135\1\44\2\43\5\44\1\45\12\44\1\46"+
    "\25\44\1\143\22\44\1\43\1\44\10\144\1\145\65\144"+
    "\10\146\1\147\1\150\5\146\1\151\31\146\1\152\31\146"+
    "\1\153\2\146\1\147\6\146\1\151\31\146\1\152\24\146"+
    "\10\154\1\155\65\154\10\51\1\54\16\51\1\156\46\51"+
    "\1\157\2\52\5\157\1\160\1\157\1\161\1\162\55\157"+
    "\1\163\2\157\1\52\1\157\5\164\1\165\2\164\1\166"+
    "\1\167\1\170\1\171\6\164\1\172\4\164\1\173\21\164"+
    "\1\174\2\164\1\175\21\164\10\51\1\54\11\51\1\176"+
    "\63\51\1\54\2\51\1\162\62\51\1\157\2\52\5\157"+
    "\1\160\2\157\1\162\55\157\1\163\2\157\1\52\1\157"+
    "\1\177\2\200\5\177\1\201\63\177\1\200\10\177\1\202"+
    "\1\201\17\177\20\202\3\177\1\202\1\177\14\202\5\177"+
    "\1\203\3\204\4\203\1\205\13\203\1\206\51\203\5\207"+
    "\1\210\2\207\1\211\1\210\10\207\1\212\53\207\10\177"+
    "\1\201\11\177\1\213\53\177\77\0\2\43\71\0\1\43"+
    "\7\0\1\214\12\0\1\215\6\0\20\215\3\0\1\215"+
    "\1\0\1\216\1\215\2\217\1\215\1\220\2\215\1\221"+
    "\3\215\4\0\1\215\4\0\1\222\12\0\1\223\1\0"+
    "\1\224\4\0\1\225\1\0\20\224\3\0\1\224\1\0"+
    "\14\224\4\0\1\224\20\0\1\226\7\0\20\226\3\0"+
    "\1\226\1\0\14\226\13\0\1\42\70\0\2\52\71\0"+
    "\1\52\1\0\5\227\1\230\70\227\11\231\1\230\64\231"+
    "\44\0\1\232\22\0\1\232\53\0\1\233\22\0\1\233"+
    "\22\0\1\234\64\0\1\235\106\0\2\71\1\0\2\71"+
    "\6\0\20\71\3\0\1\71\1\0\14\71\4\0\1\71"+
    "\17\0\1\236\57\0\2\74\71\0\1\74\26\0\1\237"+
    "\50\0\1\77\2\0\2\77\1\0\3\77\1\0\5\77"+
    "\1\0\3\77\3\0\51\77\2\52\2\77\1\0\3\77"+
    "\1\0\5\77\1\0\3\77\3\0\46\77\1\101\1\77"+
    "\1\102\2\0\14\102\1\240\5\102\1\0\51\102\2\0"+
    "\14\102\1\240\5\102\1\237\51\102\2\52\14\102\1\240"+
    "\5\102\1\0\46\102\1\106\1\102\25\114\1\0\1\241"+
    "\74\114\1\115\50\114\15\0\1\242\61\0\2\125\1\0"+
    "\1\125\3\0\1\125\1\0\2\125\2\0\1\125\1\0"+
    "\1\125\7\0\20\125\5\0\14\125\1\0\1\125\1\0"+
    "\2\125\25\0\1\243\51\0\2\136\71\0\1\136\20\0"+
    "\1\244\56\0\76\245\6\0\1\44\70\0\1\246\16\0"+
    "\1\247\7\0\20\247\3\0\1\247\1\0\14\247\5\0"+
    "\5\165\1\164\43\165\1\250\24\165\11\167\1\164\37\167"+
    "\1\251\24\167\76\164\51\175\1\252\2\175\1\164\21\175"+
    "\1\0\2\200\71\0\1\200\10\0\1\202\10\0\1\202"+
    "\7\0\20\202\3\0\1\202\1\0\14\202\6\0\3\253"+
    "\20\0\1\206\51\0\5\207\1\0\3\207\1\0\10\207"+
    "\1\0\60\207\1\0\1\254\2\207\1\0\7\207\1\255"+
    "\1\0\5\207\20\255\3\207\1\255\1\207\1\256\1\255"+
    "\2\257\1\255\1\260\2\255\1\261\3\255\4\207\1\255"+
    "\20\0\1\262\25\0\1\263\44\0\2\215\1\0\2\215"+
    "\1\264\5\0\20\215\3\0\1\215\1\0\14\215\4\0"+
    "\1\215\15\0\2\215\1\0\2\215\1\264\5\0\20\215"+
    "\3\0\1\215\1\0\4\215\1\265\2\215\1\266\4\215"+
    "\4\0\1\215\15\0\2\215\1\0\2\215\1\264\5\0"+
    "\20\215\3\0\1\215\1\0\12\215\1\267\1\215\4\0"+
    "\1\215\15\0\2\215\1\0\2\215\1\264\5\0\20\215"+
    "\3\0\1\215\1\0\1\215\1\270\12\215\4\0\1\215"+
    "\15\0\2\215\1\0\2\215\1\264\5\0\20\215\3\0"+
    "\1\215\1\0\13\215\1\271\4\0\1\215\15\0\1\272"+
    "\15\0\1\273\63\0\1\274\6\0\20\274\3\0\1\274"+
    "\1\0\14\274\4\0\1\274\15\0\2\224\1\0\2\224"+
    "\6\0\20\224\3\0\1\224\1\0\14\224\4\0\1\224"+
    "\41\0\1\275\17\0\1\275\45\0\1\276\24\0\1\276"+
    "\23\0\1\277\20\0\1\300\65\0\1\301\32\0\1\302"+
    "\25\0\17\102\1\240\5\102\1\0\50\102\25\114\1\0"+
    "\50\114\25\0\1\300\50\0\76\165\76\167\76\175\5\207"+
    "\1\0\3\207\1\0\6\207\1\303\1\207\1\0\23\207"+
    "\1\304\34\207\1\0\3\207\1\0\3\207\2\255\1\207"+
    "\2\255\1\264\5\207\20\255\3\207\1\255\1\207\14\255"+
    "\4\207\1\255\5\207\1\0\3\207\1\0\3\207\2\255"+
    "\1\207\2\255\1\264\5\207\20\255\3\207\1\255\1\207"+
    "\4\255\1\305\2\255\1\306\4\255\4\207\1\255\5\207"+
    "\1\0\3\207\1\0\3\207\2\255\1\207\2\255\1\264"+
    "\5\207\20\255\3\207\1\255\1\207\12\255\1\307\1\255"+
    "\4\207\1\255\5\207\1\0\3\207\1\0\3\207\2\255"+
    "\1\207\2\255\1\264\5\207\20\255\3\207\1\255\1\207"+
    "\1\255\1\310\12\255\4\207\1\255\5\207\1\0\3\207"+
    "\1\0\3\207\2\255\1\207\2\255\1\264\5\207\20\255"+
    "\3\207\1\255\1\207\13\255\1\311\4\207\1\255\20\0"+
    "\1\262\1\0\1\312\73\0\1\313\7\0\5\313\20\0"+
    "\2\313\34\0\2\215\1\0\2\215\1\264\5\0\20\215"+
    "\3\0\1\215\1\0\7\215\1\267\4\215\4\0\1\215"+
    "\15\0\2\215\1\0\2\215\1\264\5\0\20\215\3\0"+
    "\1\215\1\0\6\215\1\314\5\215\4\0\1\215\15\0"+
    "\2\215\1\0\2\215\1\312\5\0\20\215\3\0\1\215"+
    "\1\0\14\215\4\0\1\215\15\0\2\215\1\0\2\215"+
    "\1\264\5\0\20\215\3\0\1\215\1\0\11\215\1\265"+
    "\2\215\4\0\1\215\15\0\2\215\1\0\2\215\1\264"+
    "\5\0\20\215\3\0\1\215\1\0\6\215\1\217\5\215"+
    "\4\0\1\215\15\0\1\315\122\0\1\316\20\0\1\316"+
    "\27\0\2\274\1\0\2\274\6\0\20\274\3\0\1\274"+
    "\1\0\14\274\4\0\1\274\40\0\1\317\17\0\1\317"+
    "\55\0\1\320\17\0\1\320\42\0\1\321\65\0\1\322"+
    "\60\0\5\207\1\0\3\207\1\0\6\207\1\303\1\207"+
    "\1\312\60\207\1\0\3\207\1\0\6\207\1\323\1\207"+
    "\1\0\5\207\5\323\20\207\2\323\24\207\1\0\3\207"+
    "\1\0\3\207\2\255\1\207\2\255\1\264\5\207\20\255"+
    "\3\207\1\255\1\207\7\255\1\307\4\255\4\207\1\255"+
    "\5\207\1\0\3\207\1\0\3\207\2\255\1\207\2\255"+
    "\1\264\5\207\20\255\3\207\1\255\1\207\6\255\1\324"+
    "\5\255\4\207\1\255\5\207\1\0\3\207\1\0\3\207"+
    "\2\255\1\207\2\255\1\312\5\207\20\255\3\207\1\255"+
    "\1\207\14\255\4\207\1\255\5\207\1\0\3\207\1\0"+
    "\3\207\2\255\1\207\2\255\1\264\5\207\20\255\3\207"+
    "\1\255\1\207\11\255\1\305\2\255\4\207\1\255\5\207"+
    "\1\0\3\207\1\0\3\207\2\255\1\207\2\255\1\264"+
    "\5\207\20\255\3\207\1\255\1\207\6\255\1\257\5\255"+
    "\4\207\1\255\20\0\1\313\1\0\1\312\5\0\5\313"+
    "\20\0\2\313\34\0\2\215\1\0\2\215\1\264\5\0"+
    "\20\215\3\0\1\215\1\0\11\215\1\267\2\215\4\0"+
    "\1\215\32\0\1\325\102\0\1\326\53\0\1\277\7\0"+
    "\1\300\50\0\5\207\1\0\3\207\1\0\6\207\1\323"+
    "\1\207\1\312\5\207\5\323\20\207\2\323\24\207\1\0"+
    "\3\207\1\0\3\207\2\255\1\207\2\255\1\264\5\207"+
    "\20\255\3\207\1\255\1\207\11\255\1\307\2\255\4\207"+
    "\1\255\44\0\1\327\22\0\1\327\40\0\1\330\112\0"+
    "\1\331\71\0\1\332\20\0\1\332\45\0\1\333\41\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8184];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\1\24\0\1\1\1\0\1\11\1\1\1\11"+
    "\4\1\1\11\4\1\1\11\2\1\1\11\3\1\3\11"+
    "\2\1\1\11\3\1\1\11\1\1\1\11\2\1\2\11"+
    "\2\1\2\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\2\1\1\11\4\1\5\11\1\1\1\11\6\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\2\11\2\1\1\11"+
    "\1\1\4\11\3\1\4\11\2\1\2\11\3\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\2\11\7\0\2\1"+
    "\2\11\1\0\1\11\5\0\2\11\1\1\2\0\3\11"+
    "\1\0\4\1\1\0\6\1\2\0\1\11\7\0\1\1"+
    "\3\0\1\11\1\0\1\11\7\1\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\3\1\3\0\1\11\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private boolean tokenizeExpansionForms;
  private boolean enableBlockSyntax;
  private boolean enableLetSyntax;

  private String interpolationStart;
  private String interpolationEnd;

  public int expansionFormNestingLevel;
  public int interpolationStartPos;
  private boolean inInterpolationComment;
  private Character interpolationQuote;

  public String blockName;
  public int parameterIndex;
  public int parameterStart;
  public int blockParenLevel;

  public _Angular2HtmlLexer(@NotNull Angular2TemplateSyntax templateSyntax,
                            @Nullable Pair<String, String> interpolationConfig) {
    this(null);
    if (interpolationConfig == null) {
      interpolationStart = "{{";
      interpolationEnd = "}}";
    } else {
      interpolationStart = interpolationConfig.first;
      interpolationEnd = interpolationConfig.second;
    }
    this.tokenizeExpansionForms = templateSyntax.getTokenizeExpansionForms();
    this.enableBlockSyntax = templateSyntax.getEnableBlockSyntax();
    this.enableLetSyntax = templateSyntax.getEnableLetSyntax();
  }

  private boolean tryConsumeInterpolationBoundary(String boundary) {
    if (inBuffer(boundary, 0)) {
      zzMarkedPos += boundary.length() - 1;
      interpolationStartPos = -1;
      return true;
    }
    return false;
  }

  private boolean inBuffer(String text, int offset) {
    int curPos = zzMarkedPos - 1 + offset;
    if (text.length() > zzBuffer.length() - curPos) {
      return false;
    }
    for (int i = 0; i < text.length(); i++) {
      if (zzBuffer.charAt(i + curPos) != text.charAt(i)) {
        return false;
      }
    }
    return true;
  }

  private boolean tryRollbackInterpolation() {
    if (yystate() == INTERPOLATION) {
      rollbackInterpolation();
      yybegin(UNTERMINATED_INTERPOLATION);
      return true;
    }
    return false;
  }

  private void rollbackInterpolation() {
    if (interpolationStartPos > 0) {
      zzStartRead = interpolationStartPos - 1;
      zzMarkedPos = interpolationStartPos - 1;
      interpolationStartPos = -1;
    } else {
      yypushback(yylength());
    }
  }

  private void processInterpolationEntity() {
    CharSequence entity = yytext();
    char ch;
    if (StringUtil.equals(entity, "&quot;") || StringUtil.equals(entity, "&#34;") || StringUtil.equals(entity, "&#x22;")) {
      ch = '\"';
    } else if (StringUtil.equals(entity, "&apos;") || StringUtil.equals(entity, "&#39;") || StringUtil.equals(entity, "&#x27;")) {
      ch = '\'';
    } else {
      return;
    }
    processQuoteWithinInterpolation(ch);
  }

  private boolean processInterpolationChar(int nextStateIfEnd) {
    if (interpolationQuote == null && inBuffer(interpolationEnd, 0)) {
      yybegin(nextStateIfEnd);
      yypushback(1);
      return true;
    }
    if (interpolationStartPos <= 0) {
      interpolationStartPos = zzStartRead;
      inInterpolationComment = false;
    }
    if (inInterpolationComment) return false;

    processQuoteWithinInterpolation(zzBuffer.charAt(zzMarkedPos - 1));
    return false;
  }

  private void processQuoteWithinInterpolation(char ch) {
    if (interpolationQuote != null) {
      if (interpolationQuote == ch) {
        interpolationQuote = null;
      }
    } else {
      if (ch == '\"' || ch == '\'' || ch =='`') {
        interpolationQuote = ch;
      }
    }
  }

  private boolean isWithinInterpolation() {
    return zzLexicalState == INTERPOLATION
      || zzLexicalState == INTERPOLATION_DQ
      || zzLexicalState == INTERPOLATION_SQ;
  }

  public int getExpansionFormNestingLevel() {
    return expansionFormNestingLevel;
  }

  public void setExpansionFormNestingLevel(int level) {
    expansionFormNestingLevel = level;
  }

  private void consumeLetString() {
    char quote = zzBuffer.charAt(zzMarkedPos - 1);
    if (quote != '\'' && quote != '"') throw new IllegalStateException("Wrong quote style: " + quote);
    while (zzMarkedPos < zzEndRead) {
      char ch = zzBuffer.charAt(zzMarkedPos);
      if (ch == '\\' && zzMarkedPos + 1 < zzEndRead) {
        zzMarkedPos += 2;
      } else if (ch == quote){
        zzMarkedPos++;
        break;
      } else {
        zzMarkedPos++;
      }
    }
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _Angular2HtmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_PARAMETER: {
              yybegin(YYINITIAL);
    if (parameterStart < zzMarkedPos)
       return Angular2EmbeddedExprTokenType.createBlockParameter(blockName, parameterIndex);
            }  // fall though
            case 220: break;
            case LET_VALUE: {
              yybegin(YYINITIAL);
    return Angular2EmbeddedExprTokenType.createBlockParameter("let", 0);
            }  // fall though
            case 221: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return XmlTokenType.XML_PI_TARGET;
            }
          // fall through
          case 77: break;
          case 2:
            { // consume
            }
          // fall through
          case 78: break;
          case 3:
            { if (tryConsumeInterpolationBoundary(interpolationStart)) {
    if (inBuffer(interpolationEnd, 1)) {
      yybegin(INTERPOLATION_END);
    } else {
      yybegin(INTERPOLATION);
    }
    return Angular2HtmlTokenTypes.INTERPOLATION_START;
  }
  switch (zzBuffer.charAt(zzStartRead)) {
    case '{':
      if (tokenizeExpansionForms) {
        yybegin(EXPANSION_FORM_CONTENT);
        return Angular2HtmlTokenTypes.EXPANSION_FORM_START;
      }
    case '}':
      if (expansionFormNestingLevel > 0) {
        yybegin(EXPANSION_FORM_CASE_END);
        return Angular2HtmlTokenTypes.EXPANSION_FORM_CASE_END;
      } else if (enableBlockSyntax) {
        return Angular2HtmlTokenTypes.BLOCK_END;
      }
  }
  return XmlTokenType.XML_DATA_CHARACTERS;
            }
          // fall through
          case 79: break;
          case 4:
            { return XmlTokenType.XML_REAL_WHITE_SPACE;
            }
          // fall through
          case 80: break;
          case 5:
            { return XmlTokenType.XML_DATA_CHARACTERS;
            }
          // fall through
          case 81: break;
          case 6:
            { if (enableBlockSyntax) {
    blockName = "";
    return Angular2HtmlTokenTypes.BLOCK_NAME;
  } else {
    return XmlTokenType.XML_DATA_CHARACTERS;
  }
            }
          // fall through
          case 82: break;
          case 7:
            { return XmlTokenType.XML_BAD_CHARACTER;
            }
          // fall through
          case 83: break;
          case 8:
            { return XmlTokenType.XML_WHITE_SPACE;
            }
          // fall through
          case 84: break;
          case 9:
            { yybegin(YYINITIAL); return XmlTokenType.XML_DOCTYPE_END;
            }
          // fall through
          case 85: break;
          case 10:
            { return XmlTokenType.XML_COMMENT_CHARACTERS;
            }
          // fall through
          case 86: break;
          case 11:
            { // according to HTML spec (http://www.w3.org/html/wg/drafts/html/master/syntax.html#comments)
  // comments should start with <!-- and end with -->. The comment <!--> is not valid, but should terminate
  // comment token. Please note that it's not true for XML (http://www.w3.org/TR/REC-xml/#sec-comments)
  int loc = getTokenStart();
  char prev = zzBuffer.charAt(loc - 1);
  char prevPrev = zzBuffer.charAt(loc - 2);
  if (prev == '-' && prevPrev == '-') {
    yybegin(YYINITIAL); return XmlTokenType.XML_BAD_CHARACTER;
  }
  return XmlTokenType.XML_COMMENT_CHARACTERS;
            }
          // fall through
          case 87: break;
          case 12:
            { yybegin(C_COMMENT_START); return XmlTokenType.XML_CONDITIONAL_COMMENT_START;
            }
          // fall through
          case 88: break;
          case 13:
            { yybegin(YYINITIAL); yypushback(1); break;
            }
          // fall through
          case 89: break;
          case 14:
            { yybegin(BEFORE_TAG_ATTRIBUTES); return XmlTokenType.XML_NAME;
            }
          // fall through
          case 90: break;
          case 15:
            { return XmlTokenType.XML_START_TAG_START;
            }
          // fall through
          case 91: break;
          case 16:
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_WHITE_SPACE;
            }
          // fall through
          case 92: break;
          case 17:
            { yybegin(YYINITIAL); return XmlTokenType.XML_TAG_END;
            }
          // fall through
          case 93: break;
          case 18:
            { return XmlTokenType.XML_NAME;
            }
          // fall through
          case 94: break;
          case 19:
            { yybegin(ATTRIBUTE_VALUE_START); return XmlTokenType.XML_EQ;
            }
          // fall through
          case 95: break;
          case 20:
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }
          // fall through
          case 96: break;
          case 21:
            { yybegin(ATTRIBUTE_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
          // fall through
          case 97: break;
          case 22:
            { yybegin(ATTRIBUTE_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
          // fall through
          case 98: break;
          case 23:
            { if (yystate() == ATTRIBUTE_VALUE_DQ
      && tryConsumeInterpolationBoundary(interpolationStart)) {
    if (inBuffer(interpolationEnd, 1)) {
      yybegin(INTERPOLATION_END_DQ);
    } else {
      yybegin(INTERPOLATION_DQ);
    }
    return Angular2HtmlTokenTypes.INTERPOLATION_START;
  }
  return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }
          // fall through
          case 99: break;
          case 24:
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
            }
          // fall through
          case 100: break;
          case 25:
            { if (yystate() == ATTRIBUTE_VALUE_SQ
            && tryConsumeInterpolationBoundary(interpolationStart)) {
    if (inBuffer(interpolationEnd, 1)) {
      yybegin(INTERPOLATION_END_SQ);
    } else {
      yybegin(INTERPOLATION_SQ);
    }
    return Angular2HtmlTokenTypes.INTERPOLATION_START;
  }
  return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }
          // fall through
          case 101: break;
          case 26:
            { yybegin(YYINITIAL); return XmlTokenType.XML_PI_END;
            }
          // fall through
          case 102: break;
          case 27:
            { return XmlTokenType.XML_TAG_CHARACTERS;
            }
          // fall through
          case 103: break;
          case 28:
            { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_CHARACTERS;
            }
          // fall through
          case 104: break;
          case 29:
            { yybegin(COMMENT); return XmlTokenType.XML_CONDITIONAL_COMMENT_END;
            }
          // fall through
          case 105: break;
          case 30:
            { return XmlTokenType.XML_COMMA;
            }
          // fall through
          case 106: break;
          case 31:
            { expansionFormNestingLevel++;
  yybegin(YYINITIAL);
  return Angular2HtmlTokenTypes.EXPANSION_FORM_CASE_START;
            }
          // fall through
          case 107: break;
          case 32:
            { yybegin(YYINITIAL);
  return Angular2HtmlTokenTypes.EXPANSION_FORM_END;
            }
          // fall through
          case 108: break;
          case 33:
            { expansionFormNestingLevel--;
  yypushback(1);
  yybegin(EXPANSION_FORM_CONTENT);
            }
          // fall through
          case 109: break;
          case 34:
            { if (processInterpolationChar(INTERPOLATION_END)) {
    return Angular2EmbeddedExprTokenType.INTERPOLATION_EXPR;
  }
            }
          // fall through
          case 110: break;
          case 35:
            {
            }
          // fall through
          case 111: break;
          case 36:
            { yybegin(YYINITIAL);
  if (tryConsumeInterpolationBoundary(interpolationEnd)) {
    return Angular2HtmlTokenTypes.INTERPOLATION_END;
  }
  return XmlTokenType.XML_BAD_CHARACTER;
            }
          // fall through
          case 112: break;
          case 37:
            { if (processInterpolationChar(yystate() == INTERPOLATION_DQ ? INTERPOLATION_END_DQ : INTERPOLATION_END_SQ)) {
    return Angular2EmbeddedExprTokenType.INTERPOLATION_EXPR;
  }
            }
          // fall through
          case 113: break;
          case 38:
            { rollbackInterpolation();
  yybegin(UNTERMINATED_INTERPOLATION_SQ);
            }
          // fall through
          case 114: break;
          case 39:
            { rollbackInterpolation();
  yybegin(UNTERMINATED_INTERPOLATION_DQ);
            }
          // fall through
          case 115: break;
          case 40:
            { yybegin(yystate() == INTERPOLATION_END_DQ ? ATTRIBUTE_VALUE_DQ : ATTRIBUTE_VALUE_SQ);
  if (tryConsumeInterpolationBoundary(interpolationEnd)) {
    return Angular2HtmlTokenTypes.INTERPOLATION_END;
  }
  return XmlTokenType.XML_BAD_CHARACTER;
            }
          // fall through
          case 116: break;
          case 41:
            { yypushback(1);
    yybegin(YYINITIAL);
            }
          // fall through
          case 117: break;
          case 42:
            { yybegin(BLOCK_PARAMETER);
      blockParenLevel = 1;
      parameterIndex = 0;
      parameterStart = zzMarkedPos;
      return Angular2HtmlTokenTypes.BLOCK_PARAMETERS_START;
            }
          // fall through
          case 118: break;
          case 43:
            { yybegin(BLOCK_START);
      return Angular2HtmlTokenTypes.BLOCK_PARAMETERS_END;
            }
          // fall through
          case 119: break;
          case 44:
            { yybegin(YYINITIAL);
    return Angular2HtmlTokenTypes.BLOCK_START;
            }
          // fall through
          case 120: break;
          case 45:
            { blockParenLevel++;
            }
          // fall through
          case 121: break;
          case 46:
            { if (--blockParenLevel <= 0) {
       yypushback(1);
       yybegin(BLOCK_PARAMETERS_END);
       if (parameterStart < zzMarkedPos)
          return Angular2EmbeddedExprTokenType.createBlockParameter(blockName, parameterIndex);
     }
            }
          // fall through
          case 122: break;
          case 47:
            { yypushback(1);
      blockParenLevel = 1;
      yybegin(BLOCK_PARAMETER_END);
      if (parameterStart < zzMarkedPos)
         return Angular2EmbeddedExprTokenType.createBlockParameter(blockName, parameterIndex++);
      else
         parameterIndex++;
            }
          // fall through
          case 123: break;
          case 48:
            { // Angular 2 expression cannot contain an `@` character
       yypushback(1);
       yybegin(YYINITIAL);
       if (parameterStart < zzMarkedPos)
          return Angular2EmbeddedExprTokenType.createBlockParameter(blockName, parameterIndex);
            }
          // fall through
          case 124: break;
          case 49:
            { parameterStart = zzMarkedPos;
    yybegin(BLOCK_PARAMETER);
    return Angular2HtmlTokenTypes.BLOCK_SEMICOLON;
            }
          // fall through
          case 125: break;
          case 50:
            { yybegin(YYINITIAL);
    yypushback(1);
            }
          // fall through
          case 126: break;
          case 51:
            { yybegin(LET_NAME);
    return XmlTokenType.XML_WHITE_SPACE;
            }
          // fall through
          case 127: break;
          case 52:
            { yybegin(LET_EQ);
            }
          // fall through
          case 128: break;
          case 53:
            { yybegin(YYINITIAL);
    yypushback(1);
    return Angular2EmbeddedExprTokenType.createBlockParameter("let", 0);
            }
          // fall through
          case 129: break;
          case 54:
            { // tab-space, nbsp
    yybegin(LET_VALUE);
            }
          // fall through
          case 130: break;
          case 55:
            { consumeLetString();
            }
          // fall through
          case 131: break;
          case 56:
            { yybegin(LET_VALUE_END);
    yypushback(1);
    return Angular2EmbeddedExprTokenType.createBlockParameter("let", 0);
            }
          // fall through
          case 132: break;
          case 57:
            { yybegin(YYINITIAL);
    return Angular2HtmlTokenTypes.BLOCK_SEMICOLON;
            }
          // fall through
          case 133: break;
          case 58:
            { if (!tryRollbackInterpolation()) {
    return XmlTokenType.XML_END_TAG_START;
  }
            }
          // fall through
          case 134: break;
          case 59:
            { if (!tryRollbackInterpolation()) {
    yybegin(START_TAG_NAME);
    yypushback(yylength());
  }
            }
          // fall through
          case 135: break;
          case 60:
            { if (!tryRollbackInterpolation()) {
    yybegin(PROCESSING_INSTRUCTION);
    return XmlTokenType.XML_PI_START;
  }
            }
          // fall through
          case 136: break;
          case 61:
            { if (enableLetSyntax && inBuffer("let", 0)) {
    zzMarkedPos += 2;
    yybegin(LET_WHITESPACE);
    return Angular2HtmlTokenTypes.BLOCK_NAME;
  } else if (enableBlockSyntax) {
    yypushback(2);
    yybegin(BLOCK_NAME);
  } else {
    return XmlTokenType.XML_DATA_CHARACTERS;
  }
            }
          // fall through
          case 137: break;
          case 62:
            { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }
          // fall through
          case 138: break;
          case 63:
            { yybegin(YYINITIAL); return XmlTokenType.XML_EMPTY_ELEMENT_END;
            }
          // fall through
          case 139: break;
          case 64:
            { yybegin(COMMENT); return XmlTokenType.XML_CONDITIONAL_COMMENT_START_END;
            }
          // fall through
          case 140: break;
          case 65:
            { // comment start
  inInterpolationComment = true;
            }
          // fall through
          case 141: break;
          case 66:
            { // consume escaped char
            }
          // fall through
          case 142: break;
          case 67:
            { blockName = Angular2HtmlBlockUtils.INSTANCE.toCanonicalBlockName(yytext().toString());
  yybegin(BLOCK_PARAMETERS_START);
  return Angular2HtmlTokenTypes.BLOCK_NAME;
            }
          // fall through
          case 143: break;
          case 68:
            { if (!isWithinInterpolation()) return XmlTokenType.XML_ENTITY_REF_TOKEN; else processInterpolationEntity();
            }
          // fall through
          case 144: break;
          case 69:
            { if (!tryRollbackInterpolation()) {
    yybegin(END_TAG_NAME); yypushback(yylength());
  }
            }
          // fall through
          case 145: break;
          case 70:
            { yybegin(YYINITIAL); return XmlTokenType.XML_COMMENT_END;
            }
          // fall through
          case 146: break;
          case 71:
            { yybegin(C_COMMENT_END); return XmlTokenType.XML_CONDITIONAL_COMMENT_END_START;
            }
          // fall through
          case 147: break;
          case 72:
            { if (!isWithinInterpolation()) return XmlTokenType.XML_CHAR_ENTITY_REF; else processInterpolationEntity();
            }
          // fall through
          case 148: break;
          case 73:
            { if (!tryRollbackInterpolation()) {
    yybegin(COMMENT);
    return XmlTokenType.XML_COMMENT_START;
  }
            }
          // fall through
          case 149: break;
          case 74:
            { yybegin(YYINITIAL); return XmlTokenType.XML_BAD_CHARACTER;
            }
          // fall through
          case 150: break;
          case 75:
            { return XmlTokenType.XML_DOCTYPE_PUBLIC;
            }
          // fall through
          case 151: break;
          case 76:
            { if (!tryRollbackInterpolation()) {
    yybegin(DOC_TYPE);
    return XmlTokenType.XML_DOCTYPE_START;
  }
            }
          // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
