// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Angular2.flex

package org.angular2.lang.expr.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;
import com.intellij.util.containers.IntStack;

import org.angular2.codeInsight.blocks.Angular2HtmlBlockUtilsKt;

import static com.intellij.lang.javascript.JSTokenTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.angular2.lang.expr.lexer.Angular2TokenTypes.*;


class _Angular2Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int YYEXPRESSION = 2;
  public static final int YYSTRING = 4;
  public static final int YYSTRING_TEMPLATE = 6;
  public static final int YYSTRING_TEMPLATE_DOLLAR = 8;
  public static final int YYINITIAL_WITH_NONEMPTY_STATE_STACK = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\1\1\0\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\12\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\0\4\32"+
    "\1\33\1\32\21\34\1\35\2\34\1\36\1\37\1\40"+
    "\1\41\1\34\1\42\1\43\1\32\1\44\1\45\1\46"+
    "\1\47\1\34\1\50\1\51\2\34\1\52\1\34\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\34\1\35\1\64\1\34\1\65\1\66\1\67\42\0"+
    "\1\1\11\0\1\70\12\0\1\70\4\0\1\70\5\0"+
    "\27\70\1\0\37\70\1\0\u01ca\70\4\0\14\70\16\0"+
    "\5\70\7\0\1\70\1\0\1\70\201\0\5\70\1\0"+
    "\2\70\2\0\4\70\1\0\1\70\6\0\1\70\1\0"+
    "\3\70\1\0\1\70\1\0\24\70\1\0\123\70\1\0"+
    "\213\70\10\0\246\70\1\0\46\70\2\0\1\70\6\0"+
    "\51\70\107\0\33\70\4\0\4\70\55\0\53\70\43\0"+
    "\2\70\1\0\143\70\1\0\1\70\17\0\2\70\7\0"+
    "\2\70\12\0\3\70\2\0\1\70\20\0\1\70\1\0"+
    "\36\70\35\0\131\70\13\0\1\70\30\0\41\70\11\0"+
    "\2\70\4\0\1\70\5\0\26\70\4\0\1\70\11\0"+
    "\1\70\3\0\1\70\27\0\31\70\7\0\13\70\65\0"+
    "\25\70\1\0\10\70\106\0\66\70\3\0\1\70\22\0"+
    "\1\70\7\0\12\70\17\0\20\70\4\0\10\70\2\0"+
    "\2\70\2\0\26\70\1\0\7\70\1\0\1\70\3\0"+
    "\4\70\3\0\1\70\20\0\1\70\15\0\2\70\1\0"+
    "\3\70\16\0\2\70\12\0\1\70\10\0\6\70\4\0"+
    "\2\70\2\0\26\70\1\0\7\70\1\0\2\70\1\0"+
    "\2\70\1\0\2\70\37\0\4\70\1\0\1\70\23\0"+
    "\3\70\20\0\11\70\1\0\3\70\1\0\26\70\1\0"+
    "\7\70\1\0\2\70\1\0\5\70\3\0\1\70\22\0"+
    "\1\70\17\0\2\70\27\0\1\70\13\0\10\70\2\0"+
    "\2\70\2\0\26\70\1\0\7\70\1\0\2\70\1\0"+
    "\5\70\3\0\1\70\36\0\2\70\1\0\3\70\17\0"+
    "\1\70\21\0\1\70\1\0\6\70\3\0\3\70\1\0"+
    "\4\70\3\0\2\70\1\0\1\70\1\0\2\70\3\0"+
    "\2\70\3\0\3\70\3\0\14\70\26\0\1\70\64\0"+
    "\10\70\1\0\3\70\1\0\27\70\1\0\20\70\3\0"+
    "\1\70\32\0\3\70\5\0\2\70\36\0\1\70\4\0"+
    "\10\70\1\0\3\70\1\0\27\70\1\0\12\70\1\0"+
    "\5\70\3\0\1\70\40\0\1\70\1\0\2\70\17\0"+
    "\2\70\22\0\10\70\1\0\3\70\1\0\51\70\2\0"+
    "\1\70\20\0\1\70\5\0\3\70\10\0\3\70\30\0"+
    "\6\70\5\0\22\70\3\0\30\70\1\0\11\70\1\0"+
    "\1\70\2\0\7\70\72\0\60\70\1\0\2\70\14\0"+
    "\7\70\72\0\2\70\1\0\1\70\1\0\5\70\1\0"+
    "\30\70\1\0\1\70\1\0\12\70\1\0\2\70\11\0"+
    "\1\70\2\0\5\70\1\0\1\70\25\0\4\70\40\0"+
    "\1\70\77\0\10\70\1\0\44\70\33\0\5\70\163\0"+
    "\53\70\24\0\1\70\20\0\6\70\4\0\4\70\3\0"+
    "\1\70\3\0\2\70\7\0\3\70\4\0\15\70\14\0"+
    "\1\70\21\0\46\70\1\0\1\70\5\0\1\70\2\0"+
    "\53\70\1\0\115\70\1\0\4\70\2\0\7\70\1\0"+
    "\1\70\1\0\4\70\2\0\51\70\1\0\4\70\2\0"+
    "\41\70\1\0\4\70\2\0\7\70\1\0\1\70\1\0"+
    "\4\70\2\0\17\70\1\0\71\70\1\0\4\70\2\0"+
    "\103\70\45\0\20\70\20\0\126\70\2\0\6\70\3\0"+
    "\u016c\70\2\0\21\70\1\0\32\70\5\0\113\70\6\0"+
    "\10\70\7\0\15\70\1\0\4\70\16\0\22\70\16\0"+
    "\22\70\16\0\15\70\1\0\3\70\17\0\64\70\43\0"+
    "\1\70\4\0\1\70\103\0\131\70\7\0\5\70\2\0"+
    "\42\70\1\0\1\70\5\0\106\70\12\0\37\70\61\0"+
    "\36\70\2\0\5\70\13\0\54\70\4\0\32\70\66\0"+
    "\27\70\11\0\65\70\122\0\1\70\135\0\57\70\21\0"+
    "\7\70\67\0\36\70\15\0\2\70\12\0\54\70\32\0"+
    "\44\70\51\0\3\70\12\0\44\70\2\0\11\70\7\0"+
    "\53\70\2\0\3\70\51\0\4\70\1\0\6\70\1\0"+
    "\2\70\3\0\1\70\5\0\300\70\100\0\26\70\2\0"+
    "\6\70\2\0\46\70\2\0\6\70\2\0\10\70\1\0"+
    "\1\70\1\0\1\70\1\0\1\70\1\0\37\70\2\0"+
    "\65\70\1\0\7\70\1\0\1\70\3\0\3\70\1\0"+
    "\7\70\3\0\4\70\2\0\6\70\4\0\15\70\5\0"+
    "\3\70\1\0\7\70\164\0\1\70\15\0\1\70\20\0"+
    "\15\70\145\0\1\70\4\0\1\70\2\0\12\70\1\0"+
    "\1\70\3\0\5\70\6\0\1\70\1\0\1\70\1\0"+
    "\1\70\1\0\4\70\1\0\13\70\2\0\4\70\5\0"+
    "\5\70\4\0\1\70\64\0\2\70\u017b\0\57\70\1\0"+
    "\57\70\1\0\205\70\6\0\4\70\3\0\2\70\14\0"+
    "\46\70\1\0\1\70\5\0\1\70\2\0\70\70\7\0"+
    "\1\70\20\0\27\70\11\0\7\70\1\0\7\70\1\0"+
    "\7\70\1\0\7\70\1\0\7\70\1\0\7\70\1\0"+
    "\7\70\1\0\7\70\120\0\1\70\325\0\2\70\52\0"+
    "\5\70\5\0\2\70\4\0\126\70\6\0\3\70\1\0"+
    "\132\70\1\0\4\70\5\0\53\70\1\0\136\70\21\0"+
    "\33\70\65\0\306\70\112\0\360\70\20\0\215\70\103\0"+
    "\56\70\2\0\15\70\3\0\20\70\12\0\2\70\24\0"+
    "\57\70\20\0\37\70\2\0\106\70\61\0\11\70\2\0"+
    "\147\70\2\0\65\70\2\0\5\70\60\0\13\70\1\0"+
    "\3\70\1\0\4\70\1\0\27\70\35\0\64\70\16\0"+
    "\62\70\76\0\6\70\3\0\1\70\1\0\2\70\13\0"+
    "\34\70\12\0\27\70\31\0\35\70\7\0\57\70\34\0"+
    "\1\70\20\0\5\70\1\0\12\70\12\0\5\70\1\0"+
    "\51\70\27\0\3\70\1\0\10\70\24\0\27\70\3\0"+
    "\1\70\3\0\62\70\1\0\1\70\3\0\2\70\2\0"+
    "\5\70\2\0\1\70\1\0\1\70\30\0\3\70\2\0"+
    "\13\70\7\0\3\70\14\0\6\70\2\0\6\70\2\0"+
    "\6\70\11\0\7\70\1\0\7\70\1\0\53\70\1\0"+
    "\14\70\10\0\163\70\35\0\244\70\14\0\27\70\4\0"+
    "\61\70\u0104\0\156\70\2\0\152\70\46\0\7\70\14\0"+
    "\5\70\5\0\1\70\1\0\12\70\1\0\15\70\1\0"+
    "\5\70\1\0\1\70\1\0\2\70\1\0\2\70\1\0"+
    "\154\70\41\0\153\70\22\0\100\70\2\0\66\70\50\0"+
    "\14\70\164\0\5\70\1\0\207\70\44\0\32\70\6\0"+
    "\32\70\13\0\131\70\3\0\6\70\2\0\6\70\2\0"+
    "\6\70\2\0\3\70\43\0\14\70\1\0\32\70\1\0"+
    "\23\70\1\0\2\70\1\0\17\70\2\0\16\70\42\0"+
    "\173\70\205\0\35\70\3\0\61\70\57\0\40\70\15\0"+
    "\24\70\1\0\10\70\6\0\46\70\12\0\36\70\2\0"+
    "\44\70\4\0\10\70\60\0\236\70\22\0\44\70\4\0"+
    "\44\70\4\0\50\70\10\0\64\70\234\0\67\70\11\0"+
    "\26\70\12\0\10\70\230\0\6\70\2\0\1\70\1\0"+
    "\54\70\1\0\2\70\3\0\1\70\2\0\27\70\12\0"+
    "\27\70\11\0\37\70\101\0\23\70\1\0\2\70\12\0"+
    "\26\70\12\0\32\70\106\0\70\70\6\0\2\70\100\0"+
    "\1\70\17\0\4\70\1\0\3\70\1\0\35\70\52\0"+
    "\35\70\3\0\35\70\43\0\10\70\1\0\34\70\33\0"+
    "\66\70\12\0\26\70\12\0\23\70\15\0\22\70\156\0"+
    "\111\70\67\0\63\70\15\0\63\70\15\0\44\70\334\0"+
    "\35\70\12\0\1\70\10\0\26\70\232\0\27\70\14\0"+
    "\65\70\113\0\55\70\40\0\31\70\32\0\44\70\35\0"+
    "\1\70\13\0\43\70\3\0\1\70\14\0\60\70\16\0"+
    "\4\70\25\0\1\70\1\0\1\70\43\0\22\70\1\0"+
    "\31\70\124\0\7\70\1\0\1\70\1\0\4\70\1\0"+
    "\17\70\1\0\12\70\7\0\57\70\46\0\10\70\2\0"+
    "\2\70\2\0\26\70\1\0\7\70\1\0\2\70\1\0"+
    "\5\70\3\0\1\70\22\0\1\70\14\0\5\70\236\0"+
    "\65\70\22\0\4\70\24\0\1\70\40\0\60\70\24\0"+
    "\2\70\1\0\1\70\270\0\57\70\51\0\4\70\44\0"+
    "\60\70\24\0\1\70\73\0\53\70\15\0\1\70\107\0"+
    "\33\70\345\0\54\70\164\0\100\70\37\0\1\70\240\0"+
    "\10\70\2\0\47\70\20\0\1\70\1\0\1\70\34\0"+
    "\1\70\12\0\50\70\7\0\1\70\25\0\1\70\13\0"+
    "\56\70\23\0\1\70\42\0\71\70\7\0\11\70\1\0"+
    "\45\70\21\0\1\70\61\0\36\70\160\0\7\70\1\0"+
    "\2\70\1\0\46\70\25\0\1\70\31\0\6\70\1\0"+
    "\2\70\1\0\40\70\16\0\1\70\u0147\0\23\70\15\0"+
    "\232\70\346\0\304\70\274\0\57\70\321\0\107\70\271\0"+
    "\71\70\7\0\37\70\161\0\36\70\22\0\60\70\20\0"+
    "\4\70\37\0\25\70\5\0\23\70\260\0\100\70\200\0"+
    "\113\70\5\0\1\70\102\0\15\70\100\0\2\70\1\0"+
    "\1\70\34\0\370\70\10\0\363\70\15\0\37\70\61\0"+
    "\3\70\21\0\4\70\10\0\u018c\70\4\0\153\70\5\0"+
    "\15\70\3\0\11\70\7\0\12\70\146\0\125\70\1\0"+
    "\107\70\1\0\2\70\2\0\1\70\2\0\2\70\2\0"+
    "\4\70\1\0\14\70\1\0\1\70\1\0\7\70\1\0"+
    "\101\70\1\0\4\70\2\0\10\70\1\0\7\70\1\0"+
    "\34\70\1\0\4\70\1\0\5\70\1\0\1\70\3\0"+
    "\7\70\1\0\u0154\70\2\0\31\70\1\0\31\70\1\0"+
    "\37\70\1\0\31\70\1\0\37\70\1\0\31\70\1\0"+
    "\37\70\1\0\31\70\1\0\37\70\1\0\31\70\1\0"+
    "\10\70\64\0\55\70\12\0\7\70\20\0\1\70\u0171\0"+
    "\54\70\24\0\305\70\73\0\104\70\7\0\1\70\264\0"+
    "\4\70\1\0\33\70\1\0\2\70\1\0\1\70\2\0"+
    "\1\70\1\0\12\70\1\0\4\70\1\0\1\70\1\0"+
    "\1\70\6\0\1\70\4\0\1\70\1\0\1\70\1\0"+
    "\1\70\1\0\3\70\1\0\2\70\1\0\1\70\2\0"+
    "\1\70\1\0\1\70\1\0\1\70\1\0\1\70\1\0"+
    "\1\70\1\0\2\70\1\0\1\70\2\0\4\70\1\0"+
    "\7\70\1\0\4\70\1\0\4\70\1\0\1\70\1\0"+
    "\12\70\1\0\21\70\5\0\3\70\1\0\5\70\1\0"+
    "\21\70\104\0\327\70\51\0\65\70\13\0\336\70\2\0"+
    "\u0182\70\16\0\u0131\70\37\0\36\70\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\1\2\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\4\1\34"+
    "\1\35\1\36\11\10\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\42\1\45\1\43\2\46\1\0\1\47\1\50"+
    "\1\0\2\3\1\51\1\52\2\0\1\24\1\53\1\24"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\2\10\1\62"+
    "\7\10\1\63\4\0\2\64\1\0\1\65\2\3\1\66"+
    "\2\0\1\24\1\67\1\70\2\10\1\71\5\10\1\72"+
    "\2\0\1\73\4\0\1\74\1\75\2\3\2\0\1\76"+
    "\1\10\1\77\1\100\1\101\2\10\5\0\1\75\2\3"+
    "\2\0\1\102\2\10\3\0\1\75\2\3\1\103\1\104"+
    "\1\105\1\10\1\106\1\107\1\110\1\3\2\10\1\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u011d\0\u0273\0\u011d\0\u011d"+
    "\0\u02ac\0\u011d\0\u02e5\0\u011d\0\u011d\0\u011d\0\u011d\0\u011d"+
    "\0\u011d\0\u011d\0\u031e\0\u0357\0\u0390\0\u011d\0\u011d\0\u03c9"+
    "\0\u0402\0\u043b\0\u0474\0\u011d\0\u01c8\0\u011d\0\u011d\0\u011d"+
    "\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\u0675\0\u011d\0\u06ae\0\u011d\0\u06e7\0\u011d\0\u011d\0\u0720"+
    "\0\u011d\0\u0759\0\u0792\0\u07cb\0\u0804\0\u011d\0\u011d\0\u01c8"+
    "\0\u083d\0\u0876\0\u08af\0\u011d\0\u08e8\0\u0921\0\u095a\0\u0993"+
    "\0\u09cc\0\u011d\0\u0a05\0\u011d\0\u011d\0\u011d\0\u0a3e\0\u0a77"+
    "\0\u0ab0\0\u02ac\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06"+
    "\0\u0c3f\0\u011d\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u011d\0\u0d5c"+
    "\0\u0d95\0\u011d\0\u0dce\0\u0e07\0\u011d\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\u011d\0\u011d\0\u0eeb\0\u0f24\0\u02ac\0\u0f5d\0\u0f96\0\u0fcf"+
    "\0\u1008\0\u1041\0\u02ac\0\u107a\0\u10b3\0\u011d\0\u10ec\0\u1125"+
    "\0\u115e\0\u1197\0\u011d\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4"+
    "\0\u02ac\0\u12ed\0\u02ac\0\u02ac\0\u02ac\0\u1326\0\u135f\0\u1398"+
    "\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560"+
    "\0\u1599\0\u02ac\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef"+
    "\0\u1728\0\u1761\0\u011d\0\u011d\0\u02ac\0\u179a\0\u011d\0\u011d"+
    "\0\u018f\0\u17d3\0\u180c\0\u1845\0\u02ac";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\3\10\26\7\4\11\1\7\1\12\3\7\5\11"+
    "\1\13\4\11\1\14\7\11\4\7\1\15\3\10\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\4\21\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\2\21\1\52\1\53\1\21"+
    "\1\54\1\55\1\56\5\21\1\57\1\60\1\61\1\21"+
    "\1\62\1\63\1\64\1\15\2\65\2\66\1\65\1\67"+
    "\3\65\1\70\1\71\24\65\1\72\31\65\7\73\1\74"+
    "\27\73\1\75\2\73\1\76\26\73\65\0\1\77\75\0"+
    "\3\10\33\0\1\100\63\0\4\11\5\0\22\11\6\0"+
    "\1\10\120\0\4\11\5\0\21\11\1\101\36\0\4\11"+
    "\5\0\14\11\1\102\5\11\33\0\1\103\50\0\1\21"+
    "\13\0\1\21\6\0\4\21\5\0\22\21\15\0\1\104"+
    "\31\0\1\105\12\0\1\106\35\0\1\107\67\0\1\110"+
    "\67\0\1\107\1\0\1\35\7\0\1\111\12\0\1\111"+
    "\51\0\1\112\70\0\1\113\70\0\1\114\62\0\1\115"+
    "\7\0\1\116\46\0\1\21\13\0\1\21\6\0\4\21"+
    "\5\0\15\21\1\117\4\21\13\0\1\21\13\0\1\21"+
    "\6\0\4\21\5\0\7\21\1\120\12\21\13\0\1\21"+
    "\13\0\1\21\6\0\4\21\5\0\1\121\21\21\13\0"+
    "\1\21\13\0\1\21\6\0\4\21\5\0\4\21\1\122"+
    "\15\21\13\0\1\21\13\0\1\21\6\0\4\21\5\0"+
    "\3\21\1\123\16\21\13\0\1\21\13\0\1\21\6\0"+
    "\4\21\5\0\17\21\1\124\2\21\13\0\1\21\13\0"+
    "\1\21\6\0\4\21\5\0\5\21\1\125\6\21\1\126"+
    "\4\21\1\127\13\0\1\21\13\0\1\21\6\0\4\21"+
    "\5\0\10\21\1\130\11\21\13\0\1\21\13\0\1\21"+
    "\6\0\4\21\5\0\1\131\21\21\72\0\1\132\2\0"+
    "\2\65\2\0\1\65\1\0\3\65\2\0\24\65\1\0"+
    "\31\65\6\0\1\133\15\0\1\134\5\0\4\134\5\0"+
    "\1\135\12\134\1\136\6\134\3\0\1\134\2\137\2\0"+
    "\5\137\1\140\50\137\1\141\6\137\7\73\1\0\27\73"+
    "\1\75\2\73\1\0\26\73\65\0\1\142\3\0\71\73"+
    "\32\0\4\11\5\0\2\11\1\143\17\11\36\0\4\11"+
    "\5\0\3\11\1\144\16\11\33\0\1\145\116\0\1\146"+
    "\75\0\1\147\31\0\1\107\7\0\1\111\12\0\1\111"+
    "\22\0\71\110\16\0\1\150\1\0\1\150\2\0\1\150"+
    "\74\0\1\151\50\0\1\21\11\0\1\152\1\0\1\21"+
    "\6\0\4\21\5\0\22\21\13\0\1\21\13\0\1\21"+
    "\6\0\4\21\5\0\15\21\1\153\4\21\13\0\1\21"+
    "\13\0\1\21\6\0\4\21\5\0\7\21\1\154\12\21"+
    "\13\0\1\21\13\0\1\21\6\0\4\21\5\0\16\21"+
    "\1\155\3\21\13\0\1\21\13\0\1\21\6\0\4\21"+
    "\5\0\7\21\1\156\12\21\13\0\1\21\13\0\1\21"+
    "\6\0\4\21\5\0\6\21\1\157\13\21\13\0\1\21"+
    "\13\0\1\21\6\0\4\21\5\0\17\21\1\160\2\21"+
    "\13\0\1\21\13\0\1\21\6\0\4\21\5\0\12\21"+
    "\1\161\7\21\13\0\1\21\13\0\1\21\6\0\4\21"+
    "\5\0\2\21\1\162\17\21\13\0\1\21\13\0\1\21"+
    "\6\0\4\21\5\0\14\21\1\163\5\21\27\0\1\164"+
    "\11\0\1\165\53\0\2\134\1\0\2\134\1\166\4\0"+
    "\4\134\5\0\22\134\3\0\1\134\20\0\2\134\1\0"+
    "\2\134\1\166\4\0\4\134\5\0\12\134\1\167\7\134"+
    "\3\0\1\134\20\0\2\134\1\0\2\134\1\166\4\0"+
    "\4\134\5\0\17\134\1\170\2\134\3\0\1\134\6\0"+
    "\1\171\15\0\1\172\5\0\4\172\5\0\22\172\3\0"+
    "\1\172\23\173\1\174\6\173\2\174\7\173\5\174\21\173"+
    "\32\0\4\11\5\0\14\11\1\175\5\11\36\0\4\11"+
    "\5\0\4\11\1\176\15\11\60\0\1\177\70\0\1\200"+
    "\37\0\1\150\54\0\1\21\13\0\1\21\6\0\4\21"+
    "\5\0\3\21\1\201\16\21\13\0\1\21\13\0\1\21"+
    "\6\0\4\21\5\0\15\21\1\202\4\21\13\0\1\21"+
    "\13\0\1\21\6\0\4\21\5\0\7\21\1\203\12\21"+
    "\13\0\1\21\13\0\1\21\6\0\4\21\5\0\15\21"+
    "\1\204\4\21\13\0\1\21\13\0\1\21\6\0\4\21"+
    "\5\0\3\21\1\205\16\21\13\0\1\21\13\0\1\21"+
    "\6\0\4\21\5\0\3\21\1\206\16\21\13\0\1\21"+
    "\13\0\1\21\6\0\4\21\5\0\3\21\1\207\16\21"+
    "\27\0\1\164\1\0\1\166\66\0\1\210\6\0\2\210"+
    "\7\0\5\210\41\0\2\134\1\0\2\134\1\166\4\0"+
    "\4\134\5\0\11\134\1\211\10\134\3\0\1\134\20\0"+
    "\2\134\1\0\2\134\1\166\4\0\4\134\5\0\11\134"+
    "\1\212\10\134\3\0\1\134\23\0\1\213\11\0\1\214"+
    "\53\0\2\172\1\0\2\172\1\137\4\0\4\172\5\0"+
    "\22\172\3\0\1\172\23\0\1\215\6\0\2\215\7\0"+
    "\5\215\53\0\4\11\5\0\1\216\21\11\36\0\4\11"+
    "\5\0\3\11\1\217\16\11\64\0\1\220\71\0\1\221"+
    "\16\0\1\21\13\0\1\21\6\0\4\21\5\0\3\21"+
    "\1\222\16\21\13\0\1\21\13\0\1\21\6\0\4\21"+
    "\5\0\11\21\1\223\10\21\13\0\1\21\13\0\1\21"+
    "\6\0\4\21\5\0\4\21\1\224\15\21\27\0\1\210"+
    "\1\0\1\166\4\0\2\210\7\0\5\210\41\0\2\134"+
    "\1\0\2\134\1\166\4\0\4\134\5\0\15\134\1\225"+
    "\4\134\3\0\1\134\20\0\2\134\1\0\2\134\1\166"+
    "\4\0\4\134\5\0\16\134\1\226\3\134\3\0\1\134"+
    "\23\0\1\213\1\0\1\137\66\0\1\227\6\0\2\227"+
    "\7\0\5\227\44\0\1\230\6\0\2\230\7\0\5\230"+
    "\53\0\4\11\5\0\16\11\1\231\3\11\36\0\4\11"+
    "\5\0\16\11\1\232\3\11\31\0\1\233\70\0\1\234"+
    "\52\0\1\21\13\0\1\21\6\0\4\21\5\0\4\21"+
    "\1\235\15\21\13\0\1\21\13\0\1\21\6\0\4\21"+
    "\5\0\6\21\1\236\13\21\24\0\2\134\1\0\2\134"+
    "\1\237\4\0\4\134\5\0\22\134\3\0\1\134\20\0"+
    "\2\134\1\0\2\134\1\240\4\0\4\134\5\0\22\134"+
    "\3\0\1\134\23\0\1\227\1\0\1\137\4\0\2\227"+
    "\7\0\5\227\44\0\1\137\6\0\2\137\7\0\5\137"+
    "\53\0\4\11\5\0\3\11\1\241\16\11\36\0\4\11"+
    "\5\0\1\11\1\242\20\11\13\0\1\21\13\0\1\21"+
    "\6\0\4\21\5\0\10\21\1\243\11\21\36\0\4\11"+
    "\5\0\5\11\1\241\14\11\13\0\1\21\13\0\1\21"+
    "\6\0\4\21\5\0\3\21\1\244\16\21\13\0\1\21"+
    "\13\0\1\21\6\0\4\21\5\0\2\21\1\245\17\21"+
    "\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6270];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\10\1\11\5\1\1\11\1\1\2\11\1\1"+
    "\1\11\1\1\7\11\3\1\2\11\4\1\1\11\1\1"+
    "\3\11\11\1\1\11\1\1\1\11\1\1\2\11\1\1"+
    "\1\11\3\1\1\0\2\11\1\0\3\1\1\11\2\0"+
    "\3\1\1\11\1\1\3\11\13\1\1\11\4\0\1\11"+
    "\1\1\1\0\1\11\2\1\1\11\2\0\1\1\2\11"+
    "\11\1\2\0\1\11\4\0\1\11\3\1\2\0\7\1"+
    "\5\0\3\1\2\0\3\1\3\0\3\1\2\11\2\1"+
    "\2\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private char quote;

  private String blockName;
  private int blockParamIndex;

  private IntStack myStateStack = new IntStack(5);

  public _Angular2Lexer(Angular2Lexer.Config config) {
    this((java.io.Reader)null);
    if (config instanceof Angular2Lexer.BlockParameter blockParameter) {
      blockName = blockParameter.getName();
      blockParamIndex = blockParameter.getIndex();
    }
  }

  public final void clearState() {
    myStateStack.clear();
  }

  public boolean isRestartableState() {
    return (yystate() == YYINITIAL || yystate() == YYEXPRESSION) && myStateStack.size() == 0;
  }

  private boolean shouldStartWithParameter() {
    return blockName != null && (blockParamIndex > 0 || !Angular2HtmlBlockUtilsKt.getBLOCKS_WITH_PRIMARY_EXPRESSION().contains(blockName));
  }

  private void pushState(int nextState) {
    myStateStack.push(nextState);
  }

  private int popState() {
    if (myStateStack.size() > 0) {
      int nextState = myStateStack.pop();
      yybegin(nextState);
      return nextState;
    }
    return -1;
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _Angular2Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yypushback(1); yybegin(YYEXPRESSION);
            }
          // fall through
          case 74: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 75: break;
          case 3:
            { yybegin(YYEXPRESSION); if (shouldStartWithParameter()) return BLOCK_PARAMETER_NAME; else yypushback(yylength());
            }
          // fall through
          case 76: break;
          case 4:
            { return BAD_CHARACTER;
            }
          // fall through
          case 77: break;
          case 5:
            { return EXCL;
            }
          // fall through
          case 78: break;
          case 6:
            { yybegin(YYSTRING); quote = '"'; return STRING_LITERAL_PART;
            }
          // fall through
          case 79: break;
          case 7:
            { return SHARP;
            }
          // fall through
          case 80: break;
          case 8:
            { return IDENTIFIER;
            }
          // fall through
          case 81: break;
          case 9:
            { return PERC;
            }
          // fall through
          case 82: break;
          case 10:
            { return AND;
            }
          // fall through
          case 83: break;
          case 11:
            { yybegin(YYSTRING); quote = '\''; return STRING_LITERAL_PART;
            }
          // fall through
          case 84: break;
          case 12:
            { return LPAR;
            }
          // fall through
          case 85: break;
          case 13:
            { return RPAR;
            }
          // fall through
          case 86: break;
          case 14:
            { return MULT;
            }
          // fall through
          case 87: break;
          case 15:
            { return PLUS;
            }
          // fall through
          case 88: break;
          case 16:
            { return COMMA;
            }
          // fall through
          case 89: break;
          case 17:
            { return MINUS;
            }
          // fall through
          case 90: break;
          case 18:
            { return DOT;
            }
          // fall through
          case 91: break;
          case 19:
            { return DIV;
            }
          // fall through
          case 92: break;
          case 20:
            { return NUMERIC_LITERAL;
            }
          // fall through
          case 93: break;
          case 21:
            { return COLON;
            }
          // fall through
          case 94: break;
          case 22:
            { return SEMICOLON;
            }
          // fall through
          case 95: break;
          case 23:
            { return LT;
            }
          // fall through
          case 96: break;
          case 24:
            { return EQ;
            }
          // fall through
          case 97: break;
          case 25:
            { return GT;
            }
          // fall through
          case 98: break;
          case 26:
            { return QUEST;
            }
          // fall through
          case 99: break;
          case 27:
            { return LBRACKET;
            }
          // fall through
          case 100: break;
          case 28:
            { return RBRACKET;
            }
          // fall through
          case 101: break;
          case 29:
            { return XOR;
            }
          // fall through
          case 102: break;
          case 30:
            { yybegin(YYSTRING_TEMPLATE); return BACKQUOTE;
            }
          // fall through
          case 103: break;
          case 31:
            { if (myStateStack.size() > 0) pushState(YYEXPRESSION);
                                yybegin(YYEXPRESSION);
                                return LBRACE;
            }
          // fall through
          case 104: break;
          case 32:
            { return OR;
            }
          // fall through
          case 105: break;
          case 33:
            { int popped = popState();
                                if (popped < 0) {
                                  yybegin(YYEXPRESSION);
                                }
                                return RBRACE;
            }
          // fall through
          case 106: break;
          case 34:
            { return STRING_LITERAL_PART;
            }
          // fall through
          case 107: break;
          case 35:
            { yypushback(yytext().length()); yybegin(YYEXPRESSION);
            }
          // fall through
          case 108: break;
          case 36:
            { if (quote == '"') yybegin(YYEXPRESSION); return STRING_LITERAL_PART;
            }
          // fall through
          case 109: break;
          case 37:
            { if (quote == '\'') yybegin(YYEXPRESSION); return STRING_LITERAL_PART;
            }
          // fall through
          case 110: break;
          case 38:
            { return STRING_TEMPLATE_PART;
            }
          // fall through
          case 111: break;
          case 39:
            { yybegin(YYEXPRESSION); return BACKQUOTE;
            }
          // fall through
          case 112: break;
          case 40:
            { pushState(YYSTRING_TEMPLATE); yybegin(YYEXPRESSION); return LBRACE;
            }
          // fall through
          case 113: break;
          case 41:
            { return NE;
            }
          // fall through
          case 114: break;
          case 42:
            { return ANDAND;
            }
          // fall through
          case 115: break;
          case 43:
            { return C_STYLE_COMMENT;
            }
          // fall through
          case 116: break;
          case 44:
            { return LE;
            }
          // fall through
          case 117: break;
          case 45:
            { return EQEQ;
            }
          // fall through
          case 118: break;
          case 46:
            { return GE;
            }
          // fall through
          case 119: break;
          case 47:
            { return ELVIS;
            }
          // fall through
          case 120: break;
          case 48:
            { return QUEST_QUEST;
            }
          // fall through
          case 121: break;
          case 49:
            { return AS_KEYWORD;
            }
          // fall through
          case 122: break;
          case 50:
            { return IF_KEYWORD;
            }
          // fall through
          case 123: break;
          case 51:
            { return OROR;
            }
          // fall through
          case 124: break;
          case 52:
            { return ESCAPE_SEQUENCE;
            }
          // fall through
          case 125: break;
          case 53:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { /* don't merge with { to have parents paired */
                                yybegin(YYSTRING_TEMPLATE_DOLLAR);
                                return DOLLAR;
            }
          // fall through
          case 126: break;
          case 54:
            { return NEQEQ;
            }
          // fall through
          case 127: break;
          case 55:
            { return EQEQEQ;
            }
          // fall through
          case 128: break;
          case 56:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { return IDENTIFIER;
            }
          // fall through
          case 129: break;
          case 57:
            { return LET_KEYWORD;
            }
          // fall through
          case 130: break;
          case 58:
            { return VAR_KEYWORD;
            }
          // fall through
          case 131: break;
          case 59:
            { return XML_CHAR_ENTITY_REF;
            }
          // fall through
          case 132: break;
          case 60:
            { yypushback(1); return INVALID_ESCAPE_SEQUENCE;
            }
          // fall through
          case 133: break;
          case 61:
            { return INVALID_ESCAPE_SEQUENCE;
            }
          // fall through
          case 134: break;
          case 62:
            { return ELSE_KEYWORD;
            }
          // fall through
          case 135: break;
          case 63:
            { return NULL_KEYWORD;
            }
          // fall through
          case 136: break;
          case 64:
            { return THIS_KEYWORD;
            }
          // fall through
          case 137: break;
          case 65:
            { return TRUE_KEYWORD;
            }
          // fall through
          case 138: break;
          case 66:
            { return FALSE_KEYWORD;
            }
          // fall through
          case 139: break;
          case 67:
            { yybegin(YYSTRING); quote = '\''; return XML_CHAR_ENTITY_REF;
            }
          // fall through
          case 140: break;
          case 68:
            { yybegin(YYSTRING); quote = '"'; return XML_CHAR_ENTITY_REF;
            }
          // fall through
          case 141: break;
          case 69:
            { return TYPEOF_KEYWORD;
            }
          // fall through
          case 142: break;
          case 70:
            { if (quote == '\'') yybegin(YYEXPRESSION); return XML_CHAR_ENTITY_REF;
            }
          // fall through
          case 143: break;
          case 71:
            { if (quote == '"') yybegin(YYEXPRESSION); return XML_CHAR_ENTITY_REF;
            }
          // fall through
          case 144: break;
          case 72:
            { if (shouldStartWithParameter()) return BLOCK_PARAMETER_NAME; else { yybegin(YYEXPRESSION); yypushback(yylength());}
            }
          // fall through
          case 145: break;
          case 73:
            { return UNDEFINED_KEYWORD;
            }
          // fall through
          case 146: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
