/* The following code was generated by JFlex 1.4.3 on 5-5-14 18:10 */

// We base our lexer directly on the official handlebars.l lexer definition,
// making some modifications to account for Jison/JFlex syntax and functionality differences
//
// Revision ported: https://github.com/wycats/handlebars.js/commit/58a0b4f17d5338793c92cf4d104e9c44cc485c5b#src/handlebars.l

package com.dmarcotte.handlebars.parsing;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;

// suppress various warnings/inspections for the generated class
@SuppressWarnings ({"FieldCanBeLocal", "UnusedDeclaration", "UnusedAssignment", "AccessStaticViaInstance", "MismatchedReadAndWriteOfArray", "WeakerAccess", "SameParameterValue", "CanBeFinal", "SameReturnValue", "RedundantThrows", "ConstantConditions"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5-5-14 18:10 from the specification file
 * <tt>handlebars.flex</tt>
 */
final class _HbLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int mu = 2;
  public static final int emu = 4;
  public static final int YYINITIAL = 0;
  public static final int par = 6;
  public static final int data = 10;
  public static final int comment = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\17\1\1\1\1\22\0\1\1\1\12\1\20"+
    "\1\6\1\0\1\35\1\11\1\21\5\35\1\33\1\15\1\7\12\34"+
    "\1\0\2\35\1\14\1\5\1\0\1\22\32\0\1\36\1\4\1\37"+
    "\1\10\1\0\1\35\1\32\3\0\1\23\1\31\5\0\1\24\5\0"+
    "\1\27\1\25\1\26\1\30\5\0\1\3\1\35\1\16\1\13\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\3\0\1\1\1\3\1\2\2\3\1\4"+
    "\1\3\1\5\1\4\3\3\1\6\6\3\1\2\1\3"+
    "\1\7\1\3\1\10\1\0\1\11\1\12\1\0\1\13"+
    "\1\14\1\15\2\0\1\16\6\0\1\17\1\0\1\20"+
    "\1\0\1\10\1\21\1\22\1\23\1\24\1\25\1\12"+
    "\1\26\1\15\1\27\3\0\1\20\1\30\3\0\1\31"+
    "\3\30\1\32\1\33\1\0\1\31\2\30\1\34\2\30"+
    "\1\35\1\36\1\30\1\36\2\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\200\0\240\0\300\0\340"+
    "\0\u0100\0\u0120\0\u0120\0\u0140\0\u0120\0\u0160\0\u0180\0\u01a0"+
    "\0\u01c0\0\u0120\0\u01e0\0\u0200\0\u0220\0\u0240\0\u0260\0\u0280"+
    "\0\u02a0\0\u02c0\0\u0120\0\u02e0\0\u0300\0\300\0\u0120\0\u0320"+
    "\0\u0340\0\u0120\0\u0120\0\u0360\0\u01a0\0\u0380\0\u0120\0\u01c0"+
    "\0\u03a0\0\u03c0\0\u03e0\0\u0400\0\u0260\0\u0120\0\u0280\0\u0420"+
    "\0\u0440\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u0120\0\u0460\0\u0480\0\u04a0\0\u04c0\0\u04e0"+
    "\0\u0500\0\u0520\0\u0540\0\u0560\0\u0580\0\u05a0\0\u05c0\0\u0120"+
    "\0\u0120\0\u05e0\0\u0120\0\u0600\0\u0620\0\u0120\0\u0640\0\u0660"+
    "\0\u0120\0\u0680\0\u06a0\0\u0120\0\u06c0\0\u06e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\1\1\6\34\1\1\7\2\10\1\11\3\12\1\13"+
    "\3\12\1\14\1\15\1\16\1\17\1\10\1\20\1\21"+
    "\1\22\1\23\2\7\1\24\2\7\1\25\1\7\1\26"+
    "\1\27\1\12\1\30\2\12\2\31\1\32\1\33\34\12"+
    "\2\31\36\12\2\31\1\34\34\12\3\1\1\35\34\1"+
    "\1\36\2\37\4\0\1\37\4\0\4\37\3\0\12\36"+
    "\4\0\2\10\14\0\1\10\23\0\1\40\112\0\1\41"+
    "\22\0\2\42\12\0\1\43\2\42\36\0\1\44\21\0"+
    "\4\45\1\46\13\45\1\47\17\45\4\50\1\51\14\50"+
    "\1\47\16\50\1\36\2\37\4\0\1\37\4\0\4\37"+
    "\3\0\1\36\1\52\10\36\3\0\1\36\2\37\4\0"+
    "\1\37\4\0\4\37\3\0\4\36\1\53\5\36\3\0"+
    "\1\36\2\37\4\0\1\37\4\0\4\37\3\0\7\36"+
    "\1\54\2\36\3\0\1\36\2\37\4\0\1\37\4\0"+
    "\4\37\3\0\11\36\1\55\3\0\1\36\2\56\4\0"+
    "\1\37\4\0\2\37\2\56\3\0\11\36\1\55\3\0"+
    "\37\57\1\43\1\0\2\31\40\0\1\60\37\0\1\61"+
    "\37\0\1\62\37\0\1\63\1\0\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\70\42\0\1\72\37\0\1\73"+
    "\21\0\2\45\1\0\35\45\2\50\1\0\35\50\1\36"+
    "\2\37\4\0\1\37\4\0\4\37\3\0\2\36\1\74"+
    "\7\36\3\0\1\36\2\37\4\0\1\37\4\0\4\37"+
    "\3\0\5\36\1\75\4\36\3\0\1\36\2\37\4\0"+
    "\1\37\4\0\4\37\3\0\1\36\1\76\10\36\3\0"+
    "\3\60\1\77\34\60\12\0\1\100\25\0\1\36\2\37"+
    "\4\0\1\37\4\0\4\37\3\0\1\101\11\36\3\0"+
    "\1\36\2\37\4\0\1\37\4\0\4\37\3\0\1\102"+
    "\11\36\3\0\1\36\2\37\4\0\1\37\4\0\4\37"+
    "\3\0\2\36\1\103\7\36\3\0\3\60\1\104\34\60"+
    "\16\105\1\106\14\105\1\107\4\105\1\36\2\110\4\0"+
    "\1\37\4\0\2\37\2\110\3\0\12\36\3\0\1\36"+
    "\2\111\4\0\1\37\4\0\2\37\2\111\3\0\12\36"+
    "\3\0\1\36\2\37\4\0\1\37\4\0\4\37\3\0"+
    "\1\112\11\36\6\0\1\113\34\0\16\105\1\114\21\105"+
    "\16\115\1\116\37\115\1\117\14\115\1\120\4\115\1\36"+
    "\2\121\4\0\1\37\4\0\2\37\2\121\3\0\12\36"+
    "\3\0\16\105\1\122\21\105\16\115\1\117\37\115\1\0"+
    "\21\115\33\120\1\123\4\120\16\0\1\124\21\0\33\120"+
    "\1\125\22\120\1\126\14\120\1\125\22\120\1\116\14\120"+
    "\1\123\4\120";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\3\0\4\1\2\11\1\1\1\11\4\1\1\11"+
    "\10\1\1\11\2\1\1\0\1\11\1\1\1\0\2\11"+
    "\1\1\2\0\1\11\6\0\1\11\1\0\1\1\1\0"+
    "\12\11\3\0\2\1\3\0\4\1\2\11\1\0\1\11"+
    "\2\1\1\11\2\1\1\11\2\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Stack<Integer> stack = new Stack<Integer>();

    public void yypushState(int newState) {
      stack.push(yystate());
      yybegin(newState);
    }

    public void yypopState() {
      yybegin(stack.pop());
    }


  _HbLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _HbLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 100) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { // otherwise, if the remaining text just contains the one escaped mustache, then it's all CONTENT
        return HbTokenTypes.CONTENT;
          }
        case 31: break;
        case 8: 
          { // backtrack over any stache characters at the end of this string
          while (yylength() > 0 && yytext().subSequence(yylength() - 1, yylength()).toString().equals("{")) {
            yypushback(1);
          }

          // inspect the characters leading up to this mustache for escaped characters
          if (yylength() > 1 && yytext().subSequence(yylength() - 2, yylength()).toString().equals("\\\\")) {
            return HbTokenTypes.CONTENT; // double-slash is just more content
          } else if (yylength() > 0 && yytext().toString().substring(yylength() - 1, yylength()).equals("\\")) {
            yypushback(1); // put the escape char back
            yypushState(emu);
          } else {
            yypushState(mu);
          }

          // we stray from the handlebars.js lexer here since we need our WHITE_SPACE more clearly delineated
          //    and we need to avoid creating extra tokens for empty strings (makes the parser and formatter happier)
          if (!yytext().toString().equals("")) {
              if (yytext().toString().trim().length() == 0) {
                  return HbTokenTypes.WHITE_SPACE;
              } else {
                  return HbTokenTypes.CONTENT;
              }
          }
          }
        case 32: break;
        case 7: 
          { return HbTokenTypes.ESCAPE_CHAR;
          }
        case 33: break;
        case 2: 
          { return HbTokenTypes.WHITE_SPACE;
          }
        case 34: break;
        case 29: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 5;
          { return HbTokenTypes.BOOLEAN;
          }
        case 35: break;
        case 27: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return HbTokenTypes.BOOLEAN;
          }
        case 36: break;
        case 18: 
          { return HbTokenTypes.OPEN_PARTIAL;
          }
        case 37: break;
        case 4: 
          { return HbTokenTypes.SEP;
          }
        case 38: break;
        case 9: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return HbTokenTypes.ID;
          }
        case 39: break;
        case 11: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return HbTokenTypes.ID;
          }
        case 40: break;
        case 12: 
          { return HbTokenTypes.ID;
          }
        case 41: break;
        case 26: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return HbTokenTypes.ELSE;
          }
        case 42: break;
        case 24: 
          { yypopState(); return HbTokenTypes.UNCLOSED_COMMENT;
          }
        case 43: break;
        case 22: 
          { yypushback(3); yypopState(); yypushState(comment);
          }
        case 44: break;
        case 10: 
          { return HbTokenTypes.OPEN;
          }
        case 45: break;
        case 25: 
          { // grab everything up to the next open stache
          // backtrack over any stache characters or escape characters at the end of this string
          while (yylength() > 0
                  && (yytext().subSequence(yylength() - 1, yylength()).toString().equals("{")
                      || yytext().subSequence(yylength() - 1, yylength()).toString().equals("\\"))) {
            yypushback(1);
          }

          yypopState();
          return HbTokenTypes.CONTENT;
          }
        case 46: break;
        case 20: 
          { return HbTokenTypes.OPEN_ENDBLOCK;
          }
        case 47: break;
        case 21: 
          { return HbTokenTypes.OPEN_INVERSE;
          }
        case 48: break;
        case 14: 
          { return HbTokenTypes.STRING;
          }
        case 49: break;
        case 28: 
          { yypopState(); return HbTokenTypes.COMMENT;
          }
        case 50: break;
        case 19: 
          { return HbTokenTypes.OPEN_BLOCK;
          }
        case 51: break;
        case 6: 
          { return HbTokenTypes.DATA_PREFIX;
          }
        case 52: break;
        case 1: 
          { return HbTokenTypes.CONTENT;
          }
        case 53: break;
        case 5: 
          { return HbTokenTypes.EQUALS;
          }
        case 54: break;
        case 17: 
          { return HbTokenTypes.OPEN_UNESCAPED;
          }
        case 55: break;
        case 30: 
          { // backtrack over any extra stache characters at the end of this string
      while (yylength() > 2 && yytext().subSequence(yylength() - 3, yylength()).toString().equals("}}}")) {
        yypushback(1);
      }
      yypopState();
      return HbTokenTypes.COMMENT;
          }
        case 56: break;
        case 23: 
          { yypopState(); return HbTokenTypes.CLOSE_UNESCAPED;
          }
        case 57: break;
        case 13: 
          { yypopState(); return HbTokenTypes.CLOSE;
          }
        case 58: break;
        case 3: 
          { return HbTokenTypes.INVALID;
          }
        case 59: break;
        case 15: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return HbTokenTypes.INTEGER;
          }
        case 60: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
