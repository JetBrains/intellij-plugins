# https://raw.githubusercontent.com/Entr04y/cf-s3-static-website-template/master/dist/cf-static-website-template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Description: A Static Website Infrastructure Template
Resources:
  cloudfrontDist:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          Ref: websiteHostNames
        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: http-only
              HTTPPort: 80
              HTTPSPort: 443
            DomainName:
              'Fn::Join':
                - ''
                - - Ref: websiteBucket
                  - .s3-website-
                  - Ref: 'AWS::Region'
                  - .amazonaws.com
            Id:
              Ref: websiteBucket
        Logging:
          IncludeCookies: false
          Bucket:
            'Fn::GetAtt':
              - logBucket
              - DomainName
          Prefix: cflogs
        CacheBehaviors:
          - ViewerProtocolPolicy: redirect-to-https
            DefaultTTL: 604800
            AllowedMethods:
              - HEAD
              - GET
            CachedMethods:
              - HEAD
              - GET
            MinTTL: 0
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            TargetOriginId:
              Ref: websiteBucket
            PathPattern: /css/*.css
          - ViewerProtocolPolicy: redirect-to-https
            DefaultTTL: 604800
            AllowedMethods:
              - HEAD
              - GET
            CachedMethods:
              - HEAD
              - GET
            MinTTL: 0
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            TargetOriginId:
              Ref: websiteBucket
            PathPattern: /js/*.js
          - ViewerProtocolPolicy: redirect-to-https
            DefaultTTL: 86400
            AllowedMethods:
              - HEAD
              - GET
            CachedMethods:
              - HEAD
              - GET
            MinTTL: 0
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            TargetOriginId:
              Ref: websiteBucket
            PathPattern: '*.jpg'
          - ViewerProtocolPolicy: redirect-to-https
            DefaultTTL: 86400
            AllowedMethods:
              - HEAD
              - GET
            CachedMethods:
              - HEAD
              - GET
            MinTTL: 0
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            TargetOriginId:
              Ref: websiteBucket
            PathPattern: '*.png'
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 1800
          AllowedMethods:
            - HEAD
            - GET
          CachedMethods:
            - HEAD
            - GET
          MinTTL: 0
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          TargetOriginId:
            Ref: websiteBucket
        ViewerCertificate:
          AcmCertificateArn:
            Ref: websiteCert
          SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCode: 403
            ErrorCachingMinTTL: 300
            ResponseCode: 403
            ResponsePagePath: /403.html
          - ErrorCode: 404
            ErrorCachingMinTTL: 300
            ResponseCode: 404
            ResponsePagePath: /404.html
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        Enabled: true
  logBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
  websiteBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
        RoutingRules:
          - RedirectRule:
              ReplaceKeyWith: index.html
            RoutingRuleCondition:
              KeyPrefixEquals: /
      LoggingConfiguration:
        DestinationBucketName:
          Ref: logBucket
        LogFilePrefix: s3-
  websiteCert:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName:
        Ref: hostedZoneName
      SubjectAlternativeNames:
        Ref: websiteHostNames
  websiteDNS:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        DNSName:
          'Fn::GetAtt':
            - cloudfrontDist
            - DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneName:
        'Fn::Join':
          - ''
          - - Ref: hostedZoneName
            - .
      Name:
        'Fn::Select':
          - 0
          - Ref: websiteHostNames
      Type: A
  websiteCNAME:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name:
        'Fn::Join':
          - ''
          - - www.
            - Ref: hostedZoneName
            - .
      Type: CNAME
      HostedZoneName:
        'Fn::Join':
          - ''
          - - Ref: hostedZoneName
            - .
      ResourceRecords:
        - 'Fn::Join':
            - ''
            - - Ref: hostedZoneName
              - .
      TTL: 30
  websiteS3Policy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: websiteBucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource:
              'Fn::Join':
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: websiteBucket
                  - /*
            Principal: '*'
Outputs:
  acmCertificate:
    Description: The ACM Certificate created for the stack
    Value:
      Ref: websiteCert
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-websiteCert'
  cloudfrontDistId:
    Description: The cloudfront distribution ID.
    Value:
      Ref: cloudfrontDist
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-cfDistId'
  cloudfrontDomainName:
    Description: The cloudfront distribution DNS name.
    Value:
      'Fn::GetAtt':
        - cloudfrontDist
        - DomainName
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-cfDistDns'
  logBucket:
    Description: S3 Bucket for S3 and cloudfront web access logs.
    Value:
      Ref: logBucket
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-logBucket'
  websiteBucket:
    Description: S3 bucket to place static files in.
    Value:
      Ref: websiteBucket
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-websiteBucket'
Parameters:
  websiteHostNames:
    Description: >-
      Comma seperated host names for the website, including cnames. The first
      one in the list will be used to create A DNS record pointing to the
      cloudfront distribution.
    Type: CommaDelimitedList
  hostedZoneName:
    Description: Name of the hosted zone to create dns entry in.
    Type: String