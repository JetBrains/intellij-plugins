{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description" : "This is a sample template for lambda-backed custom resource. Runtime for Lambda function is NodeJs",
    "Parameters" : {
        "Base" : {
            "Type" : "String",
            "Default" : "10"
        },
        "CustomResourceId" : {
            "Type" : "String",
            "Default" : "SomeCustomResourceId"
        }
    },
    "Resources":{
        "TestCustomResource" : {
            "Type" : "Custom::TestCustomResourceWithLambda",
            "Properties" : {
                "ServiceToken" : { "Fn::GetAtt" : ["TestLambdaFunction", "Arn"] },
                "Base" : { "Ref" : "Base" },
                "Id" : { "Ref" : "CustomResourceId" }
            }
        },
        "TestLambdaFunction" : {
            "Type" : "AWS::Lambda::Function",
            "Properties" : {
                "Handler" : "index.handler",
                "Role" : { "Fn::GetAtt" : ["TestLambdaExecutionRole", "Arn"] },
                "Code" : {
                    "ZipFile" : { "Fn::Join" : [ "\n", [
                        "var response = require('cfn-response');",
                        "exports.handler = function(event, context) {",
                        "    console.log('Received event:');",
                        "    console.log(JSON.stringify(event));",
                        "    var base = event.ResourceProperties.Base;",
                        "    var customId = event.ResourceProperties.Id;",
                        "    var outputData = {};",
                        "    try {",
                        "       if(event.RequestType != 'Delete')",
                        "           outputData.Result = base*5;",
                        "       if(event.RequestType == 'Delete' || outputData.Result == parseInt(outputData.Result, 10))",
                        "           response.send(event, context, response.SUCCESS, outputData, customId);",
                        "       else",
                        "           response.send(event, context, response.FAILED, {}, customId);",
                        "    } catch (e) {",
                        "       console.error(e);",
                        "       response.send(event, context, response.FAILED, { 'error': e }, customId);",
                        "       return",
                        "    }",
                        "}"
                    ]]}
                },
                "Timeout" : "10",
                "MemorySize" : "256",
                "Runtime" : "nodejs4.3"
            }
        },
        "TestLambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "cwlogs",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "logs:CreateLogGroup",
                                    "Resource": { "Fn::Join" : [":", ["arn:aws:logs", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "*" ]] }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": [
                                        { "Fn::Join" : [":", ["arn:aws:logs", { "Ref" : "AWS::Region" }, { "Ref" : "AWS::AccountId" }, "log-group", "/aws/lambda/*", "*" ]] }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        }
    },
    "Outputs" : {
        "Result" : {
            "Value" : { "Fn::GetAtt" : [ "TestCustomResource", "Result" ] }
        }
    }
}
