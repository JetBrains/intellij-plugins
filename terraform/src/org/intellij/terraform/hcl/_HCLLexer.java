// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: HCLLexer.flex

package org.intellij.terraform.hcl;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.psi.tree.IElementType;

import java.util.EnumSet;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.intellij.terraform.hcl.HCLElementTypes.*;

@SuppressWarnings({"ALL"})

public class _HCLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int D_STRING = 2;
  public static final int S_STRING = 4;
  public static final int HIL_EXPRESSION = 6;
  public static final int S_HEREDOC_MARKER = 8;
  public static final int S_HEREDOC_LINE = 10;
  public static final int S_HEREDOC_LINE_END = 12;
  public static final int HIL_EXPRESSION_STRING = 14;
  public static final int TEMPLATE_EXPRESSION = 16;
  public static final int TEMPLATE_EXPRESSION_STRING = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\11\24\1\25\1\0\1\26\1\27\1\30\1\31\1\0"+
    "\4\32\1\33\1\32\21\34\1\35\2\34\1\36\1\37"+
    "\1\40\1\0\1\34\1\0\1\41\3\32\1\42\1\43"+
    "\5\34\1\44\1\34\1\45\3\34\1\46\1\47\1\50"+
    "\1\51\2\34\1\35\2\34\1\52\1\53\1\54\1\55"+
    "\53\0\1\34\12\0\1\34\4\0\1\34\5\0\27\34"+
    "\1\0\37\34\1\0\u01ca\34\4\0\14\34\16\0\5\34"+
    "\7\0\1\34\1\0\1\34\201\0\5\34\1\0\2\34"+
    "\2\0\4\34\1\0\1\34\6\0\1\34\1\0\3\34"+
    "\1\0\1\34\1\0\24\34\1\0\123\34\1\0\213\34"+
    "\10\0\246\34\1\0\46\34\2\0\1\34\6\0\51\34"+
    "\107\0\33\34\4\0\4\34\55\0\53\34\25\0\12\56"+
    "\4\0\2\34\1\0\143\34\1\0\1\34\17\0\2\34"+
    "\7\0\2\34\12\56\3\34\2\0\1\34\20\0\1\34"+
    "\1\0\36\34\35\0\131\34\13\0\1\34\16\0\12\56"+
    "\41\34\11\0\2\34\4\0\1\34\5\0\26\34\4\0"+
    "\1\34\11\0\1\34\3\0\1\34\27\0\31\34\7\0"+
    "\13\34\65\0\25\34\1\0\10\34\106\0\66\34\3\0"+
    "\1\34\22\0\1\34\7\0\12\34\4\0\12\56\1\0"+
    "\20\34\4\0\10\34\2\0\2\34\2\0\26\34\1\0"+
    "\7\34\1\0\1\34\3\0\4\34\3\0\1\34\20\0"+
    "\1\34\15\0\2\34\1\0\3\34\4\0\12\56\2\34"+
    "\12\0\1\34\10\0\6\34\4\0\2\34\2\0\26\34"+
    "\1\0\7\34\1\0\2\34\1\0\2\34\1\0\2\34"+
    "\37\0\4\34\1\0\1\34\7\0\12\56\2\0\3\34"+
    "\20\0\11\34\1\0\3\34\1\0\26\34\1\0\7\34"+
    "\1\0\2\34\1\0\5\34\3\0\1\34\22\0\1\34"+
    "\17\0\2\34\4\0\12\56\11\0\1\34\13\0\10\34"+
    "\2\0\2\34\2\0\26\34\1\0\7\34\1\0\2\34"+
    "\1\0\5\34\3\0\1\34\36\0\2\34\1\0\3\34"+
    "\4\0\12\56\1\0\1\34\21\0\1\34\1\0\6\34"+
    "\3\0\3\34\1\0\4\34\3\0\2\34\1\0\1\34"+
    "\1\0\2\34\3\0\2\34\3\0\3\34\3\0\14\34"+
    "\26\0\1\34\25\0\12\56\25\0\10\34\1\0\3\34"+
    "\1\0\27\34\1\0\20\34\3\0\1\34\32\0\3\34"+
    "\5\0\2\34\4\0\12\56\20\0\1\34\4\0\10\34"+
    "\1\0\3\34\1\0\27\34\1\0\12\34\1\0\5\34"+
    "\3\0\1\34\40\0\1\34\1\0\2\34\4\0\12\56"+
    "\1\0\2\34\22\0\10\34\1\0\3\34\1\0\51\34"+
    "\2\0\1\34\20\0\1\34\5\0\3\34\10\0\3\34"+
    "\4\0\12\56\12\0\6\34\5\0\22\34\3\0\30\34"+
    "\1\0\11\34\1\0\1\34\2\0\7\34\37\0\12\56"+
    "\21\0\60\34\1\0\2\34\14\0\7\34\11\0\12\56"+
    "\47\0\2\34\1\0\1\34\1\0\5\34\1\0\30\34"+
    "\1\0\1\34\1\0\12\34\1\0\2\34\11\0\1\34"+
    "\2\0\5\34\1\0\1\34\11\0\12\56\2\0\4\34"+
    "\40\0\1\34\37\0\12\56\26\0\10\34\1\0\44\34"+
    "\33\0\5\34\163\0\53\34\24\0\1\34\12\56\6\0"+
    "\6\34\4\0\4\34\3\0\1\34\3\0\2\34\7\0"+
    "\3\34\4\0\15\34\14\0\1\34\1\0\12\56\6\0"+
    "\46\34\1\0\1\34\5\0\1\34\2\0\53\34\1\0"+
    "\115\34\1\0\4\34\2\0\7\34\1\0\1\34\1\0"+
    "\4\34\2\0\51\34\1\0\4\34\2\0\41\34\1\0"+
    "\4\34\2\0\7\34\1\0\1\34\1\0\4\34\2\0"+
    "\17\34\1\0\71\34\1\0\4\34\2\0\103\34\45\0"+
    "\20\34\20\0\126\34\2\0\6\34\3\0\u016c\34\2\0"+
    "\21\34\1\0\32\34\5\0\113\34\6\0\10\34\7\0"+
    "\15\34\1\0\4\34\16\0\22\34\16\0\22\34\16\0"+
    "\15\34\1\0\3\34\17\0\64\34\43\0\1\34\4\0"+
    "\1\34\3\0\12\56\46\0\12\56\6\0\131\34\7\0"+
    "\5\34\2\0\42\34\1\0\1\34\5\0\106\34\12\0"+
    "\37\34\47\0\12\56\36\34\2\0\5\34\13\0\54\34"+
    "\4\0\32\34\6\0\12\56\46\0\27\34\11\0\65\34"+
    "\53\0\12\56\6\0\12\56\15\0\1\34\135\0\57\34"+
    "\21\0\7\34\4\0\12\56\51\0\36\34\15\0\2\34"+
    "\12\56\54\34\32\0\44\34\34\0\12\56\3\0\3\34"+
    "\12\56\44\34\2\0\11\34\7\0\53\34\2\0\3\34"+
    "\51\0\4\34\1\0\6\34\1\0\2\34\3\0\1\34"+
    "\5\0\300\34\100\0\26\34\2\0\6\34\2\0\46\34"+
    "\2\0\6\34\2\0\10\34\1\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\37\34\2\0\65\34\1\0\7\34"+
    "\1\0\1\34\3\0\3\34\1\0\7\34\3\0\4\34"+
    "\2\0\6\34\4\0\15\34\5\0\3\34\1\0\7\34"+
    "\164\0\1\34\15\0\1\34\20\0\15\34\145\0\1\34"+
    "\4\0\1\34\2\0\12\34\1\0\1\34\3\0\5\34"+
    "\6\0\1\34\1\0\1\34\1\0\1\34\1\0\4\34"+
    "\1\0\13\34\2\0\4\34\5\0\5\34\4\0\1\34"+
    "\64\0\2\34\u017b\0\57\34\1\0\57\34\1\0\205\34"+
    "\6\0\4\34\3\0\2\34\14\0\46\34\1\0\1\34"+
    "\5\0\1\34\2\0\70\34\7\0\1\34\20\0\27\34"+
    "\11\0\7\34\1\0\7\34\1\0\7\34\1\0\7\34"+
    "\1\0\7\34\1\0\7\34\1\0\7\34\1\0\7\34"+
    "\120\0\1\34\325\0\2\34\52\0\5\34\5\0\2\34"+
    "\4\0\126\34\6\0\3\34\1\0\132\34\1\0\4\34"+
    "\5\0\53\34\1\0\136\34\21\0\33\34\65\0\306\34"+
    "\112\0\360\34\20\0\215\34\103\0\56\34\2\0\15\34"+
    "\3\0\20\34\12\56\2\34\24\0\57\34\20\0\37\34"+
    "\2\0\106\34\61\0\11\34\2\0\147\34\2\0\65\34"+
    "\2\0\5\34\60\0\13\34\1\0\3\34\1\0\4\34"+
    "\1\0\27\34\35\0\64\34\16\0\62\34\34\0\12\56"+
    "\30\0\6\34\3\0\1\34\1\0\2\34\1\0\12\56"+
    "\34\34\12\0\27\34\31\0\35\34\7\0\57\34\34\0"+
    "\1\34\12\56\6\0\5\34\1\0\12\34\12\56\5\34"+
    "\1\0\51\34\27\0\3\34\1\0\10\34\4\0\12\56"+
    "\6\0\27\34\3\0\1\34\3\0\62\34\1\0\1\34"+
    "\3\0\2\34\2\0\5\34\2\0\1\34\1\0\1\34"+
    "\30\0\3\34\2\0\13\34\7\0\3\34\14\0\6\34"+
    "\2\0\6\34\2\0\6\34\11\0\7\34\1\0\7\34"+
    "\1\0\53\34\1\0\14\34\10\0\163\34\15\0\12\56"+
    "\6\0\244\34\14\0\27\34\4\0\61\34\4\0\156\34"+
    "\2\0\152\34\46\0\7\34\14\0\5\34\5\0\1\34"+
    "\1\0\12\34\1\0\15\34\1\0\5\34\1\0\1\34"+
    "\1\0\2\34\1\0\2\34\1\0\154\34\41\0\153\34"+
    "\22\0\100\34\2\0\66\34\50\0\14\34\164\0\5\34"+
    "\1\0\207\34\23\0\12\56\7\0\32\34\6\0\32\34"+
    "\13\0\131\34\3\0\6\34\2\0\6\34\2\0\6\34"+
    "\2\0\3\34\43\0\14\34\1\0\32\34\1\0\23\34"+
    "\1\0\2\34\1\0\17\34\2\0\16\34\42\0\173\34"+
    "\205\0\35\34\3\0\61\34\57\0\40\34\15\0\24\34"+
    "\1\0\10\34\6\0\46\34\12\0\36\34\2\0\44\34"+
    "\4\0\10\34\60\0\236\34\2\0\12\56\6\0\44\34"+
    "\4\0\44\34\4\0\50\34\10\0\64\34\234\0\67\34"+
    "\11\0\26\34\12\0\10\34\230\0\6\34\2\0\1\34"+
    "\1\0\54\34\1\0\2\34\3\0\1\34\2\0\27\34"+
    "\12\0\27\34\11\0\37\34\101\0\23\34\1\0\2\34"+
    "\12\0\26\34\12\0\32\34\106\0\70\34\6\0\2\34"+
    "\100\0\1\34\17\0\4\34\1\0\3\34\1\0\35\34"+
    "\52\0\35\34\3\0\35\34\43\0\10\34\1\0\34\34"+
    "\33\0\66\34\12\0\26\34\12\0\23\34\15\0\22\34"+
    "\156\0\111\34\67\0\63\34\15\0\63\34\15\0\44\34"+
    "\14\0\12\56\306\0\35\34\12\0\1\34\10\0\26\34"+
    "\232\0\27\34\14\0\65\34\56\0\12\56\23\0\55\34"+
    "\40\0\31\34\7\0\12\56\11\0\44\34\17\0\12\56"+
    "\4\0\1\34\13\0\43\34\3\0\1\34\14\0\60\34"+
    "\16\0\4\34\13\0\12\56\1\34\1\0\1\34\43\0"+
    "\22\34\1\0\31\34\124\0\7\34\1\0\1\34\1\0"+
    "\4\34\1\0\17\34\1\0\12\34\7\0\57\34\21\0"+
    "\12\56\13\0\10\34\2\0\2\34\2\0\26\34\1\0"+
    "\7\34\1\0\2\34\1\0\5\34\3\0\1\34\22\0"+
    "\1\34\14\0\5\34\236\0\65\34\22\0\4\34\5\0"+
    "\12\56\5\0\1\34\40\0\60\34\24\0\2\34\1\0"+
    "\1\34\10\0\12\56\246\0\57\34\51\0\4\34\44\0"+
    "\60\34\24\0\1\34\13\0\12\56\46\0\53\34\15\0"+
    "\1\34\7\0\12\56\66\0\33\34\25\0\12\56\306\0"+
    "\54\34\164\0\100\34\12\56\25\0\1\34\240\0\10\34"+
    "\2\0\47\34\20\0\1\34\1\0\1\34\34\0\1\34"+
    "\12\0\50\34\7\0\1\34\25\0\1\34\13\0\56\34"+
    "\23\0\1\34\42\0\71\34\7\0\11\34\1\0\45\34"+
    "\21\0\1\34\17\0\12\56\30\0\36\34\160\0\7\34"+
    "\1\0\2\34\1\0\46\34\25\0\1\34\11\0\12\56"+
    "\6\0\6\34\1\0\2\34\1\0\40\34\16\0\1\34"+
    "\7\0\12\56\u0136\0\23\34\15\0\232\34\346\0\304\34"+
    "\274\0\57\34\321\0\107\34\271\0\71\34\7\0\37\34"+
    "\1\0\12\56\146\0\36\34\22\0\60\34\20\0\4\34"+
    "\14\0\12\56\11\0\25\34\5\0\23\34\260\0\100\34"+
    "\200\0\113\34\5\0\1\34\102\0\15\34\100\0\2\34"+
    "\1\0\1\34\34\0\370\34\10\0\363\34\15\0\37\34"+
    "\61\0\3\34\21\0\4\34\10\0\u018c\34\4\0\153\34"+
    "\5\0\15\34\3\0\11\34\7\0\12\34\146\0\125\34"+
    "\1\0\107\34\1\0\2\34\2\0\1\34\2\0\2\34"+
    "\2\0\4\34\1\0\14\34\1\0\1\34\1\0\7\34"+
    "\1\0\101\34\1\0\4\34\2\0\10\34\1\0\7\34"+
    "\1\0\34\34\1\0\4\34\1\0\5\34\1\0\1\34"+
    "\3\0\7\34\1\0\u0154\34\2\0\31\34\1\0\31\34"+
    "\1\0\37\34\1\0\31\34\1\0\37\34\1\0\31\34"+
    "\1\0\37\34\1\0\31\34\1\0\37\34\1\0\31\34"+
    "\1\0\10\34\2\0\62\56\55\34\12\0\7\34\2\0"+
    "\12\56\4\0\1\34\u0171\0\54\34\4\0\12\56\6\0"+
    "\305\34\73\0\104\34\7\0\1\34\4\0\12\56\246\0"+
    "\4\34\1\0\33\34\1\0\2\34\1\0\1\34\2\0"+
    "\1\34\1\0\12\34\1\0\4\34\1\0\1\34\1\0"+
    "\1\34\6\0\1\34\4\0\1\34\1\0\1\34\1\0"+
    "\1\34\1\0\3\34\1\0\2\34\1\0\1\34\2\0"+
    "\1\34\1\0\1\34\1\0\1\34\1\0\1\34\1\0"+
    "\1\34\1\0\2\34\1\0\1\34\2\0\4\34\1\0"+
    "\7\34\1\0\4\34\1\0\4\34\1\0\1\34\1\0"+
    "\12\34\1\0\21\34\5\0\3\34\1\0\5\34\1\0"+
    "\21\34\104\0\327\34\51\0\65\34\13\0\336\34\2\0"+
    "\u0182\34\16\0\u0131\34\37\0\36\34\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\3\26\1\31\1\1\1\32\1\33\2\34"+
    "\1\35\3\33\1\35\1\33\2\36\2\37\2\33\1\40"+
    "\1\33\1\1\1\41\1\33\1\42\2\43\1\42\1\44"+
    "\1\45\2\46\2\47\1\50\2\33\1\51\1\52\1\53"+
    "\1\54\1\0\1\55\1\56\1\0\1\20\1\0\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\3\26\1\65\1\0"+
    "\1\66\1\67\2\70\2\71\1\0\1\72\2\44\1\33"+
    "\1\73\1\0\1\20\1\0\2\20\3\26\1\66\1\67"+
    "\1\72\1\55\1\0\1\26\1\74\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u01d6\0\u0263\0\u01d6"+
    "\0\u0292\0\u01d6\0\u01d6\0\u01d6\0\u01d6\0\u01d6\0\u01d6\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439"+
    "\0\u01d6\0\u0468\0\u01d6\0\u01d6\0\u0497\0\u04c6\0\u04f5\0\u01d6"+
    "\0\u0524\0\u01d6\0\u0553\0\u01d6\0\u0582\0\u01d6\0\u05b1\0\u05e0"+
    "\0\u01d6\0\u060f\0\u063e\0\u01d6\0\u066d\0\u01d6\0\u060f\0\u069c"+
    "\0\u06cb\0\u01d6\0\u06fa\0\u0729\0\u01d6\0\u0758\0\u01d6\0\u01d6"+
    "\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u01d6\0\u0843\0\u01d6\0\u0872"+
    "\0\u01d6\0\u08a1\0\u08d0\0\u01d6\0\u01d6\0\u01d6\0\u01d6\0\u08ff"+
    "\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u01d6\0\u01d6\0\u01d6"+
    "\0\u01d6\0\u01d6\0\u01d6\0\u0a19\0\u0a48\0\u0a77\0\u01d6\0\u0aa6"+
    "\0\u0ad5\0\u0b04\0\u01d6\0\u0b33\0\u01d6\0\u0b62\0\u0b91\0\u0bc0"+
    "\0\u01d6\0\u0bef\0\u0c1e\0\u01d6\0\u0c4d\0\u098c\0\u0c7c\0\u0cab"+
    "\0\u09ea\0\u0cda\0\u0d09\0\u0d38\0\u01d6\0\u01d6\0\u01d6\0\u01d6"+
    "\0\u0cab\0\u0d67\0\u0468\0\u0468\0\u0468";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\3\14\1\15\1\16\1\17\1\13\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\4\42\1\43\1\13\1\44\2\42\1\45\1\42\1\46"+
    "\2\42\1\47\1\42\1\50\1\51\1\52\2\13\2\53"+
    "\1\54\1\55\1\53\1\56\1\53\1\57\1\60\1\53"+
    "\1\61\24\53\1\62\12\53\1\63\1\53\1\61\4\53"+
    "\1\64\1\65\1\53\1\61\1\53\1\57\1\60\1\53"+
    "\1\66\24\53\1\67\12\53\1\70\1\53\1\61\2\53"+
    "\5\71\1\72\1\71\1\73\1\61\1\71\1\72\24\71"+
    "\1\74\12\71\1\61\1\71\1\75\1\76\1\71\2\77"+
    "\1\100\1\101\14\77\1\102\2\77\2\103\5\77\4\103"+
    "\3\77\11\103\4\77\1\103\2\104\1\105\1\106\53\104"+
    "\2\13\1\107\1\110\53\13\5\71\1\111\1\71\2\112"+
    "\1\71\1\111\24\71\1\74\12\71\1\61\1\71\1\61"+
    "\1\113\6\71\1\114\1\71\1\61\1\73\1\71\1\114"+
    "\24\71\1\74\12\71\1\61\1\71\1\75\1\76\6\71"+
    "\1\115\1\71\2\112\1\71\1\115\24\71\1\74\12\71"+
    "\1\61\1\71\1\61\1\113\1\71\60\0\3\14\102\0"+
    "\1\116\27\0\2\17\2\0\53\17\11\0\1\117\70\0"+
    "\1\33\1\34\53\0\1\120\52\0\1\121\4\0\1\122"+
    "\55\0\1\123\1\0\2\34\6\0\1\124\1\0\1\125"+
    "\4\0\1\124\35\0\1\123\1\0\2\34\6\0\1\124"+
    "\6\0\1\124\41\0\1\126\57\0\1\127\1\130\56\0"+
    "\1\131\1\132\55\0\1\133\47\0\1\42\2\0\2\42"+
    "\5\0\4\42\3\0\11\42\4\0\1\42\20\0\1\42"+
    "\2\0\2\42\5\0\4\42\3\0\1\134\10\42\4\0"+
    "\1\42\20\0\1\42\2\0\2\42\5\0\4\42\3\0"+
    "\10\42\1\135\4\0\1\42\20\0\1\42\2\0\2\42"+
    "\5\0\4\42\3\0\5\42\1\136\3\42\4\0\1\42"+
    "\53\0\1\137\3\0\2\53\2\0\1\53\1\0\1\53"+
    "\2\0\1\53\1\0\24\53\1\140\12\53\1\0\1\53"+
    "\1\0\2\53\2\0\1\54\126\0\1\141\56\0\1\142"+
    "\4\0\2\53\2\0\33\53\1\61\17\53\2\0\1\143"+
    "\1\144\55\0\1\64\56\0\1\145\1\146\53\0\5\71"+
    "\1\0\1\71\2\0\1\71\1\0\24\71\1\147\12\71"+
    "\1\0\1\71\1\0\2\71\52\0\1\150\4\0\2\71"+
    "\2\0\1\71\1\61\4\71\1\61\51\71\1\0\1\71"+
    "\2\0\1\71\1\0\24\71\1\147\12\71\1\0\1\71"+
    "\1\75\2\71\2\0\1\100\77\0\2\103\5\0\4\103"+
    "\3\0\11\103\4\0\1\103\2\0\1\151\1\152\17\0"+
    "\2\103\5\0\4\103\3\0\11\103\4\0\1\103\2\104"+
    "\2\0\53\104\2\0\1\105\56\0\1\107\126\0\1\153"+
    "\4\0\5\71\1\0\1\71\2\0\1\71\1\0\24\71"+
    "\1\147\12\71\1\0\1\71\1\61\2\71\21\0\1\154"+
    "\35\0\15\121\1\155\41\121\2\122\2\0\53\122\23\0"+
    "\2\156\6\0\1\157\6\0\1\157\32\0\1\160\1\0"+
    "\1\160\2\0\2\160\55\0\2\161\5\0\2\161\5\0"+
    "\3\161\33\0\1\42\2\0\2\42\5\0\4\42\3\0"+
    "\3\42\1\162\5\42\4\0\1\42\20\0\1\42\2\0"+
    "\2\42\5\0\4\42\3\0\3\42\1\163\5\42\4\0"+
    "\1\42\20\0\1\42\2\0\2\42\5\0\4\42\3\0"+
    "\10\42\1\164\4\0\1\42\2\53\2\0\33\53\1\0"+
    "\17\53\55\0\1\165\56\0\1\166\3\0\1\143\56\0"+
    "\1\145\54\0\2\71\2\0\1\71\1\0\4\71\1\0"+
    "\44\71\55\0\1\167\3\0\1\151\131\0\1\61\1\0"+
    "\15\121\1\155\4\121\1\170\34\121\16\0\1\171\1\0"+
    "\1\171\2\0\2\160\55\0\2\160\52\0\1\42\2\0"+
    "\2\42\5\0\4\42\3\0\6\42\1\172\2\42\4\0"+
    "\1\42\20\0\1\42\2\0\2\42\5\0\4\42\3\0"+
    "\3\42\1\173\5\42\4\0\1\42\20\0\1\42\2\0"+
    "\2\42\5\0\4\42\3\0\1\42\1\174\7\42\4\0"+
    "\1\42\20\0\1\42\2\0\2\42\5\0\4\42\3\0"+
    "\1\42\1\175\7\42\4\0\1\42";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3478];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\2\1\1\11\1\1\1\11\1\1\6\11"+
    "\11\1\1\11\1\1\2\11\3\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\1\1\1\11\3\1\1\11\2\1\1\11\1\1\2\11"+
    "\4\1\1\11\1\1\1\11\1\1\1\11\2\1\4\11"+
    "\1\0\2\1\1\0\1\1\1\0\6\11\3\1\1\11"+
    "\1\0\2\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\2\1\1\11\1\0\1\1\1\0\5\1\4\11"+
    "\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  // This parameters can be getted from capabilities
    private boolean withInterpolationLanguage;

    public _HCLLexer(EnumSet<HCLCapability> capabilities) {
      this((java.io.Reader)null);
      this.withInterpolationLanguage = capabilities.contains(HCLCapability.INTERPOLATION_LANGUAGE);
    }
    enum StringType {
      None, SingleQ, DoubleQ
    }
  // State data
    StringType stringType = StringType.None;
    int stringStart = -1;
    int hil = 0;
    int myHereDocMarkerLength = 0;
    int myHereDocMarkerWeakHash = 0;
    boolean myHereDocIndented = false;
    char myILStringChar;

    private void hil_inc() {
      hil++;
    }
    private int hil_dec() {
      assert hil > 0;
      hil--;
      return hil;
    }
    private void push_eol() {
      yypushback(getEOLLength());
    }
    private int getEOLLength() {
      if (yylength() == 0) return 0;
      char last = yycharat(yylength() - 1);
      if (last != '\r' && last != '\n') return 0;
      if ((yylength() > 1) && yycharat(yylength() - 2) == '\r') return 2;
      return 1;
    }
    private IElementType eods() {
      yybegin(YYINITIAL); stringType = StringType.None; zzStartRead = stringStart; return DOUBLE_QUOTED_STRING;
    }
    private IElementType eoss() {
      yybegin(YYINITIAL); stringType = StringType.None; zzStartRead = stringStart; return SINGLE_QUOTED_STRING;
    }
    private IElementType eoil() {
      hil=0; return stringType == StringType.SingleQ ? eoss(): eods();
    }
    private void setHereDocMarker(CharSequence marker) {
      myHereDocIndented = true; // Temprorarly set to true see #30
      int length = marker.length();
      String value = marker.toString();
      assert(length > 0);
      if (marker.charAt(0) == '-') {
        assert(length > 1);
        // Indented heredoc
        myHereDocIndented = true;
        length--;
        value = value.substring(1);
      }
      myHereDocMarkerLength = length & 0xFF;
      int hash = value.hashCode();
      myHereDocMarkerWeakHash = hash & 0xFFFF;
    }
    private void resetHereDocMarker() {
      myHereDocMarkerLength = 0;
      myHereDocMarkerWeakHash = 0;
    }
    private boolean isHereDocMarkerDefined() {
      return myHereDocMarkerLength != 0 && myHereDocMarkerWeakHash != 0;
    }
    private boolean isHereDocMarker(CharSequence input) {
      if (myHereDocIndented) input = StringUtil.trimLeading(input);
      if ((input.length() & 0xFF) != myHereDocMarkerLength) return false;
      int hash = input.toString().hashCode();
      return myHereDocMarkerWeakHash == (hash & 0xFFFF);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HCLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case D_STRING: {
              return eods();
            }  // fall though
            case 126: break;
            case S_STRING: {
              return eoss();
            }  // fall though
            case 127: break;
            case HIL_EXPRESSION: {
              return eoil();
            }  // fall though
            case 128: break;
            case S_HEREDOC_MARKER: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }  // fall though
            case 129: break;
            case S_HEREDOC_LINE: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }  // fall though
            case 130: break;
            case S_HEREDOC_LINE_END: {
              yybegin(YYINITIAL); return BAD_CHARACTER;
            }  // fall though
            case 131: break;
            case HIL_EXPRESSION_STRING: {
              return eoil();
            }  // fall though
            case 132: break;
            case TEMPLATE_EXPRESSION: {
              return eoil();
            }  // fall though
            case 133: break;
            case TEMPLATE_EXPRESSION_STRING: {
              return eoil();
            }  // fall though
            case 134: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 63: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 64: break;
          case 3:
            { return OP_NOT;
            }
          // fall through
          case 65: break;
          case 4:
            { stringType = StringType.DoubleQ; stringStart = zzStartRead; yybegin(D_STRING);
            }
          // fall through
          case 66: break;
          case 5:
            { return LINE_HASH_COMMENT;
            }
          // fall through
          case 67: break;
          case 6:
            { return OP_MOD;
            }
          // fall through
          case 68: break;
          case 7:
            { stringType = StringType.SingleQ; stringStart = zzStartRead; yybegin(S_STRING);
            }
          // fall through
          case 69: break;
          case 8:
            { return L_PAREN;
            }
          // fall through
          case 70: break;
          case 9:
            { return R_PAREN;
            }
          // fall through
          case 71: break;
          case 10:
            { return OP_MUL;
            }
          // fall through
          case 72: break;
          case 11:
            { return OP_PLUS;
            }
          // fall through
          case 73: break;
          case 12:
            { return COMMA;
            }
          // fall through
          case 74: break;
          case 13:
            { return OP_MINUS;
            }
          // fall through
          case 75: break;
          case 14:
            { return OP_DOT;
            }
          // fall through
          case 76: break;
          case 15:
            { return OP_DIV;
            }
          // fall through
          case 77: break;
          case 16:
            { return NUMBER;
            }
          // fall through
          case 78: break;
          case 17:
            { return OP_COLON;
            }
          // fall through
          case 79: break;
          case 18:
            { return OP_LESS;
            }
          // fall through
          case 80: break;
          case 19:
            { return EQUALS;
            }
          // fall through
          case 81: break;
          case 20:
            { return OP_GREATER;
            }
          // fall through
          case 82: break;
          case 21:
            { return OP_QUEST;
            }
          // fall through
          case 83: break;
          case 22:
            { return ID;
            }
          // fall through
          case 84: break;
          case 23:
            { return L_BRACKET;
            }
          // fall through
          case 85: break;
          case 24:
            { return R_BRACKET;
            }
          // fall through
          case 86: break;
          case 25:
            { return L_CURLY;
            }
          // fall through
          case 87: break;
          case 26:
            { return R_CURLY;
            }
          // fall through
          case 88: break;
          case 27:
            { 
            }
          // fall through
          case 89: break;
          case 28:
            { push_eol(); return eods();
            }
          // fall through
          case 90: break;
          case 29:
            { return eods();
            }
          // fall through
          case 91: break;
          case 30:
            { push_eol(); return eoss();
            }
          // fall through
          case 92: break;
          case 31:
            { return eoss();
            }
          // fall through
          case 93: break;
          case 32:
            { myILStringChar=yycharat(yylength() - 1); yybegin(HIL_EXPRESSION_STRING);
            }
          // fall through
          case 94: break;
          case 33:
            { if (hil_dec() <= 0) yybegin(stringType == StringType.SingleQ ? S_STRING: D_STRING);
            }
          // fall through
          case 95: break;
          case 34:
            { if (!isHereDocMarkerDefined()) {
      yybegin(YYINITIAL);
      return BAD_CHARACTER;
    }
    yybegin(S_HEREDOC_LINE);
    return BAD_CHARACTER;
            }
          // fall through
          case 96: break;
          case 35:
            { if (!isHereDocMarkerDefined()) {
      yybegin(YYINITIAL);
      return BAD_CHARACTER;
    }
    yybegin(S_HEREDOC_LINE);
    return WHITE_SPACE;
            }
          // fall through
          case 97: break;
          case 36:
            { yypushback(getEOLLength());
    setHereDocMarker(yytext());
    return HD_MARKER;
            }
          // fall through
          case 98: break;
          case 37:
            { int eol = getEOLLength();
    int len = yylength();
    int len_eff = len - eol;
    assert len_eff >= 0;
    if((len_eff & 0xFF) >= myHereDocMarkerLength
       && isHereDocMarker(yytext().subSequence(0, len_eff))) {
      // End of HereDoc
      yypushback(eol);
      yybegin(YYINITIAL);
      resetHereDocMarker();
      return HD_MARKER;
    } else {
      yybegin(S_HEREDOC_LINE_END);
      return HD_LINE;
    }
            }
          // fall through
          case 99: break;
          case 38:
            { yypushback(getEOLLength()); yybegin(S_HEREDOC_LINE_END); return HD_LINE;
            }
          // fall through
          case 100: break;
          case 39:
            { yybegin(S_HEREDOC_LINE); return HD_EOL;
            }
          // fall through
          case 101: break;
          case 40:
            { if(myILStringChar == yycharat(yylength() - 1)) {yybegin(HIL_EXPRESSION);}
            }
          // fall through
          case 102: break;
          case 41:
            { myILStringChar=yycharat(yylength() - 1); yybegin(TEMPLATE_EXPRESSION_STRING);
            }
          // fall through
          case 103: break;
          case 42:
            { if(myILStringChar == yycharat(yylength() - 1)) {yybegin(TEMPLATE_EXPRESSION);}
            }
          // fall through
          case 104: break;
          case 43:
            { return OP_NOT_EQUAL;
            }
          // fall through
          case 105: break;
          case 44:
            { return OP_AND_AND;
            }
          // fall through
          case 106: break;
          case 45:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 107: break;
          case 46:
            { return LINE_C_COMMENT;
            }
          // fall through
          case 108: break;
          case 47:
            { return COLON_COLON;
            }
          // fall through
          case 109: break;
          case 48:
            { yybegin(S_HEREDOC_MARKER); return HD_START;
            }
          // fall through
          case 110: break;
          case 49:
            { return OP_LESS_OR_EQUAL;
            }
          // fall through
          case 111: break;
          case 50:
            { return OP_EQUAL;
            }
          // fall through
          case 112: break;
          case 51:
            { return OP_MAPPING;
            }
          // fall through
          case 113: break;
          case 52:
            { return OP_GREATER_OR_EQUAL;
            }
          // fall through
          case 114: break;
          case 53:
            { return OP_OR_OR;
            }
          // fall through
          case 115: break;
          case 54:
            { if (withInterpolationLanguage) {hil_inc(); yybegin(HIL_EXPRESSION);}
            }
          // fall through
          case 116: break;
          case 55:
            { if (withInterpolationLanguage) {hil_inc(); yybegin(TEMPLATE_EXPRESSION);}
            }
          // fall through
          case 117: break;
          case 56:
            { push_eol(); yypushback(1); return eods();
            }
          // fall through
          case 118: break;
          case 57:
            { push_eol(); yypushback(1); return eoss();
            }
          // fall through
          case 119: break;
          case 58:
            { hil_inc();
            }
          // fall through
          case 120: break;
          case 59:
            { return OP_ELLIPSIS;
            }
          // fall through
          case 121: break;
          case 60:
            { return NULL;
            }
          // fall through
          case 122: break;
          case 61:
            { return TRUE;
            }
          // fall through
          case 123: break;
          case 62:
            { return FALSE;
            }
          // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
