// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
{
  elementTypeHolderClass = 'org.intellij.terraform.hil.HILElementTypes'
  tokenTypeClass = 'org.intellij.terraform.hil.HILTokenType'
  elementTypeClass = 'org.intellij.terraform.hil.HILElementType'
  parserClass = 'org.intellij.terraform.hil.HILParser'
  parserImports = ["static com.intellij.lang.WhitespacesBinders.*"]
  parserUtilClass = 'org.intellij.terraform.hil.psi.HILParserUtil'
  psiVisitorName = 'ILGeneratedVisitor'
  psiImplUtilClass = 'org.intellij.terraform.hil.psi.impl.HILPsiImplUtilJ'

  implements = 'org.intellij.terraform.hil.psi.ILExpression'
  extends = 'org.intellij.terraform.hil.psi.impl.ILExpressionBase'

  psiPackage = 'org.intellij.terraform.hil.psi'
  psiImplPackage = 'org.intellij.terraform.hil.psi.impl'

  extends("ILBinary.+Expression")=ILBinaryExpression

  extends(".*Expression|.*Variable|ILExpressionHolder")=ILExpression

  tokens = [
//    space = "regexp:\s+"
    TEMPLATE_START="regexp:\%\{\~?"
    INTERPOLATION_START='${'
    L_PAREN='('
    R_PAREN=')'
    L_BRACKET='['
    R_BRACKET=']'
    L_CURLY='{'
    R_CURLY='}'
    COMMA=','
    EQUALS='='
    DOLLAR='$'
    TILDA='~'

    OP_DOT='.'
    COLON_COLON='::'

    // Operators
    OP_PLUS='+'
    OP_MINUS='-'
    OP_MUL='*'
    OP_DIV='/'
    OP_MOD='%'

    // Logic operators
    // Unary
    OP_NOT='!'
    // Binary
    OP_EQUAL='=='
    OP_NOT_EQUAL='!='
    OP_LESS='<'
    OP_GREATER='>'
    OP_LESS_OR_EQUAL='<='
    OP_GREATER_OR_EQUAL='>='
    OP_AND_AND='&&'
    OP_OR_OR='||'
    // Ternary condition
    OP_COLON=':'
    OP_QUEST='?'

    OP_ELLIPSIS='...'

    DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"

    NUMBER='regexp:(0x)?(0|[1-9])\d*(\.\d+)?([eE][-+]?\d+)?'

    TRUE='true'
    FALSE='false'
    NULL='null'
    FOR_KEYWORD = "for"
    IN_KEYWORD = "in"
    ENDFOR_KEYWORD = "endfor"
    IF_KEYWORD = "if"
    ELSE_KEYWORD = "else"
    ENDIF_KEYWORD = "endif"

    ID="regexp:[a-zA-Z_][0-9a-zA-Z\-_*]*"
  ]

}

// This bnf based on SpringEL bnf. Thanks to IntelliJ team
private Root ::= <<isTemplatingSupported>> (<<parseDataLanguageToken>> | TemplateSegment)* | TemplateSegment
{
  consumeTokenMethod = 'smart'
}

private TemplateSegment ::= ILTemplateHolder | ILExpressionHolder | BadTag

// Expressions
// Update HILElementType.IL_EXPRESSIONS on change
ILExpression ::=
    ILParenthesizedExpression
  | ILExpressionHolder

  | ILConditionalExpression

  | ILBinaryOrExpression
  | ILBinaryAndExpression

  | ILBinaryEqualityExpression
  | ILBinaryRelationalExpression

  | ILBinaryAdditionExpression
  | ILBinaryMultiplyExpression

  | ILMethodCallExpression
  | ILDefinedMethodExpression
  | ILUnaryExpression
  | ILSelectExpression
  | ILIndexSelectExpression
  | ILCollectionValue
  | ILVariable
  | ILLiteralExpression
{
  name="expression"
  implements=[
    "org.intellij.terraform.hcl.psi.common.BaseExpression"
  ]
  methods =[
  ]
}

ILSimpleExpression ::=
    ILParenthesizedExpression
  | ILConditionalExpression

  | ILBinaryOrExpression
  | ILBinaryAndExpression

  | ILBinaryEqualityExpression
  | ILBinaryRelationalExpression

  | ILBinaryAdditionExpression
  | ILBinaryMultiplyExpression

  | ILMethodCallExpression
  | ILUnaryExpression
  | ILSelectExpression
  | ILIndexSelectExpression
  | ILCollectionValue
  | ILVariable
  | ILLiteralExpression
{
  name="expression"
  implements=[
    "org.intellij.terraform.hcl.psi.common.BaseExpression"
  ]
  methods =[
  ]
}

ILTemplateHolder ::= ILTemplateForBlockExpression | ILTemplateIfBlockExpression

BadTag ::= (TEMPLATE_START|INTERPOLATION_START) <<templateBlockRecoveryUntil 'R_CURLY'>> R_CURLY

ILTemplateBlockBody ::= (<<isTemplatingSupported>> <<parseDataLanguageToken>> | ILExpression | ILTemplateHolder | ILExpressionHolder | BadTag)+

ILTemplateIfBlockExpression ::= IfCondition <<expectIfEnd>> ILTemplateBlockBody IlElseBranch? <<removeIfEndExpectation>> EndIf {
  pin = 1
}
IfCondition ::= TEMPLATE_START IF_KEYWORD ILExpression R_CURLY {
  pin = 2
  recoverWhile = notControlStructureSymbol
}
private IlElseBranch ::= ElseCondition ILTemplateBlockBody
ElseCondition ::= TEMPLATE_START ELSE_KEYWORD R_CURLY {
  pin = 2
  recoverWhile = notControlStructureSymbol
}
EndIf ::= TEMPLATE_START ENDIF_KEYWORD R_CURLY {
  pin = 2
  recoverWhile = notControlStructureSymbol
}

ILTemplateForBlockExpression ::= ForCondition <<expectForEnd>> ILTemplateBlockBody? <<removeForEndExpectation>> EndFor {
  methods = [
    getLoopVariables returns = "org.intellij.terraform.hil.psi.ForVariable"
  ]
}
ForCondition ::= TEMPLATE_START FOR_KEYWORD ForVariable ("," ForVariable)* IN_KEYWORD ILSimpleExpression R_CURLY {
  pin = 2
  recoverWhile = notControlStructureSymbol
}
EndFor ::= TEMPLATE_START ENDFOR_KEYWORD R_CURLY {
  pin = 2
  recoverWhile = notControlStructureSymbol
}
ForVariable ::= ID {
  name = "ForVariable"
}

ILExpressionHolder ::= INTERPOLATION_START ILExpression '}'
{
  methods = [
    ILExpression=""
    expression="ILExpression"
  ]
  implements="org.intellij.terraform.hcl.psi.common.ParenthesizedExpression<org.intellij.terraform.hil.psi.ILExpression>"
  recoverWhile = notControlStructureSymbol
}

ILParenthesizedExpression ::= '(' ILExpression ')'
{
  methods = [
    ILExpression=""
    expression="ILExpression"
  ]
  implements="org.intellij.terraform.hcl.psi.common.ParenthesizedExpression<org.intellij.terraform.hil.psi.ILExpression>"
}

ILUnaryExpression ::= UnaryOp ILExpression
{
  methods = [
    operand="ILExpression"
    getOperationSign
  ]
  implements="org.intellij.terraform.hcl.psi.common.UnaryExpression<org.intellij.terraform.hil.psi.ILExpression>"
}

ILConditionalExpression ::= ILExpression ('?' ILExpression (':' ILExpression))
{
  pin(".*")="'\?'|'\:'"
  methods=[
    ILExpression="" // Magic hack
    condition="ILExpression[0]"
    then="ILExpression[1]"
    otherwise="ILExpression[2]"
  ]
  implements="org.intellij.terraform.hcl.psi.common.ConditionalExpression<org.intellij.terraform.hil.psi.ILExpression>"
}

fake ILBinaryExpression ::= ILExpression+ {
  methods = [
    ILExpression="" // Magic hack
    LeftOperand="ILExpression[0]"
    RightOperand="ILExpression[1]"
    getOperationSign
  ]
  implements="org.intellij.terraform.hcl.psi.common.BinaryExpression<org.intellij.terraform.hil.psi.ILExpression>"
}
ILBinaryRelationalExpression ::= ILExpression relationalOp ILExpression
ILBinaryEqualityExpression ::= ILExpression equalityOp ILExpression

ILBinaryAndExpression ::= ILExpression andOp ILExpression
ILBinaryOrExpression ::= ILExpression orOp ILExpression

ILBinaryAdditionExpression ::= ILExpression AddOp ILExpression
ILBinaryMultiplyExpression ::= ILExpression MulOp ILExpression
ILMethodCallExpression ::= ILExpression ILParameterList
{
  methods=[
    Callee="ILExpression"
    ParameterList="ILParameterList"
    getQualifier
    getMethod
  ]
  implements="org.intellij.terraform.hcl.psi.common.MethodCallExpression<org.intellij.terraform.hil.psi.ILExpression>"
}

ILDefinedMethodExpression ::= "provider" '::' identifier '::' ILMethodCallExpression

ILLiteralExpression ::= literal /*| identifier*/ | number | 'true' | 'false' | 'null' {
  name="Literal"
  mixin="org.intellij.terraform.hil.psi.impl.ILExpressionWithReference"
  methods=[
    getUnquotedText
  ]
  implements="org.intellij.terraform.hcl.psi.common.LiteralExpression"
}

ILParameterList ::= '(' ILParameterListElement* '...'? ')' {
  pin(".*")=1
  methods=[
    ILExpression=""
    Elements="ILExpression"
  ]
  implements="org.intellij.terraform.hcl.psi.common.ParameterList<org.intellij.terraform.hil.psi.ILExpression>"
}

private ILParameterListElement ::=  (ILExpression) (','|&')')? {
  pin=1
  recoverWhile = not_paren_or_next_value
}
private not_paren_or_next_value ::= !(')'|'...'|ILExpression)

ILSelectExpression ::= ILExpression OP_DOT ILVariable {
  methods=[
    ILExpression=""
    from="ILExpression[0]"
    field="ILExpression[1]"
    getReference
    getReferences
  ]
  implements="org.intellij.terraform.hcl.psi.common.SelectExpression<org.intellij.terraform.hil.psi.ILExpression>"
}

ILIndexSelectExpression ::= ILExpression ('[' ILExpression ']') {
  pin(".*")="'\['"
  extends = ILSelectExpression
  implements="org.intellij.terraform.hcl.psi.common.IndexSelectExpression<org.intellij.terraform.hil.psi.ILExpression>"
}

ILCollectionValue ::= ILArray | ILObject {
  extends = ILExpression
}

ILArray ::= '[' array_element* ']'  {
  methods=[
    Elements="ILExpression"
  ]
  pin=1
  implements="org.intellij.terraform.hcl.psi.common.CollectionExpression<org.intellij.terraform.hil.psi.ILExpression>"
}

private array_element ::= (ILExpression) (','|&']') {
  pin=1
  recoverWhile = notBracketOrNextValue
}

ILObject ::= '{' object_element2* '}' {
  pin=1
  methods=[
    PropertyList="ILProperty"
    getElements
  ]
  implements="org.intellij.terraform.hcl.psi.common.CollectionExpression<org.intellij.terraform.hil.psi.ILExpression>"
}

private object_element2 ::= (ObjectElement) (','|&'}')? {
  pin=1
  recoverWhile = notBraceOrNextValue
}

private ObjectElement ::= ILExpression ILProperty (','|&'}')?
{
  pin=2
}

left ILProperty ::= ('='|':') ILExpression {
  methods=[
    getName
    getNameElement
    getValue
    ILExpression=""
  ]
  implements=[
    'org.intellij.terraform.hil.psi.ILExpression'
    'com.intellij.psi.PsiNameIdentifierOwner'
  ]
  mixin="org.intellij.terraform.hil.psi.impl.ILPropertyMixin"
  pin('.*')=1
}

ILVariable ::= identifier | '*' {
  name="Identifier"
  mixin="org.intellij.terraform.hil.psi.impl.ILVariableMixin"
  implements="org.intellij.terraform.hcl.psi.common.Identifier"
}

// Operators
private MulOp ::= OP_MUL | OP_DIV | OP_MOD
{
  name="operator"
}
private AddOp ::= OP_PLUS | OP_MINUS
{
  name="operator"
}
private UnaryOp ::= AddOp | OP_NOT //Not sure whether unary plus should be supported
{
  name="operator"
}
private orOp ::= OP_OR_OR
{
  name="operator"
}
private andOp ::= OP_AND_AND
{
  name="operator"
}
private equalityOp ::= OP_EQUAL
                    | OP_NOT_EQUAL
{
  name="operator"
}
private relationalOp ::= OP_LESS
                       | OP_GREATER
                       | OP_LESS_OR_EQUAL
                       | OP_GREATER_OR_EQUAL
{
  name="operator"
}

// Primitives
private literal ::= DOUBLE_QUOTED_STRING
private identifier ::= ID
private number ::= NUMBER

// Recoveries
private notBracketOrNextValue ::= !(']'|ILExpression)
private notBraceOrNextValue ::= !('}'|ObjectElement)
private notControlStructureSymbol ::= <<isTemplatingSupported>> !(L_CURLY|INTERPOLATION_START|TEMPLATE_START|<<isDataLanguageToken>>)