// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: HILLexer.flex

package org.intellij.terraform.hil;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.intellij.terraform.hil.HILElementTypes.*;

@SuppressWarnings({"ALL"})

public class _HILLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int INTERPOLATION = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
    0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3"+
    "\1\4\1\0\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\11\22"+
    "\1\23\1\0\1\24\1\25\1\26\1\27\1\0\4\30"+
    "\1\31\25\30\1\32\1\33\1\34\1\0\1\30\1\0"+
    "\1\35\2\30\1\36\1\37\1\40\2\30\1\41\2\30"+
    "\1\42\1\30\1\43\1\44\2\30\1\45\1\46\1\47"+
    "\1\50\2\30\1\51\2\30\1\52\1\53\1\54\1\55"+
    "\6\0\1\1\32\0\1\1\u01df\0\1\1\177\0\13\1"+
    "\35\0\2\1\5\0\1\1\57\0\1\1\240\0\1\1"+
    "\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\5\24\1\27\1\1\1\30\1\1\1\31\1\32"+
    "\3\31\1\32\3\31\1\33\1\31\1\34\1\35\1\36"+
    "\1\37\2\0\3\24\1\40\1\41\1\42\1\43\4\24"+
    "\1\44\1\45\2\24\1\46\1\0\1\47\1\50\1\35"+
    "\1\36\1\51\1\16\1\0\1\16\3\24\1\52\2\24"+
    "\1\47\1\50\1\0\1\16\1\53\3\24\1\54\1\55"+
    "\1\24\1\56\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[99];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\212\0\270\0\212\0\346"+
    "\0\u0114\0\u0142\0\212\0\212\0\212\0\212\0\212\0\212"+
    "\0\u0170\0\212\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284"+
    "\0\212\0\u02b2\0\212\0\212\0\u02e0\0\u030e\0\u033c\0\u036a"+
    "\0\u0398\0\212\0\u03c6\0\212\0\u03f4\0\u0422\0\212\0\u0450"+
    "\0\u047e\0\212\0\u04ac\0\u04da\0\u0508\0\u0536\0\212\0\u0564"+
    "\0\212\0\u0592\0\u05c0\0\212\0\u05ee\0\u061c\0\u064a\0\u0678"+
    "\0\u06a6\0\212\0\212\0\212\0\212\0\u06d4\0\u0702\0\u0730"+
    "\0\u075e\0\u02b2\0\u02b2\0\u078c\0\u07ba\0\212\0\u07e8\0\u0816"+
    "\0\u0844\0\212\0\212\0\212\0\u0872\0\u08a0\0\u08ce\0\u08fc"+
    "\0\u092a\0\u0958\0\u02b2\0\u0986\0\u09b4\0\212\0\212\0\u09e2"+
    "\0\u08a0\0\u02b2\0\u0a10\0\u0a3e\0\u0a6c\0\u02b2\0\u02b2\0\u0a9a"+
    "\0\u02b2\0\u02b2\0\u02b2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[99];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\2\32"+
    "\1\33\1\4\1\34\2\32\1\35\1\36\1\37\1\32"+
    "\1\40\3\32\1\41\2\32\1\42\1\43\1\44\1\45"+
    "\4\46\1\47\1\50\1\51\1\46\1\52\22\46\1\53"+
    "\16\46\1\52\1\46\1\52\1\46\4\54\1\52\1\55"+
    "\2\54\1\52\22\54\1\56\16\54\1\52\1\54\1\57"+
    "\1\60\103\0\1\61\102\0\1\62\55\0\1\63\12\0"+
    "\1\64\65\0\1\65\55\0\1\66\1\0\2\24\5\0"+
    "\1\67\1\70\3\0\2\67\1\70\11\67\1\71\23\0"+
    "\1\66\1\0\2\24\5\0\1\67\1\70\3\0\2\67"+
    "\1\70\12\67\27\0\1\72\57\0\1\73\55\0\1\74"+
    "\55\0\1\75\43\0\1\32\2\0\1\32\2\0\2\32"+
    "\5\0\2\32\3\0\15\32\17\0\1\32\2\0\1\32"+
    "\2\0\2\32\5\0\2\32\3\0\5\32\1\76\1\77"+
    "\6\32\17\0\1\32\2\0\1\32\2\0\2\32\5\0"+
    "\2\32\3\0\1\100\6\32\1\101\5\32\17\0\1\32"+
    "\2\0\1\32\2\0\2\32\5\0\2\32\3\0\3\32"+
    "\1\102\2\32\1\103\6\32\17\0\1\32\2\0\1\32"+
    "\2\0\2\32\5\0\2\32\3\0\13\32\1\104\1\32"+
    "\17\0\1\32\2\0\1\32\2\0\2\32\5\0\2\32"+
    "\3\0\10\32\1\105\4\32\57\0\1\106\56\0\1\44"+
    "\1\0\4\46\2\0\2\46\1\0\22\46\1\107\16\46"+
    "\1\0\1\46\1\0\1\46\52\0\1\110\3\0\4\46"+
    "\2\0\2\46\1\0\22\46\1\107\16\46\1\110\1\46"+
    "\1\0\3\46\1\0\30\46\1\52\22\46\4\54\2\0"+
    "\2\54\1\0\22\54\1\56\16\54\1\0\1\54\1\0"+
    "\1\54\52\0\1\111\3\0\33\54\1\56\26\54\2\0"+
    "\2\54\1\0\22\54\1\56\16\54\1\0\1\54\1\57"+
    "\1\54\55\0\1\112\55\0\1\113\17\0\1\114\57\0"+
    "\2\115\54\0\2\67\5\0\2\67\3\0\15\67\20\0"+
    "\1\116\1\0\1\116\2\0\2\117\5\0\2\67\3\0"+
    "\15\67\25\0\2\24\5\0\2\67\3\0\15\67\17\0"+
    "\1\32\2\0\1\32\2\0\2\32\5\0\2\32\3\0"+
    "\11\32\1\120\3\32\17\0\1\32\2\0\1\32\2\0"+
    "\2\32\5\0\2\32\3\0\1\32\1\121\13\32\17\0"+
    "\1\32\2\0\1\32\2\0\2\32\5\0\2\32\3\0"+
    "\5\32\1\122\7\32\17\0\1\32\2\0\1\32\2\0"+
    "\2\32\5\0\2\32\3\0\10\32\1\123\4\32\17\0"+
    "\1\32\2\0\1\32\2\0\2\32\5\0\2\32\3\0"+
    "\5\32\1\124\7\32\17\0\1\32\2\0\1\32\2\0"+
    "\2\32\5\0\2\32\3\0\13\32\1\125\1\32\4\0"+
    "\2\46\1\0\30\46\1\0\22\46\55\0\1\126\55\0"+
    "\1\127\21\0\2\115\6\0\1\130\5\0\1\130\37\0"+
    "\2\131\54\0\2\117\5\0\2\67\3\0\15\67\17\0"+
    "\1\32\2\0\1\32\2\0\2\32\5\0\2\32\3\0"+
    "\2\32\1\132\12\32\17\0\1\32\2\0\1\32\2\0"+
    "\2\32\5\0\2\32\3\0\3\32\1\133\1\134\10\32"+
    "\17\0\1\32\2\0\1\32\2\0\2\32\5\0\2\32"+
    "\3\0\11\32\1\135\3\32\17\0\1\32\2\0\1\32"+
    "\2\0\2\32\5\0\2\32\3\0\5\32\1\136\7\32"+
    "\17\0\1\32\2\0\1\32\2\0\2\32\5\0\2\32"+
    "\3\0\2\32\1\137\12\32\20\0\1\116\1\0\1\116"+
    "\2\0\2\131\46\0\1\32\2\0\1\32\2\0\2\32"+
    "\5\0\2\32\3\0\7\32\1\140\5\32\17\0\1\32"+
    "\2\0\1\32\2\0\2\32\5\0\2\32\3\0\3\32"+
    "\1\141\11\32\17\0\1\32\2\0\1\32\2\0\2\32"+
    "\5\0\2\32\3\0\2\32\1\142\12\32\17\0\1\32"+
    "\2\0\1\32\2\0\2\32\5\0\2\32\3\0\10\32"+
    "\1\143\4\32\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2760];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\1\1\1\11\3\1\6\11\1\1\1\11"+
    "\6\1\1\11\1\1\2\11\5\1\1\11\1\1\1\11"+
    "\2\1\1\11\2\1\1\11\4\1\1\11\1\1\1\11"+
    "\2\1\1\11\2\0\3\1\4\11\10\1\1\11\1\0"+
    "\2\1\3\11\1\1\1\0\7\1\2\11\1\0\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[99];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _HILLexer() {
    this((java.io.Reader)null);
  }
  int stringStart = -1;
  int hil = 0;
  private void hil_inc() {
    hil++;
  }
  private int hil_dec() {
    assert hil > 0;
    hil--;
    return hil;
  }
  private IElementType eods() {
    yybegin(YYINITIAL); zzStartRead = stringStart; return DOUBLE_QUOTED_STRING;
  }
  private IElementType eoil() {
    hil=0; return eods();
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HILLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
          case STRING: {
            return eods();
          }  // fall though
          case 100: break;
          case INTERPOLATION: {
            return eoil();
          }  // fall though
          case 101: break;
          default:
            return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
          { return BAD_CHARACTER;
          }
          // fall through
          case 49: break;
          case 2:
          { return WHITE_SPACE;
          }
          // fall through
          case 50: break;
          case 3:
          { return OP_NOT;
          }
          // fall through
          case 51: break;
          case 4:
          { stringStart = zzStartRead; yybegin(STRING);
          }
          // fall through
          case 52: break;
          case 5:
          { return OP_MOD;
          }
          // fall through
          case 53: break;
          case 6:
          { return L_PAREN;
          }
          // fall through
          case 54: break;
          case 7:
          { return R_PAREN;
          }
          // fall through
          case 55: break;
          case 8:
          { return OP_MUL;
          }
          // fall through
          case 56: break;
          case 9:
          { return OP_PLUS;
          }
          // fall through
          case 57: break;
          case 10:
          { return COMMA;
          }
          // fall through
          case 58: break;
          case 11:
          { return OP_MINUS;
          }
          // fall through
          case 59: break;
          case 12:
          { return OP_DOT;
          }
          // fall through
          case 60: break;
          case 13:
          { return OP_DIV;
          }
          // fall through
          case 61: break;
          case 14:
          { return NUMBER;
          }
          // fall through
          case 62: break;
          case 15:
          { return OP_COLON;
          }
          // fall through
          case 63: break;
          case 16:
          { return OP_LESS;
          }
          // fall through
          case 64: break;
          case 17:
          { return EQUALS;
          }
          // fall through
          case 65: break;
          case 18:
          { return OP_GREATER;
          }
          // fall through
          case 66: break;
          case 19:
          { return OP_QUEST;
          }
          // fall through
          case 67: break;
          case 20:
          { return ID;
          }
          // fall through
          case 68: break;
          case 21:
          { return L_BRACKET;
          }
          // fall through
          case 69: break;
          case 22:
          { return R_BRACKET;
          }
          // fall through
          case 70: break;
          case 23:
          { return L_CURLY;
          }
          // fall through
          case 71: break;
          case 24:
          { return R_CURLY;
          }
          // fall through
          case 72: break;
          case 25:
          {
          }
          // fall through
          case 73: break;
          case 26:
          { return eods();
          }
          // fall through
          case 74: break;
          case 27:
          { if (hil_dec() <= 0) yybegin(STRING);
          }
          // fall through
          case 75: break;
          case 28:
          { return OP_NOT_EQUAL;
          }
          // fall through
          case 76: break;
          case 29:
          { return INTERPOLATION_START;
          }
          // fall through
          case 77: break;
          case 30:
          { return TEMPLATE_START;
          }
          // fall through
          case 78: break;
          case 31:
          { return OP_AND_AND;
          }
          // fall through
          case 79: break;
          case 32:
          { return COLON_COLON;
          }
          // fall through
          case 80: break;
          case 33:
          { return OP_LESS_OR_EQUAL;
          }
          // fall through
          case 81: break;
          case 34:
          { return OP_EQUAL;
          }
          // fall through
          case 82: break;
          case 35:
          { return OP_GREATER_OR_EQUAL;
          }
          // fall through
          case 83: break;
          case 36:
          { return IF_KEYWORD;
          }
          // fall through
          case 84: break;
          case 37:
          { return IN_KEYWORD;
          }
          // fall through
          case 85: break;
          case 38:
          { return OP_OR_OR;
          }
          // fall through
          case 86: break;
          case 39:
          { hil_inc(); yybegin(INTERPOLATION);
          }
          // fall through
          case 87: break;
          case 40:
          { hil_inc();
          }
          // fall through
          case 88: break;
          case 41:
          { return OP_ELLIPSIS;
          }
          // fall through
          case 89: break;
          case 42:
          { return FOR_KEYWORD;
          }
          // fall through
          case 90: break;
          case 43:
          { return ELSE_KEYWORD;
          }
          // fall through
          case 91: break;
          case 44:
          { return NULL;
          }
          // fall through
          case 92: break;
          case 45:
          { return TRUE;
          }
          // fall through
          case 93: break;
          case 46:
          { return ENDIF_KEYWORD;
          }
          // fall through
          case 94: break;
          case 47:
          { return FALSE;
          }
          // fall through
          case 95: break;
          case 48:
          { return ENDFOR_KEYWORD;
          }
          // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
