// Copyright 2000-2025 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.
import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

plugins {
  id 'java'
  id 'application'
  id 'org.jetbrains.kotlin.jvm' version '1.9.23'
  id 'com.bmuschko.docker-remote-api' version '9.4.0'
}

group 'com.intellij'
version '1.0-SNAPSHOT'

repositories {
  mavenCentral()
}

apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'maven-publish'

def repositoryUrl = System.getenv('REPO_URL') ?: "https://packages.jetbrains.team/maven/p/ij/intellij-dependencies"
def repoUsername = System.getenv('REPO_USERNAME') ?: 'spaceUsername'
def repoPassword = System.getenv('REPO_PASSWORD') ?: 'spacePassword'

def artifactGroup = System.getenv('ARTIFACT_GROUP') ?: 'org.intellij.plugins.hcl.terraform'
def artifactVersion = System.getenv('ARTIFACT_VERSION') ?: '2025.3'
def artifactName = "terraform-metadata"

def crawlerContainerName = "terraform_metadata_crawler"
def metadataPath = System.getenv('METADATA_PATH') ?: "${project.buildDir}/metadata/lib"
def logPath = System.getenv('LOG_PATH') ?: "${project.buildDir}/metadata/log"

dependencies {
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4.2'
  implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
  implementation 'com.bertramlabs.plugins:hcl4j:0.9.2'
  implementation 'org.slf4j:slf4j-api:1.7.36'
  implementation 'ch.qos.logback:logback-core:1.4.14'
  implementation 'ch.qos.logback:logback-classic:1.4.14'
}

application {
  applicationName = 'ls-schemas-extractor'
  getMainClass().set('TerraformProvidersMetadataBuilder')
}

clean {
  delete 'build'
  delete 'plugins-meta'
  delete 'terraform-gen-dir'
  delete 'docker/terraform-metadata'
}

distZip {
  archiveFileName = "${application.applicationName}.zip"
}

tasks.register('copyModelDir', Copy) {
  from 'terraform'
  includeEmptyDirs true
  into 'docker/terraform-metadata'
}

tasks.register('copySchemasExtractor', Copy) {
  dependsOn distZip
  from zipTree('build/distributions/ls-schemas-extractor.zip')
  include '**/*'
  into 'docker/terraform-metadata'
}

tasks.register('copyAll') {
  dependsOn clean, copySchemasExtractor, copyModelDir
}

tasks.register('buildDockerImage', DockerBuildImage) {
  dependsOn copyAll
  inputDir = file('docker')
  version = artifactVersion
  images.add("intellij.terraform/metadata-crawler:$artifactVersion")
}

tasks.register('createContainer', DockerCreateContainer) {
  doFirst {
    new File("$metadataPath").mkdirs()
    new File("$logPath").mkdirs()
  }
  dependsOn buildDockerImage
  targetImageId buildDockerImage.imageId
  containerName = "$crawlerContainerName"
  envVars.put('TERRAFORM_REGISTRY_HOST', System.getenv('TERRAFORM_REGISTRY_HOST') ?: 'https://registry.terraform.io')
  envVars.put('DOWNLOADS_LIMIT_FOR_PROVIDER', System.getenv('DOWNLOADS_LIMIT_FOR_PROVIDER') ?: '20000')
  envVars.put('CLEAN_DOWNLOADED_DATA', System.getenv('CLEAN_DOWNLOADED_DATA') ?: 'true')
  hostConfig.getBinds().put("$metadataPath", "/opt/terraform-metadata/build/libs")
  hostConfig.getBinds().put("$logPath", "/opt/terraform-metadata/plugins-meta")
  hostConfig.memory = 4096L * 1024 * 1024
  cmd = ["jar"]
}

tasks.register('startContainer', DockerStartContainer) {
  targetContainerId("$crawlerContainerName")
}

tasks.register('waitForMetadataBuild', DockerWaitContainer) {
  targetContainerId("$crawlerContainerName")
}

publishing {
  publications {
    metadata(MavenPublication) {
      groupId = artifactGroup
      artifactId = artifactName
      version = artifactVersion
      artifact("${metadataPath}/${artifactName}.jar")
    }
  }
  repositories {
    maven {
      url repositoryUrl
      allowInsecureProtocol true
      credentials {
        username = repoUsername
        password = repoPassword
      }
    }
  }
}

tasks.named('publishMetadataPublicationToMavenRepository') {
  dependsOn waitForMetadataBuild
}

tasks.register('stopContainer', DockerStopContainer) {
  targetContainerId("$crawlerContainerName")
}

tasks.register('removeContainer', DockerRemoveContainer) {
  targetContainerId("$crawlerContainerName")
}