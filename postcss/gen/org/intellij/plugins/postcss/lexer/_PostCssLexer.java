// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: postcss.flex

 /* It's an automatically generated code. Do not modify it. */
package org.intellij.plugins.postcss.lexer;
import com.intellij.psi.css.impl.*;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import com.intellij.openapi.util.text.StringUtil;
import org.intellij.plugins.postcss.lexer.PostCssTokenTypes;


public class _PostCssLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CSS_URI = 2;
  public static final int CSS_FUNCTION = 4;
  public static final int CSS_FUNCTION_MINUS_N = 6;
  public static final int CSS_COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\10\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\51\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\51"+
    "\1\75\1\40\1\41\1\42\1\43\1\76\1\45\1\46"+
    "\1\47\1\77\1\51\1\52\1\53\1\54\1\100\1\101"+
    "\1\102\1\51\1\103\1\104\1\62\1\105\1\64\1\65"+
    "\1\106\1\67\1\70\1\107\1\110\1\111\1\112\1\0"+
    "\5\113\1\114\u01a2\113\2\114\326\113\u0100\114";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\0\1\2\1\3\1\2\1\4\1\5"+
    "\1\2\1\6\1\7\1\4\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\2\3\26\1\27\1\2\1\30\1\31"+
    "\2\26\1\32\1\33\1\34\1\35\1\1\1\2\1\1"+
    "\1\2\1\36\3\1\1\0\1\37\1\0\1\15\1\40"+
    "\2\41\1\0\1\42\1\0\1\4\1\0\1\43\4\0"+
    "\1\44\1\45\2\0\1\46\1\26\1\0\1\47\1\20"+
    "\1\50\1\0\1\51\4\0\1\52\1\53\2\0\17\54"+
    "\2\0\1\55\1\0\1\26\1\0\1\26\2\56\1\57"+
    "\1\60\1\26\1\61\1\62\2\1\1\63\1\0\1\56"+
    "\1\0\1\4\2\0\1\26\1\0\1\45\1\0\1\4"+
    "\1\64\1\65\1\0\1\66\31\54\1\0\2\67\1\26"+
    "\2\70\2\26\1\1\1\71\2\0\2\72\1\45\1\73"+
    "\32\54\1\67\1\26\1\0\2\70\1\74\2\26\2\1"+
    "\1\0\1\72\21\54\1\75\1\76\6\54\1\26\3\70"+
    "\2\26\2\1\1\0\14\54\1\77\1\54\1\100\2\54"+
    "\1\101\4\54\1\102\1\54\1\26\3\70\2\26\1\71"+
    "\1\1\1\0\11\54\1\103\5\54\1\104\5\54\3\70"+
    "\2\26\1\1\1\0\2\54\1\105\21\54\3\70\2\26"+
    "\1\1\1\0\5\54\1\106\5\54\1\107\2\54\1\110"+
    "\1\54\1\107\1\111\1\70\2\26\1\1\1\112\1\54"+
    "\1\113\3\54\1\114\1\54\1\115\2\54\1\116\3\54"+
    "\1\26\10\54\1\117\7\54\1\120\2\54\1\104\1\54"+
    "\1\121\4\54\1\122\4\54\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u02b5\0\u0302\0\u0181\0\u0181\0\u034f\0\u0181\0\u0181"+
    "\0\u039c\0\u0181\0\u0181\0\u03e9\0\u0436\0\u0483\0\u04d0\0\u0181"+
    "\0\u0181\0\u051d\0\u0181\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e"+
    "\0\u0181\0\u06eb\0\u0181\0\u0738\0\u0785\0\u07d2\0\u0181\0\u081f"+
    "\0\u0181\0\u086c\0\u08b9\0\u0268\0\u0906\0\u034f\0\u0181\0\u0953"+
    "\0\u09a0\0\u09ed\0\u0a3a\0\u0a87\0\u0ad4\0\u0181\0\u0181\0\u0181"+
    "\0\u0b21\0\u0b6e\0\u0181\0\u0bbb\0\u0181\0\u0c08\0\u0c55\0\u0ca2"+
    "\0\u0cef\0\u0d3c\0\u0d89\0\u0181\0\u0dd6\0\u0e23\0\u0e70\0\u0181"+
    "\0\u0ebd\0\u0f0a\0\u0604\0\u0436\0\u0181\0\u0f57\0\u0fa4\0\u0ff1"+
    "\0\u103e\0\u0436\0\u108b\0\u0181\0\u0181\0\u10d8\0\u1125\0\u1172"+
    "\0\u11bf\0\u120c\0\u1259\0\u12a6\0\u12f3\0\u1340\0\u138d\0\u13da"+
    "\0\u1427\0\u1474\0\u14c1\0\u150e\0\u155b\0\u15a8\0\u15f5\0\u1642"+
    "\0\u0181\0\u168f\0\u16dc\0\u1729\0\u1776\0\u17c3\0\u0604\0\u0181"+
    "\0\u0181\0\u1810\0\u0181\0\u0181\0\u185d\0\u18aa\0\u0181\0\u18f7"+
    "\0\u0181\0\u1944\0\u1991\0\u19de\0\u1a2b\0\u0181\0\u1a78\0\u1ac5"+
    "\0\u1b12\0\u1b5f\0\u0181\0\u0181\0\u1bac\0\u0181\0\u1bf9\0\u1c46"+
    "\0\u1c93\0\u1ce0\0\u1d2d\0\u1d7a\0\u1dc7\0\u1e14\0\u1e61\0\u1eae"+
    "\0\u1efb\0\u1f48\0\u1f95\0\u1fe2\0\u202f\0\u207c\0\u20c9\0\u2116"+
    "\0\u2163\0\u21b0\0\u21fd\0\u224a\0\u2297\0\u22e4\0\u2331\0\u237e"+
    "\0\u23cb\0\u0604\0\u2418\0\u2465\0\u24b2\0\u24ff\0\u254c\0\u2599"+
    "\0\u25e6\0\u2633\0\u2680\0\u26cd\0\u0c55\0\u0181\0\u0181\0\u271a"+
    "\0\u2767\0\u27b4\0\u2801\0\u284e\0\u289b\0\u28e8\0\u2935\0\u2982"+
    "\0\u29cf\0\u2a1c\0\u2a69\0\u2ab6\0\u2b03\0\u2b50\0\u2b9d\0\u2bea"+
    "\0\u2c37\0\u2c84\0\u2cd1\0\u2d1e\0\u2d6b\0\u2db8\0\u2e05\0\u2e52"+
    "\0\u2e9f\0\u0181\0\u2eec\0\u2f39\0\u2f86\0\u2fd3\0\u0181\0\u3020"+
    "\0\u306d\0\u30ba\0\u3107\0\u3154\0\u0181\0\u31a1\0\u31ee\0\u323b"+
    "\0\u3288\0\u32d5\0\u3322\0\u336f\0\u33bc\0\u3409\0\u3456\0\u34a3"+
    "\0\u34f0\0\u353d\0\u358a\0\u35d7\0\u3624\0\u3671\0\u1172\0\u1172"+
    "\0\u36be\0\u370b\0\u3758\0\u37a5\0\u37f2\0\u383f\0\u388c\0\u38d9"+
    "\0\u3926\0\u3973\0\u39c0\0\u3a0d\0\u3a5a\0\u3aa7\0\u3af4\0\u3b41"+
    "\0\u3b8e\0\u3bdb\0\u3c28\0\u3c75\0\u3cc2\0\u3d0f\0\u3d5c\0\u3da9"+
    "\0\u3df6\0\u3e43\0\u3e90\0\u1172\0\u3edd\0\u1172\0\u3f2a\0\u3f77"+
    "\0\u1172\0\u3fc4\0\u4011\0\u405e\0\u40ab\0\u1172\0\u40f8\0\u4145"+
    "\0\u4192\0\u41df\0\u422c\0\u4279\0\u42c6\0\u08b9\0\u4313\0\u4360"+
    "\0\u43ad\0\u43fa\0\u4447\0\u4494\0\u44e1\0\u452e\0\u457b\0\u45c8"+
    "\0\u4615\0\u1172\0\u4662\0\u46af\0\u46fc\0\u4749\0\u4796\0\u47e3"+
    "\0\u4830\0\u487d\0\u48ca\0\u4917\0\u4964\0\u49b1\0\u49fe\0\u4a4b"+
    "\0\u4a98\0\u4ae5\0\u4b32\0\u4b7f\0\u4bcc\0\u4c19\0\u1172\0\u4c66"+
    "\0\u4cb3\0\u4d00\0\u4d4d\0\u4d9a\0\u4de7\0\u4e34\0\u4e81\0\u4ece"+
    "\0\u4f1b\0\u4f68\0\u4fb5\0\u5002\0\u504f\0\u509c\0\u50e9\0\u5136"+
    "\0\u5183\0\u51d0\0\u0181\0\u521d\0\u526a\0\u52b7\0\u5304\0\u5351"+
    "\0\u539e\0\u53eb\0\u5438\0\u5485\0\u1172\0\u54d2\0\u551f\0\u556c"+
    "\0\u55b9\0\u5606\0\u1172\0\u5653\0\u56a0\0\u1172\0\u56ed\0\u573a"+
    "\0\u1172\0\u5787\0\u57d4\0\u5821\0\u586e\0\u0181\0\u58bb\0\u1172"+
    "\0\u5908\0\u5955\0\u59a2\0\u1172\0\u59ef\0\u1172\0\u5a3c\0\u5a89"+
    "\0\u1172\0\u5ad6\0\u5b23\0\u5b70\0\u5bbd\0\u5c0a\0\u5c57\0\u5ca4"+
    "\0\u5cf1\0\u5d3e\0\u5d8b\0\u5dd8\0\u5e25\0\u0181\0\u5e72\0\u5ebf"+
    "\0\u5f0c\0\u5f59\0\u5fa6\0\u5ff3\0\u6040\0\u1172\0\u608d\0\u60da"+
    "\0\u1172\0\u6127\0\u1172\0\u6174\0\u61c1\0\u620e\0\u625b\0\u1172"+
    "\0\u62a8\0\u62f5\0\u6342\0\u638f\0\u1172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\6\3\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\3\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\6\1\35\3\36\1\37\17\36\1\40\5\36"+
    "\1\41\1\42\1\43\1\44\1\6\1\45\6\36\1\46"+
    "\1\36\1\47\1\50\1\51\1\52\2\36\1\6\2\7"+
    "\1\6\3\7\1\53\1\54\1\53\1\55\2\53\1\56"+
    "\1\17\1\57\23\53\1\60\17\53\1\61\6\53\1\62"+
    "\12\53\1\61\7\53\23\0\1\63\14\0\31\64\1\0"+
    "\1\65\3\0\11\64\4\0\2\64\23\0\1\66\54\0"+
    "\1\67\14\0\20\70\1\71\74\70\116\0\2\7\1\0"+
    "\3\7\107\0\2\72\1\0\3\72\25\0\1\73\13\0"+
    "\1\74\26\0\1\74\15\0\2\11\1\0\1\11\2\0"+
    "\2\11\1\75\61\11\1\76\22\11\23\0\1\77\2\0"+
    "\3\77\7\0\31\77\1\0\1\100\3\0\11\77\1\101"+
    "\3\0\2\77\16\0\1\102\4\0\1\103\10\0\1\104"+
    "\3\0\31\105\1\0\1\106\3\0\11\105\1\101\3\0"+
    "\2\105\2\16\1\0\1\16\2\0\7\16\1\75\54\16"+
    "\1\107\22\16\34\0\1\110\103\0\1\111\14\0\31\36"+
    "\1\0\1\112\3\0\2\36\1\113\6\36\4\0\2\36"+
    "\26\0\3\114\104\0\1\115\2\0\1\116\1\0\1\117"+
    "\12\0\31\120\1\0\1\121\3\0\11\120\4\0\2\120"+
    "\24\0\1\122\1\0\3\27\73\0\1\123\24\0\1\124"+
    "\114\0\1\125\1\126\102\0\1\127\14\0\1\130\1\131"+
    "\1\132\1\133\1\130\1\134\2\130\1\135\1\130\1\136"+
    "\1\137\1\140\1\141\1\130\1\142\1\143\1\144\1\145"+
    "\1\130\1\146\4\130\1\0\1\147\3\0\1\130\1\135"+
    "\1\141\1\130\1\142\1\143\1\144\2\130\4\0\2\130"+
    "\7\0\1\150\6\0\1\151\4\0\1\36\2\0\3\36"+
    "\7\0\31\36\1\0\1\152\3\0\11\36\4\0\2\36"+
    "\7\0\1\150\6\0\1\151\4\0\1\36\2\0\3\36"+
    "\7\0\16\36\1\153\12\36\1\0\1\152\3\0\3\36"+
    "\1\153\5\36\4\0\2\36\7\0\1\150\6\0\1\151"+
    "\2\0\1\154\1\0\1\36\2\0\3\36\7\0\20\36"+
    "\1\155\10\36\1\0\1\152\3\0\5\36\1\155\3\36"+
    "\4\0\2\36\6\0\20\36\1\156\1\36\1\157\62\36"+
    "\36\0\1\160\37\0\1\161\27\0\1\150\6\0\1\151"+
    "\4\0\1\36\2\0\3\36\7\0\31\36\1\0\1\152"+
    "\3\0\10\36\1\162\4\0\2\36\7\0\1\150\6\0"+
    "\1\151\4\0\1\36\2\0\3\36\7\0\20\36\1\155"+
    "\10\36\1\0\1\152\3\0\5\36\1\155\3\36\4\0"+
    "\2\36\34\0\1\163\114\0\1\164\67\0\1\53\1\0"+
    "\4\53\3\0\52\53\1\62\22\53\7\0\1\53\1\0"+
    "\4\53\1\0\1\102\1\0\52\53\1\62\22\53\7\0"+
    "\1\53\1\0\4\53\3\0\36\53\1\165\13\53\1\62"+
    "\6\53\1\165\13\53\7\0\1\53\1\0\4\53\3\0"+
    "\40\53\1\166\11\53\1\62\10\53\1\166\11\53\6\0"+
    "\64\53\1\62\22\53\23\0\1\64\14\0\31\64\1\0"+
    "\1\65\3\0\11\64\4\0\2\64\23\0\1\64\2\0"+
    "\3\64\7\0\31\64\1\0\1\65\3\0\11\64\4\0"+
    "\2\64\6\0\105\64\27\0\1\167\70\0\2\72\1\0"+
    "\3\72\41\0\1\170\26\0\1\170\61\0\1\171\7\0"+
    "\1\172\21\0\1\171\20\0\1\11\1\0\1\11\1\173"+
    "\105\11\11\0\1\174\13\0\1\77\2\0\3\77\7\0"+
    "\31\77\1\0\1\175\3\0\11\77\4\0\2\77\6\0"+
    "\105\77\2\0\111\101\1\176\3\101\23\0\1\177\14\0"+
    "\31\200\1\0\1\201\3\0\11\200\4\0\2\200\23\0"+
    "\1\105\14\0\31\105\1\0\1\106\3\0\11\105\4\0"+
    "\2\105\23\0\1\105\2\0\3\105\7\0\31\105\1\0"+
    "\1\106\3\0\11\105\4\0\2\105\6\0\105\105\4\0"+
    "\1\16\1\0\1\16\1\202\105\16\11\0\1\150\6\0"+
    "\1\151\4\0\1\36\2\0\3\36\4\0\1\203\2\0"+
    "\31\36\1\0\1\152\3\0\11\36\4\0\2\36\6\0"+
    "\105\36\25\0\1\120\14\0\31\120\1\0\1\121\3\0"+
    "\11\120\4\0\2\120\2\117\4\0\106\117\24\0\1\120"+
    "\1\0\1\204\3\120\7\0\31\120\1\0\1\121\3\0"+
    "\11\120\4\0\2\120\6\0\105\120\25\0\1\205\126\0"+
    "\1\206\102\0\1\130\14\0\12\130\1\207\1\130\1\210"+
    "\1\130\1\211\6\130\1\212\3\130\1\0\1\147\3\0"+
    "\3\130\1\211\5\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\31\130\1\0\1\147\3\0\11\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\16\130\1\213"+
    "\12\130\1\0\1\147\3\0\3\130\1\213\5\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\7\130\1\214"+
    "\6\130\1\215\4\130\1\216\5\130\1\0\1\147\3\0"+
    "\3\130\1\215\3\130\1\216\1\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\16\130\1\217\12\130\1\0"+
    "\1\147\3\0\3\130\1\217\5\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\16\130\1\220\12\130\1\0"+
    "\1\147\3\0\3\130\1\220\5\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\14\130\1\221\14\130\1\0"+
    "\1\147\3\0\11\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\4\130\1\222\24\130\1\0\1\147\3\0"+
    "\1\222\10\130\4\0\2\130\23\0\1\130\2\0\3\130"+
    "\7\0\1\223\3\130\1\224\24\130\1\0\1\147\3\0"+
    "\1\224\10\130\4\0\2\130\23\0\1\130\2\0\3\130"+
    "\7\0\4\130\1\225\24\130\1\0\1\147\3\0\1\225"+
    "\10\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\1\226\3\130\1\227\24\130\1\0\1\147\3\0\1\227"+
    "\10\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\1\230\30\130\1\0\1\147\3\0\11\130\4\0\2\130"+
    "\23\0\1\130\2\0\3\130\7\0\4\130\1\231\3\130"+
    "\1\232\20\130\1\0\1\147\3\0\1\231\1\232\7\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\2\130"+
    "\1\233\20\130\1\234\5\130\1\0\1\147\3\0\7\130"+
    "\1\234\1\130\4\0\2\130\23\0\1\130\2\0\3\130"+
    "\7\0\16\130\1\235\12\130\1\0\1\147\3\0\3\130"+
    "\1\235\5\130\4\0\2\130\23\0\1\130\2\0\3\130"+
    "\7\0\1\236\7\130\1\237\20\130\1\0\1\147\3\0"+
    "\1\130\1\237\7\130\4\0\2\130\6\0\105\130\52\0"+
    "\1\240\26\0\1\240\23\0\20\36\1\241\1\36\1\242"+
    "\62\36\11\0\1\150\6\0\1\151\4\0\1\36\2\0"+
    "\3\36\7\0\14\36\1\243\14\36\1\0\1\152\3\0"+
    "\11\36\4\0\2\36\26\0\3\244\5\0\1\245\1\0"+
    "\6\244\30\0\1\244\25\0\1\150\6\0\1\151\4\0"+
    "\1\36\2\0\3\36\7\0\13\36\1\246\15\36\1\0"+
    "\1\152\3\0\11\36\4\0\2\36\7\0\1\150\6\0"+
    "\1\151\4\0\1\36\1\0\1\171\3\36\7\0\31\36"+
    "\1\0\1\152\3\0\11\36\4\0\2\36\7\0\1\150"+
    "\6\0\1\151\4\0\1\36\2\0\3\36\7\0\31\36"+
    "\1\0\1\152\3\0\4\36\1\247\4\36\4\0\2\36"+
    "\7\0\1\53\1\0\4\53\3\0\34\53\1\250\15\53"+
    "\1\62\22\53\7\0\1\53\1\0\4\53\3\0\33\53"+
    "\1\251\16\53\1\62\22\53\54\0\1\172\117\0\1\252"+
    "\22\0\1\252\12\0\4\11\2\0\2\11\1\75\61\11"+
    "\1\76\22\11\50\0\1\253\26\0\1\253\23\0\20\77"+
    "\1\254\1\77\1\255\62\77\25\0\1\200\14\0\31\200"+
    "\1\0\1\201\3\0\11\200\4\0\2\200\17\0\1\256"+
    "\3\0\1\200\2\0\3\200\7\0\31\200\1\0\1\201"+
    "\3\0\11\200\4\0\2\200\6\0\105\200\2\0\4\16"+
    "\2\0\7\16\1\75\54\16\1\107\22\16\23\0\1\257"+
    "\114\0\1\130\2\0\3\130\7\0\7\130\1\260\21\130"+
    "\1\0\1\147\3\0\11\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\16\130\1\261\2\130\1\211\7\130"+
    "\1\0\1\147\3\0\3\130\1\261\2\130\1\211\2\130"+
    "\4\0\2\130\23\0\1\262\2\0\3\130\7\0\31\130"+
    "\1\0\1\147\3\0\11\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\4\130\1\263\24\130\1\0\1\147"+
    "\3\0\1\263\10\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\22\130\1\264\6\130\1\0\1\147\3\0"+
    "\11\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\1\265\30\130\1\0\1\147\3\0\11\130\4\0\2\130"+
    "\23\0\1\130\2\0\3\130\7\0\15\130\1\266\5\130"+
    "\1\267\5\130\1\0\1\147\3\0\2\130\1\266\4\130"+
    "\1\267\1\130\4\0\2\130\23\0\1\130\2\0\3\130"+
    "\7\0\21\130\1\270\7\130\1\0\1\147\3\0\6\130"+
    "\1\270\2\130\4\0\2\130\23\0\1\130\2\0\3\130"+
    "\7\0\2\130\1\271\26\130\1\0\1\147\3\0\11\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\15\130"+
    "\1\272\13\130\1\0\1\147\3\0\2\130\1\272\6\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\17\130"+
    "\1\273\11\130\1\0\1\147\3\0\4\130\1\273\4\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\27\130"+
    "\1\274\1\130\1\0\1\147\3\0\11\130\4\0\2\130"+
    "\23\0\1\130\2\0\3\130\7\0\27\130\1\275\1\130"+
    "\1\0\1\147\3\0\11\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\5\130\1\276\23\130\1\0\1\147"+
    "\3\0\11\130\4\0\2\130\23\0\1\130\2\0\3\130"+
    "\7\0\3\130\1\277\25\130\1\0\1\147\3\0\11\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\14\130"+
    "\1\300\14\130\1\0\1\147\3\0\11\130\4\0\2\130"+
    "\23\0\1\130\2\0\3\130\7\0\21\130\1\301\7\130"+
    "\1\0\1\147\3\0\6\130\1\301\2\130\4\0\2\130"+
    "\23\0\1\130\2\0\3\130\7\0\6\130\1\302\22\130"+
    "\1\0\1\147\3\0\11\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\6\130\1\303\22\130\1\0\1\147"+
    "\3\0\11\130\4\0\2\130\23\0\1\130\2\0\3\130"+
    "\7\0\6\130\1\304\22\130\1\0\1\147\3\0\11\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\16\130"+
    "\1\305\12\130\1\0\1\147\3\0\3\130\1\305\5\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\17\130"+
    "\1\306\11\130\1\0\1\147\3\0\4\130\1\306\4\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\17\130"+
    "\1\307\11\130\1\0\1\147\3\0\4\130\1\307\4\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\13\130"+
    "\1\310\15\130\1\0\1\147\3\0\11\130\4\0\2\130"+
    "\23\0\1\130\2\0\3\130\7\0\4\130\1\311\24\130"+
    "\1\0\1\147\3\0\1\311\10\130\4\0\2\130\44\0"+
    "\1\312\31\0\1\312\25\0\1\150\6\0\1\151\4\0"+
    "\1\36\1\0\1\312\3\36\7\0\31\36\1\0\1\152"+
    "\3\0\11\36\4\0\2\36\7\0\1\150\6\0\1\151"+
    "\4\0\1\36\2\0\3\36\7\0\1\313\30\36\1\0"+
    "\1\152\3\0\11\36\4\0\2\36\23\0\1\314\2\0"+
    "\3\315\5\0\1\316\1\0\6\315\30\0\1\315\44\0"+
    "\3\316\5\0\1\316\1\0\6\316\30\0\1\316\25\0"+
    "\1\150\6\0\1\317\4\0\1\320\2\0\3\36\7\0"+
    "\31\36\1\0\1\152\3\0\11\36\4\0\2\36\7\0"+
    "\1\150\6\0\1\151\4\0\1\36\2\0\3\36\7\0"+
    "\31\36\1\0\1\152\3\0\5\36\1\321\3\36\4\0"+
    "\2\36\7\0\1\53\1\0\4\53\3\0\20\53\1\322"+
    "\31\53\1\62\22\53\7\0\1\53\1\0\4\53\3\0"+
    "\3\53\1\323\46\53\1\62\22\53\56\0\1\324\22\0"+
    "\1\324\57\0\1\325\31\0\1\325\25\0\1\174\13\0"+
    "\1\77\1\0\1\325\3\77\7\0\31\77\1\0\1\175"+
    "\3\0\11\77\4\0\2\77\23\0\1\130\2\0\3\130"+
    "\7\0\22\130\1\326\6\130\1\0\1\147\3\0\11\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\30\130"+
    "\1\327\1\0\1\147\3\0\11\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\12\130\1\136\11\130\1\330"+
    "\4\130\1\0\1\147\3\0\11\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\1\130\1\331\27\130\1\0"+
    "\1\147\3\0\11\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\22\130\1\332\6\130\1\0\1\147\3\0"+
    "\11\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\20\130\1\333\10\130\1\0\1\147\3\0\5\130\1\333"+
    "\3\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\22\130\1\334\6\130\1\0\1\147\3\0\11\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\15\130\1\335"+
    "\13\130\1\0\1\147\3\0\2\130\1\335\6\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\22\130\1\336"+
    "\6\130\1\0\1\147\3\0\11\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\23\130\1\337\5\130\1\0"+
    "\1\147\3\0\7\130\1\337\1\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\22\130\1\340\6\130\1\0"+
    "\1\147\3\0\11\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\16\130\1\341\12\130\1\0\1\147\3\0"+
    "\3\130\1\341\5\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\5\130\1\342\23\130\1\0\1\147\3\0"+
    "\11\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\4\130\1\343\24\130\1\0\1\147\3\0\1\343\10\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\22\130"+
    "\1\344\6\130\1\0\1\147\3\0\11\130\4\0\2\130"+
    "\23\0\1\130\2\0\3\130\7\0\10\130\1\345\20\130"+
    "\1\0\1\147\3\0\1\130\1\345\7\130\4\0\2\130"+
    "\23\0\1\130\2\0\3\130\7\0\4\130\1\346\24\130"+
    "\1\0\1\147\3\0\1\346\10\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\22\130\1\347\6\130\1\0"+
    "\1\147\3\0\11\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\4\130\1\350\24\130\1\0\1\147\3\0"+
    "\1\350\10\130\4\0\2\130\23\0\1\130\2\0\3\130"+
    "\7\0\10\130\1\351\20\130\1\0\1\147\3\0\1\130"+
    "\1\351\7\130\4\0\2\130\23\0\1\130\2\0\3\130"+
    "\7\0\7\130\1\276\21\130\1\0\1\147\3\0\11\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\17\130"+
    "\1\352\11\130\1\0\1\147\3\0\4\130\1\352\4\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\17\130"+
    "\1\353\11\130\1\0\1\147\3\0\4\130\1\353\4\130"+
    "\4\0\2\130\23\0\1\354\2\0\3\130\7\0\31\130"+
    "\1\0\1\147\3\0\11\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\23\130\1\355\5\130\1\0\1\147"+
    "\3\0\7\130\1\355\1\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\25\130\1\356\3\130\1\0\1\147"+
    "\3\0\11\130\4\0\2\130\7\0\1\150\6\0\1\151"+
    "\4\0\1\36\2\0\3\36\7\0\10\36\1\357\20\36"+
    "\1\0\1\152\3\0\1\36\1\357\7\36\4\0\2\36"+
    "\26\0\3\360\7\0\6\360\30\0\1\360\41\0\1\314"+
    "\2\0\3\361\5\0\1\362\1\0\6\361\30\0\1\361"+
    "\44\0\3\362\5\0\1\362\1\0\6\362\30\0\1\362"+
    "\25\0\1\150\6\0\1\151\4\0\1\36\2\0\3\36"+
    "\7\0\17\36\1\363\11\36\1\0\1\152\3\0\4\36"+
    "\1\363\4\36\4\0\2\36\7\0\1\150\6\0\1\151"+
    "\4\0\1\36\2\0\3\36\7\0\31\36\1\0\1\152"+
    "\3\0\1\364\10\36\4\0\2\36\7\0\1\53\1\0"+
    "\4\53\3\0\30\53\1\365\21\53\1\62\4\53\1\365"+
    "\15\53\7\0\1\53\1\0\4\53\3\0\37\53\1\366"+
    "\12\53\1\62\7\53\1\366\12\53\60\0\1\367\22\0"+
    "\1\367\34\0\1\130\2\0\3\130\7\0\14\130\1\370"+
    "\14\130\1\0\1\147\3\0\11\130\4\0\2\130\23\0"+
    "\1\371\2\0\3\130\7\0\31\130\1\0\1\147\3\0"+
    "\11\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\10\130\1\237\20\130\1\0\1\147\3\0\1\130\1\237"+
    "\7\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\12\130\1\372\16\130\1\0\1\147\3\0\11\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\16\130\1\373"+
    "\12\130\1\0\1\147\3\0\3\130\1\373\5\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\21\130\1\374"+
    "\7\130\1\0\1\147\3\0\6\130\1\374\2\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\1\375\30\130"+
    "\1\0\1\147\3\0\11\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\22\130\1\376\6\130\1\0\1\147"+
    "\3\0\11\130\4\0\2\130\23\0\1\130\2\0\3\130"+
    "\7\0\16\130\1\377\12\130\1\0\1\147\3\0\3\130"+
    "\1\377\5\130\4\0\2\130\23\0\1\130\2\0\3\130"+
    "\7\0\14\130\1\u0100\14\130\1\0\1\147\3\0\11\130"+
    "\4\0\2\130\23\0\1\u0101\2\0\3\130\7\0\31\130"+
    "\1\0\1\147\3\0\11\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\20\130\1\u0102\10\130\1\0\1\147"+
    "\3\0\5\130\1\u0102\3\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\20\130\1\u0103\10\130\1\0\1\147"+
    "\3\0\5\130\1\u0103\3\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\20\130\1\u0104\10\130\1\0\1\147"+
    "\3\0\5\130\1\u0104\3\130\4\0\2\130\23\0\1\u0105"+
    "\2\0\3\130\7\0\31\130\1\0\1\147\3\0\11\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\1\u0106"+
    "\30\130\1\0\1\147\3\0\11\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\21\130\1\u0107\7\130\1\0"+
    "\1\147\3\0\6\130\1\u0107\2\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\16\130\1\u0108\12\130\1\0"+
    "\1\147\3\0\3\130\1\u0108\5\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\4\130\1\u0109\24\130\1\0"+
    "\1\147\3\0\1\u0109\10\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\16\130\1\u010a\12\130\1\0\1\147"+
    "\3\0\3\130\1\u010a\5\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\2\130\1\u010b\10\130\1\u010c\4\130"+
    "\1\u010d\10\130\1\0\1\147\3\0\5\130\1\u010d\3\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\4\130"+
    "\1\u010e\24\130\1\0\1\147\3\0\1\u010e\10\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\17\130\1\u010f"+
    "\11\130\1\0\1\147\3\0\4\130\1\u010f\4\130\4\0"+
    "\2\130\7\0\1\150\6\0\1\151\4\0\1\36\2\0"+
    "\3\36\7\0\15\36\1\u0110\13\36\1\0\1\152\3\0"+
    "\2\36\1\u0110\6\36\4\0\2\36\26\0\3\u0111\7\0"+
    "\6\u0111\30\0\1\u0111\41\0\1\314\2\0\3\u0112\5\0"+
    "\1\u0113\1\0\6\u0112\30\0\1\u0112\44\0\3\u0113\5\0"+
    "\1\u0113\1\0\6\u0113\30\0\1\u0113\25\0\1\150\6\0"+
    "\1\151\4\0\1\36\2\0\3\36\7\0\20\36\1\u0114"+
    "\10\36\1\0\1\152\3\0\5\36\1\u0114\3\36\4\0"+
    "\2\36\7\0\1\150\6\0\1\151\4\0\1\36\2\0"+
    "\3\36\7\0\31\36\1\0\1\152\3\0\6\36\1\u0115"+
    "\2\36\4\0\2\36\7\0\1\53\1\0\4\53\3\0"+
    "\35\53\1\u0116\14\53\1\62\5\53\1\u0116\14\53\7\0"+
    "\1\53\1\0\4\53\3\0\40\53\1\u0117\11\53\1\62"+
    "\10\53\1\u0117\11\53\62\0\1\u0118\55\0\1\130\2\0"+
    "\3\130\7\0\13\130\1\u0119\15\130\1\0\1\147\3\0"+
    "\11\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\3\130\1\133\6\130\1\136\11\130\1\330\4\130\1\0"+
    "\1\147\3\0\11\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\10\130\1\u011a\20\130\1\0\1\147\3\0"+
    "\1\130\1\u011a\7\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\14\130\1\307\14\130\1\0\1\147\3\0"+
    "\11\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\4\130\1\u011b\24\130\1\0\1\147\3\0\1\u011b\10\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\10\130"+
    "\1\u011c\20\130\1\0\1\147\3\0\1\130\1\u011c\7\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\4\130"+
    "\1\u011d\24\130\1\0\1\147\3\0\1\u011d\10\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\14\130\1\u011e"+
    "\14\130\1\0\1\147\3\0\11\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\4\130\1\u011f\24\130\1\0"+
    "\1\147\3\0\1\u011f\10\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\5\130\1\u0120\11\130\1\u0121\11\130"+
    "\1\0\1\147\3\0\4\130\1\u0121\4\130\4\0\2\130"+
    "\23\0\1\130\2\0\3\130\7\0\22\130\1\u0122\6\130"+
    "\1\0\1\147\3\0\11\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\1\u0123\30\130\1\0\1\147\3\0"+
    "\11\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\1\130\1\u0124\12\130\1\u0125\5\130\1\u0126\6\130\1\0"+
    "\1\147\3\0\11\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\17\130\1\u0127\11\130\1\0\1\147\3\0"+
    "\4\130\1\u0127\4\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\15\130\1\u0128\13\130\1\0\1\147\3\0"+
    "\2\130\1\u0128\6\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\20\130\1\u0129\10\130\1\0\1\147\3\0"+
    "\5\130\1\u0129\3\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\4\130\1\u012a\24\130\1\0\1\147\3\0"+
    "\1\u012a\10\130\4\0\2\130\23\0\1\130\2\0\3\130"+
    "\7\0\4\130\1\u012b\24\130\1\0\1\147\3\0\1\u012b"+
    "\10\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\10\130\1\u012c\20\130\1\0\1\147\3\0\1\130\1\u012c"+
    "\7\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\16\130\1\u012d\12\130\1\0\1\147\3\0\3\130\1\u012d"+
    "\5\130\4\0\2\130\7\0\1\150\6\0\1\317\4\0"+
    "\1\36\2\0\3\36\7\0\31\36\1\0\1\152\3\0"+
    "\11\36\4\0\2\36\26\0\3\u012e\7\0\6\u012e\30\0"+
    "\1\u012e\41\0\1\314\2\0\3\u012f\5\0\1\u0130\1\0"+
    "\6\u012f\30\0\1\u012f\44\0\3\u0130\5\0\1\u0130\1\0"+
    "\6\u0130\30\0\1\u0130\25\0\1\150\6\0\1\151\4\0"+
    "\1\36\2\0\3\36\7\0\4\36\1\u0131\24\36\1\0"+
    "\1\152\3\0\1\u0131\10\36\4\0\2\36\7\0\1\150"+
    "\6\0\1\151\4\0\1\36\2\0\3\36\7\0\31\36"+
    "\1\0\1\152\3\0\6\36\1\u0132\2\36\4\0\2\36"+
    "\7\0\1\53\1\0\4\53\3\0\24\53\1\u0133\25\53"+
    "\1\62\3\53\1\u0133\16\53\40\0\1\u0134\77\0\1\u0135"+
    "\2\0\3\130\7\0\31\130\1\0\1\147\3\0\11\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\22\130"+
    "\1\u0136\6\130\1\0\1\147\3\0\11\130\4\0\2\130"+
    "\23\0\1\130\2\0\3\130\7\0\22\130\1\u0137\6\130"+
    "\1\0\1\147\3\0\11\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\15\130\1\u0138\13\130\1\0\1\147"+
    "\3\0\2\130\1\u0138\6\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\20\130\1\u0139\10\130\1\0\1\147"+
    "\3\0\5\130\1\u0139\3\130\4\0\2\130\23\0\1\u013a"+
    "\2\0\3\130\7\0\31\130\1\0\1\147\3\0\11\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\15\130"+
    "\1\u013b\13\130\1\0\1\147\3\0\2\130\1\u013b\6\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\1\u013c"+
    "\30\130\1\0\1\147\3\0\11\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\1\u013d\30\130\1\0\1\147"+
    "\3\0\11\130\4\0\2\130\23\0\1\130\2\0\3\130"+
    "\7\0\14\130\1\u013e\14\130\1\0\1\147\3\0\11\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\16\130"+
    "\1\u013f\12\130\1\0\1\147\3\0\3\130\1\u013f\5\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\10\130"+
    "\1\u0140\20\130\1\0\1\147\3\0\1\130\1\u0140\7\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\16\130"+
    "\1\u0141\12\130\1\0\1\147\3\0\3\130\1\u0141\5\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\1\u0142"+
    "\30\130\1\0\1\147\3\0\11\130\4\0\2\130\23\0"+
    "\1\u0143\2\0\3\130\7\0\31\130\1\0\1\147\3\0"+
    "\11\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\22\130\1\u0144\6\130\1\0\1\147\3\0\11\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\15\130\1\u0145"+
    "\13\130\1\0\1\147\3\0\2\130\1\u0145\6\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\5\130\1\u0146"+
    "\23\130\1\0\1\147\3\0\11\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\6\130\1\u0147\22\130\1\0"+
    "\1\147\3\0\11\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\20\130\1\u0148\10\130\1\0\1\147\3\0"+
    "\5\130\1\u0148\3\130\4\0\2\130\26\0\3\u0149\7\0"+
    "\6\u0149\30\0\1\u0149\41\0\1\314\2\0\3\u014a\5\0"+
    "\1\u014b\1\0\6\u014a\30\0\1\u014a\44\0\3\u014b\5\0"+
    "\1\u014b\1\0\6\u014b\30\0\1\u014b\25\0\1\150\6\0"+
    "\1\151\4\0\1\36\2\0\3\36\7\0\5\36\1\u014c"+
    "\23\36\1\0\1\152\3\0\11\36\4\0\2\36\7\0"+
    "\1\150\6\0\1\151\4\0\1\36\2\0\3\36\7\0"+
    "\31\36\1\0\1\152\3\0\1\36\1\u014d\7\36\4\0"+
    "\2\36\7\0\1\53\1\0\4\53\3\0\25\53\1\u014e"+
    "\24\53\1\62\22\53\55\0\1\u014f\22\0\1\u014f\37\0"+
    "\1\130\2\0\3\130\7\0\12\130\1\136\16\130\1\0"+
    "\1\147\3\0\11\130\4\0\2\130\23\0\1\u0150\2\0"+
    "\3\130\7\0\31\130\1\0\1\147\3\0\11\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\4\130\1\u0151"+
    "\24\130\1\0\1\147\3\0\1\u0151\10\130\4\0\2\130"+
    "\23\0\1\u0152\2\0\3\130\7\0\31\130\1\0\1\147"+
    "\3\0\11\130\4\0\2\130\23\0\1\130\2\0\3\130"+
    "\7\0\14\130\1\u0153\4\130\1\u0154\7\130\1\0\1\147"+
    "\3\0\6\130\1\u0154\2\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\22\130\1\u0155\6\130\1\0\1\147"+
    "\3\0\11\130\4\0\2\130\23\0\1\130\2\0\3\130"+
    "\7\0\2\130\1\u0156\26\130\1\0\1\147\3\0\11\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\13\130"+
    "\1\u0157\15\130\1\0\1\147\3\0\11\130\4\0\2\130"+
    "\23\0\1\130\2\0\3\130\7\0\4\130\1\u0158\24\130"+
    "\1\0\1\147\3\0\1\u0158\10\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\22\130\1\u0159\6\130\1\0"+
    "\1\147\3\0\11\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\3\130\1\u015a\25\130\1\0\1\147\3\0"+
    "\11\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\17\130\1\u015b\11\130\1\0\1\147\3\0\4\130\1\u015b"+
    "\4\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\2\130\1\u015c\26\130\1\0\1\147\3\0\11\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\21\130\1\u015d"+
    "\7\130\1\0\1\147\3\0\6\130\1\u015d\2\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\21\130\1\u015e"+
    "\7\130\1\0\1\147\3\0\6\130\1\u015e\2\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\22\130\1\u015f"+
    "\6\130\1\0\1\147\3\0\11\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\22\130\1\u0160\6\130\1\0"+
    "\1\147\3\0\11\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\7\130\1\u0146\21\130\1\0\1\147\3\0"+
    "\11\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\22\130\1\u0161\6\130\1\0\1\147\3\0\11\130\4\0"+
    "\2\130\26\0\3\u0162\7\0\6\u0162\30\0\1\u0162\41\0"+
    "\1\314\100\0\1\150\6\0\1\151\4\0\1\36\2\0"+
    "\3\36\7\0\10\36\1\u0163\20\36\1\0\1\152\3\0"+
    "\1\36\1\u0163\7\36\4\0\2\36\7\0\1\150\6\0"+
    "\1\151\4\0\1\36\2\0\3\36\7\0\31\36\1\0"+
    "\1\152\3\0\3\36\1\u0164\5\36\4\0\2\36\7\0"+
    "\1\53\1\0\4\53\3\0\30\53\1\u0165\21\53\1\62"+
    "\4\53\1\u0165\15\53\62\0\1\u0166\55\0\1\130\2\0"+
    "\3\130\7\0\12\130\1\136\5\130\1\u0167\3\130\1\330"+
    "\4\130\1\0\1\147\3\0\5\130\1\u0167\3\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\20\130\1\u0168"+
    "\10\130\1\0\1\147\3\0\5\130\1\u0168\3\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\21\130\1\u0169"+
    "\7\130\1\0\1\147\3\0\6\130\1\u0169\2\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\4\130\1\u016a"+
    "\24\130\1\0\1\147\3\0\1\u016a\10\130\4\0\2\130"+
    "\23\0\1\130\2\0\3\130\7\0\4\130\1\u016b\24\130"+
    "\1\0\1\147\3\0\1\u016b\10\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\4\130\1\u016c\24\130\1\0"+
    "\1\147\3\0\1\u016c\10\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\4\130\1\u016d\24\130\1\0\1\147"+
    "\3\0\1\u016d\10\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\21\130\1\u016e\7\130\1\0\1\147\3\0"+
    "\6\130\1\u016e\2\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\22\130\1\u016f\6\130\1\0\1\147\3\0"+
    "\11\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\3\130\1\u0170\25\130\1\0\1\147\3\0\11\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\4\130\1\u0171"+
    "\24\130\1\0\1\147\3\0\1\u0171\10\130\4\0\2\130"+
    "\23\0\1\130\2\0\3\130\7\0\22\130\1\u0172\6\130"+
    "\1\0\1\147\3\0\11\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\4\130\1\u0173\24\130\1\0\1\147"+
    "\3\0\1\u0173\10\130\4\0\2\130\23\0\1\u0174\2\0"+
    "\3\130\7\0\31\130\1\0\1\147\3\0\11\130\4\0"+
    "\2\130\26\0\3\u014b\7\0\6\u014b\30\0\1\u014b\25\0"+
    "\1\150\6\0\1\151\4\0\1\36\2\0\3\36\7\0"+
    "\26\36\1\u0110\2\36\1\0\1\152\3\0\10\36\1\u0110"+
    "\4\0\2\36\7\0\1\150\6\0\1\151\4\0\1\36"+
    "\2\0\3\36\7\0\31\36\1\0\1\152\3\0\2\36"+
    "\1\u0175\6\36\4\0\2\36\7\0\1\53\1\0\4\53"+
    "\3\0\46\53\1\u0116\3\53\1\62\13\53\1\u0116\6\53"+
    "\23\0\1\130\2\0\3\130\7\0\4\130\1\231\24\130"+
    "\1\0\1\147\3\0\1\231\10\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\22\130\1\u0176\6\130\1\0"+
    "\1\147\3\0\11\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\3\130\1\u0177\25\130\1\0\1\147\3\0"+
    "\11\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\13\130\1\u0178\15\130\1\0\1\147\3\0\11\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\22\130\1\u0179"+
    "\6\130\1\0\1\147\3\0\11\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\16\130\1\u017a\12\130\1\0"+
    "\1\147\3\0\3\130\1\u017a\5\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\13\130\1\u017b\15\130\1\0"+
    "\1\147\3\0\11\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\27\130\1\u017c\1\130\1\0\1\147\3\0"+
    "\11\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\20\130\1\u015b\10\130\1\0\1\147\3\0\5\130\1\u015b"+
    "\3\130\4\0\2\130\23\0\1\130\2\0\3\130\7\0"+
    "\2\130\1\u017d\26\130\1\0\1\147\3\0\11\130\4\0"+
    "\2\130\7\0\1\150\6\0\1\u017e\4\0\1\36\2\0"+
    "\3\36\7\0\31\36\1\0\1\152\3\0\11\36\4\0"+
    "\2\36\23\0\1\130\2\0\3\130\7\0\27\130\1\u017f"+
    "\1\130\1\0\1\147\3\0\11\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\10\130\1\u0180\20\130\1\0"+
    "\1\147\3\0\1\130\1\u0180\7\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\4\130\1\u0181\24\130\1\0"+
    "\1\147\3\0\1\u0181\10\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\22\130\1\u0182\6\130\1\0\1\147"+
    "\3\0\11\130\4\0\2\130\23\0\1\130\2\0\3\130"+
    "\7\0\14\130\1\u015b\14\130\1\0\1\147\3\0\11\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\4\130"+
    "\1\u015b\24\130\1\0\1\147\3\0\1\u015b\10\130\4\0"+
    "\2\130\23\0\1\130\2\0\3\130\7\0\13\130\1\u0183"+
    "\15\130\1\0\1\147\3\0\11\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\16\130\1\u0184\12\130\1\0"+
    "\1\147\3\0\3\130\1\u0184\5\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\13\130\1\u0185\15\130\1\0"+
    "\1\147\3\0\11\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\1\u0186\30\130\1\0\1\147\3\0\11\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\2\130"+
    "\1\u0187\26\130\1\0\1\147\3\0\11\130\4\0\2\130"+
    "\23\0\1\130\2\0\3\130\7\0\4\130\1\u0188\24\130"+
    "\1\0\1\147\3\0\1\u0188\10\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\4\130\1\u0189\24\130\1\0"+
    "\1\147\3\0\1\u0189\10\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\20\130\1\u018a\10\130\1\0\1\147"+
    "\3\0\5\130\1\u018a\3\130\4\0\2\130\23\0\1\130"+
    "\2\0\3\130\7\0\4\130\1\u018b\24\130\1\0\1\147"+
    "\3\0\1\u018b\10\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\22\130\1\u018c\6\130\1\0\1\147\3\0"+
    "\11\130\4\0\2\130\23\0\1\u018d\2\0\3\130\7\0"+
    "\31\130\1\0\1\147\3\0\11\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\15\130\1\u015f\13\130\1\0"+
    "\1\147\3\0\2\130\1\u015f\6\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\16\130\1\u018e\12\130\1\0"+
    "\1\147\3\0\3\130\1\u018e\5\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\24\130\1\u018f\4\130\1\0"+
    "\1\147\3\0\11\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\20\130\1\u0190\10\130\1\0\1\147\3\0"+
    "\5\130\1\u0190\3\130\4\0\2\130\23\0\1\130\2\0"+
    "\3\130\7\0\1\u0191\30\130\1\0\1\147\3\0\11\130"+
    "\4\0\2\130\23\0\1\130\2\0\3\130\7\0\13\130"+
    "\1\u0192\15\130\1\0\1\147\3\0\11\130\4\0\2\130"+
    "\23\0\1\130\2\0\3\130\7\0\23\130\1\u0193\5\130"+
    "\1\0\1\147\3\0\7\130\1\u0193\1\130\4\0\2\130"+
    "\23\0\1\130\2\0\3\130\7\0\4\130\1\u0194\24\130"+
    "\1\0\1\147\3\0\1\u0194\10\130\4\0\2\130\23\0"+
    "\1\130\2\0\3\130\7\0\21\130\1\u0195\7\130\1\0"+
    "\1\147\3\0\6\130\1\u0195\2\130\4\0\2\130";

  private static int [] zzUnpacktrans() {
    int [] result = new int[25564];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\3\0\1\11\5\1\2\11\1\1\2\11"+
    "\1\1\2\11\4\1\2\11\1\1\1\11\5\1\1\11"+
    "\1\1\1\11\3\1\1\11\1\1\1\11\5\1\1\11"+
    "\3\1\1\0\1\1\1\0\3\11\1\1\1\0\1\11"+
    "\1\0\1\11\1\0\1\1\4\0\1\11\1\1\2\0"+
    "\1\11\1\1\1\0\2\1\1\11\1\0\1\1\4\0"+
    "\2\11\2\0\17\1\2\0\1\11\1\0\1\1\1\0"+
    "\3\1\2\11\1\1\2\11\2\1\1\11\1\0\1\11"+
    "\1\0\1\1\2\0\1\11\1\0\1\1\1\0\1\1"+
    "\2\11\1\0\1\11\31\1\1\0\11\1\2\0\2\1"+
    "\2\11\32\1\1\11\1\1\1\0\2\1\1\11\4\1"+
    "\1\0\1\11\41\1\1\0\40\1\1\0\33\1\1\0"+
    "\26\1\1\11\3\1\1\0\26\1\1\11\27\1\1\11"+
    "\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _PostCssLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PostCssLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return CssElementTypes.CSS_URL;
            }
          // fall through
          case 84: break;
          case 2:
            { return CssElementTypes.CSS_BAD_CHARACTER;
            }
          // fall through
          case 85: break;
          case 3:
            { return CssElementTypes.CSS_WHITE_SPACE;
            }
          // fall through
          case 86: break;
          case 4:
            { return CssElementTypes.CSS_STRING_TOKEN;
            }
          // fall through
          case 87: break;
          case 5:
            { return PostCssTokenTypes.HASH_SIGN;
            }
          // fall through
          case 88: break;
          case 6:
            { return CssElementTypes.CSS_PERCENT;
            }
          // fall through
          case 89: break;
          case 7:
            { return PostCssTokenTypes.AMPERSAND;
            }
          // fall through
          case 90: break;
          case 8:
            { return CssElementTypes.CSS_LPAREN;
            }
          // fall through
          case 91: break;
          case 9:
            { return CssElementTypes.CSS_RPAREN;
            }
          // fall through
          case 92: break;
          case 10:
            { return CssElementTypes.CSS_ASTERISK;
            }
          // fall through
          case 93: break;
          case 11:
            { return CssElementTypes.CSS_PLUS;
            }
          // fall through
          case 94: break;
          case 12:
            { return CssElementTypes.CSS_COMMA;
            }
          // fall through
          case 95: break;
          case 13:
            { return CssElementTypes.CSS_MINUS;
            }
          // fall through
          case 96: break;
          case 14:
            { return CssElementTypes.CSS_PERIOD;
            }
          // fall through
          case 97: break;
          case 15:
            { return CssElementTypes.CSS_SLASH;
            }
          // fall through
          case 98: break;
          case 16:
            { return CssElementTypes.CSS_NUMBER;
            }
          // fall through
          case 99: break;
          case 17:
            { return CssElementTypes.CSS_COLON;
            }
          // fall through
          case 100: break;
          case 18:
            { return CssElementTypes.CSS_SEMICOLON;
            }
          // fall through
          case 101: break;
          case 19:
            { return CssElementTypes.CSS_LT;
            }
          // fall through
          case 102: break;
          case 20:
            { return CssElementTypes.CSS_EQ;
            }
          // fall through
          case 103: break;
          case 21:
            { return CssElementTypes.CSS_GT;
            }
          // fall through
          case 104: break;
          case 22:
            { return CssElementTypes.CSS_IDENT;
            }
          // fall through
          case 105: break;
          case 23:
            { return CssElementTypes.CSS_LBRACKET;
            }
          // fall through
          case 106: break;
          case 24:
            { return CssElementTypes.CSS_RBRACKET;
            }
          // fall through
          case 107: break;
          case 25:
            { return CssElementTypes.CSS_HAT;
            }
          // fall through
          case 108: break;
          case 26:
            { return CssElementTypes.CSS_LBRACE;
            }
          // fall through
          case 109: break;
          case 27:
            { return CssElementTypes.CSS_PIPE;
            }
          // fall through
          case 110: break;
          case 28:
            { return CssElementTypes.CSS_RBRACE;
            }
          // fall through
          case 111: break;
          case 29:
            { return CssElementTypes.CSS_TILDA;
            }
          // fall through
          case 112: break;
          case 30:
            { yybegin(YYINITIAL); return CssElementTypes.CSS_RPAREN;
            }
          // fall through
          case 113: break;
          case 31:
            { yybegin(YYINITIAL); return CssElementTypes.CSS_FUNCTION_TOKEN;
            }
          // fall through
          case 114: break;
          case 32:
            { yybegin(YYINITIAL); return CssElementTypes.CSS_IDENT;
            }
          // fall through
          case 115: break;
          case 33:
            { return CssElementTypes.CSS_COMMENT;
            }
          // fall through
          case 116: break;
          case 34:
            { return CssElementTypes.CSS_JQUERY_NOT_EQUALS;
            }
          // fall through
          case 117: break;
          case 35:
            { return CssElementTypes.CSS_HASH;
            }
          // fall through
          case 118: break;
          case 36:
            { return CssElementTypes.CSS_ENDS_WITH;
            }
          // fall through
          case 119: break;
          case 37:
            { return PostCssTokenTypes.POST_CSS_SIMPLE_VARIABLE_TOKEN;
            }
          // fall through
          case 120: break;
          case 38:
            { return CssElementTypes.CSS_CONTAINS;
            }
          // fall through
          case 121: break;
          case 39:
            { yybegin(CSS_FUNCTION_MINUS_N); yypushback(yylength());
            }
          // fall through
          case 122: break;
          case 40:
            { yybegin(CSS_COMMENT); return CssElementTypes.CSS_COMMENT;
            }
          // fall through
          case 123: break;
          case 41:
            { return PostCssTokenTypes.POST_CSS_COMMENT;
            }
          // fall through
          case 124: break;
          case 42:
            { return CssElementTypes.CSS_LE;
            }
          // fall through
          case 125: break;
          case 43:
            { return CssElementTypes.CSS_GE;
            }
          // fall through
          case 126: break;
          case 44:
            { return CssElementTypes.CSS_ATKEYWORD;
            }
          // fall through
          case 127: break;
          case 45:
            { yybegin(CSS_FUNCTION); yypushback(yylength());
            }
          // fall through
          case 128: break;
          case 46:
            { return CssElementTypes.CSS_HACK;
            }
          // fall through
          case 129: break;
          case 47:
            { return CssElementTypes.CSS_BEGINS_WITH;
            }
          // fall through
          case 130: break;
          case 48:
            { return CssElementTypes.CSS_CAT;
            }
          // fall through
          case 131: break;
          case 49:
            { return CssElementTypes.CSS_DASHMATCH;
            }
          // fall through
          case 132: break;
          case 50:
            { return CssElementTypes.CSS_INCLUDES;
            }
          // fall through
          case 133: break;
          case 51:
            { yybegin(YYINITIAL); return CssElementTypes.CSS_COMMENT;
            }
          // fall through
          case 134: break;
          case 52:
            { return CssElementTypes.CSS_CDC;
            }
          // fall through
          case 135: break;
          case 53:
            { return CssElementTypes.CSS_SLASHED_COMBINATOR;
            }
          // fall through
          case 136: break;
          case 54:
            { return CssElementTypes.CSS_GT_GT_GT;
            }
          // fall through
          case 137: break;
          case 55:
            { if(StringUtil.endsWith(yytext(), "\\0") || StringUtil.endsWith(yytext(), "\\9")) yypushback(2); else yypushback(3); return CssElementTypes.CSS_IDENT;
            }
          // fall through
          case 138: break;
          case 56:
            { return CssElementTypes.CSS_UNICODE_RANGE;
            }
          // fall through
          case 139: break;
          case 57:
            { return CssElementTypes.CSS_URI_START;
            }
          // fall through
          case 140: break;
          case 58:
            { if(StringUtil.endsWith(yytext(), "\\0") || StringUtil.endsWith(yytext(), "\\9")) yypushback(2); else yypushback(3); return CssElementTypes.CSS_HASH;
            }
          // fall through
          case 141: break;
          case 59:
            { return CssElementTypes.CSS_CDO;
            }
          // fall through
          case 142: break;
          case 60:
            { yybegin(CSS_URI); yypushback(yylength());
            }
          // fall through
          case 143: break;
          case 61:
            { return PostCssTokenTypes.POST_CSS_NEST_SYM;
            }
          // fall through
          case 144: break;
          case 62:
            { return CssElementTypes.CSS_PAGE_SYM;
            }
          // fall through
          case 145: break;
          case 63:
            { return CssElementTypes.CSS_LAYER_SYM;
            }
          // fall through
          case 146: break;
          case 64:
            { return CssElementTypes.CSS_MEDIA_SYM;
            }
          // fall through
          case 147: break;
          case 65:
            { return CssElementTypes.CSS_SCOPE_SYM;
            }
          // fall through
          case 148: break;
          case 66:
            { return CssElementTypes.CSS_VALUE_SYM;
            }
          // fall through
          case 149: break;
          case 67:
            { return CssElementTypes.CSS_IMPORT_SYM;
            }
          // fall through
          case 150: break;
          case 68:
            { return CssElementTypes.CSS_REGION_SYM;
            }
          // fall through
          case 151: break;
          case 69:
            { return CssElementTypes.CSS_CHARSET_SYM;
            }
          // fall through
          case 152: break;
          case 70:
            { return CssElementTypes.CSS_DOCUMENT_SYM;
            }
          // fall through
          case 153: break;
          case 71:
            { return CssElementTypes.CSS_PAGE_MARGIN_SYM;
            }
          // fall through
          case 154: break;
          case 72:
            { return CssElementTypes.CSS_SUPPORTS_SYM;
            }
          // fall through
          case 155: break;
          case 73:
            { return CssElementTypes.CSS_VIEWPORT_SYM;
            }
          // fall through
          case 156: break;
          case 74:
            { return CssElementTypes.CSS_IMPORTANT;
            }
          // fall through
          case 157: break;
          case 75:
            { return CssElementTypes.CSS_CONTAINER_SYM;
            }
          // fall through
          case 158: break;
          case 76:
            { return CssElementTypes.CSS_FONTFACE_SYM;
            }
          // fall through
          case 159: break;
          case 77:
            { return CssElementTypes.CSS_KEYFRAMES_SYM;
            }
          // fall through
          case 160: break;
          case 78:
            { return CssElementTypes.CSS_NAMESPACE_SYM;
            }
          // fall through
          case 161: break;
          case 79:
            { yypushback(1); return CssElementTypes.CSS_EXPRESSION;
            }
          // fall through
          case 162: break;
          case 80:
            { return PostCssTokenTypes.POST_CSS_CUSTOM_MEDIA_SYM;
            }
          // fall through
          case 163: break;
          case 81:
            { return CssElementTypes.CSS_COUNTER_STYLE_SYM;
            }
          // fall through
          case 164: break;
          case 82:
            { return PostCssTokenTypes.POST_CSS_CUSTOM_SELECTOR_SYM;
            }
          // fall through
          case 165: break;
          case 83:
            { return CssElementTypes.CSS_FONT_PALETTE_VALUES_SYM;
            }
          // fall through
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
