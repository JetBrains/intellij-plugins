{
  "$schema": "../../../../community/platform/webSymbols/web-types-gen/resources/web-types.json",
  "framework": "vue",
  "name": "vue",
  "version": "2.7.0",
  "js-types-syntax": "typescript",
  "description-markup": "markdown",
  "default-icon": "icons/vue.svg",
  "framework-config": {
    "enable-when": {
      "node-packages": [
        "vue",
        "@vue/cli"
      ],
      "file-extensions": [
        "vue"
      ],
      "ide-libraries": [
        "vue"
      ]
    }
  },
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "Vue component",
          "pattern": {
            "or": [
              {
                "items": "/html/vue-components"
              },
              {
                "items":"/js/vue-component-namespaces",
                "template":  [
                  "#item",
                  {
                    "items": [
                      {
                        "path": "/html/vue-components",
                        "name-conversion": {
                          "canonical-names": "as-is",
                          "match-names": ["as-is"],
                          "name-variants": ["as-is"]
                        }
                      },
                      "/js/vue-component-namespaces"
                    ],
                    "template": [
                      ".",
                      "#...",
                      "#item"
                    ],
                    "repeat": true,
                    "unique": false,
                    "required": false
                  }
                ]
              }
            ]
          },
          "attributes": [
            {
              "name": "Component property",
              "pattern": {
                "or": [
                  {
                    "items": "props",
                    "priority": "highest"
                  },
                  {
                    "delegate": "vue-custom-prop",
                    "priority": "lowest"
                  }
                ]
              },
              "value": {
                "type": "of-match"
              },
              "vue-custom-prop": {
                "name": "Custom Vue component property",
                "pattern": "(?!v-).*",
                "doc-hide-pattern": true,
                "attribute-value": {
                  "required": false
                },
                "hide-from-completion": true
              }
            }
          ]
        },
        {
          "name": "template",
          "extension": true,
          "attributes": [
            {
              "name": "scope",
              "deprecated": true,
              "value": {
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "slot",
          "description": "`<slot>` serve as content distribution outlets in component templates. `<slot>` itself will be replaced.",
          "doc-url": "https://v3.vuejs.org/api/built-in-components.html#slot",
          "attributes": [
            {
              "name": "name",
              "description": "Used for named slot.",
              "value": {
                "type": "string"
              }
            }
          ],
          "vue-special-properties": [
            {
              "name": "Scoped slot binding",
              "pattern": "(?!v-).*",
              "doc-hide-pattern": true,
              "priority": "low",
              "attribute-value": {
                "required": true
              }
            }
          ]
        },
        {
          "name": "textarea",
          "extension": true,
          "vue-special-properties": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "select",
          "extension": true,
          "vue-special-properties": [
            {
              "name": "value"
            }
          ]
        }
      ],
      "attributes": [
        {
          "name": "data-*",
          "description": "The `data-*` global attributes form a class of attributes called custom data attributes, that allow proprietary information to be exchanged between the HTML and its DOM representation by scripts.",
          "doc-url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*",
          "pattern": {
            "template": [
              "data-",
              {
                "regex": ".*"
              }
            ]
          },
          "hide-from-completion": true
        },
        {
          "name": "Vue directive",
          "description": "Directives are special attributes with the `v-` prefix. Directive attribute values are expected to be a single JavaScript expression (with the exception of `v-for` and `v-on`). A directive's job is to reactively apply side effects to the DOM when the value of its expression changes.",
          "doc-url": "https://v3.vuejs.org/guide/template-syntax.html#directives",
          "virtual": true,
          "value": {
            "kind": "expression",
            "type": "any",
            "required": false
          },
          "exclusive-contributions": [
            "/html/modifiers"
          ],
          "pattern": {
            "items": "/html/vue-directives",
            "template": [
              "v-",
              "#item:Vue directive",
              {
                "delegate": "argument",
                "template": [
                  ":",
                  "#...",
                  "#item:argument"
                ],
                "required": false,
                "proximity": 5
              },
              {
                "items": "/html/modifiers",
                "template": [
                  ".",
                  "#item:modifier"
                ],
                "required": false,
                "repeat": true
              }
            ]
          }
        },
        {
          "name": "v-on alias",
          "description": "Attaches an event listener to the element. The event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present.\n\nWhen used on a normal element, it listens to *native DOM events* only. When used on a custom element component, it listens to *custom events* emitted on that child component.\n\nWhen listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special `$event` property: `v-on:click=\"handle('ok', $event)\"`.\n\n`v-on` also supports binding to an object of event/listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.",
          "doc-url": "https://v3.vuejs.org/api/directives.html#v-on",
          "virtual": true,
          "value": {
            "kind": "expression",
            "type": "any",
            "required": false
          },
          "exclusive-contributions": [
            "/html/modifiers"
          ],
          "pattern": {
            "proximity": 10,
            "delegate": "/html/vue-directives/on",
            "template": [
              "@",
              "$...",
              {
                "delegate": "argument",
                "template": [
                  "#item:attribute or property name"
                ],
                "required": true
              },
              {
                "items": "/html/modifiers",
                "template": [
                  ".",
                  "#item:modifier"
                ],
                "required": false,
                "repeat": true
              }
            ]
          }
        },
        {
          "name": "v-bind alias",
          "description": "Dynamically bind one or more attributes, or a component prop to an expression.\n\nWhen used to bind the `class` or `style` attribute, it supports additional value types such as Array or Objects. See linked guide section below for more details.\n\nWhen used for prop binding, the prop must be properly declared in the child component.\n\nWhen used without an argument, can be used to bind an object containing attribute name-value pairs. Note in this mode `class` and `style` does not support Array or Objects.",
          "doc-url": "https://v3.vuejs.org/api/directives.html#v-bind",
          "virtual": true,
          "value": {
            "kind": "expression",
            "type": "any",
            "required": false
          },
          "exclusive-contributions": [
            "/html/modifiers"
          ],
          "pattern": {
            "proximity": 10,
            "delegate": "/html/vue-directives/bind",
            "template": [
              ":",
              "$...",
              {
                "delegate": "argument",
                "required": true,
                "template": [
                  "#item:event name"
                ]
              },
              {
                "items": "/html/modifiers",
                "template": [
                  ".",
                  "#item:modifier"
                ],
                "required": false,
                "repeat": true
              }
            ]
          }
        },
        {
          "name": "v-slot alias",
          "description": "Denote named slots or slots that expect to receive props.",
          "doc-url": "https://v3.vuejs.org/api/directives.html#v-slot",
          "virtual": true,
          "value": {
            "kind": "expression",
            "type": "any",
            "required": false
          },
          "pattern": {
            "proximity": 10,
            "items": [
              "vue-available-slots",
              "/html/vue-dynamic-argument"
            ],
            "template": [
              "#",
              "$...",
              "#item:slot name"
            ]
          }
        },
        {
          "name": "v-slot",
          "description": "Denote named slots or slots that expect to receive props.",
          "doc-url": "https://v3.vuejs.org/api/directives.html#v-slot",
          "virtual": true,
          "value": {
            "kind": "expression",
            "type": "any",
            "required": false
          },
          "pattern": {
            "template": [
              "v-slot",
              {
                "items": [
                  "vue-available-slots",
                  "/html/vue-dynamic-argument"
                ],
                "required": false,
                "proximity": 5,
                "template": [
                  ":",
                  "#...",
                  "#item:slot name"
                ]
              }
            ]
          }
        },
        {
          "name": "slot-scope",
          "description": "**Prefer v-slot in 2.6.0+**\n\nUsed to denote an element or component as a scoped slot. The attribute’s value should be a valid JavaScript expression that can appear in the argument position of a function signature. This means in supported environments you can also use ES2015 destructuring in the expression. Serves as a replacement for `scope` in 2.5.0+.\n\nThis attribute does not support dynamic binding.",
          "doc-url": "https://vuejs.org/v2/api/#slot-scope-deprecated",
          "deprecated": true,
          "virtual": true,
          "value": {
            "kind": "expression"
          }
        },
        {
          "name": "slot",
          "description": "**Prefer v-slot in 2.6.0+**\n\nUsed on content inserted into child components to indicate which named slot the content belongs to.",
          "doc-url": "https://vuejs.org/v2/api/#slot-deprecated",
          "deprecated": true,
          "value": {
            "kind": "plain",
            "type": "enum"
          },
          "values": {
            "pattern": {
              "items": "vue-available-slots"
            }
          }
        },
        {
          "name": "ref",
          "priority": "low",
          "proximity": 10,
          "description": "`ref` is used to register a reference to an element or a child component. The reference will be registered under the parent component’s `$refs` object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance.",
          "doc-url": "https://vuejs.org/v2/api/#ref",
          "value": {
            "type": "string"
          }
        },
        {
          "name": "is",
          "priority": "low",
          "proximity": 10,
          "description": "Used for [dynamic components](https://vuejs.org/v2/guide/components.html#Dynamic-Components) and to work around [limitations of in-DOM templates](https://vuejs.org/v2/guide/components.html#DOM-Template-Parsing-Caveats).",
          "doc-url": "https://vuejs.org/v2/api/#is",
          "value": {
            "type": [
              "string",
              "object"
            ]
          }
        },
        {
          "name": "key",
          "priority": "low",
          "proximity": 10,
          "description": "The `key` special attribute is primarily used as a hint for Vue’s virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.\n\nChildren of the same common parent must have unique keys. Duplicate keys will cause render errors.\n\nThe most common use case is combined with v-for:",
          "doc-url": "https://vuejs.org/v2/api/#key",
          "value": {
            "type": [
              "string",
              "number",
              "boolean"
            ]
          }
        }
      ],
      "vue-file-top-elements": [
        {
          "name": "style",
          "priority": "high",
          "description": "The top-level `<style>` element serves as a container for the component styles.",
          "attributes": [
            {
              "name": "lang"
            },
            {
              "name": "src"
            },
            {
              "name": "module",
              "value": {
                "required": false
              }
            },
            {
              "name": "scoped",
              "value": {
                "kind": "no-value"
              }
            }
          ]
        },
        {
          "name": "script",
          "priority": "high",
          "description": "The top-level `<script>` element serves as a container for the component code.",
          "attributes": [
            {
              "name": "lang"
            },
            {
              "name": "id"
            },
            {
              "name": "src"
            },
            {
              "name": "setup",
              "value": {
                "kind": "expression",
                "required": false
              }
            }
          ]
        },
        {
          "name": "template",
          "priority": "high",
          "description": "The top-level `<template>` element serves as a container for the component template contents.",
          "attributes": [
            {
              "name": "lang"
            },
            {
              "name": "src"
            },
            {
              "name": "functional",
              "value": {
                "kind": "no-value"
              }
            }
          ]
        }
      ],
      "vue-components": [
        {
          "name": "Component",
          "doc-url": "https://vuejs.org/v2/api/#component",
          "description": "A “meta component” for rendering dynamic components. The actual component to render is determined by the `is` prop.",
          "props": [
            {
              "name": "is",
              "description": "An HTML tag name, a Component name or Component class reference.",
              "type": [
                "string",
                "object"
              ]
            },
            {
              "name": "inline-template",
              "type": "boolean"
            }
          ]
        },
        {
          "name": "Transition components base",
          "abstract": true,
          "props": [
            {
              "name": "name",
              "description": "Used to automatically generate transition CSS class names. e.g. `name: 'fade'` will auto expand to `.fade-enter`, `,.fade-enter-active`, etc.",
              "default": "\"v\"",
              "type": "string"
            },
            {
              "name": "appear",
              "description": "Whether to apply transition on initial render.",
              "type": "boolean",
              "default": "false"
            },
            {
              "name": "css",
              "description": "Whether to apply CSS transition classes. Defaults to `true`. If set to `false`, will only trigger JavaScript hooks registered via component events.",
              "default": "true",
              "type": "boolean"
            },
            {
              "name": "type",
              "description": "Specifies the type of transition events to wait for to determine transition end timing. Available values are `\"transition\"` and `\"animation\"`. By default, it will automatically detect the type that has a longer duration.",
              "type": [
                "\"transition\"",
                "\"animation\""
              ]
            },
            {
              "name": "duration",
              "description": "Specifies the duration of transition. By default, Vue waits for the first `transitionend` or `animationend` event on the root transition element.",
              "type": [
                "number",
                "{ enter: number, leave: number }"
              ]
            },
            {
              "name": "enterClass",
              "type": "string"
            },
            {
              "name": "leaveClass",
              "type": "string"
            },
            {
              "name": "appearClass",
              "type": "string"
            },
            {
              "name": "enterToClass",
              "type": "string"
            },
            {
              "name": "leaveToClass",
              "type": "string"
            },
            {
              "name": "appearToClass",
              "type": "string"
            },
            {
              "name": "enterActiveClass",
              "type": "string"
            },
            {
              "name": "leaveActiveClass",
              "type": "string"
            },
            {
              "name": "appearActiveClass",
              "type": "string"
            }
          ],
          "events": [
            {
              "name": "before-enter"
            },
            {
              "name": "before-leave"
            },
            {
              "name": "before-appear"
            },
            {
              "name": "enter"
            },
            {
              "name": "leave"
            },
            {
              "name": "appear"
            },
            {
              "name": "after-enter"
            },
            {
              "name": "after-leave"
            },
            {
              "name": "after-appear"
            },
            {
              "name": "enter-cancelled"
            },
            {
              "name": "leave-cancelled"
            },
            {
              "name": "appear-cancelled"
            }
          ],
          "slots": [
            {
              "name": "default"
            }
          ]
        },
        {
          "name": "Transition",
          "extends": "/html/vue-components/Transition components base",
          "description": "`<transition>` serve as transition effects for *single* element/component. The `<transition>` only applies the transition behavior to the wrapped content inside; it doesn't render an extra DOM element, or show up in the inspected component hierarchy.",
          "doc-url": "https://vuejs.org/v2/api/#transition",
          "props": [
            {
              "name": "mode",
              "description": "Controls the timing sequence of leaving/entering transitions. Available modes are `\"out-in\"` and `\"in-out\"`; defaults to simultaneous.",
              "attribute-value": {
                "type": "enum"
              },
              "values": [
                {
                  "name": "out-in",
                  "description": "Current element transitions out first, then when complete, the new element transitions in."
                },
                {
                  "name": "in-out",
                  "description": "New element transitions in first, then when complete, the current element transitions out."
                }
              ]
            }
          ]
        },
        {
          "name": "TransitionGroup",
          "extends": "/html/vue-components/Transition components base",
          "description": "`<transition-group>` serve as transition effects for *multiple* elements/components. The `<transition-group>` renders a real DOM element. By default it renders a `<span>`, and you can configure what element it should render via the `tag` attribute.",
          "doc-url": "https://vuejs.org/v2/api/#transition-group",
          "props": [
            {
              "name": "tag",
              "default": "\"span\"",
              "type": "string"
            },
            {
              "name": "moveClass",
              "description": "Overwrite CSS class applied during moving transition"
            }
          ]
        },
        {
          "name": "KeepAlive",
          "doc-url": "https://vuejs.org/v2/api/#keep-alive",
          "description": "When wrapped around a dynamic component, `<keep-alive>` caches the inactive component instances without destroying them. Similar to `<transition>`, `<keep-alive>` is an abstract component: it doesn’t render a DOM element itself, and doesn’t show up in the component parent chain.",
          "props": [
            {
              "name": "include",
              "description": "Only components with matching names will be cached.",
              "type": [
                "string",
                "RegExp",
                "(string|RegExp)[]"
              ]
            },
            {
              "name": "exclude",
              "description": "Any component with a matching name will not be cached.",
              "type": [
                "string",
                "RegExp",
                "(string|RegExp)[]"
              ]
            },
            {
              "name": "max",
              "description": "The maximum number of component instances to cache.",
              "type": "number"
            }
          ]
        }
      ],
      "vue-directives": [
        {
          "name": "text",
          "description": "Updates the element’s `textContent`. If you need to update the part of `textContent`, you should use `{{ Mustache }}` interpolations.",
          "doc-url": "https://vuejs.org/v2/api/#v-text",
          "attribute-value": {
            "type": "string",
            "required": true
          }
        },
        {
          "name": "html",
          "description": "Updates the element’s `innerHTML`. *Note that the contents are inserted as plain HTML - they will not be compiled as Vue templates*. If you find yourself trying to compose templates using `v-html`, try to rethink the solution by using components instead.",
          "doc-url": "https://vuejs.org/v2/api/#v-html",
          "attribute-value": {
            "type": "string",
            "required": true
          }
        },
        {
          "name": "show",
          "description": "Toggles the element’s `display` CSS property based on the truthy-ness of the expression value.\n\nThis directive triggers transitions when its condition changes.",
          "doc-url": "https://vuejs.org/v2/api/#v-show",
          "attribute-value": {
            "required": true
          }
        },
        {
          "name": "if",
          "description": "Conditionally render the element based on the truthy-ness of the expression value. The element and its contained directives / components are destroyed and re-constructed during toggles. If the element is a `<template>` element, its content will be extracted as the conditional block.\n\nThis directive triggers transitions when its condition changes.",
          "doc-url": "https://vuejs.org/v2/api/#v-if",
          "attribute-value": {
            "required": true
          }
        },
        {
          "name": "else",
          "description": "Denote the “else block” for `v-if` or a `v-if/v-else-if` chain.",
          "doc-url": "https://vuejs.org/v2/api/#v-else",
          "attribute-value": {
            "kind": "no-value"
          }
        },
        {
          "name": "else-if",
          "description": "Denote the “else if block” for `v-if`. Can be chained.",
          "doc-url": "https://vuejs.org/v2/api/#v-else-if",
          "attribute-value": {
            "required": true
          }
        },
        {
          "name": "for",
          "description": "Render the element or template block multiple times based on the source data. The directive’s value must use the special syntax `alias in expression` to provide an alias for the current element being iterated on. Alternatively, you can also specify an alias for the index (or the key if used on an Object). The default behavior of `v-for` will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the `key` special attribute.",
          "doc-url": "https://vuejs.org/v2/api/#v-for",
          "attribute-value": {
            "type": "void",
            "required": true
          }
        },
        {
          "name": "on",
          "description": "Attaches an event listener to the element. The event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present.\n\nWhen used on a normal element, it listens to *native DOM events* only. When used on a custom element component, it listens to *custom events* emitted on that child component.\n\nWhen listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special `$event` property: `v-on:click=\"handle('ok', $event)\"`.\n\nStarting in 2.4.0+, `v-on` also supports binding to an object of event/listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.",
          "doc-url": "https://vuejs.org/v2/api/#v-on",
          "attribute-value": {
            "type": "void",
            "required": true
          },
          "argument": {
            "name": "event name",
            "description": "Optional event name",
            "pattern": {
              "items": [
                "/js/events",
                "/html/vue-dynamic-argument"
              ]
            },
            "js": {
              "events": [
                {
                  "name": "Custom event",
                  "pattern": "(?!\\.).*",
                  "priority": "lowest",
                  "doc-hide-pattern": true,
                  "hide-from-completion": true
                }
              ]
            }
          },
          "modifiers": [
            {
              "name": "stop",
              "description": "Call `event.stopPropagation()`.",
              "attribute-value": {
                "required": false
              }
            },
            {
              "name": "prevent",
              "description": "Call `event.preventDefault()`.",
              "attribute-value": {
                "required": false
              }
            },
            {
              "name": "capture",
              "description": "Add event listener in capture mode."
            },
            {
              "name": "self",
              "description": "Only trigger handler if event was dispatched from this element."
            },
            {
              "name": "{keyCode | keyAlias}",
              "pattern": {
                "regex": ".*"
              },
              "description": "Only trigger handler on certain keys."
            },
            {
              "name": "native",
              "description": "Listen for a native event on the root element of component."
            },
            {
              "name": "once",
              "description": "Trigger handler at most once."
            },
            {
              "name": "passive",
              "description": "attaches a DOM event with `{ passive: true }`."
            }
          ],
          "js": {
            "events": [
              {
                "name": "Mouse button event modifiers",
                "extension": true,
                "pattern": {
                  "or": [
                    "click",
                    "dblclick",
                    "mousedown",
                    "mouseup"
                  ]
                },
                "html": {
                  "modifiers": [
                    {
                      "name": "left",
                      "description": "Only trigger handler for left button mouse events."
                    },
                    {
                      "name": "right",
                      "description": "Only trigger handler for right button mouse events."
                    },
                    {
                      "name": "middle",
                      "description": "Only trigger handler for middle button mouse events."
                    }
                  ]
                }
              },
              {
                "name": "Key event modifiers",
                "extension": true,
                "pattern": {
                  "or": [
                    "keydown",
                    "keypress",
                    "keyup"
                  ]
                },
                "html": {
                  "modifiers": [
                    {
                      "name": "Key alias",
                      "pattern": {
                        "or": [
                          "enter",
                          "tab",
                          "delete",
                          "esc",
                          "space",
                          "up",
                          "down",
                          "left",
                          "right"
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "System event modifiers",
                "extension": true,
                "pattern": {
                  "or": [
                    "keydown",
                    "keypress",
                    "keyup",
                    "click",
                    "contextmenu",
                    "dblclick",
                    "mousedown",
                    "mouseenter",
                    "mouseleave",
                    "mousemove",
                    "mouseout",
                    "mouseover",
                    "mouseup",
                    "show",
                    "drag",
                    "dragend",
                    "dragenter",
                    "dragleave",
                    "dragover",
                    "dragstart",
                    "drop"
                  ]
                },
                "html": {
                  "modifiers": [
                    {
                      "name": "System modifier key",
                      "description": "Triggers mouse or keyboard event listeners only when the modifier key is pressed.",
                      "pattern": {
                        "or": [
                          "ctrl",
                          "alt",
                          "shift",
                          "meta"
                        ]
                      }
                    },
                    {
                      "name": "exact",
                      "description": "Allows control of the exact combination of system modifiers needed to trigger an event."
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "bind",
          "description": "Dynamically bind one or more attributes, or a component prop to an expression.\n\nWhen used to bind the `class` or `style` attribute, it supports additional value types such as Array or Objects. See linked guide section below for more details.\n\nWhen used for prop binding, the prop must be properly declared in the child component.\n\nWhen used without an argument, can be used to bind an object containing attribute name-value pairs. Note in this mode `class` and `style` does not support Array or Objects.",
          "doc-url": "https://vuejs.org/v2/api/#v-bind",
          "argument": {
            "name": "attribute or property name",
            "description": "Optional attribute or property name",
            "pattern": {
              "items": [
                {
                  "path": "/html/attributes",
                  "includeVirtual": false,
                  "filter": "vue-bind"
                },
                "/html/vue-special-properties",
                "/html/vue-dynamic-argument"
              ]
            }
          },
          "modifiers": [
            {
              "name": "prop",
              "description": "Bind as a DOM property instead of an attribute. If the tag is a component then `.prop` will set the property on the component’s `$el`"
            },
            {
              "name": "camel",
              "description": "Transform the kebab-case attribute name into camelCase."
            },
            {
              "name": "sync",
              "description": "A syntax sugar that expands into a `v-on` handler for updating the bound value"
            }
          ]
        },
        {
          "name": "model",
          "description": "Create a two-way binding on a form input element or a component. For detailed usage and other notes, see the Guide section linked below.",
          "doc-url": "https://vuejs.org/v2/api/#v-model",
          "attribute-value": {
            "type": "any",
            "required": true
          },
          "argument": {
            "name": "v-model prop/event pair to bind",
            "pattern": {
              "items": [
                {
                  "path": "/html/attributes",
                  "includeVirtual": false,
                  "filter": "match-with-target-list",
                  "target-list": "/js/events",
                  "prefix": "update:"
                },
                "/html/vue-dynamic-argument"
              ]
            }
          },
          "modifiers": [
            {
              "name": "lazy",
              "description": "Listen to `change` events instead of `input`"
            },
            {
              "name": "number",
              "description": "Cast valid input string to numbers"
            },
            {
              "name": "trim",
              "description": "Trim input"
            }
          ]
        },
        {
          "name": "pre",
          "description": "Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.",
          "doc-url": "https://vuejs.org/v2/api/#v-pre",
          "attribute-value": {
            "kind": "no-value"
          }
        },
        {
          "name": "cloak",
          "description": "This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as `[v-cloak] { display: none }`, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.",
          "doc-url": "https://vuejs.org/v2/api/#v-cloak",
          "attribute-value": {
            "kind": "no-value"
          }
        },
        {
          "name": "once",
          "description": "Render the element and component *once* only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.",
          "doc-url": "https://vuejs.org/v2/api/#v-once",
          "attribute-value": {
            "kind": "no-value"
          }
        },
        {
          "name": "Vue Composition API local directive",
          "pattern": {
            "items": "vue-script-setup-local-directives"
          }
        }
      ],
      "vue-dynamic-argument": {
        "name": "Dynamic directive argument",
        "description": "It is possible to use a JavaScript expression in a directive argument by wrapping it with square brackets. The expression's evaluated value will be used as the final value for the argument.\n\nDynamic arguments are expected to evaluate to a string, with the exception of `null`. The special value `null` can be used to explicitly remove the binding. Any other non-string value will trigger a warning.",
        "doc-url": "https://v2.vuejs.org/v2/guide/syntax.html#Dynamic-Arguments",
        "hide-from-completion": true,
        "doc-hide-pattern": true,
        "pattern": "\\[[^\\]]+\\]",
        "priority": "high"
      }
    },
    "css": {
      "pseudo-classes": [
        {
          "name": "deep",
          "doc-url": "https://github.com/vuejs/rfcs/blob/master/active-rfcs/0023-scoped-styles-changes.md#deep-selectors",
          "arguments": true,
          "description": "Make a rule that targets child components."
        }
      ],
      "pseudo-elements": [
        {
          "name": "v-deep",
          "doc-url": "https://vue-loader.vuejs.org/guide/scoped-css.html",
          "arguments": false,
          "description": "Make a rule that targets child components."
        }
      ],
      "functions": [
        {
          "name": "v-bind",
          "description": "Use `v-bind` to links CSS values to dynamic Vue component state. The syntax works with `<script setup>`, and supports JavaScript expressions, which must be wrapped in quotes.\n\nThe actual value will be compiled into a hashed CSS custom property, so the CSS is still static.",
          "doc-url": "https://v3.vuejs.org/api/sfc-style.html#state-driven-dynamic-css"
        }
      ]
    }
  }
}
