{
  "$schema": "../../../../community/platform/webSymbols/web-types-gen/resources/web-types.json",
  "framework": "vue",
  "name": "vue",
  "version": "1.0.0",
  "js-types-syntax": "typescript",
  "description-markup": "markdown",
  "default-icon": "icons/vue.svg",
  "framework-config": {
    "enable-when": {
      "node-packages": [
        "vue",
        "@vue/cli"
      ],
      "file-extensions": [
        "vue"
      ],
      "ide-libraries": [
        "vue"
      ]
    }
  },
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "Vue component",
          "pattern": {
            "items": "/html/vue-components"
          },
          "attributes": [
            {
              "name": "Component property",
              "pattern": {
                "or": [
                  {
                    "items": "props",
                    "priority": "highest"
                  },
                  {
                    "delegate": "vue-custom-prop",
                    "priority": "lowest"
                  }
                ]
              },
              "value": {
                "type": "of-match"
              },
              "vue-custom-prop": {
                "name": "Custom Vue component property",
                "pattern": "(?!v-).*",
                "doc-hide-pattern": true,
                "attribute-value": {
                  "required": false
                },
                "hide-from-completion": true
              }
            }
          ]
        },
        {
          "name": "template",
          "extension": true,
          "attributes": [
            {
              "name": "scope",
              "deprecated": true,
              "value": {
                "kind": "expression"
              }
            }
          ]
        },
        {
          "name": "slot",
          "doc-url": "https://v1.vuejs.org/api/#slot",
          "description": "`<slot>` elements serve as content distribution outlets in component templates. The slot element itself will be replaced.\nA slot with the `name` attribute is called a named slot. A named slot will distribute content with a `slot` attribute that matches its name.",
          "attributes": [
            {
              "name": "name",
              "description": "Used for named slot.",
              "value": {
                "type": "string"
              }
            }
          ],
          "vue-special-properties": [
            {
              "name": "Scoped slot binding",
              "pattern": "(?!v-).*",
              "doc-hide-pattern": true,
              "priority": "low",
              "attribute-value": {
                "required": true
              }
            }
          ]
        },
        {
          "name": "partial",
          "doc-url": "https://v1.vuejs.org/api/#partial",
          "description": "`<partial>` elements serve as outlets for registered template partials. Partial contents are also compiled by Vue when inserted. The `<partial>` element itself will be replaced. It requires a `name` attribute which will be used to resolve the partial’s content.",
          "attributes": [
            {
              "name": "name",
              "required": true
            }
          ]
        },
        {
          "name": "textarea",
          "extension": true,
          "vue-special-properties": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "select",
          "extension": true,
          "vue-special-properties": [
            {
              "name": "value"
            }
          ]
        }
      ],
      "attributes": [
        {
          "name": "data-*",
          "description": "The `data-*` global attributes form a class of attributes called custom data attributes, that allow proprietary information to be exchanged between the HTML and its DOM representation by scripts.",
          "doc-url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*",
          "pattern": {
            "template": [
              "data-",
              {
                "regex": ".*"
              }
            ]
          },
          "hide-from-completion": true
        },
        {
          "name": "Vue directive",
          "description": "Directives are special attributes with the `v-` prefix. Directive attribute values are expected to be a single JavaScript expression (with the exception of `v-for` and `v-on`). A directive's job is to reactively apply side effects to the DOM when the value of its expression changes.",
          "doc-url": "https://v3.vuejs.org/guide/template-syntax.html#directives",
          "virtual": true,
          "value": {
            "kind": "expression",
            "type": "any",
            "required": false
          },
          "exclusive-contributions": [
            "/html/modifiers"
          ],
          "pattern": {
            "items": "/html/vue-directives",
            "template": [
              "v-",
              "#item:Vue directive",
              {
                "delegate": "argument",
                "template": [
                  ":",
                  "#...",
                  "#item:argument"
                ],
                "required": false,
                "proximity": 5
              },
              {
                "items": "/html/modifiers",
                "template": [
                  ".",
                  "#item:modifier"
                ],
                "required": false,
                "repeat": true
              }
            ]
          }
        },
        {
          "name": "v-on alias",
          "description": "Attaches an event listener to the element. The event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present.\n\nWhen used on a normal element, it listens to *native DOM events* only. When used on a custom element component, it listens to *custom events* emitted on that child component.\n\nWhen listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special `$event` property: `v-on:click=\"handle('ok', $event)\"`.\n\n`v-on` also supports binding to an object of event/listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.",
          "doc-url": "https://v3.vuejs.org/api/directives.html#v-on",
          "virtual": true,
          "value": {
            "kind": "expression",
            "type": "any",
            "required": false
          },
          "exclusive-contributions": [
            "/html/modifiers"
          ],
          "pattern": {
            "proximity": 10,
            "delegate": "/html/vue-directives/on",
            "template": [
              "@",
              "$...",
              {
                "delegate": "argument",
                "template": [
                  "#item:attribute or property name"
                ],
                "required": true
              },
              {
                "items": "/html/modifiers",
                "template": [
                  ".",
                  "#item:modifier"
                ],
                "required": false,
                "repeat": true
              }
            ]
          }
        },
        {
          "name": "v-bind alias",
          "description": "Dynamically bind one or more attributes, or a component prop to an expression.\n\nWhen used to bind the `class` or `style` attribute, it supports additional value types such as Array or Objects. See linked guide section below for more details.\n\nWhen used for prop binding, the prop must be properly declared in the child component.\n\nWhen used without an argument, can be used to bind an object containing attribute name-value pairs. Note in this mode `class` and `style` does not support Array or Objects.",
          "doc-url": "https://v3.vuejs.org/api/directives.html#v-bind",
          "virtual": true,
          "value": {
            "kind": "expression",
            "type": "any",
            "required": false
          },
          "exclusive-contributions": [
            "/html/modifiers"
          ],
          "pattern": {
            "proximity": 10,
            "delegate": "/html/vue-directives/bind",
            "template": [
              ":",
              "$...",
              {
                "delegate": "argument",
                "required": true,
                "template": [
                  "#item:event name"
                ]
              },
              {
                "items": "/html/modifiers",
                "template": [
                  ".",
                  "#item:modifier"
                ],
                "required": false,
                "repeat": true
              }
            ]
          }
        },
        {
          "name": "slot-scope",
          "deprecated": true,
          "virtual": true,
          "value": {
            "kind": "expression"
          }
        },
        {
          "name": "slot",
          "deprecated": true
        },
        {
          "name": "ref",
          "priority": "low"
        },
        {
          "name": "is",
          "priority": "low"
        },
        {
          "name": "key",
          "priority": "low"
        }
      ],
      "vue-file-top-elements": [
        {
          "name": "style",
          "priority": "high",
          "description": "The top-level `<style>` element serves as a container for the component styles.",
          "attributes": [
            {
              "name": "lang"
            },
            {
              "name": "src"
            },
            {
              "name": "module",
              "value": {
                "required": false
              }
            },
            {
              "name": "scoped",
              "value": {
                "kind": "no-value"
              }
            }
          ]
        },
        {
          "name": "script",
          "priority": "high",
          "description": "The top-level `<script>` element serves as a container for the component code.",
          "attributes": [
            {
              "name": "lang"
            },
            {
              "name": "id"
            },
            {
              "name": "src"
            }
          ]
        },
        {
          "name": "template",
          "priority": "high",
          "description": "The top-level `<template>` element serves as a container for the component template contents.",
          "attributes": [
            {
              "name": "lang"
            },
            {
              "name": "src"
            },
            {
              "name": "functional",
              "value": {
                "kind": "no-value"
              }
            }
          ]
        }
      ],
      "vue-components": [
        {
          "name": "Component",
          "doc-url": "https://v1.vuejs.org/api/#component",
          "description": "Alternative syntax for invoking components. Primarily used for dynamic components with the `is` attribute.",
          "props": [
            {
              "name": "is"
            },
            {
              "name": "keep-alive",
              "type": "boolean"
            },
            {
              "name": "transition-mode"
            }
          ]
        }
      ],
      "vue-directives": [
        {
          "name": "text",
          "description": "Updates the element’s `textContent`.\n\nInternally, `{{ Mustache }}` interpolations are also compiled as a `v-text` directive on a textNode. The directive form requires a wrapper element, but offers slightly better performance and avoids FOUC (Flash of Uncompiled Content).",
          "doc-url": "https://v1.vuejs.org/api/#v-text",
          "attribute-value": {
            "required": true
          }
        },
        {
          "name": "html",
          "description": "Updates the element’s `innerHTML`. The contents are inserted as plain HTML - data bindings are ignored. If you need to reuse template pieces, you should use partials.\n\nInternally, `{{{ Mustache }}}` interpolations are also compiled as a `v-html` directive using anchor nodes. The directive form requires a wrapper element, but offers slightly better performance and avoids FOUC (Flash of Uncompiled Content).",
          "doc-url": "https://v1.vuejs.org/api/#v-html",
          "attribute-value": {
            "required": true
          }
        },
        {
          "name": "show",
          "description": "Toggle’s the element’s `display` CSS property based on the truthy-ness of the expression value. Triggers transitions if present.",
          "doc-url": "https://v1.vuejs.org/api/#v-show",
          "attribute-value": {
            "required": true
          }
        },
        {
          "name": "if",
          "description": "Conditionally render the element based on the truthy-ness of the expression value. The element and its contained data bindings / components are destroyed and re-constructed during toggles. If the element is a `<template>` element, its content will be extracted as the conditional block.",
          "doc-url": "https://v1.vuejs.org/api/#v-if",
          "attribute-value": {
            "required": true
          }
        },
        {
          "name": "else",
          "description": "Denote the “else block” for `v-if` and `v-show`.",
          "doc-url": "https://v1.vuejs.org/api/#v-else",
          "attribute-value": {
            "kind": "no-value"
          }
        },
        {
          "name": "for",
          "description": "Render the element or template block multiple times based on the source data. The directive’s value must use the special syntax `alias (in|of)` expression to provide an alias for the current element being iterated on.",
          "doc-url": "https://v1.vuejs.org/api/#v-for",
          "attribute-value": {
            "type": "void",
            "required": true
          }
        },
        {
          "name": "on",
          "description": "Attaches an event listener to the element. The event type is denoted by the argument. The expression can either be a method name or an inline statement, or simply omitted when there are modifiers present.\n\nWhen used on a normal element, it listens to **native DOM events** only. When used on a custom element component, it also listens to **custom events** emitted on that child component.\n\nWhen listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special `$event` property: `v-on:click=\"handle('ok', $event)\"`.\n\n**1.0.11+** When listening the custom events, inline statements have access to the special `$arguments` property, which is an array of the additional arguments passed to the child components’ `$emit` call.",
          "doc-url": "https://v1.vuejs.org/api/#v-on",
          "attribute-value": {
            "type": "void",
            "required": true
          },
          "argument": {
            "name": "event name",
            "description": "Event name",
            "required": true,
            "pattern": {
              "items": "/js/events"
            },
            "js": {
              "events": [
                {
                  "name": "Custom event",
                  "pattern": "(?!\\.).*",
                  "priority": "lowest",
                  "doc-hide-pattern": true,
                  "hide-from-completion": true
                }
              ]
            }
          },
          "modifiers": [
            {
              "name": "stop",
              "description": "Call `event.stopPropagation()`.",
              "attribute-value": {
                "required": false
              }
            },
            {
              "name": "prevent",
              "description": "Call `event.preventDefault()`.",
              "attribute-value": {
                "required": false
              }
            },
            {
              "name": "capture",
              "description": "Add event listener in capture mode."
            },
            {
              "name": "self",
              "description": "Only trigger handler if event was dispatched from this element."
            },
            {
              "name": "{keyCode | keyAlias}",
              "pattern": {
                "regex": ".*"
              },
              "description": "Only trigger handler on certain keys."
            },
            {
              "name": "native",
              "description": "Listen for a native event on the root element of component."
            },
            {
              "name": "once",
              "description": "Trigger handler at most once."
            }
          ],
          "js": {
            "events": [
              {
                "name": "Mouse button event modifiers",
                "extension": true,
                "pattern": {
                  "or": [
                    "click",
                    "dblclick",
                    "mousedown",
                    "mouseup"
                  ]
                },
                "html": {
                  "modifiers": [
                    {
                      "name": "left",
                      "description": "Only trigger handler for left button mouse events."
                    },
                    {
                      "name": "right",
                      "description": "Only trigger handler for right button mouse events."
                    },
                    {
                      "name": "middle",
                      "description": "Only trigger handler for middle button mouse events."
                    }
                  ]
                }
              },
              {
                "name": "Key event modifiers",
                "extension": true,
                "pattern": {
                  "or": [
                    "keydown",
                    "keypress",
                    "keyup"
                  ]
                },
                "html": {
                  "modifiers": [
                    {
                      "name": "Key alias",
                      "pattern": {
                        "or": [
                          "enter",
                          "tab",
                          "delete",
                          "esc",
                          "space",
                          "up",
                          "down",
                          "left",
                          "right"
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "name": "System event modifiers",
                "extension": true,
                "pattern": {
                  "or": [
                    "keydown",
                    "keypress",
                    "keyup",
                    "click",
                    "contextmenu",
                    "dblclick",
                    "mousedown",
                    "mouseenter",
                    "mouseleave",
                    "mousemove",
                    "mouseout",
                    "mouseover",
                    "mouseup",
                    "show",
                    "drag",
                    "dragend",
                    "dragenter",
                    "dragleave",
                    "dragover",
                    "dragstart",
                    "drop"
                  ]
                },
                "html": {
                  "modifiers": [
                    {
                      "name": "System modifier key",
                      "description": "Triggers mouse or keyboard event listeners only when the modifier key is pressed.",
                      "pattern": {
                        "or": [
                          "ctrl",
                          "alt",
                          "shift",
                          "meta"
                        ]
                      }
                    },
                    {
                      "name": "exact",
                      "description": "Allows control of the exact combination of system modifiers needed to trigger an event."
                    }
                  ]
                }
              }
            ]
          }
        },
        {
          "name": "bind",
          "description": "Dynamically bind one or more attributes, or a component prop to an expression.\n\nWhen used to bind the `class` or `style` attribute, it supports additional value types such as Array or Objects. See linked guide section below for more details.\n\nWhen used for prop binding, the prop must be properly declared in the child component. Prop bindings can specify a different binding type using one of the modifiers.\n\nWhen used without an argument, can be used to bind an object containing attribute name-value pairs. Note in this mode `class` and `style` does not support Array or Objects.",
          "doc-url": "https://v1.vuejs.org/api/#v-bind",
          "attribute-value": {
            "required": true
          },
          "argument": {
            "name": "attribute or property name",
            "description": "Attribute or property name",
            "pattern": {
              "items": [
                {
                  "path": "/html/attributes",
                  "includeVirtual": false,
                  "filter": "vue-bind"
                },
                "/html/vue-special-properties"
              ]
            }
          },
          "modifiers": [
            {
              "name": "sync",
              "description": "Make the binding two-way. Only respected for prop bindings."
            },
            {
              "name": "once",
              "description": "Make the binding one-time. Only respected for prop bindings."
            },
            {
              "name": "camel",
              "description": "Convert the attribute name to camelCase when setting it. Only respected for normal attributes. Used for binding camelCase SVG attributes."
            }
          ]
        },
        {
          "name": "model",
          "description": "Create a two-way binding on a form input element. For detailed usage, see guide section linked below.",
          "doc-url": "https://v1.vuejs.org/api/#v-model",
          "attribute-value": {
            "type": "any",
            "required": true
          },
          "argument": {
            "name": "v-model prop/event pair to bind",
            "pattern": {
              "items": {
                "path": "attributes",
                "includeVirtual": false,
                "filter": "match-with-target-list",
                "target-list": "/js/events",
                "prefix": "update:"
              }
            }
          },
          "modifiers": [
            {
              "name": "lazy",
              "description": "Listen to `change` events instead of `input`"
            },
            {
              "name": "number",
              "description": "Cast valid input string to numbers"
            },
            {
              "name": "trim",
              "description": "Trim input"
            }
          ]
        },
        {
          "name": "v-ref",
          "description": "Register a reference to a child component on its parent for direct access. Does not expect an expression. Must provide an argument as the id to register with. The component instance will be accessible on its parent’s `$refs` object.\n\nWhen used on a component together with `v-for`, the registered value will be an Array containing all the child component instances corresponding to the Array they are bound to. If the data source for `v-for` is an Object, the registered value will be an Object containing key-instance pairs mirroring the source Object.",
          "doc-url": "https://v1.vuejs.org/api/#v-ref",
          "attribute-value": {
            "kind": "no-value"
          },
          "argument": {
            "name": "Reference id",
            "description": "id of the Reference",
            "pattern": ".*"
          }
        },
        {
          "name": "v-el",
          "description": "Register a reference to a DOM element on its owner Vue instance’s `$els` object for easier access.",
          "doc-url": "https://v1.vuejs.org/api/#v-el",
          "attribute-value": {
            "kind": "no-value"
          },
          "argument": {
            "name": "Reference id",
            "description": "id of the Reference",
            "pattern": ".*"
          }
        },
        {
          "name": "pre",
          "description": "Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.",
          "doc-url": "https://v1.vuejs.org/api/#v-pre",
          "attribute-value": {
            "kind": "no-value"
          }
        },
        {
          "name": "cloak",
          "description": "This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as `[v-cloak] { display: none }`, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.",
          "doc-url": "https://v1.vuejs.org/api/#v-cloak",
          "attribute-value": {
            "kind": "no-value"
          }
        }
      ]
    },
    "css": {
      "pseudo-elements": [
        {
          "name": "v-deep",
          "doc-url": "https://vue-loader.vuejs.org/guide/scoped-css.html",
          "arguments": false,
          "description": "Make a rule that targets child components."
        }
      ]
    }
  }
}
