{
  "$schema": "../../schema/web-types.json",
  "framework": "vue",
  "name": "vue",
  "version": "2.1.0",
  "contributions": {
    "html": {
      "types-syntax": "typescript",
      "description-markup": "markdown",
      "tags": [
        {
          "name": "Component",
          "doc-url": "https://vuejs.org/v2/api/#component",
          "description": "A “meta component” for rendering dynamic components. The actual component to render is determined by the `is` prop.",
          "attributes": [
            {
              "name": "is",
              "value": {
                "kind": "expression",
                "type": [
                  "string",
                  "ComponentDefinition",
                  "ComponentConstructor"
                ]
              }
            },
            {
              "name": "inline-template",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "type": "boolean"
            }
          ]
        },
        {
          "name": "Transition",
          "description": "`<transition>` serve as transition effects for single element/component. The `<transition>` only applies the transition behavior to the wrapped content inside; it doesn't render an extra DOM element, or show up in the inspected component hierarchy.",
          "doc-url": "https://vuejs.org/v2/api/#transition",
          "attributes": [
            {
              "name": "name",
              "description": "Used to automatically generate transition CSS class names. e.g. `name: 'fade'` will auto expand to `.fade-enter`, `,.fade-enter-active`, etc.",
              "default": "\"v\"",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "appear",
              "description": "Whether to apply transition on initial render.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false",
              "type": "boolean"
            },
            {
              "name": "css",
              "description": "Whether to apply CSS transition classes. Defaults to `true`. If set to `false`, will only trigger JavaScript hooks registered via component events.",
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "type": "boolean"
            },
            {
              "name": "type",
              "description": "Specifies the type of transition events to wait for to determine transition end timing. Available values are `\"transition\"` and `\"animation\"`. By default, it will automatically detect the type that has a longer duration.",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "mode",
              "description": "Controls the timing sequence of leaving/entering transitions. Available modes are `\"out-in\"` and `\"in-out\"`; defaults to simultaneous.",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "enterClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "leaveClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "appearClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "enterActiveClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "leaveActiveClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "appearActiveClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            }
          ],
          "events": [
            {
              "name": "before-enter"
            },
            {
              "name": "before-leave"
            },
            {
              "name": "before-appear"
            },
            {
              "name": "enter"
            },
            {
              "name": "leave"
            },
            {
              "name": "appear"
            },
            {
              "name": "after-enter"
            },
            {
              "name": "after-leave"
            },
            {
              "name": "after-appear"
            },
            {
              "name": "enter-cancelled"
            },
            {
              "name": "leave-cancelled"
            },
            {
              "name": "appear-cancelled"
            }
          ],
          "slots": [
            {
              "name": "default"
            }
          ]
        },
        {
          "name": "TransitionGroup",
          "description": "`<transition-group>` serve as transition effects for multiple elements/components. The `<transition-group>` renders a real DOM element. By default it renders a `<span>`, and you can configure what element it should render via the `tag` attribute.",
          "doc-url": "https://vuejs.org/v2/api/#transition-group",
          "attributes": [
            {
              "name": "tag",
              "default": "\"span\"",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "moveClass",
              "description": "Overwrite CSS class applied during moving transition"
            },
            {
              "name": "name",
              "description": "Used to automatically generate transition CSS class names. e.g. `name: 'fade'` will auto expand to `.fade-enter`, `,.fade-enter-active`, etc.",
              "default": "\"v\"",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "appear",
              "description": "Whether to apply transition on initial render.",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "default": "false",
              "type": "boolean"
            },
            {
              "name": "css",
              "description": "Whether to apply CSS transition classes. Defaults to `true`. If set to `false`, will only trigger JavaScript hooks registered via component events.",
              "default": "true",
              "value": {
                "kind": "expression",
                "type": "boolean"
              },
              "type": "boolean"
            },
            {
              "name": "type",
              "description": "Specifies the type of transition events to wait for to determine transition end timing. Available values are `\"transition\"` and `\"animation\"`. By default, it will automatically detect the type that has a longer duration.",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "enterClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "leaveClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "appearClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "enterActiveClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "leaveActiveClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            },
            {
              "name": "appearActiveClass",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            }
          ],
          "events": [
            {
              "name": "before-enter"
            },
            {
              "name": "before-leave"
            },
            {
              "name": "before-appear"
            },
            {
              "name": "enter"
            },
            {
              "name": "leave"
            },
            {
              "name": "appear"
            },
            {
              "name": "after-enter"
            },
            {
              "name": "after-leave"
            },
            {
              "name": "after-appear"
            },
            {
              "name": "enter-cancelled"
            },
            {
              "name": "leave-cancelled"
            },
            {
              "name": "appear-cancelled"
            }
          ],
          "slots": [
            {
              "name": "default"
            }
          ]
        },
        {
          "name": "KeepAlive",
          "doc-url": "https://vuejs.org/v2/api/#keep-alive",
          "description": "When wrapped around a dynamic component, `<keep-alive>` caches the inactive component instances without destroying them. Similar to `<transition>`, `<keep-alive>` is an abstract component: it doesn’t render a DOM element itself, and doesn’t show up in the component parent chain.",
          "attributes": [
            {
              "name": "include",
              "description": "Only components with matching names will be cached.",
              "value": {
                "kind": "expression",
                "type": [
                  "string",
                  "RegExp",
                  "(string|RegExp)[]"
                ]
              }
            },
            {
              "name": "exclude",
              "description": "Any component with a matching name will not be cached.",
              "value": {
                "kind": "expression",
                "type": [
                  "string",
                  "RegExp",
                  "(string|RegExp)[]"
                ]
              }
            }
          ]
        },
        {
          "name": "Slot",
          "description": "`<slot>` serve as content distribution outlets in component templates. `<slot>` itself will be replaced.",
          "doc-url": "https://vuejs.org/v2/api/#slot",
          "attributes": [
            {
              "name": "name",
              "description": "Used for named slot.",
              "value": {
                "kind": "expression",
                "type": "string"
              }
            }
          ]
        }
      ],
      "attributes": [
        {
          "name": "v-text",
          "description": "Updates the element’s `textContent`. If you need to update the part of `textContent`, you should use `{{ Mustache }}` interpolations.",
          "doc-url": "https://vuejs.org/v2/api/#v-text",
          "value": {
            "kind": "expression",
            "required": true,
            "type": "string"
          }
        },
        {
          "name": "v-html",
          "description": "Updates the element’s `innerHTML`. *Note that the contents are inserted as plain HTML - they will not be compiled as Vue templates*. If you find yourself trying to compose templates using `v-html`, try to rethink the solution by using components instead.",
          "doc-url": "https://vuejs.org/v2/api/#v-html",
          "value": {
            "kind": "expression",
            "required": true,
            "type": "string"
          }
        },
        {
          "name": "v-show",
          "description": "Toggles the element’s `display`, CSS property based on the truthy-ness of the expression value.\n\nThis directive triggers transitions when its condition changes.",
          "doc-url": "https://vuejs.org/v2/api/#v-show",
          "value": {
            "kind": "expression",
            "required": true,
            "type": "any"
          }
        },
        {
          "name": "v-if",
          "description": "Conditionally render the element based on the truthy-ness of the expression value. The element and its contained directives / components are destroyed and re-constructed during toggles. If the element is a `<template>` element, its content will be extracted as the conditional block.\n\nThis directive triggers transitions when its condition changes.",
          "doc-url": "https://vuejs.org/v2/api/#v-if",
          "value": {
            "kind": "expression",
            "required": true,
            "type": "any"
          }
        },
        {
          "name": "v-else",
          "description": "Denote the “else block” for `v-if` or a `v-if/v-else-if` chain.",
          "doc-url": "https://vuejs.org/v2/api/#v-else",
          "value": {
            "kind": "no-value"
          }
        },
        {
          "name": "v-else-if",
          "description": "Denote the “else if block” for `v-if`. Can be chained.",
          "doc-url": "https://vuejs.org/v2/api/#v-else-if",
          "value": {
            "kind": "expression",
            "required": true,
            "type": "any"
          }
        },
        {
          "name": "v-for",
          "description": "Render the element or template block multiple times based on the source data. The directive’s value must use the special syntax `alias in expression` to provide an alias for the current element being iterated on. Alternatively, you can also specify an alias for the index (or the key if used on an Object). The default behavior of `v-for` will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the `key` special attribute.",
          "doc-url": "https://vuejs.org/v2/api/#v-for",
          "value": {
            "kind": "expression",
            "required": true,
            "type": [
              "any[]",
              "object",
              "number",
              "string",
              "Iterable"
            ]
          }
        },
        {
          "name": "v-on",
          "description": "Attaches an event listener to the element. The event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present.\n\nWhen used on a normal element, it listens to *native DOM events* only. When used on a custom element component, it listens to *custom events* emitted on that child component.\n\nWhen listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special `$event` property: `v-on:click=\"handle('ok', $event)\"`.\n\nStarting in 2.4.0+, `v-on` also supports binding to an object of event/listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.",
          "doc-url": "https://vuejs.org/v2/api/#v-on",
          "value": {
            "kind": "expression",
            "required": true,
            "type": [
              "Function",
              "object",
              "any"
            ]
          },
          "vue-argument": {
            "description": "Event name",
            "pattern": ".*",
            "required": true
          },
          "vue-modifiers": [
            {
              "name": "stop",
              "description": "Call `event.stopPropagation()`."
            },
            {
              "name": "prevent",
              "description": "Call `event.preventDefault()`."
            },
            {
              "name": "capture",
              "description": "Add event listener in capture mode."
            },
            {
              "name": "self",
              "description": "Only trigger handler if event was dispatched from this element."
            },
            {
              "name": "{keyCode | keyAlias}",
              "pattern": ".*",
              "description": "Only trigger handler on certain keys."
            },
            {
              "name": "native",
              "description": "Listen for a native event on the root element of component."
            },
            {
              "name": "once",
              "description": "Trigger handler at most once."
            }
          ]
        },
        {
          "name": "v-bind",
          "description": "Dynamically bind one or more attributes, or a component prop to an expression.\n\nWhen used to bind the `class` or `style` attribute, it supports additional value types such as Array or Objects. See linked guide section below for more details.\n\nWhen used for prop binding, the prop must be properly declared in the child component.\n\nWhen used without an argument, can be used to bind an object containing attribute name-value pairs. Note in this mode `class` and `style` does not support Array or Objects.",
          "doc-url": "https://vuejs.org/v2/api/#v-bind",
          "value": {
            "kind": "expression",
            "required": true,
            "type": [
              "any",
              "Object"
            ]
          },
          "vue-argument": {
            "description": "Optional attribute or property name",
            "pattern": ".*"
          },
          "vue-modifiers": [
            {
              "name": "prop",
              "description": "Bind as a DOM property instead of an attribute. If the tag is a component then `.prop` will set the property on the component’s `$el`"
            },
            {
              "name": "camel",
              "description": "Transform the kebab-case attribute name into camelCase."
            }
          ]
        },
        {
          "name": "v-model",
          "description": "Create a two-way binding on a form input element or a component. For detailed usage and other notes, see the Guide section linked below.",
          "doc-url": "https://vuejs.org/v2/api/#v-model",
          "value": {
            "kind": "expression",
            "required": true,
            "type": "any"
          },
          "vue-modifiers": [
            {
              "name": "lazy",
              "description": "Listen to `change` events instead of `input`"
            },
            {
              "name": "number",
              "description": "Cast valid input string to numbers"
            },
            {
              "name": "trim",
              "description": "Trim input"
            }
          ]
        },
        {
          "name": "v-slot",
          "description": "Denote named slots or slots that expect to receive props.",
          "doc-url": "https://vuejs.org/v2/api/#v-slot",
          "value": {
            "kind": "expression",
            "type": "any"
          },
          "vue-argument": {
            "description": "Slot name (optional, defaults to `default`)"
          }
        },
        {
          "name": "v-pre",
          "description": "Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.",
          "doc-url": "https://vuejs.org/v2/api/#v-pre",
          "value": {
            "kind": "no-value"
          }
        },
        {
          "name": "v-cloak",
          "description": "This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as `[v-cloak] { display: none }`, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.",
          "doc-url": "https://vuejs.org/v2/api/#v-cloak",
          "value": {
            "kind": "no-value"
          }
        },
        {
          "name": "v-once",
          "description": "Render the element and component *once* only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.",
          "doc-url": "https://vuejs.org/v2/api/#v-once",
          "value": {
            "kind": "no-value"
          }
        }
      ]
    }
  }
}
