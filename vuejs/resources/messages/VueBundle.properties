options.indent.radio.block-specific.caption=Specific to the language in the block
options.indent.radio.block-specific.tooltip=The indents in the <template>, <script> and <style> blocks will be set according to the code style settings for the used language. For example, <style lang='scss'> will use indents set in SCSS
options.indent.radio.uniform.caption=Same in the whole file
options.indent.label.top-level.caption=Indent children of top-level tag:

vue.create.single.file.component.action.text=Vue Component
vue.create.single.file.component.action.description=Creates Vue component file
vue.create.single.file.component.action.dialog.title=New {0}
vue.create.single.file.component.action.name=Create Vue Component File ''{0}''
vue.create.single.file.component.template.class.api=Class API
vue.create.single.file.component.template.composition.api=Composition API
vue.create.single.file.component.template.options.api=Options API

vue.documentation.vue=Vue
vue.documentation.section.library=Library:
# vue.documentation.section.* properties are used indirectly
# suppress inspection "UnusedProperty"
vue.documentation.section.argument=Argument:
# suppress inspection "UnusedProperty"
vue.documentation.section.required=Required
# suppress inspection "UnusedProperty"
vue.documentation.section.pattern=Pattern:
# suppress inspection "UnusedProperty"
vue.documentation.section.default=Default:
vue.documentation.section.slot.scope=Scope

# vue.documentation.type.* properties are used indirectly
# suppress inspection "UnusedProperty"
vue.documentation.type.functional.component=functional component
# suppress inspection "UnusedProperty"
vue.documentation.type.component=component
# suppress inspection "UnusedProperty"
vue.documentation.type.directive=directive
# suppress inspection "UnusedProperty"
vue.documentation.type.filter=filter
# suppress inspection "UnusedProperty"
vue.documentation.type.component.method=component method
# suppress inspection "UnusedProperty"
vue.documentation.type.component.event=component event
# suppress inspection "UnusedProperty"
vue.documentation.type.slot=slot
# suppress inspection "UnusedProperty"
vue.documentation.type.component.property=component property
# suppress inspection "UnusedProperty"
vue.documentation.type.component.computed.property=component computed property
# suppress inspection "UnusedProperty"
vue.documentation.type.component.data.property=component data property
# suppress inspection "UnusedProperty"
vue.documentation.type.directive.modifier=directive modifier
# suppress inspection "UnusedProperty"
vue.documentation.type.directive.argument=directive argument

vue.formatting.spacing.within.interpolations=Interpolations
vue.formatting.spacing.within.group=Within
vue.formatting.wrapping.interpolations=Interpolations
vue.formatting.wrapping.new-line-after-start-delimiter=New line after '{{'
vue.formatting.wrapping.new-line-before-end-delimiter=New line before '}}'

vue.inspection.group.name=Vue
vue.inspection.display.name.data.function=Data function
vue.inspection.display.name.duplicate.tag=Duplicate template/script tag
vue.inspection.display.name.missing.component.import=Missing component import
vue.inspection.message.attribute.does.not.accept.value={0} does not accept any value
vue.inspection.message.data.property.should.be.function=Data property should be a function
vue.inspection.message.duplicate.tag=Duplicated top-level tag {0}
vue.inspection.message.filter.function.with.no.args=Filter function should accept at least one argument
vue.inspection.message.filter.invalid.number.of.arguments=Invalid number of filter arguments, expected {0}
vue.inspection.message.missing.component.import=Component {0} is not imported
vue.inspection.message.unresolved.filter=Unresolved filter {0}

vue.live.template.context.component=Vue component
vue.live.template.context.script.tag=Vue script tag content
vue.live.template.context.template=Vue template
vue.live.template.context.template.tag.element=Vue template tag element
vue.live.template.context.top.level=Vue top-level element

vue.param.hints.show.names.for.filters=Filter arguments

vue.parser.message.expected.comma.or.end.of.expression=Expected comma or end of expression
vue.parser.message.expected.end.of.expression=Expected end of expression
vue.parser.message.expected.identifier.or.string=Expected identifier or string
vue.parser.message.expected.in.or.of='in' or 'of' expected
vue.parser.message.expected.lparen.pipe.or.end.of.expression=Expected (, | or end of expression
vue.parser.message.expected.pipe.or.end.of.expression=Expected | or end of expression
vue.parser.message.statements.not.allowed=Statements are not allowed in Vue expressions
vue.parser.message.unterminated.interpolation=Unterminated interpolation
vue.parser.message.generic.component.parameters.only.with.typescript=Generic component parameters are supported only with TypeScript language.

vue.project.generator.name=Vue.js
vue.project.generator.description=Create a new <a href='https://vuejs.org'>Vue.js</a> project using <a href='https://cli.vuejs.org'>Vue CLI</a>.
vue.project.generator.presentable.package.name=Vue &CLI
vue.project.generator.use.default.project.setup=Use the &default project setup

vue.quickfix.import.component.family=Import component
vue.quickfix.import.component.name=Import ''{0}'' component
vue.quickfix.wrap.with.function.text=Wrap data object in function
vue.quickfix.wrap.with.function.family=Wrap object

vue.search.scope.template.name=template

vue.template.intention.extract.component=Extract Vue component
vue.template.intention.extract.component.command.name=Extract Vue Component
vue.template.intention.extract.component.family.name=Extract Vue component
vue.template.intention.extract.component.description=Extracts selected part of a Vue.js template to a new single-file component, passes the used data and methods to it with props
vue.template.intention.extract.component.error.component.name=Invalid component name: {0}
vue.template.intention.extract.component.error.component.exists=Component {0} already exists
vue.template.intention.extract.component.error.file.exists=File {0} already exists
vue.template.intention.extract.component.continue=Continue editing

vue.template.intention.v-model.expand.family.name=Expand v-model
vue.template.intention.v-model.expand.command.name=Expand v-model

vue.template.intention.import.component.family.name=Import component locally

nuxt.support.notification.title=Nuxt.js support
nuxt.support.notification.contents=For better code completion suggestions, add @nuxt/types to project dependencies

vuex.inspection.message.unresolved.action=Cannot resolve Vuex action {0}
vuex.inspection.message.unresolved.getter=Cannot resolve Vuex getter {0}
vuex.inspection.message.unresolved.mutation=Cannot resolve Vuex mutation {0}
vuex.inspection.message.unresolved.namespace=Unknown Vuex module namespace {0}
vuex.inspection.message.unresolved.state=Cannot resolve Vuex state {0}
vuex.inspection.message.unresolved.symbol=Cannot resolve Vuex symbol {0}

# {0} - symbol type (e.g. "directive"); {1} - symbol name (e.g. "FooBar")
vue.symbol.presentation=Vue {0} {1}
vue.inspection.display.name.unrecognized.slot=Unrecognized slot
vue.inspection.display.name.deprecated.symbol=Deprecated symbol
vue.inspection.display.name.unrecognized.directive=Unrecognized directive

vue.progress.title.auto-importing-external-symbols-on-paste=Auto-importing external symbols on paste...
vue.progress.title.auto-importing-vue-components-on-paste=Auto-importing Vue components on paste...

vue.command.name.auto-import-external-symbols=Auto-Import External Symbols
vue.command.name.auto-import-vue-components=Auto-Import Vue Components
vue.configurable.title=Vue
vue.configurable.service.group=Vue Service
vue.configurable.service.auto=Automatically
vue.configurable.service.auto.help=Select this option to enable service integration based on the project TypeScript version. \
  If you are using TypeScript 5 of later, "Volar" will be enabled, for earlier version direct integration with TypeScript service will be used.
vue.configurable.service.ts=TypeScript
vue.configurable.service.ts.help=Select this option to enable direct integration with TypeScript service for vue files. \
  Because this integration doesn't work for TypeScript version 5.0.0 and later, in such cases internal IDE inspections will be used instead.
vue.configurable.service.volar=Volar
vue.configurable.service.volar.help=Select this option to use Volar integration for all vue files. \
  Please note that the integration is experimental, so it can be unstable in some cases.
vue.configurable.service.disabled=Disabled
vue.configurable.service.disabled.help=Select this option to turn both TypeScript Service and Volar off.
volar.package.download=Downloading {0}...
volar.interpreter.error=Local or WSL Node.js interpreter not configured.
volar.executable.error=Volar language server is not found.
volar.error.prefix=Volar: {0}

