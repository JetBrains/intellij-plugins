type __VLS_WithTemplateSlots<T, S> = T & {
  new (): {
    $slots: S;
  };
};

export const MyRegularButton: __VLS_WithTemplateSlots<{}, {}>;
export const MyRegularLabel: __VLS_WithTemplateSlots<{}, {}>;

export const MyVeryRegularButton: __VLS_WithTemplateSlots<{}, {}>;
export const MyVeryRegularLabel: __VLS_WithTemplateSlots<{}, {}>;

export interface MyClickOutsideBindings {
  modifiers: {
    once?: boolean;
  };
}

export const myClickOutside: {
  mounted: (el: Element, binding: MyClickOutsideBindings) => void;
}

export const myIntersect: {
  mounted(
    el: Element,
    binding: {
      modifiers: {
        once?: boolean;
        quiet?: boolean;
      };
    },
  );
}

export interface MutationDirectiveBinding {
  value: () => void;
  modifiers: MutationOptions;
}

export interface MutationOptions {
  attr?: boolean;
  char?: boolean;
  child?: boolean;
  sub?: boolean;
  once?: boolean;
  immediate?: boolean;
}

export const myMutate: {
  mounted(el: Element, binding: MutationDirectiveBinding);
}
