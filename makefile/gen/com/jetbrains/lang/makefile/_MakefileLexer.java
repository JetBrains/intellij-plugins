/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.jetbrains.lang.makefile;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.lang.makefile.psi.MakefileTypes;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.jetbrains.lang.makefile.psi.MakefileTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>MakefileLexer.flex</tt>
 */
public class _MakefileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SQSTRING = 2;
  public static final int DQSTRING = 4;
  public static final int DEFINE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4,  5,  6, 7
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14048 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\15"+
    "\1\24\1\52\1\53\1\54\1\55\1\56\1\57\2\15\1\60\1\53\1\54\1\61\1\1\1\62\1\1"+
    "\1\63\1\64\1\21\1\54\1\65\1\1\1\66\1\15\1\67\1\70\1\53\1\54\1\65\1\1\1\57"+
    "\1\15\1\40\1\71\1\72\1\73\1\74\1\1\1\66\2\1\1\75\1\35\1\54\1\50\1\1\1\76\1"+
    "\15\1\1\1\77\1\35\1\54\1\100\1\1\1\56\1\15\1\101\1\75\1\35\1\12\1\102\1\56"+
    "\1\103\1\15\1\41\1\104\1\105\1\12\1\106\1\107\3\1\1\24\2\12\1\110\1\107\3"+
    "\1\1\111\1\112\1\113\1\114\1\115\1\116\2\1\1\66\3\1\1\117\1\12\1\120\1\1\1"+
    "\121\7\1\2\12\1\27\1\122\1\1\1\123\1\124\1\125\1\126\1\1\2\12\1\127\2\12\1"+
    "\130\24\12\1\131\1\132\2\12\1\131\2\12\1\133\1\134\1\13\3\12\1\134\3\12\1"+
    "\27\2\1\1\12\1\1\5\12\1\135\1\24\45\12\1\136\1\12\1\24\1\27\4\12\1\27\1\137"+
    "\1\140\1\15\1\12\1\15\1\12\1\15\1\140\1\66\3\12\1\141\1\1\1\142\4\1\5\12\1"+
    "\26\1\143\1\12\1\144\4\12\1\37\1\12\1\145\3\1\1\12\1\146\1\147\2\12\1\150"+
    "\1\12\1\74\3\1\1\12\1\107\3\12\1\147\4\1\1\151\5\1\1\104\2\12\1\141\1\152"+
    "\3\1\1\153\1\12\1\154\1\41\2\12\1\37\1\1\2\12\1\141\1\1\1\36\1\41\1\12\1\146"+
    "\1\45\5\1\1\155\1\156\14\12\4\1\21\12\1\135\2\12\1\135\1\157\1\12\1\146\3"+
    "\12\1\160\1\161\1\162\1\120\1\161\7\1\1\163\1\1\1\120\6\1\1\164\1\165\1\166"+
    "\1\167\1\170\3\1\1\171\147\1\2\12\1\145\2\12\1\145\10\12\1\172\1\173\2\12"+
    "\1\127\3\12\1\174\1\1\1\12\1\107\4\175\4\1\1\122\35\1\1\176\2\1\1\177\1\24"+
    "\4\12\1\200\1\24\4\12\1\130\1\104\1\12\1\146\1\24\4\12\1\145\1\1\1\12\1\27"+
    "\3\1\1\12\40\1\133\12\1\37\4\1\135\12\1\37\2\1\10\12\1\120\4\1\2\12\1\146"+
    "\20\12\1\120\1\12\1\201\1\1\2\12\1\145\1\122\1\12\1\146\4\12\1\37\2\1\1\202"+
    "\1\203\5\12\1\204\1\12\1\145\1\26\3\1\1\202\1\205\1\12\1\30\1\1\3\12\1\141"+
    "\1\203\2\12\1\141\3\1\1\206\1\41\1\12\1\37\1\12\1\107\1\1\1\12\1\120\1\47"+
    "\2\12\1\30\1\122\1\1\1\207\1\210\2\12\1\45\1\1\1\211\1\1\1\12\1\212\3\12\1"+
    "\213\1\214\1\215\1\27\1\63\1\216\1\217\1\175\2\12\1\130\1\37\7\12\1\30\1\1"+
    "\72\12\1\141\1\12\1\220\2\12\1\150\20\1\26\12\1\146\6\12\1\74\2\1\1\107\1"+
    "\221\1\54\1\222\1\223\6\12\1\15\1\1\1\153\25\12\1\146\1\1\4\12\1\203\2\12"+
    "\1\26\2\1\1\150\7\1\1\207\7\12\1\120\2\1\1\24\1\27\1\24\1\27\1\224\4\12\1"+
    "\145\1\225\1\226\2\1\1\227\1\12\1\13\1\230\2\146\2\1\7\12\1\27\30\1\1\12\1"+
    "\120\3\12\1\66\2\1\2\12\1\1\1\12\1\231\2\12\1\37\1\12\1\146\2\12\1\232\3\1"+
    "\11\12\1\146\1\1\2\12\1\232\1\12\1\150\2\12\1\26\3\12\1\141\11\1\23\12\1\107"+
    "\1\12\1\37\1\26\11\1\1\233\2\12\1\234\1\12\1\37\1\12\1\107\1\12\1\145\4\1"+
    "\1\12\1\235\1\12\1\37\1\12\1\74\4\1\3\12\1\236\4\1\1\66\1\237\1\12\1\141\2"+
    "\1\1\12\1\120\1\12\1\120\2\1\1\117\1\12\1\147\1\1\3\12\1\37\1\12\1\37\1\12"+
    "\1\30\1\12\1\15\6\1\4\12\1\45\3\1\3\12\1\30\3\12\1\30\60\1\1\153\2\12\1\26"+
    "\4\1\1\153\2\12\2\1\1\12\1\45\1\1\1\153\1\12\1\107\2\1\2\12\1\240\1\153\2"+
    "\12\1\30\1\241\1\242\2\1\1\12\1\21\1\150\5\1\1\243\1\244\1\45\2\12\1\145\2"+
    "\1\1\70\1\53\1\54\1\65\1\1\1\245\1\15\11\1\3\12\1\147\1\246\3\1\3\12\1\1\1"+
    "\247\13\1\2\12\1\145\2\1\1\250\2\1\3\12\1\1\1\251\3\1\2\12\1\27\5\1\1\12\1"+
    "\74\30\1\4\12\1\1\1\122\34\1\3\12\1\45\20\1\1\54\1\12\1\145\1\1\1\66\2\1\1"+
    "\203\1\12\67\1\71\12\1\74\16\1\14\12\1\141\53\1\2\12\1\145\75\1\44\12\1\107"+
    "\33\1\43\12\1\45\1\12\1\145\7\1\1\12\1\146\1\1\3\12\1\1\1\141\1\1\1\153\1"+
    "\252\1\12\67\1\4\12\1\147\1\66\3\1\1\153\4\1\1\66\1\1\76\12\1\120\1\1\57\12"+
    "\1\30\20\1\1\15\77\1\6\12\1\27\1\120\1\45\1\74\66\1\5\12\1\207\3\12\1\140"+
    "\1\253\1\254\1\255\3\12\1\256\1\257\1\12\1\260\1\261\1\35\24\12\1\262\1\12"+
    "\1\35\1\130\1\12\1\130\1\12\1\207\1\12\1\207\1\145\1\12\1\145\1\12\1\54\1"+
    "\12\1\54\1\12\1\211\3\1\14\12\1\147\3\1\4\12\1\141\113\1\1\255\1\12\1\263"+
    "\1\264\1\265\1\266\1\267\1\270\1\271\1\150\1\272\1\150\24\1\55\12\1\107\2"+
    "\1\103\12\1\147\15\12\1\146\150\12\1\15\25\1\41\12\1\146\36\1");

  /* The ZZ_CMAP_A table has 2992 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\1\25\0\1\2\1\40\1\43\1\5\1\53\2\41\1\42\1\44\1\45\1\41\1\40\1"+
    "\46\1\27\14\41\1\37\1\51\1\41\1\36\1\41\1\40\1\35\33\41\1\3\3\41\1\47\1\12"+
    "\1\23\1\33\1\26\1\6\1\16\1\15\1\20\1\14\1\32\1\41\1\21\1\31\1\13\1\10\1\25"+
    "\1\52\1\7\1\17\1\24\1\22\1\34\1\11\1\30\2\41\1\54\1\50\1\55\1\41\13\0\1\41"+
    "\12\0\1\41\4\0\1\41\5\0\27\41\1\0\12\41\4\0\14\41\16\0\5\41\7\0\1\41\1\0\1"+
    "\41\1\0\5\41\1\0\2\41\2\0\4\41\1\0\1\41\6\0\1\41\1\0\3\41\1\0\1\41\1\0\4\41"+
    "\1\0\23\41\1\0\13\41\10\0\6\41\1\0\26\41\2\0\1\41\6\0\10\41\10\0\13\41\5\0"+
    "\3\41\33\0\6\41\1\0\1\41\17\0\2\41\7\0\2\41\12\0\3\41\2\0\2\41\1\0\16\41\15"+
    "\0\11\41\13\0\1\41\30\0\6\41\4\0\2\41\4\0\1\41\5\0\6\41\4\0\1\41\11\0\1\41"+
    "\3\0\1\41\7\0\11\41\7\0\5\41\1\0\10\41\6\0\26\41\3\0\1\41\2\0\1\41\7\0\11"+
    "\41\4\0\10\41\2\0\2\41\2\0\26\41\1\0\7\41\1\0\1\41\3\0\4\41\3\0\1\41\20\0"+
    "\1\41\15\0\2\41\1\0\1\41\5\0\6\41\4\0\2\41\1\0\2\41\1\0\2\41\1\0\2\41\17\0"+
    "\4\41\1\0\1\41\3\0\3\41\20\0\11\41\1\0\2\41\1\0\2\41\1\0\5\41\3\0\1\41\2\0"+
    "\1\41\30\0\1\41\13\0\10\41\2\0\1\41\3\0\1\41\1\0\6\41\3\0\3\41\1\0\4\41\3"+
    "\0\2\41\1\0\1\41\1\0\2\41\3\0\2\41\3\0\3\41\3\0\14\41\13\0\10\41\1\0\2\41"+
    "\10\0\3\41\5\0\1\41\4\0\10\41\1\0\6\41\1\0\5\41\3\0\1\41\3\0\2\41\15\0\13"+
    "\41\2\0\1\41\6\0\3\41\10\0\1\41\5\0\22\41\3\0\10\41\1\0\11\41\1\0\1\41\2\0"+
    "\7\41\11\0\1\41\1\0\2\41\15\0\2\41\1\0\1\41\2\0\2\41\1\0\1\41\2\0\1\41\6\0"+
    "\4\41\1\0\7\41\1\0\3\41\1\0\1\41\1\0\1\41\2\0\2\41\1\0\4\41\1\0\2\41\11\0"+
    "\1\41\2\0\5\41\1\0\1\41\25\0\14\41\1\0\24\41\13\0\5\41\22\0\7\41\4\0\4\41"+
    "\3\0\1\41\3\0\2\41\7\0\3\41\4\0\15\41\14\0\1\41\1\0\6\41\1\0\1\41\5\0\1\41"+
    "\2\0\13\41\1\0\15\41\1\0\4\41\2\0\7\41\1\0\1\41\1\0\4\41\2\0\1\41\1\0\4\41"+
    "\2\0\7\41\1\0\1\41\1\0\4\41\2\0\16\41\2\0\6\41\2\0\15\41\2\0\1\41\1\0\10\41"+
    "\7\0\15\41\1\0\6\41\23\0\1\41\4\0\1\41\3\0\5\41\2\0\22\41\1\0\1\41\5\0\17"+
    "\41\1\0\16\41\2\0\5\41\13\0\14\41\13\0\1\41\15\0\7\41\7\0\16\41\15\0\2\41"+
    "\11\0\4\41\1\0\4\41\3\0\2\41\11\0\10\41\1\0\1\41\1\0\1\41\1\0\1\41\1\0\6\41"+
    "\1\0\7\41\1\0\1\41\3\0\3\41\1\0\7\41\3\0\4\41\2\0\6\41\5\0\1\41\15\0\1\41"+
    "\2\0\1\41\4\0\1\41\2\0\12\41\1\0\1\41\3\0\5\41\6\0\1\41\1\0\1\41\1\0\1\41"+
    "\1\0\4\41\1\0\13\41\2\0\4\41\5\0\5\41\4\0\1\41\4\0\2\41\13\0\5\41\6\0\4\41"+
    "\3\0\2\41\14\0\10\41\7\0\10\41\1\0\7\41\6\0\2\41\12\0\5\41\5\0\2\41\3\0\7"+
    "\41\6\0\3\41\12\0\2\41\13\0\11\41\2\0\27\41\2\0\7\41\1\0\3\41\1\0\4\41\1\0"+
    "\4\41\2\0\6\41\3\0\1\41\1\0\1\41\2\0\5\41\1\0\12\41\12\0\5\41\1\0\3\41\1\0"+
    "\10\41\4\0\7\41\3\0\1\41\3\0\2\41\1\0\1\41\3\0\2\41\2\0\5\41\2\0\1\41\1\0"+
    "\1\41\30\0\3\41\3\0\6\41\2\0\6\41\2\0\6\41\11\0\7\41\4\0\5\41\3\0\5\41\5\0"+
    "\1\41\1\0\10\41\1\0\5\41\1\0\1\41\1\0\2\41\1\0\2\41\1\0\12\41\6\0\12\41\2"+
    "\0\6\41\2\0\6\41\2\0\6\41\2\0\3\41\3\0\14\41\1\0\16\41\1\0\2\41\1\0\2\41\1"+
    "\0\10\41\6\0\4\41\4\0\16\41\2\0\1\41\1\0\14\41\1\0\2\41\3\0\1\41\2\0\4\41"+
    "\1\0\2\41\12\0\10\41\6\0\6\41\1\0\3\41\1\0\12\41\3\0\1\41\12\0\4\41\25\0\1"+
    "\41\1\0\1\41\3\0\7\41\1\0\1\41\1\0\4\41\1\0\17\41\1\0\2\41\14\0\3\41\7\0\4"+
    "\41\11\0\2\41\1\0\1\41\20\0\4\41\10\0\1\41\13\0\10\41\5\0\3\41\2\0\1\41\2"+
    "\0\2\41\2\0\4\41\1\0\14\41\1\0\1\41\1\0\7\41\1\0\21\41\1\0\4\41\2\0\10\41"+
    "\1\0\7\41\1\0\14\41\1\0\4\41\1\0\5\41\1\0\1\41\3\0\14\41\2\0\10\41\1\0\2\41"+
    "\1\0\1\41\2\0\1\41\1\0\12\41\1\0\4\41\1\0\1\41\1\0\1\41\6\0\1\41\4\0\1\41"+
    "\1\0\1\41\1\0\1\41\1\0\3\41\1\0\2\41\1\0\1\41\2\0\1\41\1\0\1\41\1\0\1\41\1"+
    "\0\1\41\1\0\1\41\1\0\2\41\1\0\1\41\2\0\4\41\1\0\7\41\1\0\4\41\1\0\4\41\1\0"+
    "\1\41\1\0\12\41\1\0\5\41\1\0\3\41\1\0\5\41\1\0\5\41");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\3\1\5\24\4"+
    "\1\6\1\7\1\4\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\3\1\23"+
    "\1\5\2\4\1\24\1\4\1\25\1\4\1\26\2\4"+
    "\1\27\1\30\2\5\1\31\6\4\1\32\11\4\1\32"+
    "\23\4\2\0\3\5\1\31\1\4\1\0\2\4\1\31"+
    "\13\4\1\32\33\4\1\31\1\4\2\33\2\4\1\34"+
    "\2\4\1\32\6\4\1\35\22\4\1\36\11\4\1\37"+
    "\1\4\1\40\12\4\1\41\1\4\1\42\1\43\5\4"+
    "\1\44\1\4\1\32\4\4\1\45\1\4\1\46\3\4"+
    "\1\47\1\50\1\4\1\51\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284"+
    "\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4"+
    "\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564"+
    "\0\u0592\0\u05c0\0\u0170\0\u05ee\0\u061c\0\u0170\0\u0170\0\u0170"+
    "\0\u0170\0\u0170\0\u0170\0\u0170\0\u0170\0\u0170\0\u0170\0\u0170"+
    "\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0170\0\u0730\0\u0170"+
    "\0\u0170\0\u0170\0\u075e\0\u078c\0\u07ba\0\u0170\0\u07e8\0\u0816"+
    "\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6"+
    "\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66"+
    "\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6"+
    "\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46"+
    "\0\u0170\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088"+
    "\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8"+
    "\0\u1226\0\u1254\0\u1282\0\u0422\0\u12b0\0\u12de\0\u130c\0\u133a"+
    "\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa"+
    "\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a"+
    "\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a"+
    "\0\u17b8\0\u0170\0\u0422\0\u17e6\0\u1814\0\u0422\0\u1842\0\u1870"+
    "\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984\0\u19b2\0\u0422"+
    "\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\u1b22"+
    "\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92"+
    "\0\u1cc0\0\u1cee\0\u0422\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4"+
    "\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u0422\0\u1eba\0\u0422\0\u1ee8"+
    "\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc\0\u202a\0\u2058"+
    "\0\u2086\0\u0422\0\u20b4\0\u0422\0\u0422\0\u20e2\0\u2110\0\u213e"+
    "\0\u216c\0\u219a\0\u0422\0\u21c8\0\u21f6\0\u2224\0\u2252\0\u2280"+
    "\0\u22ae\0\u0422\0\u22dc\0\u0422\0\u230a\0\u2338\0\u2366\0\u0422"+
    "\0\u0422\0\u2394\0\u0422\0\u0422";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\31\1\35\1\36\1\37"+
    "\2\31\1\40\1\41\1\42\1\31\1\43\1\44\1\45"+
    "\1\31\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\31\1\56\1\57\1\60\1\11\1\12\1\61"+
    "\1\14\1\62\1\63\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\31\1\35\1\64\1\37\2\31\1\40\1\41"+
    "\1\42\1\65\1\43\1\44\1\45\1\31\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\31\1\56"+
    "\1\57\1\60\1\11\1\66\1\13\1\14\1\15\1\67"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\31\1\35"+
    "\1\36\1\37\2\31\1\40\1\41\1\42\1\31\1\43"+
    "\1\44\1\45\1\31\1\70\1\71\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\31\1\56\1\57\1\60\1\11"+
    "\1\66\1\13\1\14\1\62\1\67\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\31\1\35\1\64\1\37\2\31"+
    "\1\40\1\41\1\42\1\65\1\43\1\44\1\45\1\31"+
    "\1\70\1\71\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\31\1\56\1\57\1\60\1\11\1\66\1\13\1\14"+
    "\1\15\1\67\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\31\1\35\1\36\1\37\2\31\1\40\1\41\1\42"+
    "\1\31\1\43\1\44\1\45\1\31\1\71\1\72\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\31\1\56\1\57"+
    "\1\60\1\11\1\66\1\13\1\14\1\62\1\67\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\31\1\35\1\64"+
    "\1\37\2\31\1\40\1\41\1\42\1\65\1\43\1\44"+
    "\1\45\1\31\1\71\1\72\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\31\1\56\1\57\1\60\1\11\1\12"+
    "\1\13\1\14\1\15\1\67\1\73\27\31\1\43\1\44"+
    "\1\45\1\31\2\71\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\31\1\56\1\57\1\60\1\11\1\12\1\13"+
    "\1\14\1\62\1\67\1\73\26\31\1\74\1\43\1\44"+
    "\1\45\1\31\2\71\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\31\1\56\1\57\1\60\60\0\1\13\54\0"+
    "\1\75\1\0\1\71\1\0\1\71\31\0\1\71\3\0"+
    "\1\76\2\71\14\0\1\15\51\0\1\77\1\0\1\77"+
    "\1\100\1\77\1\101\50\77\6\0\1\31\1\102\3\31"+
    "\1\103\5\31\1\104\6\31\1\105\3\31\1\106\1\31"+
    "\2\0\2\31\10\0\1\31\11\0\1\107\27\31\2\0"+
    "\2\31\10\0\1\31\11\0\1\31\1\110\24\31\1\111"+
    "\1\31\2\0\2\31\10\0\1\31\11\0\2\31\1\112"+
    "\1\31\1\113\1\31\1\114\21\31\2\0\2\31\10\0"+
    "\1\31\11\0\5\31\1\115\7\31\1\116\2\31\1\117"+
    "\7\31\2\0\2\31\10\0\1\31\11\0\2\31\1\120"+
    "\25\31\2\0\2\31\10\0\1\31\11\0\5\31\1\121"+
    "\2\31\1\122\17\31\2\0\2\31\10\0\1\31\11\0"+
    "\14\31\1\123\13\31\2\0\2\31\10\0\1\31\11\0"+
    "\2\31\1\124\3\31\1\125\4\31\1\126\14\31\2\0"+
    "\2\31\10\0\1\31\11\0\2\31\1\127\3\31\1\130"+
    "\3\31\1\131\1\31\1\132\1\31\1\133\11\31\2\0"+
    "\2\31\10\0\1\31\11\0\30\31\2\0\2\31\10\0"+
    "\1\31\11\0\4\31\1\134\23\31\2\0\2\31\10\0"+
    "\1\31\11\0\5\31\1\135\22\31\2\0\2\31\10\0"+
    "\1\31\11\0\4\31\1\136\23\31\2\0\2\31\10\0"+
    "\1\31\11\0\1\31\1\137\2\31\1\140\23\31\2\0"+
    "\2\31\10\0\1\31\11\0\6\31\1\141\21\31\2\0"+
    "\2\31\10\0\1\31\11\0\6\31\1\130\21\31\2\0"+
    "\2\31\10\0\1\31\11\0\2\31\1\142\25\31\2\0"+
    "\2\31\10\0\1\31\11\0\4\31\1\143\23\31\2\0"+
    "\2\31\10\0\1\31\11\0\4\31\1\144\12\31\1\145"+
    "\10\31\2\0\2\31\10\0\1\31\41\0\1\43\1\146"+
    "\24\0\30\31\1\43\1\0\2\31\10\0\1\31\5\0"+
    "\1\61\2\0\1\147\54\0\1\62\51\0\1\150\1\151"+
    "\1\150\1\152\1\150\1\153\50\150\6\0\1\154\5\31"+
    "\1\141\21\31\2\0\2\31\10\0\1\31\3\0\1\155"+
    "\2\0\3\155\27\156\1\31\2\155\2\156\10\155\1\156"+
    "\3\155\5\0\1\67\56\0\5\31\1\157\22\31\2\0"+
    "\2\31\10\0\1\31\3\0\1\155\2\0\3\155\27\74"+
    "\1\31\2\155\2\74\10\155\1\74\3\155\2\0\1\75"+
    "\1\0\1\75\51\0\1\77\1\0\1\77\1\100\55\77"+
    "\1\100\52\77\1\101\1\0\1\101\1\160\52\101\6\0"+
    "\1\31\1\161\26\31\2\0\2\31\10\0\1\31\11\0"+
    "\20\31\1\162\7\31\2\0\2\31\10\0\1\31\11\0"+
    "\11\31\1\163\16\31\2\0\2\31\10\0\1\31\11\0"+
    "\17\31\1\164\10\31\2\0\2\31\10\0\1\31\11\0"+
    "\4\31\1\165\23\31\2\0\2\31\10\0\1\31\11\0"+
    "\4\31\1\166\23\31\2\0\2\31\10\0\1\31\11\0"+
    "\6\31\1\167\21\31\2\0\2\31\10\0\1\31\11\0"+
    "\1\170\27\31\2\0\2\31\10\0\1\31\11\0\1\31"+
    "\1\171\26\31\2\0\2\31\10\0\1\31\11\0\1\31"+
    "\1\172\26\31\2\0\2\31\10\0\1\31\11\0\13\31"+
    "\1\173\14\31\2\0\2\31\10\0\1\31\11\0\20\31"+
    "\1\174\7\31\2\0\2\31\10\0\1\31\11\0\11\31"+
    "\1\175\16\31\2\0\2\31\10\0\1\31\11\0\20\31"+
    "\1\176\7\31\2\0\2\31\10\0\1\31\11\0\16\31"+
    "\1\177\11\31\2\0\2\31\10\0\1\31\11\0\10\31"+
    "\1\200\14\31\1\201\2\31\2\0\2\31\10\0\1\31"+
    "\11\0\1\202\4\31\1\203\12\31\1\204\7\31\2\0"+
    "\2\31\10\0\1\31\11\0\6\31\1\205\21\31\2\0"+
    "\2\31\10\0\1\31\11\0\1\31\1\206\26\31\2\0"+
    "\2\31\10\0\1\31\11\0\1\31\1\134\3\31\1\207"+
    "\5\31\1\210\14\31\2\0\2\31\10\0\1\31\11\0"+
    "\4\31\1\211\23\31\2\0\2\31\10\0\1\31\11\0"+
    "\1\31\1\212\26\31\2\0\2\31\10\0\1\31\11\0"+
    "\5\31\1\213\22\31\2\0\2\31\10\0\1\31\11\0"+
    "\1\143\27\31\2\0\2\31\10\0\1\31\11\0\10\31"+
    "\1\214\4\31\1\215\12\31\2\0\2\31\10\0\1\31"+
    "\11\0\1\31\1\216\26\31\2\0\2\31\10\0\1\31"+
    "\11\0\11\31\1\217\16\31\2\0\2\31\10\0\1\31"+
    "\11\0\1\220\17\31\1\221\7\31\2\0\2\31\10\0"+
    "\1\31\11\0\11\31\1\222\16\31\2\0\2\31\10\0"+
    "\1\31\11\0\6\31\1\223\21\31\2\0\2\31\10\0"+
    "\1\31\11\0\16\31\1\224\11\31\2\0\2\31\10\0"+
    "\1\31\11\0\1\31\1\174\26\31\2\0\2\31\10\0"+
    "\1\31\11\0\6\31\1\225\21\31\2\0\2\31\10\0"+
    "\1\31\11\0\13\31\1\165\14\31\2\0\2\31\10\0"+
    "\1\31\11\0\13\31\1\226\14\31\2\0\2\31\10\0"+
    "\1\31\11\0\4\31\1\227\23\31\2\0\2\31\10\0"+
    "\1\31\41\0\1\43\17\0\1\147\1\151\54\147\1\150"+
    "\1\151\1\150\1\152\53\150\1\77\1\150\1\152\52\150"+
    "\1\153\1\151\1\153\1\230\52\153\6\0\10\31\1\231"+
    "\17\31\2\0\2\31\10\0\1\31\3\0\1\155\2\0"+
    "\32\155\1\232\21\155\2\0\3\155\27\156\1\233\2\155"+
    "\2\156\10\155\1\156\3\155\6\0\20\31\1\234\7\31"+
    "\2\0\2\31\10\0\1\31\3\0\1\101\1\77\1\101"+
    "\1\160\52\101\6\0\2\31\1\141\25\31\2\0\2\31"+
    "\10\0\1\31\11\0\6\31\1\235\21\31\2\0\2\31"+
    "\10\0\1\31\11\0\1\236\27\31\2\0\2\31\10\0"+
    "\1\31\11\0\2\31\1\237\25\31\2\0\2\31\10\0"+
    "\1\31\11\0\13\31\1\174\14\31\2\0\2\31\10\0"+
    "\1\31\11\0\13\31\1\175\14\31\2\0\2\31\10\0"+
    "\1\31\11\0\7\31\1\142\20\31\2\0\2\31\10\0"+
    "\1\31\11\0\1\31\1\240\26\31\2\0\2\31\10\0"+
    "\1\31\11\0\20\31\1\241\7\31\2\0\2\31\10\0"+
    "\1\31\11\0\5\31\1\242\22\31\2\0\2\31\10\0"+
    "\1\31\11\0\20\31\1\243\7\31\2\0\2\31\10\0"+
    "\1\31\11\0\17\31\1\244\10\31\2\0\2\31\10\0"+
    "\1\31\11\0\11\31\1\245\5\31\1\246\10\31\2\0"+
    "\2\31\10\0\1\31\11\0\20\31\1\36\7\31\2\0"+
    "\2\31\10\0\1\31\11\0\2\31\1\174\25\31\2\0"+
    "\2\31\10\0\1\31\11\0\13\31\1\247\14\31\2\0"+
    "\2\31\10\0\1\31\11\0\30\31\2\0\2\31\10\0"+
    "\1\250\11\0\1\251\17\31\1\252\7\31\2\0\2\31"+
    "\10\0\1\31\11\0\1\253\27\31\2\0\2\31\10\0"+
    "\1\31\11\0\13\31\1\254\14\31\2\0\2\31\10\0"+
    "\1\31\11\0\1\255\27\31\2\0\2\31\10\0\1\31"+
    "\11\0\20\31\1\256\7\31\2\0\2\31\10\0\1\31"+
    "\11\0\1\174\15\31\1\257\11\31\2\0\2\31\10\0"+
    "\1\31\11\0\26\31\1\161\1\31\2\0\2\31\10\0"+
    "\1\31\11\0\16\31\1\174\11\31\2\0\2\31\10\0"+
    "\1\31\11\0\25\31\1\201\2\31\2\0\2\31\10\0"+
    "\1\31\11\0\10\31\1\260\17\31\2\0\2\31\10\0"+
    "\1\31\11\0\11\31\1\212\16\31\2\0\2\31\10\0"+
    "\1\31\11\0\6\31\1\261\21\31\2\0\2\31\10\0"+
    "\1\31\11\0\16\31\1\262\11\31\2\0\2\31\10\0"+
    "\1\31\11\0\22\31\1\263\5\31\2\0\2\31\10\0"+
    "\1\31\11\0\1\264\27\31\2\0\2\31\10\0\1\31"+
    "\11\0\1\265\27\31\2\0\2\31\10\0\1\31\11\0"+
    "\26\31\1\266\1\31\2\0\2\31\10\0\1\31\11\0"+
    "\11\31\1\267\16\31\2\0\2\31\10\0\1\31\11\0"+
    "\5\31\1\174\22\31\2\0\2\31\10\0\1\31\11\0"+
    "\14\31\1\254\13\31\2\0\2\31\10\0\1\31\11\0"+
    "\16\31\1\270\11\31\2\0\2\31\10\0\1\31\3\0"+
    "\1\153\1\77\1\153\1\230\52\153\6\0\6\31\1\271"+
    "\21\31\2\0\2\31\10\0\1\31\11\0\1\272\27\31"+
    "\2\0\2\31\10\0\1\31\11\0\10\31\1\273\17\31"+
    "\2\0\2\31\10\0\1\31\11\0\1\31\1\274\26\31"+
    "\2\0\2\31\10\0\1\31\11\0\1\31\1\275\26\31"+
    "\2\0\2\31\10\0\1\31\11\0\11\31\1\174\1\31"+
    "\1\276\14\31\2\0\2\31\10\0\1\31\11\0\6\31"+
    "\1\277\21\31\2\0\2\31\10\0\1\31\11\0\25\31"+
    "\1\300\2\31\2\0\2\31\10\0\1\31\11\0\4\31"+
    "\1\301\23\31\2\0\2\31\10\0\1\31\11\0\14\31"+
    "\1\302\13\31\2\0\2\31\10\0\1\31\11\0\1\31"+
    "\1\303\26\31\2\0\2\31\10\0\1\31\11\0\14\31"+
    "\1\304\13\31\2\0\2\31\10\0\1\31\11\0\30\31"+
    "\2\0\2\31\10\0\1\305\11\0\1\306\27\31\2\0"+
    "\2\31\10\0\1\31\11\0\10\31\1\307\17\31\2\0"+
    "\2\31\10\0\1\31\11\0\1\174\27\31\2\0\2\31"+
    "\10\0\1\31\11\0\4\31\1\310\23\31\2\0\2\31"+
    "\10\0\1\31\11\0\11\31\1\311\16\31\2\0\2\31"+
    "\10\0\1\31\11\0\1\312\27\31\2\0\2\31\10\0"+
    "\1\31\11\0\6\31\1\313\21\31\2\0\2\31\10\0"+
    "\1\31\11\0\17\31\1\174\10\31\2\0\2\31\10\0"+
    "\1\31\11\0\3\31\1\314\24\31\2\0\2\31\10\0"+
    "\1\31\11\0\17\31\1\315\10\31\2\0\2\31\10\0"+
    "\1\31\11\0\10\31\1\316\17\31\2\0\2\31\10\0"+
    "\1\31\11\0\5\31\1\317\22\31\2\0\2\31\10\0"+
    "\1\31\11\0\4\31\1\320\23\31\2\0\2\31\10\0"+
    "\1\31\11\0\14\31\1\321\13\31\2\0\2\31\10\0"+
    "\1\31\11\0\12\31\1\322\15\31\2\0\2\31\10\0"+
    "\1\31\11\0\5\31\1\323\22\31\2\0\2\31\10\0"+
    "\1\31\11\0\10\31\1\324\17\31\2\0\2\31\10\0"+
    "\1\31\11\0\16\31\1\325\11\31\2\0\2\31\10\0"+
    "\1\31\11\0\6\31\1\326\21\31\2\0\2\31\10\0"+
    "\1\31\11\0\6\31\1\215\21\31\2\0\2\31\10\0"+
    "\1\31\11\0\5\31\1\327\22\31\2\0\2\31\10\0"+
    "\1\31\11\0\4\31\1\330\23\31\2\0\2\31\10\0"+
    "\1\31\11\0\16\31\1\331\11\31\2\0\2\31\10\0"+
    "\1\31\11\0\10\31\1\214\17\31\2\0\2\31\10\0"+
    "\1\31\11\0\1\214\27\31\2\0\2\31\10\0\1\31"+
    "\11\0\20\31\1\332\7\31\2\0\2\31\10\0\1\31"+
    "\11\0\10\31\1\333\17\31\2\0\2\31\10\0\1\31"+
    "\11\0\25\31\1\331\2\31\2\0\2\31\10\0\1\31"+
    "\11\0\16\31\1\334\11\31\2\0\2\31\10\0\1\31"+
    "\11\0\1\31\1\335\26\31\2\0\2\31\10\0\1\31"+
    "\11\0\22\31\1\174\5\31\2\0\2\31\10\0\1\31"+
    "\11\0\2\31\1\330\25\31\2\0\2\31\10\0\1\31"+
    "\11\0\2\31\1\336\25\31\2\0\2\31\10\0\1\31"+
    "\11\0\6\31\1\337\21\31\2\0\2\31\10\0\1\31"+
    "\11\0\4\31\1\340\23\31\2\0\2\31\10\0\1\31"+
    "\11\0\16\31\1\341\11\31\2\0\2\31\10\0\1\31"+
    "\11\0\15\31\1\215\12\31\2\0\2\31\10\0\1\31"+
    "\11\0\1\342\27\31\2\0\2\31\10\0\1\31\11\0"+
    "\20\31\1\343\7\31\2\0\2\31\10\0\1\31\11\0"+
    "\7\31\1\174\20\31\2\0\2\31\10\0\1\31\11\0"+
    "\1\31\1\115\26\31\2\0\2\31\10\0\1\31\11\0"+
    "\12\31\1\174\15\31\2\0\2\31\10\0\1\31\11\0"+
    "\1\344\27\31\2\0\2\31\10\0\1\31\11\0\1\31"+
    "\1\242\26\31\2\0\2\31\10\0\1\31\11\0\21\31"+
    "\1\345\6\31\2\0\2\31\10\0\1\31\11\0\1\31"+
    "\1\346\26\31\2\0\2\31\10\0\1\31\11\0\5\31"+
    "\1\347\22\31\2\0\2\31\10\0\1\31\11\0\23\31"+
    "\1\254\4\31\2\0\2\31\10\0\1\31\11\0\1\350"+
    "\27\31\2\0\2\31\10\0\1\31\11\0\1\351\27\31"+
    "\2\0\2\31\10\0\1\31\11\0\2\31\1\352\25\31"+
    "\2\0\2\31\10\0\1\31\11\0\16\31\1\353\11\31"+
    "\2\0\2\31\10\0\1\31\11\0\1\354\27\31\2\0"+
    "\2\31\10\0\1\31\11\0\14\31\1\212\13\31\2\0"+
    "\2\31\10\0\1\31\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9154];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\2\11\30\1\1\11\2\1\13\11\5\1\1\11"+
    "\1\1\3\11\3\1\1\11\47\1\2\0\1\1\1\11"+
    "\3\1\1\0\54\1\1\11\122\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _MakefileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MakefileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 43: break;
          case 2: 
            { return EOL;
            } 
            // fall through
          case 44: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 45: break;
          case 4: 
            { return CHARS;
            } 
            // fall through
          case 46: break;
          case 5: 
            { return COMMENT;
            } 
            // fall through
          case 47: break;
          case 6: 
            { return ASSIGN;
            } 
            // fall through
          case 48: break;
          case 7: 
            { return COLON;
            } 
            // fall through
          case 49: break;
          case 8: 
            { yybegin(SQSTRING); return QUOTE;
            } 
            // fall through
          case 50: break;
          case 9: 
            { yybegin(DQSTRING); return DOUBLEQUOTE;
            } 
            // fall through
          case 51: break;
          case 10: 
            { return OPEN_PAREN;
            } 
            // fall through
          case 52: break;
          case 11: 
            { return CLOSE_PAREN;
            } 
            // fall through
          case 53: break;
          case 12: 
            { return COMMA;
            } 
            // fall through
          case 54: break;
          case 13: 
            { return BACKTICK;
            } 
            // fall through
          case 55: break;
          case 14: 
            { return PIPE;
            } 
            // fall through
          case 56: break;
          case 15: 
            { return SEMICOLON;
            } 
            // fall through
          case 57: break;
          case 16: 
            { return DOLLAR;
            } 
            // fall through
          case 58: break;
          case 17: 
            { return OPEN_CURLY;
            } 
            // fall through
          case 59: break;
          case 18: 
            { return CLOSE_CURLY;
            } 
            // fall through
          case 60: break;
          case 19: 
            { return TAB;
            } 
            // fall through
          case 61: break;
          case 20: 
            { yybegin(YYINITIAL); return EOL;
            } 
            // fall through
          case 62: break;
          case 21: 
            { yybegin(YYINITIAL); return QUOTE;
            } 
            // fall through
          case 63: break;
          case 22: 
            { yybegin(YYINITIAL); return DOUBLEQUOTE;
            } 
            // fall through
          case 64: break;
          case 23: 
            { return SPLIT;
            } 
            // fall through
          case 65: break;
          case 24: 
            { return ESCAPED_DOUBLEQUOTE;
            } 
            // fall through
          case 66: break;
          case 25: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 67: break;
          case 26: 
            { return FUNCTION_NAME;
            } 
            // fall through
          case 68: break;
          case 27: 
            { return MACRO;
            } 
            // fall through
          case 69: break;
          case 28: 
            { return KEYWORD_ELSE;
            } 
            // fall through
          case 70: break;
          case 29: 
            { return KEYWORD_IFEQ;
            } 
            // fall through
          case 71: break;
          case 30: 
            { return KEYWORD_ENDIF;
            } 
            // fall through
          case 72: break;
          case 31: 
            { return KEYWORD_IFNEQ;
            } 
            // fall through
          case 73: break;
          case 32: 
            { return KEYWORD_IFDEF;
            } 
            // fall through
          case 74: break;
          case 33: 
            { return KEYWORD_VPATH;
            } 
            // fall through
          case 75: break;
          case 34: 
            { yybegin(YYINITIAL); return KEYWORD_ENDEF;
            } 
            // fall through
          case 76: break;
          case 35: 
            { return KEYWORD_EXPORT;
            } 
            // fall through
          case 77: break;
          case 36: 
            { return KEYWORD_IFNDEF;
            } 
            // fall through
          case 78: break;
          case 37: 
            { yybegin(DEFINE); return KEYWORD_DEFINE;
            } 
            // fall through
          case 79: break;
          case 38: 
            { return KEYWORD_INCLUDE;
            } 
            // fall through
          case 80: break;
          case 39: 
            { return KEYWORD_PRIVATE;
            } 
            // fall through
          case 81: break;
          case 40: 
            { return KEYWORD_OVERRIDE;
            } 
            // fall through
          case 82: break;
          case 41: 
            { return KEYWORD_UNEXPORT;
            } 
            // fall through
          case 83: break;
          case 42: 
            { return KEYWORD_UNDEFINE;
            } 
            // fall through
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
