// Copyright 2000-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.jetbrains.lang.dart.ide.runner.server.webdev;

import com.intellij.execution.actions.ConfigurationContext;
import com.intellij.execution.actions.ConfigurationFromContext;
import com.intellij.execution.actions.LazyRunConfigurationProducer;
import com.intellij.execution.configurations.ConfigurationFactory;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.roots.ProjectFileIndex;
import com.intellij.openapi.roots.ProjectRootManager;
import com.intellij.openapi.util.Ref;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiFile;
import com.intellij.xml.util.HtmlUtil;
import com.jetbrains.lang.dart.analyzer.DartAnalysisServerService;
import com.jetbrains.lang.dart.sdk.DartSdk;
import com.jetbrains.lang.dart.util.PubspecYamlUtil;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public final class DartWebdevConfigurationProducer extends LazyRunConfigurationProducer<DartWebdevConfiguration> {
  @NotNull
  @Override
  public ConfigurationFactory getConfigurationFactory() {
    return DartWebdevConfigurationType.getInstance().getConfigurationFactories()[0];
  }

  @Override
  public boolean shouldReplace(@NotNull ConfigurationFromContext self, @NotNull ConfigurationFromContext other) {
    // Dart Web run configuration is more specific and more suitable for this context than com.intellij.javascript.debugger.execution.JavascriptDebugConfigurationType
    return "JavascriptDebugType".equals(other.getConfigurationType().getId());
  }

  @Override
  protected boolean setupConfigurationFromContext(@NotNull DartWebdevConfiguration configuration,
                                                  @NotNull ConfigurationContext context,
                                                  @NotNull Ref<PsiElement> sourceElement) {
    final VirtualFile htmlFile = getRunnableHtmlFileFromContext(context);
    if (htmlFile == null) {
      return false;
    }

    configuration.getParameters().setHtmlFilePath(htmlFile.getPath());
    configuration.setGeneratedName();
    sourceElement.set(sourceElement.isNull() ? null : sourceElement.get().getContainingFile());
    return true;
  }

  @Override
  public boolean isConfigurationFromContext(@NotNull DartWebdevConfiguration configuration, @NotNull ConfigurationContext context) {
    final VirtualFile htmlFile = getDartAwareHtmlFileFromContext(context);
    return htmlFile != null && htmlFile.getPath().equals(configuration.getParameters().getHtmlFilePath());
  }

  /**
   * This method itself, as well as helper methods such as {{@link #getDartAwareHtmlFileFromContext(ConfigurationContext)}, it is important
   * to have a superset of the verifications that are executed in {@link DartWebdevParameters#check(Project)} so that run configurations
   * generated by this producer don't immediately hit errors generated by validating the parameters in {@link DartWebdevParameters}.
   */
  @Nullable
  private static VirtualFile getRunnableHtmlFileFromContext(@NotNull ConfigurationContext context) {
    final Project project = context.getProject();
    final DartSdk dartSdk = DartSdk.getDartSdk(project);
    if (dartSdk == null || dartSdk.getVersion().isEmpty() || !DartAnalysisServerService.isDartSdkVersionSufficientForWebdev(dartSdk)) {
      return null;
    }

    final VirtualFile htmlVirtualFile = getDartAwareHtmlFileFromContext(context);
    if (htmlVirtualFile == null) {
      return null;
    }

    final ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(project).getFileIndex();
    return projectFileIndex.isInContent(htmlVirtualFile) ? htmlVirtualFile : null;
  }

  @Nullable
  private static VirtualFile getDartAwareHtmlFileFromContext(@NotNull ConfigurationContext context) {
    final PsiElement psiLocation = context.getPsiLocation();
    final PsiFile psiFile = psiLocation == null ? null : psiLocation.getContainingFile();
    final VirtualFile htmlFile = psiFile == null ? null : psiFile.getVirtualFile();
    if (htmlFile == null || !HtmlUtil.isHtmlFile(htmlFile)) return null;

    VirtualFile pubspecFile = PubspecYamlUtil.findPubspecYamlFile(context.getProject(), htmlFile);
    if (pubspecFile == null) return null;

    VirtualFile dartProjectRoot = pubspecFile.getParent();
    if (htmlFile.getParent().equals(dartProjectRoot)) return null;

    return htmlFile;
  }
}
