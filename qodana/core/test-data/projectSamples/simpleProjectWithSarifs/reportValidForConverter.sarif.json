{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "qodana-intellij",
          "fullName": "Qodana Intellij Linter",
          "version": "213.1407",
          "rules": [],
          "taxa": [
            {
              "id": "Java",
              "name": "Java"
            },
            {
              "id": "Java/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "Java",
                    "index": 0,
                    "toolComponent": {
                      "name": "qodana-intellij"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        },
        "extensions": [
          {
            "name": "com.intellij.java",
            "version": "213.1407",
            "rules": [
              {
                "id": "ConstantConditions",
                "shortDescription": {
                  "text": "Constant conditions & exceptions"
                },
                "fullDescription": {
                  "text": "<html>\n<body>\nReports the code that always produces the same result, throws an exception, or potentially violates nullability contracts.\n<p>Examples:</p>\n<pre><code>if (array.length &lt; index) {\n  System.out.println(array[index]);\n} // Array index is always out of bounds\n\nif (str == null) System.out.println(\"str is null\");\nSystem.out.println(str.trim());\n// the last statement may throw an NPE\n\n@NotNull\nInteger square(@Nullable Integer input) {\n    // the method contract is violated\n    return input == null ? null : input * input;\n}</code></pre>\n<p>\n  The inspection behavior may be controlled by a number of annotations, such as \n  <a href=\"https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html\">nullability</a> annotations,\n  <code><a href=\"https://www.jetbrains.com/help/idea/contract-annotations.html\">@Contract</a></code> annotation, \n  <code>@Range</code> annotation and so on.\n</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Suggest @Nullable annotation for methods/fields/parameters where nullable values are used</b> option to warn when a\n    nullable value is passed as an argument to a method with a non-annotated parameter,\n    stored into non-annotated field, or returned from a non-annotated method. In this case, the inspection will suggest propagating\n    the <code>@Nullable</code> annotation. You can also configure nullability annotations using the <b>Configure Annotations</b> button.</li>\n  <li>Use the <b>Treat non-annotated members and parameters as @Nullable</b> option to assume that non-annotated members can be null,\n    so they must not be used in non-null context.</li>\n  <li>Use the <b>Report not-null required parameter with null-literal argument usages</b> option to report method parameters that cannot be\n    null (e.g. immediately dereferenced in the method body), but there are call sites where a <code>null</code> literal is passed.</li>\n  <li>Use the <b>Report nullable methods that always return a non-null value</b> option to report methods that are annotated as\n  <code>@Nullable</code>, but always return non-null value. In this case, it's suggested that you change the annotation to <code>@NotNull</code>.</li>\n  <li>Use the <b>Don't report assertions with condition statically proven to be always true</b> option to avoid reporting assertions that were\n    statically proven to be always true. This also includes conditions like <code>if (alwaysFalseCondition) throw new IllegalArgumentException();</code>.</li>\n  <li>Use the <b>Ignore assert statements</b> option to control how the inspection treats <code>assert</code> statements. By default, the option\n    is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored\n    (-da mode).</li>\n  <li>Use the <b>Warn when reading a value guaranteed to be constant</b> option to add warnings on reading variables that contain some constant values,\n    for example: <code>true</code>, <code>false</code>, or <code>null</code>.</li>\n  <li>Use the <b>Report problems that happen only on some code paths</b> option to control whether to report problems that may happen only\n    on some code path. If this option is disabled, warnings like <i>exception is possible</i> will not be reported. The inspection will report\n    only warnings like <i>exception will definitely occur</i>. This mode may greatly reduce the number of false-positives, especially if the code\n    is not consistently annotated with nullability and contract annotations. That is why it can be useful for finding the most\n    important problems in legacy code bases.\n  </li>\n</ul>\n\n</body>\n</html>\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 1,
                      "toolComponent": {
                        "name": "qodana-intellij"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyStatementBody",
                "shortDescription": {
                  "text": "Statement with empty body"
                },
                "fullDescription": {
                  "text": "<html>\n<body>\nReports <code>if</code>, <code>while</code>, <code>do</code>, <code>for</code>, and <code>switch</code> statements\nwith empty bodies.\n<p>While occasionally intended, such code is confusing and is often the result of a typo.</p>\n<!-- tooltip end -->\n<p>This inspection is disabled in JSP files.</p>\n</body>\n</html>"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 2,
                      "toolComponent": {
                        "name": "qodana-intellij"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InfiniteRecursion",
                "shortDescription": {
                  "text": "Infinite recursion"
                },
                "fullDescription": {
                  "text": "<html>\n<body>\nReports methods that call themselves infinitely unless an exception is thrown.\n<p>\n  Methods reported by this inspection cannot return normally.\n  While such behavior may be intended, in many cases this is just an oversight.\n</p>\n<p><b>Example:</b></p>\n<pre><code>  int baz() {\n      return baz();\n  }</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING",
                    "tags": [
                      "ideaSeverity"
                    ]
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Java/Probable bugs",
                      "index": 2,
                      "toolComponent": {
                        "name": "qodana-intellij"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          }
        ]
      },
      "invocations": [
        {
          "exitCode": 0,
          "executionSuccessful": true
        }
      ],
      "language": "en-US",
      "versionControlProvenance": [
        {
          "repositoryUri": "https://github.com",
          "revisionId": "f55adc0d1729ec6197c08f6ad95eab821bced960",
          "branch": "master",
          "properties": {
            "lastAuthorName": "Alexey",
            "vcsType": "Git",
            "lastAuthorEmail": "megabochka",
            "tags": [
              "lastAuthorEmail",
              "lastAuthorName",
              "vcsType"
            ]
          }
        }
      ],
      "results": [
        {
          "ruleId": "EmptyStatementBody",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "<code>if</code> statement has empty body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "CheckSignatureAdapter.java",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 4,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "JAVA"
                },
                "contextRegion": {
                  "startLine": 216,
                  "startColumn": 1,
                  "charOffset": 51,
                  "charLength": 138,
                  "snippet": {
                    "text": "      throw new IllegalStateException();\n    }\n    if(true) {}\n    state = State.RETURN;\n    CheckSignatureAdapter checkSignatureAdapter ="
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "root.asm-util.main",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c4406ef27470a515f616155fe7ffa92c3e6b7a3833a49323cb4fefd81d3d01ef"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "InfiniteRecursion",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method <code>visitTypeVariable()</code> recurses infinitely, and can only end by throwing an exception"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "CheckSignatureAdapter.java",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 14,
                  "charLength": 17,
                  "snippet": {
                    "text": "visitTypeVariable"
                  },
                  "sourceLanguage": "JAVA"
                },
                "contextRegion": {
                  "startLine": 257,
                  "startColumn": 1,
                  "charOffset": 27,
                  "charLength": 152,
                  "snippet": {
                    "text": "\n  @Override\n  public void visitTypeVariable(final String name) {\n    visitTypeVariable(name);\n    if (type != TYPE_SIGNATURE || state != State.EMPTY) {"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "root.asm-util.main",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac5714b0b15b7e8c4311899afd1c2b44069865039f2a9d309dcab04eddd4681d"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        },
        {
          "ruleId": "InfiniteRecursion",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method <code>visitTypeVariable()</code> recurses infinitely"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "CheckSignatureAdapter.java",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 259,
                  "startColumn": 14,
                  "charLength": 17,
                  "snippet": {
                    "text": "visitTypeVariable"
                  },
                  "sourceLanguage": "JAVA"
                },
                "contextRegion": {
                  "startLine": 257,
                  "startColumn": 1,
                  "charOffset": 27,
                  "charLength": 152,
                  "snippet": {
                    "text": "\n  @Override\n  public void visitTypeVariable(final String name) {\n    visitTypeVariable(name);\n    if (type != TYPE_SIGNATURE || state != State.EMPTY) {"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "root.asm-util.main",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "ac5717b0b35b7e8c4312899afd1c2b44069865039f2a9d309dcab04eddd4681d"
          },
          "baselineState": "absent",
          "properties": {
            "ideaSeverity": "WARNING",
            "tags": [
              "ideaSeverity"
            ]
          }
        }
      ],
      "automationDetails": {
        "id": "project - 7/21/21, 7:47 AM",
        "guid": "7f9a91bd-1804-45fa-b2c0-45b68064ef5b"
      },
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}