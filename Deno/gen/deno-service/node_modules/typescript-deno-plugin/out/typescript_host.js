"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeScriptServiceHost = void 0;
const tsserverlibrary_1 = __importDefault(require("typescript/lib/tsserverlibrary"));
const merge_deep_1 = __importDefault(require("merge-deep"));
const utils_1 = require("typescript-deno-plugin/out/utils");
// see https://github.com/denoland/deno/blob/2debbdacb935cfe1eb7bb8d1f40a5063b339d90b/js/compiler.ts#L159-L170
const OPTIONS = {
    allowJs: true,
    checkJs: true,
    esModuleInterop: true,
    module: tsserverlibrary_1.default.ModuleKind.ESNext,
    moduleResolution: tsserverlibrary_1.default.ModuleResolutionKind.NodeJs,
    jsx: tsserverlibrary_1.default.JsxEmit.React,
    noEmit: true,
    strict: true,
    outDir: "$deno$",
    removeComments: true,
    stripComments: true,
    resolveJsonModule: true,
    sourceMap: true,
    target: tsserverlibrary_1.default.ScriptTarget.ESNext,
    typeRoots: [],
};
const OPTIONS_OVERWRITE_BY_DENO = {
    allowNonTsExtensions: false,
    jsx: OPTIONS.jsx,
    module: OPTIONS.module,
    moduleResolution: OPTIONS.moduleResolution,
    resolveJsonModule: OPTIONS.resolveJsonModule,
    strict: OPTIONS.strict,
    noEmit: OPTIONS.noEmit,
    noEmitHelpers: OPTIONS.noEmitHelpers,
    target: tsserverlibrary_1.default.ScriptTarget.ESNext,
    paths: {
        abc: ["./c.ts"],
        "abc.ts": ["./c.ts"],
    },
};
/**
 * An implementation of a `LanguageServiceHost` for a TypeScript project.
 *
 * The `TypeScriptServiceHost` implements the Deno `LanguageServiceHost` using
 * the TypeScript language services.
 */
class TypeScriptServiceHost {
    constructor(tsLsHost, 
    // private readonly tsLS: ts_module.LanguageService,
    logger) {
        this.tsLsHost = tsLsHost;
        this.logger = logger;
    }
    getCompilationSettings() {
        this.logger.info("getCompilationSettings");
        const projectConfig = this.tsLsHost.getCompilationSettings();
        const compilationSettings = merge_deep_1.default(merge_deep_1.default(OPTIONS, projectConfig), OPTIONS_OVERWRITE_BY_DENO);
        compilationSettings.baseUrl = this.tsLsHost.getCurrentDirectory();
        this.logger.info(`compilationSettings:${JSON.stringify(compilationSettings)}`);
        return compilationSettings;
    }
    resolveModuleNames(moduleNames, containingFile, reusedNames, redirectedReference, options) {
        if (!this.tsLsHost.resolveModuleNames) {
            this.logger.info("resolveModuleNames is undefined.");
            return [];
        }
        this.logger.info("resolvedModule:\n" + JSON.stringify(moduleNames, null, "  "));
        const resolvedModule = this.tsLsHost.resolveModuleNames(moduleNames, containingFile, reusedNames, redirectedReference, options);
        return resolvedModule;
    }
    getScriptFileNames() {
        const scriptFileNames = this.tsLsHost.getScriptFileNames();
        const denoDtsPath = utils_1.getDenoDtsPath(this.tsLsHost, "lib.deno.d.ts");
        if (denoDtsPath) {
            scriptFileNames.push(denoDtsPath);
        }
        return scriptFileNames;
    }
    // TODO
    resolveTypeReferenceDirectives(typeDirectiveNames, containingFile, redirectedReference, options) {
        if (!this.tsLsHost.resolveTypeReferenceDirectives) {
            return [];
        }
        return this.tsLsHost.resolveTypeReferenceDirectives(typeDirectiveNames, containingFile, redirectedReference, options);
    }
}
exports.TypeScriptServiceHost = TypeScriptServiceHost;
//# sourceMappingURL=typescript_host.js.map