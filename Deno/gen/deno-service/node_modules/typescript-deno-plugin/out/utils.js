"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pathExistsSync = exports.isUntitledDocument = exports.isValidDenoDocument = exports.hashURL = exports.isHttpURL = exports.sleep = exports.escapeRegExp = exports.normalizeFilepath = exports.getModuleWithQueryString = exports.getDenoDtsPath = exports.getPluginPath = exports.isInDenoDir = exports.getDenoDepsDir = exports.getDenoDir = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const crypto_1 = __importDefault(require("crypto"));
const url_1 = require("url");
function getDenoDir() {
    // ref https://deno.land/manual.html
    // On Linux/Redox: $XDG_CACHE_HOME/deno or $HOME/.cache/deno
    // On Windows: %LOCALAPPDATA%/deno (%LOCALAPPDATA% = FOLDERID_LocalAppData)
    // On macOS: $HOME/Library/Caches/deno
    // If something fails, it falls back to $HOME/.deno
    let denoDir = process.env.DENO_DIR;
    if (denoDir === undefined) {
        switch (process.platform) {
            case "win32":
                denoDir = `${process.env.LOCALAPPDATA}\\deno`;
                break;
            case "darwin":
                denoDir = `${process.env.HOME}/Library/Caches/deno`;
                break;
            case "linux":
                denoDir = process.env.XDG_CACHE_HOME
                    ? `${process.env.XDG_CACHE_HOME}/deno`
                    : `${process.env.HOME}/.cache/deno`;
                break;
            default:
                denoDir = `${process.env.HOME}/.deno`;
        }
    }
    return denoDir;
}
exports.getDenoDir = getDenoDir;
function getDenoDepsDir() {
    return path.join(getDenoDir(), "deps");
}
exports.getDenoDepsDir = getDenoDepsDir;
function isInDenoDir(filepath) {
    filepath = normalizeFilepath(filepath);
    const denoDir = getDenoDir();
    return filepath.startsWith(denoDir);
}
exports.isInDenoDir = isInDenoDir;
function getPluginPath(tsLsHost) {
    return path.resolve(tsLsHost.getCurrentDirectory(), "node_modules", "typescript-deno-plugin");
}
exports.getPluginPath = getPluginPath;
function getDenoDtsPath(tsLsHost, specifier) {
    let file = path.resolve(getDenoDir(), specifier);
    if (fs.existsSync(file)) {
        return file;
    }
    file = path.resolve(getPluginPath(tsLsHost), "lib", specifier);
    if (fs.existsSync(file)) {
        return file;
    }
    return undefined;
}
exports.getDenoDtsPath = getDenoDtsPath;
function getModuleWithQueryString(moduleName) {
    let name = moduleName;
    for (const index = name.indexOf("?"); index !== -1; name = name.substring(index + 1)) {
        const sub = name.substring(0, index);
        if (sub.endsWith(".ts") || sub.endsWith(".tsx")) {
            const cutLength = moduleName.length - name.length;
            return moduleName.substring(0, index + cutLength) || undefined;
        }
    }
    return undefined;
}
exports.getModuleWithQueryString = getModuleWithQueryString;
function normalizeFilepath(filepath) {
    return path.normalize(filepath
        // in Windows, filepath maybe `c:\foo\bar` tut the legal path should be `C:\foo\bar`
        .replace(/^([a-z]):\\/, (_, $1) => $1.toUpperCase() + ":\\")
        // There are some paths which are unix style, this style does not work on win32 systems
        .replace(/\//gm, path.sep));
}
exports.normalizeFilepath = normalizeFilepath;
// ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
// cover filepath string to regexp string
// Because the `\` string is included in the path to Windows
// So we need to translate it once
// `/^C:\Users\runneradmin\AppData\Local\deno\deps\/` -> `/^C:\\Users\\runneradmin\\AppData\\Local\\deno\\deps\\/`
function escapeRegExp(str) {
    return str.replace(/[.*+\-?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}
exports.escapeRegExp = escapeRegExp;
function sleep(ms) {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve();
        }, ms);
    });
}
exports.sleep = sleep;
function isHttpURL(str) {
    if (!str.startsWith("http://") && !str.startsWith("https://")) {
        return false;
    }
    try {
        new url_1.URL(str);
        return true;
    }
    catch (_a) {
        return false;
    }
}
exports.isHttpURL = isHttpURL;
// hash a URL with it's pathname and search
function hashURL(url) {
    return crypto_1.default
        .createHash("sha256")
        .update(url.pathname + url.search)
        .digest("hex");
}
exports.hashURL = hashURL;
function isValidDenoDocument(languageID) {
    return [
        "javascript",
        "javascriptreact",
        "typescript",
        "typescriptreact",
    ].includes(languageID);
}
exports.isValidDenoDocument = isValidDenoDocument;
function isUntitledDocument(filename) {
    // In vscode, tsserver may crash because a temporary document is not saved
    return /^untitled:/.test(filename);
}
exports.isUntitledDocument = isUntitledDocument;
function pathExistsSync(filepath) {
    try {
        fs.statSync(filepath);
        return true;
    }
    catch (err) {
        return false;
    }
}
exports.pathExistsSync = pathExistsSync;
//# sourceMappingURL=utils.js.map