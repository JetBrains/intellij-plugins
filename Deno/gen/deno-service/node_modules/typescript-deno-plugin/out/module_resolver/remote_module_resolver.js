"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.remoteModuleResolver = void 0;
const url_1 = require("url");
const path_1 = __importDefault(require("path"));
const utils_1 = require("typescript-deno-plugin/out/utils");
const hash_meta_1 = require("typescript-deno-plugin/out/module_resolver/hash_meta");
const universal_module_resolver_1 = require("typescript-deno-plugin/out/module_resolver/universal_module_resolver");
exports.remoteModuleResolver = {
    resolve(moduleName, originModuleName = moduleName) {
        const url = new url_1.URL(moduleName);
        const originDir = path_1.default.join(utils_1.getDenoDepsDir(), url.protocol.replace(/:$/, ""), // https: -> https
        url.hostname);
        const hash = utils_1.hashURL(url);
        const metaFilepath = path_1.default.join(originDir, `${hash}.metadata.json`);
        const meta = hash_meta_1.HashMeta.create(metaFilepath);
        if (!meta) {
            return;
        }
        let redirect = meta.headers.location;
        if (redirect) {
            redirect = utils_1.isHttpURL(redirect) // eg: https://redirect.com/path/to/redirect
                ? redirect
                : path_1.default.posix.isAbsolute(redirect) // eg: /path/to/redirect
                    ? `${url.protocol}//${url.host}${redirect}`
                    : // eg: ./path/to/redirect
                        `${url.protocol}//${url.host}${path_1.default.posix.resolve(url.pathname, redirect)}`;
            // avoid Circular
            if (!utils_1.isHttpURL(redirect) || redirect === moduleName) {
                return;
            }
            return universal_module_resolver_1.universalModuleResolver.resolve(redirect, originModuleName);
        }
        const moduleFilepath = path_1.default.join(originDir, hash);
        const typescriptTypes = meta.headers["x-typescript-types"];
        if (typescriptTypes) {
            const typeModule = universal_module_resolver_1.universalModuleResolver.resolve(typescriptTypes, originModuleName);
            if (typeModule) {
                return typeModule;
            }
        }
        return {
            originModuleName,
            filepath: moduleFilepath,
            extension: meta.extension,
        };
    },
};
//# sourceMappingURL=remote_module_resolver.js.map