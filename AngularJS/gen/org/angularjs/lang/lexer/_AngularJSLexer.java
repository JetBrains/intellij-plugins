// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: angular.flex

package org.angularjs.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static org.angularjs.lang.lexer.AngularJSTokenTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


class _AngularJSLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int YYSTRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\1\1\0\1\3\22\0\1\4"+
    "\1\5\1\6\1\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\12\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\0\1\32"+
    "\1\33\2\32\1\34\1\32\24\7\1\35\1\36\1\37"+
    "\1\40\1\7\1\0\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\7\1\47\1\50\1\7\1\51\1\52\1\7"+
    "\1\53\1\54\2\7\1\55\1\56\1\57\1\60\3\7"+
    "\1\61\1\7\1\62\1\63\1\64\42\0\1\1\u015f\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\1\1\31\1\32\11\5\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\37\1\0\1\42\1\43"+
    "\1\44\2\21\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\2\5\1\53\2\5\1\54\3\5\1\55\1\56\1\0"+
    "\1\57\1\21\1\60\1\61\2\5\1\62\6\5\1\63"+
    "\1\64\1\65\1\5\1\66\1\67\1\70\1\5\1\71"+
    "\1\5\1\64\1\72\2\5\1\64\1\0\2\5\1\0"+
    "\1\73\1\5\1\73\1\5\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\152\0\u0109\0\152"+
    "\0\u013e\0\152\0\152\0\152\0\152\0\152\0\152\0\152"+
    "\0\u0173\0\152\0\u01a8\0\u01dd\0\152\0\u0212\0\u0247\0\u027c"+
    "\0\u02b1\0\152\0\u02e6\0\152\0\152\0\u031b\0\u0350\0\u0385"+
    "\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\152\0\u04f8"+
    "\0\152\0\u052d\0\152\0\152\0\152\0\u0562\0\u02e6\0\152"+
    "\0\u0597\0\152\0\u05cc\0\u0601\0\152\0\152\0\u0636\0\152"+
    "\0\152\0\u066b\0\u06a0\0\u06d5\0\u0109\0\u070a\0\u073f\0\u0109"+
    "\0\u0774\0\u07a9\0\u07de\0\152\0\152\0\u0813\0\152\0\u0848"+
    "\0\152\0\152\0\u087d\0\u08b2\0\u0109\0\u08e7\0\u091c\0\u0951"+
    "\0\u0986\0\u09bb\0\u09f0\0\152\0\u0a25\0\u0109\0\u0a5a\0\u0109"+
    "\0\u0109\0\u0109\0\u0a8f\0\u0109\0\u0ac4\0\u0af9\0\u0109\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0109\0\u0ca1"+
    "\0\152\0\u0cd6\0\u0109";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\4\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\3\7"+
    "\1\32\1\33\1\34\1\35\1\36\3\7\1\37\1\40"+
    "\1\7\1\41\1\7\1\42\1\43\1\44\2\7\1\45"+
    "\1\46\1\7\1\47\1\50\1\51\2\52\2\53\2\52"+
    "\1\54\3\52\1\55\23\52\1\56\26\52\66\0\4\4"+
    "\31\0\1\57\47\0\1\60\5\0\1\61\44\0\1\7"+
    "\13\0\1\7\6\0\3\7\4\0\21\7\14\0\1\62"+
    "\76\0\1\63\62\0\1\63\1\0\1\23\10\0\1\64"+
    "\10\0\1\64\43\0\1\65\67\0\1\66\64\0\1\67"+
    "\64\0\1\70\56\0\1\71\45\0\1\4\71\0\1\7"+
    "\13\0\1\7\6\0\3\7\4\0\15\7\1\72\3\7"+
    "\12\0\1\7\13\0\1\7\6\0\3\7\4\0\11\7"+
    "\1\73\7\7\12\0\1\7\13\0\1\7\6\0\3\7"+
    "\4\0\1\74\20\7\12\0\1\7\13\0\1\7\6\0"+
    "\3\7\4\0\12\7\1\75\6\7\12\0\1\7\13\0"+
    "\1\7\6\0\3\7\4\0\4\7\1\76\14\7\12\0"+
    "\1\7\13\0\1\7\6\0\3\7\4\0\17\7\1\77"+
    "\1\7\12\0\1\7\13\0\1\7\6\0\3\7\4\0"+
    "\5\7\1\100\13\7\12\0\1\7\13\0\1\7\6\0"+
    "\3\7\4\0\6\7\1\101\5\7\1\102\4\7\12\0"+
    "\1\7\13\0\1\7\6\0\3\7\4\0\12\7\1\103"+
    "\6\7\66\0\1\104\1\0\2\52\2\0\2\52\1\0"+
    "\3\52\1\0\23\52\1\0\26\52\2\105\2\0\54\105"+
    "\1\106\4\105\27\0\1\107\60\0\1\63\10\0\1\64"+
    "\10\0\1\64\35\0\1\110\1\0\1\110\2\0\1\110"+
    "\70\0\1\111\44\0\1\7\11\0\1\112\1\0\1\7"+
    "\6\0\3\7\4\0\21\7\12\0\1\7\13\0\1\7"+
    "\6\0\3\7\4\0\15\7\1\113\3\7\12\0\1\7"+
    "\13\0\1\7\6\0\3\7\4\0\11\7\1\114\7\7"+
    "\12\0\1\7\13\0\1\7\6\0\3\7\4\0\16\7"+
    "\1\115\2\7\12\0\1\7\13\0\1\7\6\0\3\7"+
    "\4\0\11\7\1\116\7\7\12\0\1\7\13\0\1\7"+
    "\6\0\3\7\4\0\4\7\1\117\2\7\1\120\11\7"+
    "\12\0\1\7\13\0\1\7\6\0\3\7\4\0\1\121"+
    "\16\7\1\122\1\7\12\0\1\7\13\0\1\7\6\0"+
    "\3\7\4\0\3\7\1\123\15\7\3\0\23\124\1\125"+
    "\6\124\3\125\4\124\6\125\16\124\23\0\1\110\50\0"+
    "\1\7\13\0\1\7\6\0\3\7\4\0\4\7\1\126"+
    "\14\7\12\0\1\7\13\0\1\7\6\0\3\7\4\0"+
    "\15\7\1\127\3\7\12\0\1\7\13\0\1\7\6\0"+
    "\3\7\4\0\11\7\1\130\7\7\12\0\1\7\13\0"+
    "\1\7\6\0\3\7\4\0\12\7\1\131\6\7\12\0"+
    "\1\7\13\0\1\7\6\0\3\7\4\0\15\7\1\132"+
    "\3\7\12\0\1\7\13\0\1\7\6\0\3\7\4\0"+
    "\2\7\1\133\16\7\12\0\1\7\13\0\1\7\6\0"+
    "\3\7\4\0\4\7\1\134\14\7\12\0\1\7\13\0"+
    "\1\7\6\0\3\7\4\0\4\7\1\135\14\7\26\0"+
    "\1\136\6\0\3\136\4\0\6\136\25\0\1\7\13\0"+
    "\1\7\6\0\3\7\4\0\4\7\1\137\14\7\12\0"+
    "\1\7\13\0\1\7\6\0\3\7\4\0\10\7\1\140"+
    "\10\7\12\0\1\7\13\0\1\7\6\0\3\7\4\0"+
    "\5\7\1\141\13\7\26\0\1\142\6\0\3\142\4\0"+
    "\6\142\22\0\1\143\2\0\1\7\13\0\1\7\6\0"+
    "\1\7\1\144\1\7\4\0\21\7\12\0\1\7\13\0"+
    "\1\7\6\0\3\7\4\0\7\7\1\145\11\7\26\0"+
    "\1\105\6\0\3\105\4\0\6\105\60\0\1\146\31\0"+
    "\1\7\13\0\1\7\6\0\3\7\4\0\20\7\1\147"+
    "\12\0\1\7\13\0\1\7\6\0\3\7\4\0\12\7"+
    "\1\150\6\7\64\0\1\151\12\0\1\7\13\0\1\7"+
    "\6\0\3\7\4\0\4\7\1\152\14\7\12\0\1\7"+
    "\13\0\1\7\6\0\3\7\4\0\3\7\1\153\15\7"+
    "\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3339];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\2\1\1\11\1\1\1\11\1\1\7\11"+
    "\1\1\1\11\2\1\1\11\4\1\1\11\1\1\2\11"+
    "\11\1\1\11\1\1\1\11\1\1\3\11\1\1\1\0"+
    "\1\11\1\1\1\11\2\1\2\11\1\1\2\11\12\1"+
    "\2\11\1\0\1\11\1\1\2\11\11\1\1\11\16\1"+
    "\1\0\2\1\1\0\2\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private char quote;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _AngularJSLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 61: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 62: break;
          case 3:
            { return EXCL;
            }
          // fall through
          case 63: break;
          case 4:
            { yybegin(YYSTRING); quote = '"'; return STRING_LITERAL;
            }
          // fall through
          case 64: break;
          case 5:
            { return IDENTIFIER;
            }
          // fall through
          case 65: break;
          case 6:
            { return PERC;
            }
          // fall through
          case 66: break;
          case 7:
            { return AND;
            }
          // fall through
          case 67: break;
          case 8:
            { yybegin(YYSTRING); quote = '\''; return STRING_LITERAL;
            }
          // fall through
          case 68: break;
          case 9:
            { return LPAR;
            }
          // fall through
          case 69: break;
          case 10:
            { return RPAR;
            }
          // fall through
          case 70: break;
          case 11:
            { return MULT;
            }
          // fall through
          case 71: break;
          case 12:
            { return PLUS;
            }
          // fall through
          case 72: break;
          case 13:
            { return COMMA;
            }
          // fall through
          case 73: break;
          case 14:
            { return MINUS;
            }
          // fall through
          case 74: break;
          case 15:
            { return DOT;
            }
          // fall through
          case 75: break;
          case 16:
            { return DIV;
            }
          // fall through
          case 76: break;
          case 17:
            { return NUMERIC_LITERAL;
            }
          // fall through
          case 77: break;
          case 18:
            { return COLON;
            }
          // fall through
          case 78: break;
          case 19:
            { return SEMICOLON;
            }
          // fall through
          case 79: break;
          case 20:
            { return LT;
            }
          // fall through
          case 80: break;
          case 21:
            { return EQ;
            }
          // fall through
          case 81: break;
          case 22:
            { return GT;
            }
          // fall through
          case 82: break;
          case 23:
            { return QUEST;
            }
          // fall through
          case 83: break;
          case 24:
            { return LBRACKET;
            }
          // fall through
          case 84: break;
          case 25:
            { return RBRACKET;
            }
          // fall through
          case 85: break;
          case 26:
            { return XOR;
            }
          // fall through
          case 86: break;
          case 27:
            { return LBRACE;
            }
          // fall through
          case 87: break;
          case 28:
            { return OR;
            }
          // fall through
          case 88: break;
          case 29:
            { return RBRACE;
            }
          // fall through
          case 89: break;
          case 30:
            { return STRING_LITERAL;
            }
          // fall through
          case 90: break;
          case 31:
            { yypushback(yytext().length()); yybegin(YYINITIAL);
            }
          // fall through
          case 91: break;
          case 32:
            { if (quote == '"') yybegin(YYINITIAL); return STRING_LITERAL;
            }
          // fall through
          case 92: break;
          case 33:
            { if (quote == '\'') yybegin(YYINITIAL); return STRING_LITERAL;
            }
          // fall through
          case 93: break;
          case 34:
            { return ASSERT_NOT_NULL;
            }
          // fall through
          case 94: break;
          case 35:
            { return NE;
            }
          // fall through
          case 95: break;
          case 36:
            { return ANDAND;
            }
          // fall through
          case 96: break;
          case 37:
            { return ONE_TIME_BINDING;
            }
          // fall through
          case 97: break;
          case 38:
            { return LE;
            }
          // fall through
          case 98: break;
          case 39:
            { return EQEQ;
            }
          // fall through
          case 99: break;
          case 40:
            { return GE;
            }
          // fall through
          case 100: break;
          case 41:
            { return ELVIS;
            }
          // fall through
          case 101: break;
          case 42:
            { return AS_KEYWORD;
            }
          // fall through
          case 102: break;
          case 43:
            { return IN_KEYWORD;
            }
          // fall through
          case 103: break;
          case 44:
            { return OF_KEYWORD;
            }
          // fall through
          case 104: break;
          case 45:
            { return OROR;
            }
          // fall through
          case 105: break;
          case 46:
            { return ESCAPE_SEQUENCE;
            }
          // fall through
          case 106: break;
          case 47:
            { return NEQEQ;
            }
          // fall through
          case 107: break;
          case 48:
            { return EQEQEQ;
            }
          // fall through
          case 108: break;
          case 49:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { return IDENTIFIER;
            }
          // fall through
          case 109: break;
          case 50:
            { return LET_KEYWORD;
            }
          // fall through
          case 110: break;
          case 51:
            { yypushback(1); return INVALID_ESCAPE_SEQUENCE;
            }
          // fall through
          case 111: break;
          case 52:
            { return INVALID_ESCAPE_SEQUENCE;
            }
          // fall through
          case 112: break;
          case 53:
            { return ELSE_KEYWORD;
            }
          // fall through
          case 113: break;
          case 54:
            { return NULL_KEYWORD;
            }
          // fall through
          case 114: break;
          case 55:
            { return THEN;
            }
          // fall through
          case 115: break;
          case 56:
            { return THIS_KEYWORD;
            }
          // fall through
          case 116: break;
          case 57:
            { return TRUE_KEYWORD;
            }
          // fall through
          case 117: break;
          case 58:
            { return FALSE_KEYWORD;
            }
          // fall through
          case 118: break;
          case 59:
            { return TRACK_BY_KEYWORD;
            }
          // fall through
          case 119: break;
          case 60:
            { return UNDEFINED_KEYWORD;
            }
          // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
