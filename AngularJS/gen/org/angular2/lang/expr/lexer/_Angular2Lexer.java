/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.angular2.lang.expr.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.lexer.FlexLexer;

import static org.angular2.lang.expr.lexer.Angular2TokenTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Angular2.flex</tt>
 */
class _Angular2Lexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int YYSTRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14048 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\15"+
    "\1\24\1\52\1\53\1\54\1\55\1\56\1\57\2\15\1\60\1\53\1\54\1\61\1\1\1\62\1\1"+
    "\1\63\1\64\1\21\1\54\1\65\1\1\1\66\1\15\1\67\1\70\1\53\1\54\1\65\1\1\1\57"+
    "\1\15\1\40\1\71\1\72\1\73\1\74\1\1\1\66\2\1\1\75\1\35\1\54\1\50\1\1\1\76\1"+
    "\15\1\1\1\77\1\35\1\54\1\100\1\1\1\56\1\15\1\101\1\75\1\35\1\12\1\102\1\56"+
    "\1\103\1\15\1\41\1\104\1\105\1\12\1\106\1\107\3\1\1\24\2\12\1\110\1\107\3"+
    "\1\1\111\1\112\1\113\1\114\1\115\1\116\2\1\1\66\3\1\1\117\1\12\1\120\1\1\1"+
    "\121\7\1\2\12\1\27\1\122\1\1\1\123\1\124\1\125\1\126\1\1\2\12\1\127\2\12\1"+
    "\130\24\12\1\131\1\132\2\12\1\131\2\12\1\133\1\134\1\13\3\12\1\134\3\12\1"+
    "\27\2\1\1\12\1\1\5\12\1\135\1\24\45\12\1\136\1\12\1\24\1\27\4\12\1\27\1\137"+
    "\1\140\1\15\1\12\1\15\1\12\1\15\1\140\1\66\3\12\1\141\1\1\1\142\4\1\5\12\1"+
    "\26\1\143\1\12\1\144\4\12\1\37\1\12\1\145\3\1\1\12\1\146\1\147\2\12\1\150"+
    "\1\12\1\74\3\1\1\12\1\107\3\12\1\147\4\1\1\151\5\1\1\104\2\12\1\141\1\152"+
    "\3\1\1\153\1\12\1\154\1\41\2\12\1\37\1\1\2\12\1\141\1\1\1\36\1\41\1\12\1\146"+
    "\1\45\5\1\1\155\1\156\14\12\4\1\21\12\1\135\2\12\1\135\1\157\1\12\1\146\3"+
    "\12\1\160\1\161\1\162\1\120\1\161\7\1\1\163\1\1\1\120\6\1\1\164\1\165\1\166"+
    "\1\167\1\170\3\1\1\171\147\1\2\12\1\145\2\12\1\145\10\12\1\172\1\173\2\12"+
    "\1\127\3\12\1\174\1\1\1\12\1\107\4\175\4\1\1\122\35\1\1\176\2\1\1\177\1\24"+
    "\4\12\1\200\1\24\4\12\1\130\1\104\1\12\1\146\1\24\4\12\1\145\1\1\1\12\1\27"+
    "\3\1\1\12\40\1\133\12\1\37\4\1\135\12\1\37\2\1\10\12\1\120\4\1\2\12\1\146"+
    "\20\12\1\120\1\12\1\201\1\1\2\12\1\145\1\122\1\12\1\146\4\12\1\37\2\1\1\202"+
    "\1\203\5\12\1\204\1\12\1\145\1\26\3\1\1\202\1\205\1\12\1\30\1\1\3\12\1\141"+
    "\1\203\2\12\1\141\3\1\1\206\1\41\1\12\1\37\1\12\1\107\1\1\1\12\1\120\1\47"+
    "\2\12\1\30\1\122\1\1\1\207\1\210\2\12\1\45\1\1\1\211\1\1\1\12\1\212\3\12\1"+
    "\213\1\214\1\215\1\27\1\63\1\216\1\217\1\175\2\12\1\130\1\37\7\12\1\30\1\1"+
    "\72\12\1\141\1\12\1\220\2\12\1\150\20\1\26\12\1\146\6\12\1\74\2\1\1\107\1"+
    "\221\1\54\1\222\1\223\6\12\1\15\1\1\1\153\25\12\1\146\1\1\4\12\1\203\2\12"+
    "\1\26\2\1\1\150\7\1\1\207\7\12\1\120\2\1\1\24\1\27\1\24\1\27\1\224\4\12\1"+
    "\145\1\225\1\226\2\1\1\227\1\12\1\13\1\230\2\146\2\1\7\12\1\27\30\1\1\12\1"+
    "\120\3\12\1\66\2\1\2\12\1\1\1\12\1\231\2\12\1\37\1\12\1\146\2\12\1\232\3\1"+
    "\11\12\1\146\1\1\2\12\1\232\1\12\1\150\2\12\1\26\3\12\1\141\11\1\23\12\1\107"+
    "\1\12\1\37\1\26\11\1\1\233\2\12\1\234\1\12\1\37\1\12\1\107\1\12\1\145\4\1"+
    "\1\12\1\235\1\12\1\37\1\12\1\74\4\1\3\12\1\236\4\1\1\66\1\237\1\12\1\141\2"+
    "\1\1\12\1\120\1\12\1\120\2\1\1\117\1\12\1\147\1\1\3\12\1\37\1\12\1\37\1\12"+
    "\1\30\1\12\1\15\6\1\4\12\1\45\3\1\3\12\1\30\3\12\1\30\60\1\1\153\2\12\1\26"+
    "\4\1\1\153\2\12\2\1\1\12\1\45\1\1\1\153\1\12\1\107\2\1\2\12\1\240\1\153\2"+
    "\12\1\30\1\241\1\242\2\1\1\12\1\21\1\150\5\1\1\243\1\244\1\45\2\12\1\145\2"+
    "\1\1\70\1\53\1\54\1\65\1\1\1\245\1\15\11\1\3\12\1\147\1\246\3\1\3\12\1\1\1"+
    "\247\13\1\2\12\1\145\2\1\1\250\2\1\3\12\1\1\1\251\3\1\2\12\1\27\5\1\1\12\1"+
    "\74\30\1\4\12\1\1\1\122\34\1\3\12\1\45\20\1\1\54\1\12\1\145\1\1\1\66\2\1\1"+
    "\203\1\12\67\1\71\12\1\74\16\1\14\12\1\141\53\1\2\12\1\145\75\1\44\12\1\107"+
    "\33\1\43\12\1\45\1\12\1\145\7\1\1\12\1\146\1\1\3\12\1\1\1\141\1\1\1\153\1"+
    "\252\1\12\67\1\4\12\1\147\1\66\3\1\1\153\4\1\1\66\1\1\76\12\1\120\1\1\57\12"+
    "\1\30\20\1\1\15\77\1\6\12\1\27\1\120\1\45\1\74\66\1\5\12\1\207\3\12\1\140"+
    "\1\253\1\254\1\255\3\12\1\256\1\257\1\12\1\260\1\261\1\35\24\12\1\262\1\12"+
    "\1\35\1\130\1\12\1\130\1\12\1\207\1\12\1\207\1\145\1\12\1\145\1\12\1\54\1"+
    "\12\1\54\1\12\1\211\3\1\14\12\1\147\3\1\4\12\1\141\113\1\1\255\1\12\1\263"+
    "\1\264\1\265\1\266\1\267\1\270\1\271\1\150\1\272\1\150\24\1\55\12\1\107\2"+
    "\1\103\12\1\147\15\12\1\146\150\12\1\15\25\1\41\12\1\146\36\1");

  /* The ZZ_CMAP_A table has 2992 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\1\1\1\0\1\65\22\0\1\1\1\46\1\30\1\62\1\15\1\43\1\16\1\27\1\52"+
    "\1\53\1\42\1\7\1\61\1\14\1\5\1\10\12\4\1\13\1\23\1\47\1\45\1\50\1\60\1\0\4"+
    "\64\1\6\1\64\21\12\1\63\2\12\1\56\1\2\1\57\1\44\1\12\1\0\1\17\2\64\1\36\1"+
    "\34\1\37\1\12\1\41\1\40\2\12\1\33\1\12\1\35\1\21\1\20\1\24\1\32\1\22\1\26"+
    "\1\25\1\31\1\12\1\63\2\12\1\54\1\51\1\55\2\0\1\1\11\0\1\11\12\0\1\11\4\0\1"+
    "\11\5\0\27\11\1\0\12\11\4\0\14\11\16\0\5\11\7\0\1\11\1\0\1\11\1\0\5\11\1\0"+
    "\2\11\2\0\4\11\1\0\1\11\6\0\1\11\1\0\3\11\1\0\1\11\1\0\4\11\1\0\23\11\1\0"+
    "\13\11\10\0\6\11\1\0\26\11\2\0\1\11\6\0\10\11\10\0\13\11\5\0\3\11\33\0\6\11"+
    "\1\0\1\11\17\0\2\11\7\0\2\11\12\0\3\11\2\0\2\11\1\0\16\11\15\0\11\11\13\0"+
    "\1\11\30\0\6\11\4\0\2\11\4\0\1\11\5\0\6\11\4\0\1\11\11\0\1\11\3\0\1\11\7\0"+
    "\11\11\7\0\5\11\1\0\10\11\6\0\26\11\3\0\1\11\2\0\1\11\7\0\11\11\4\0\10\11"+
    "\2\0\2\11\2\0\26\11\1\0\7\11\1\0\1\11\3\0\4\11\3\0\1\11\20\0\1\11\15\0\2\11"+
    "\1\0\1\11\5\0\6\11\4\0\2\11\1\0\2\11\1\0\2\11\1\0\2\11\17\0\4\11\1\0\1\11"+
    "\3\0\3\11\20\0\11\11\1\0\2\11\1\0\2\11\1\0\5\11\3\0\1\11\2\0\1\11\30\0\1\11"+
    "\13\0\10\11\2\0\1\11\3\0\1\11\1\0\6\11\3\0\3\11\1\0\4\11\3\0\2\11\1\0\1\11"+
    "\1\0\2\11\3\0\2\11\3\0\3\11\3\0\14\11\13\0\10\11\1\0\2\11\10\0\3\11\5\0\1"+
    "\11\4\0\10\11\1\0\6\11\1\0\5\11\3\0\1\11\3\0\2\11\15\0\13\11\2\0\1\11\6\0"+
    "\3\11\10\0\1\11\5\0\22\11\3\0\10\11\1\0\11\11\1\0\1\11\2\0\7\11\11\0\1\11"+
    "\1\0\2\11\15\0\2\11\1\0\1\11\2\0\2\11\1\0\1\11\2\0\1\11\6\0\4\11\1\0\7\11"+
    "\1\0\3\11\1\0\1\11\1\0\1\11\2\0\2\11\1\0\4\11\1\0\2\11\11\0\1\11\2\0\5\11"+
    "\1\0\1\11\25\0\14\11\1\0\24\11\13\0\5\11\22\0\7\11\4\0\4\11\3\0\1\11\3\0\2"+
    "\11\7\0\3\11\4\0\15\11\14\0\1\11\1\0\6\11\1\0\1\11\5\0\1\11\2\0\13\11\1\0"+
    "\15\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0\1\11\1\0\4\11\2\0\7\11\1\0"+
    "\1\11\1\0\4\11\2\0\16\11\2\0\6\11\2\0\15\11\2\0\1\11\1\0\10\11\7\0\15\11\1"+
    "\0\6\11\23\0\1\11\4\0\1\11\3\0\5\11\2\0\22\11\1\0\1\11\5\0\17\11\1\0\16\11"+
    "\2\0\5\11\13\0\14\11\13\0\1\11\15\0\7\11\7\0\16\11\15\0\2\11\11\0\4\11\1\0"+
    "\4\11\3\0\2\11\11\0\10\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\6\11\1\0\7\11\1\0"+
    "\1\11\3\0\3\11\1\0\7\11\3\0\4\11\2\0\6\11\5\0\1\11\15\0\1\11\2\0\1\11\4\0"+
    "\1\11\2\0\12\11\1\0\1\11\3\0\5\11\6\0\1\11\1\0\1\11\1\0\1\11\1\0\4\11\1\0"+
    "\13\11\2\0\4\11\5\0\5\11\4\0\1\11\4\0\2\11\13\0\5\11\6\0\4\11\3\0\2\11\14"+
    "\0\10\11\7\0\10\11\1\0\7\11\6\0\2\11\12\0\5\11\5\0\2\11\3\0\7\11\6\0\3\11"+
    "\12\0\2\11\13\0\11\11\2\0\27\11\2\0\7\11\1\0\3\11\1\0\4\11\1\0\4\11\2\0\6"+
    "\11\3\0\1\11\1\0\1\11\2\0\5\11\1\0\12\11\12\0\5\11\1\0\3\11\1\0\10\11\4\0"+
    "\7\11\3\0\1\11\3\0\2\11\1\0\1\11\3\0\2\11\2\0\5\11\2\0\1\11\1\0\1\11\30\0"+
    "\3\11\3\0\6\11\2\0\6\11\2\0\6\11\11\0\7\11\4\0\5\11\3\0\5\11\5\0\1\11\1\0"+
    "\10\11\1\0\5\11\1\0\1\11\1\0\2\11\1\0\2\11\1\0\12\11\6\0\12\11\2\0\6\11\2"+
    "\0\6\11\2\0\6\11\2\0\3\11\3\0\14\11\1\0\16\11\1\0\2\11\1\0\2\11\1\0\10\11"+
    "\6\0\4\11\4\0\16\11\2\0\1\11\1\0\14\11\1\0\2\11\3\0\1\11\2\0\4\11\1\0\2\11"+
    "\12\0\10\11\6\0\6\11\1\0\3\11\1\0\12\11\3\0\1\11\12\0\4\11\25\0\1\11\1\0\1"+
    "\11\3\0\7\11\1\0\1\11\1\0\4\11\1\0\17\11\1\0\2\11\14\0\3\11\7\0\4\11\11\0"+
    "\2\11\1\0\1\11\20\0\4\11\10\0\1\11\13\0\10\11\5\0\3\11\2\0\1\11\2\0\2\11\2"+
    "\0\4\11\1\0\14\11\1\0\1\11\1\0\7\11\1\0\21\11\1\0\4\11\2\0\10\11\1\0\7\11"+
    "\1\0\14\11\1\0\4\11\1\0\5\11\1\0\1\11\3\0\14\11\2\0\10\11\1\0\2\11\1\0\1\11"+
    "\2\0\1\11\1\0\12\11\1\0\4\11\1\0\1\11\1\0\1\11\6\0\1\11\4\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\3\11\1\0\2\11\1\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1"+
    "\0\1\11\1\0\2\11\1\0\1\11\2\0\4\11\1\0\7\11\1\0\4\11\1\0\4\11\1\0\1\11\1\0"+
    "\12\11\1\0\5\11\1\0\3\11\1\0\5\11\1\0\5\11");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\5\1\13\2\5\1\14"+
    "\1\15\6\5\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\2\40\1\37\1\41\1\42"+
    "\1\0\2\3\1\43\1\44\2\0\1\45\10\5\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\2\55\5\0"+
    "\1\3\2\0\1\56\3\5\1\57\1\60\3\5\1\61"+
    "\1\62\2\0\1\63\1\64\1\65\6\0\1\5\1\66"+
    "\1\67\1\70\1\71\1\5\2\0\1\64\5\0\1\5"+
    "\1\72\1\0\1\64\2\0\1\73\1\74\1\5\1\75"+
    "\1\76\2\5\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\154\0\u01b0\0\154\0\154\0\u01e6\0\u021c\0\154\0\u0252"+
    "\0\u0288\0\154\0\154\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396"+
    "\0\u03cc\0\154\0\154\0\154\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\154\0\154\0\154\0\154\0\154\0\154\0\u0510"+
    "\0\154\0\154\0\u0546\0\u057c\0\154\0\u05b2\0\154\0\154"+
    "\0\330\0\u05e8\0\u061e\0\u0654\0\154\0\u068a\0\u06c0\0\u06f6"+
    "\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6"+
    "\0\u017a\0\u08dc\0\u0912\0\154\0\154\0\154\0\154\0\154"+
    "\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2"+
    "\0\u0af8\0\154\0\u0b2e\0\u0b64\0\u0b9a\0\u017a\0\u017a\0\u0bd0"+
    "\0\u0c06\0\u0c3c\0\154\0\154\0\u0c72\0\u0ca8\0\154\0\u0cde"+
    "\0\154\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58"+
    "\0\u017a\0\u017a\0\u017a\0\u017a\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30"+
    "\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u017a\0\u10aa"+
    "\0\u10e0\0\u1116\0\u114c\0\154\0\154\0\u1182\0\154\0\154"+
    "\0\u11b8\0\u11ee\0\u017a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\7\1\10\1\11"+
    "\1\12\1\3\1\10\1\13\1\14\1\10\1\15\1\16"+
    "\3\10\1\17\1\10\1\20\1\21\1\22\1\23\1\24"+
    "\1\10\1\25\1\26\1\27\1\10\1\30\1\31\1\10"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\2\10\1\4\2\53\1\54\1\55\12\53\1\56"+
    "\10\53\1\57\1\60\34\53\1\55\67\0\1\4\1\61"+
    "\1\4\61\0\1\4\3\0\1\4\66\0\1\6\1\62"+
    "\1\63\25\0\1\63\35\0\1\62\65\0\1\10\1\0"+
    "\1\10\3\0\1\10\2\0\1\10\1\0\4\10\1\0"+
    "\3\10\2\0\11\10\21\0\2\10\11\0\1\64\73\0"+
    "\1\65\1\66\4\0\1\67\45\0\1\10\1\0\1\10"+
    "\3\0\1\10\2\0\1\10\1\0\3\10\1\70\1\0"+
    "\3\10\2\0\11\10\21\0\2\10\5\0\1\10\1\0"+
    "\1\10\3\0\1\10\2\0\1\10\1\0\4\10\1\0"+
    "\3\10\2\0\4\10\1\71\4\10\21\0\2\10\5\0"+
    "\1\10\1\0\1\10\3\0\1\10\2\0\1\10\1\0"+
    "\4\10\1\0\3\10\2\0\1\10\1\72\6\10\1\73"+
    "\21\0\2\10\5\0\1\10\1\0\1\10\3\0\1\10"+
    "\2\0\1\10\1\0\1\74\3\10\1\0\3\10\2\0"+
    "\11\10\21\0\2\10\5\0\1\10\1\0\1\10\3\0"+
    "\1\10\2\0\1\10\1\0\4\10\1\0\3\10\2\0"+
    "\3\10\1\75\5\10\21\0\2\10\5\0\1\10\1\0"+
    "\1\10\3\0\1\10\2\0\1\10\1\0\4\10\1\0"+
    "\3\10\2\0\2\10\1\76\6\10\21\0\2\10\5\0"+
    "\1\10\1\0\1\10\3\0\1\10\2\0\1\10\1\0"+
    "\4\10\1\0\1\10\1\77\1\10\2\0\11\10\21\0"+
    "\2\10\5\0\1\10\1\0\1\10\3\0\1\10\2\0"+
    "\1\10\1\0\1\100\3\10\1\0\3\10\2\0\11\10"+
    "\21\0\2\10\5\0\1\10\1\0\1\10\3\0\1\10"+
    "\2\0\1\10\1\0\4\10\1\0\3\10\2\0\6\10"+
    "\1\101\2\10\21\0\2\10\46\0\1\102\65\0\1\103"+
    "\65\0\1\104\65\0\1\105\71\0\1\106\21\0\1\107"+
    "\60\0\2\53\2\0\12\53\1\0\10\53\2\0\34\53"+
    "\1\0\3\110\1\0\12\110\1\111\6\110\1\112\37\110"+
    "\7\0\1\113\2\0\3\113\3\0\1\114\3\113\1\0"+
    "\1\115\2\113\2\0\11\113\20\0\1\116\2\113\5\0"+
    "\1\62\1\0\1\63\25\0\1\63\35\0\1\117\2\0"+
    "\1\117\4\0\1\117\51\0\66\64\20\0\1\120\72\0"+
    "\1\121\44\0\1\10\1\122\1\10\3\0\1\10\2\0"+
    "\1\10\1\0\4\10\1\0\3\10\2\0\11\10\21\0"+
    "\2\10\5\0\1\10\1\0\1\10\3\0\1\10\2\0"+
    "\1\10\1\0\4\10\1\0\3\10\2\0\5\10\1\123"+
    "\3\10\21\0\2\10\5\0\1\10\1\0\1\10\3\0"+
    "\1\10\2\0\1\10\1\0\4\10\1\0\1\10\1\124"+
    "\1\10\2\0\11\10\21\0\2\10\5\0\1\10\1\0"+
    "\1\10\3\0\1\10\2\0\1\10\1\0\4\10\1\0"+
    "\3\10\2\0\7\10\1\125\1\10\21\0\2\10\5\0"+
    "\1\10\1\0\1\10\3\0\1\10\2\0\1\10\1\0"+
    "\4\10\1\0\3\10\2\0\1\10\1\126\7\10\21\0"+
    "\2\10\5\0\1\10\1\0\1\10\3\0\1\10\2\0"+
    "\1\10\1\0\4\10\1\0\2\10\1\127\2\0\11\10"+
    "\21\0\2\10\5\0\1\10\1\0\1\10\3\0\1\10"+
    "\2\0\1\10\1\0\3\10\1\130\1\0\3\10\2\0"+
    "\11\10\21\0\2\10\5\0\1\10\1\0\1\10\3\0"+
    "\1\10\2\0\1\10\1\0\4\10\1\0\3\10\2\0"+
    "\2\10\1\131\6\10\21\0\2\10\5\0\1\10\1\0"+
    "\1\10\3\0\1\10\2\0\1\10\1\0\4\10\1\0"+
    "\3\10\2\0\2\10\1\132\6\10\21\0\2\10\46\0"+
    "\1\133\65\0\1\134\26\0\1\135\2\0\3\135\3\0"+
    "\4\135\1\0\3\135\2\0\11\135\20\0\1\136\2\135"+
    "\1\0\4\137\1\140\1\137\1\140\10\137\1\140\14\137"+
    "\1\140\1\137\2\140\24\137\1\140\1\137\4\0\3\113"+
    "\2\0\4\113\2\0\4\113\1\141\3\113\2\0\11\113"+
    "\21\0\2\113\5\0\3\113\2\0\4\113\2\0\1\113"+
    "\1\142\2\113\1\141\3\113\2\0\11\113\21\0\2\113"+
    "\5\0\3\113\2\0\4\113\2\0\4\113\1\141\1\113"+
    "\1\143\1\113\2\0\11\113\21\0\2\113\5\0\1\144"+
    "\56\0\1\145\6\0\1\117\102\0\1\146\65\0\1\147"+
    "\50\0\1\10\1\0\1\10\3\0\1\10\2\0\1\10"+
    "\1\0\4\10\1\0\3\10\2\0\3\10\1\150\5\10"+
    "\21\0\2\10\5\0\1\10\1\0\1\10\3\0\1\10"+
    "\2\0\1\10\1\0\4\10\1\0\3\10\2\0\3\10"+
    "\1\151\5\10\21\0\2\10\5\0\1\10\1\0\1\10"+
    "\3\0\1\10\2\0\1\10\1\0\3\10\1\152\1\0"+
    "\3\10\2\0\11\10\21\0\2\10\5\0\1\10\1\0"+
    "\1\10\3\0\1\10\2\0\1\10\1\0\4\10\1\0"+
    "\3\10\2\0\3\10\1\153\5\10\21\0\2\10\5\0"+
    "\1\10\1\0\1\10\3\0\1\10\2\0\1\10\1\0"+
    "\4\10\1\0\3\10\2\0\2\10\1\154\6\10\21\0"+
    "\2\10\5\0\1\10\1\0\1\10\3\0\1\10\2\0"+
    "\1\10\1\0\3\10\1\155\1\0\3\10\2\0\11\10"+
    "\21\0\2\10\5\0\3\135\2\0\4\135\2\0\4\135"+
    "\1\110\3\135\2\0\11\135\21\0\2\135\5\0\1\156"+
    "\56\0\1\157\6\0\1\160\1\0\1\160\10\0\1\160"+
    "\14\0\1\160\1\0\2\160\24\0\1\160\5\0\3\113"+
    "\2\0\4\113\2\0\2\113\1\161\1\113\1\141\3\113"+
    "\2\0\11\113\21\0\2\113\5\0\3\113\2\0\4\113"+
    "\2\0\2\113\1\162\1\113\1\141\3\113\2\0\11\113"+
    "\21\0\2\113\5\0\1\144\16\0\1\141\46\0\1\163"+
    "\1\0\1\163\10\0\1\163\14\0\1\163\1\0\2\163"+
    "\24\0\1\163\23\0\1\164\71\0\1\165\43\0\1\10"+
    "\1\0\1\10\3\0\1\10\2\0\1\10\1\0\4\10"+
    "\1\0\3\10\2\0\6\10\1\166\2\10\21\0\2\10"+
    "\5\0\1\10\1\0\1\10\3\0\1\10\2\0\1\10"+
    "\1\0\4\10\1\0\3\10\2\0\3\10\1\167\5\10"+
    "\21\0\2\10\5\0\1\156\16\0\1\110\46\0\1\170"+
    "\1\0\1\170\10\0\1\170\14\0\1\170\1\0\2\170"+
    "\24\0\1\170\5\0\1\171\1\0\1\171\10\0\1\171"+
    "\14\0\1\171\1\0\2\171\24\0\1\171\5\0\3\113"+
    "\2\0\4\113\2\0\3\113\1\172\1\141\3\113\2\0"+
    "\11\113\21\0\2\113\5\0\3\113\2\0\4\113\2\0"+
    "\4\113\1\141\2\113\1\173\2\0\11\113\21\0\2\113"+
    "\5\0\1\163\1\0\1\163\10\0\1\163\3\0\1\141"+
    "\10\0\1\163\1\0\2\163\24\0\1\163\24\0\1\174"+
    "\65\0\1\175\46\0\1\10\1\0\1\10\3\0\1\10"+
    "\2\0\1\10\1\0\4\10\1\0\3\10\2\0\7\10"+
    "\1\176\1\10\21\0\2\10\5\0\1\170\1\0\1\170"+
    "\10\0\1\170\3\0\1\110\10\0\1\170\1\0\2\170"+
    "\24\0\1\170\5\0\1\110\1\0\1\110\10\0\1\110"+
    "\14\0\1\110\1\0\2\110\24\0\1\110\5\0\3\113"+
    "\2\0\4\113\2\0\4\113\1\177\3\113\2\0\11\113"+
    "\21\0\2\113\5\0\3\113\2\0\4\113\2\0\4\113"+
    "\1\200\3\113\2\0\11\113\21\0\2\113\5\0\1\10"+
    "\1\0\1\10\3\0\1\10\2\0\1\10\1\0\4\10"+
    "\1\0\3\10\2\0\4\10\1\201\4\10\21\0\2\10"+
    "\5\0\1\10\1\0\1\10\3\0\1\10\2\0\1\10"+
    "\1\0\4\10\1\0\3\10\2\0\3\10\1\202\5\10"+
    "\21\0\2\10\5\0\1\10\1\0\1\10\3\0\1\10"+
    "\2\0\1\10\1\0\4\10\1\0\3\10\2\0\5\10"+
    "\1\203\3\10\21\0\2\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4644];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\5\1\1\11\1\1\2\11\2\1\1\11"+
    "\2\1\2\11\6\1\3\11\5\1\6\11\1\1\2\11"+
    "\2\1\1\11\1\1\2\11\1\0\3\1\1\11\2\0"+
    "\14\1\5\11\1\1\5\0\1\1\2\0\1\11\10\1"+
    "\2\11\2\0\1\11\1\1\1\11\6\0\6\1\2\0"+
    "\1\1\5\0\2\1\1\0\1\1\2\0\2\11\1\1"+
    "\2\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private char quote;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _Angular2Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 64: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 65: break;
          case 3: 
            { return NUMERIC_LITERAL;
            } 
            // fall through
          case 66: break;
          case 4: 
            { return DOT;
            } 
            // fall through
          case 67: break;
          case 5: 
            { return IDENTIFIER;
            } 
            // fall through
          case 68: break;
          case 6: 
            { return PLUS;
            } 
            // fall through
          case 69: break;
          case 7: 
            { return DIV;
            } 
            // fall through
          case 70: break;
          case 8: 
            { return COLON;
            } 
            // fall through
          case 71: break;
          case 9: 
            { return MINUS;
            } 
            // fall through
          case 72: break;
          case 10: 
            { return AND;
            } 
            // fall through
          case 73: break;
          case 11: 
            { return SEMICOLON;
            } 
            // fall through
          case 74: break;
          case 12: 
            { yybegin(YYSTRING); quote = '\''; return STRING_LITERAL_PART;
            } 
            // fall through
          case 75: break;
          case 13: 
            { yybegin(YYSTRING); quote = '"'; return STRING_LITERAL_PART;
            } 
            // fall through
          case 76: break;
          case 14: 
            { return MULT;
            } 
            // fall through
          case 77: break;
          case 15: 
            { return PERC;
            } 
            // fall through
          case 78: break;
          case 16: 
            { return XOR;
            } 
            // fall through
          case 79: break;
          case 17: 
            { return EQ;
            } 
            // fall through
          case 80: break;
          case 18: 
            { return EXCL;
            } 
            // fall through
          case 81: break;
          case 19: 
            { return LT;
            } 
            // fall through
          case 82: break;
          case 20: 
            { return GT;
            } 
            // fall through
          case 83: break;
          case 21: 
            { return OR;
            } 
            // fall through
          case 84: break;
          case 22: 
            { return LPAR;
            } 
            // fall through
          case 85: break;
          case 23: 
            { return RPAR;
            } 
            // fall through
          case 86: break;
          case 24: 
            { return LBRACE;
            } 
            // fall through
          case 87: break;
          case 25: 
            { return RBRACE;
            } 
            // fall through
          case 88: break;
          case 26: 
            { return LBRACKET;
            } 
            // fall through
          case 89: break;
          case 27: 
            { return RBRACKET;
            } 
            // fall through
          case 90: break;
          case 28: 
            { return QUEST;
            } 
            // fall through
          case 91: break;
          case 29: 
            { return COMMA;
            } 
            // fall through
          case 92: break;
          case 30: 
            { return SHARP;
            } 
            // fall through
          case 93: break;
          case 31: 
            { return STRING_LITERAL_PART;
            } 
            // fall through
          case 94: break;
          case 32: 
            { yypushback(yytext().length()); yybegin(YYINITIAL);
            } 
            // fall through
          case 95: break;
          case 33: 
            { if (quote == '\'') yybegin(YYINITIAL); return STRING_LITERAL_PART;
            } 
            // fall through
          case 96: break;
          case 34: 
            { if (quote == '"') yybegin(YYINITIAL); return STRING_LITERAL_PART;
            } 
            // fall through
          case 97: break;
          case 35: 
            { return C_STYLE_COMMENT;
            } 
            // fall through
          case 98: break;
          case 36: 
            { return ANDAND;
            } 
            // fall through
          case 99: break;
          case 37: 
            { return AS_KEYWORD;
            } 
            // fall through
          case 100: break;
          case 38: 
            { return IF_KEYWORD;
            } 
            // fall through
          case 101: break;
          case 39: 
            { return EQEQ;
            } 
            // fall through
          case 102: break;
          case 40: 
            { return NE;
            } 
            // fall through
          case 103: break;
          case 41: 
            { return LE;
            } 
            // fall through
          case 104: break;
          case 42: 
            { return GE;
            } 
            // fall through
          case 105: break;
          case 43: 
            { return OROR;
            } 
            // fall through
          case 106: break;
          case 44: 
            { return ELVIS;
            } 
            // fall through
          case 107: break;
          case 45: 
            { return ESCAPE_SEQUENCE;
            } 
            // fall through
          case 108: break;
          case 46: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 2);
            { return IDENTIFIER;
            } 
            // fall through
          case 109: break;
          case 47: 
            { return VAR_KEYWORD;
            } 
            // fall through
          case 110: break;
          case 48: 
            { return LET_KEYWORD;
            } 
            // fall through
          case 111: break;
          case 49: 
            { return EQEQEQ;
            } 
            // fall through
          case 112: break;
          case 50: 
            { return NEQEQ;
            } 
            // fall through
          case 113: break;
          case 51: 
            { yypushback(1); return INVALID_ESCAPE_SEQUENCE;
            } 
            // fall through
          case 114: break;
          case 52: 
            { return INVALID_ESCAPE_SEQUENCE;
            } 
            // fall through
          case 115: break;
          case 53: 
            { return XML_CHAR_ENTITY_REF;
            } 
            // fall through
          case 116: break;
          case 54: 
            { return TRUE_KEYWORD;
            } 
            // fall through
          case 117: break;
          case 55: 
            { return THIS_KEYWORD;
            } 
            // fall through
          case 118: break;
          case 56: 
            { return ELSE_KEYWORD;
            } 
            // fall through
          case 119: break;
          case 57: 
            { return NULL_KEYWORD;
            } 
            // fall through
          case 120: break;
          case 58: 
            { return FALSE_KEYWORD;
            } 
            // fall through
          case 121: break;
          case 59: 
            { yybegin(YYSTRING); quote = '\''; return XML_CHAR_ENTITY_REF;
            } 
            // fall through
          case 122: break;
          case 60: 
            { yybegin(YYSTRING); quote = '"'; return XML_CHAR_ENTITY_REF;
            } 
            // fall through
          case 123: break;
          case 61: 
            { if (quote == '\'') yybegin(YYINITIAL); return XML_CHAR_ENTITY_REF;
            } 
            // fall through
          case 124: break;
          case 62: 
            { if (quote == '"') yybegin(YYINITIAL); return XML_CHAR_ENTITY_REF;
            } 
            // fall through
          case 125: break;
          case 63: 
            { return UNDEFINED_KEYWORD;
            } 
            // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
