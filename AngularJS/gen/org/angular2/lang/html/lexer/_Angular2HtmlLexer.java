// Copyright 2000-2023 JetBrains s.r.o. and contributors. Use of this source code is governed by the Apache 2.0 license.

// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Angular2Html.flex

package org.angular2.lang.html.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.util.Pair;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.xml.XmlTokenType;
import org.angular2.lang.expr.parser.Angular2EmbeddedExprTokenType;
import org.jetbrains.annotations.Nullable;

public class _Angular2HtmlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DOC_TYPE = 2;
  public static final int COMMENT = 4;
  public static final int START_TAG_NAME = 6;
  public static final int END_TAG_NAME = 8;
  public static final int BEFORE_TAG_ATTRIBUTES = 10;
  public static final int TAG_ATTRIBUTES = 12;
  public static final int ATTRIBUTE_VALUE_START = 14;
  public static final int ATTRIBUTE_VALUE_DQ = 16;
  public static final int ATTRIBUTE_VALUE_SQ = 18;
  public static final int PROCESSING_INSTRUCTION = 20;
  public static final int TAG_CHARACTERS = 22;
  public static final int C_COMMENT_START = 24;
  public static final int C_COMMENT_END = 26;
  public static final int EXPANSION_FORM_CONTENT = 28;
  public static final int EXPANSION_FORM_CASE_END = 30;
  public static final int INTERPOLATION = 32;
  public static final int UNTERMINATED_INTERPOLATION = 34;
  public static final int INTERPOLATION_END = 36;
  public static final int INTERPOLATION_SQ = 38;
  public static final int INTERPOLATION_DQ = 40;
  public static final int UNTERMINATED_INTERPOLATION_SQ = 42;
  public static final int UNTERMINATED_INTERPOLATION_DQ = 44;
  public static final int INTERPOLATION_END_SQ = 46;
  public static final int INTERPOLATION_END_DQ = 48;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20,  9,  9,  8,  8, 21, 21, 
    21, 21
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\0\2\1\22\0\1\1\1\2\1\3"+
    "\1\4\1\5\1\0\1\6\1\7\2\10\2\0\1\11"+
    "\1\12\1\13\1\14\12\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\0\1\24\1\25\1\26\1\27\1\30"+
    "\1\24\1\31\1\32\1\33\2\31\1\34\1\35\1\31"+
    "\1\36\1\37\3\31\1\40\1\41\2\31\1\42\1\43"+
    "\1\31\1\44\1\45\1\46\1\0\1\16\1\0\1\47"+
    "\1\50\1\26\1\27\1\30\1\24\1\51\1\32\1\33"+
    "\2\31\1\52\1\53\1\54\1\55\1\56\1\57\1\31"+
    "\1\60\1\61\1\62\2\31\1\42\1\43\1\31\1\63"+
    "\1\10\1\64\7\0\1\65\44\0\1\31\12\0\1\31"+
    "\4\0\1\31\5\0\27\31\1\0\37\31\1\0\u01ca\31"+
    "\4\0\14\31\16\0\5\31\7\0\1\31\1\0\1\31"+
    "\201\0\5\31\1\0\2\31\2\0\4\31\1\0\1\31"+
    "\6\0\1\31\1\0\3\31\1\0\1\31\1\0\24\31"+
    "\1\0\123\31\1\0\213\31\10\0\246\31\1\0\46\31"+
    "\2\0\1\31\6\0\51\31\107\0\33\31\4\0\4\31"+
    "\55\0\53\31\43\0\2\31\1\0\143\31\1\0\1\31"+
    "\17\0\2\31\7\0\2\31\12\0\3\31\2\0\1\31"+
    "\20\0\1\31\1\0\36\31\35\0\131\31\13\0\1\31"+
    "\30\0\41\31\11\0\2\31\4\0\1\31\5\0\26\31"+
    "\4\0\1\31\11\0\1\31\3\0\1\31\27\0\31\31"+
    "\7\0\13\31\65\0\25\31\1\0\10\31\106\0\66\31"+
    "\3\0\1\31\22\0\1\31\7\0\12\31\17\0\20\31"+
    "\4\0\10\31\2\0\2\31\2\0\26\31\1\0\7\31"+
    "\1\0\1\31\3\0\4\31\3\0\1\31\20\0\1\31"+
    "\15\0\2\31\1\0\3\31\16\0\2\31\12\0\1\31"+
    "\10\0\6\31\4\0\2\31\2\0\26\31\1\0\7\31"+
    "\1\0\2\31\1\0\2\31\1\0\2\31\37\0\4\31"+
    "\1\0\1\31\23\0\3\31\20\0\11\31\1\0\3\31"+
    "\1\0\26\31\1\0\7\31\1\0\2\31\1\0\5\31"+
    "\3\0\1\31\22\0\1\31\17\0\2\31\27\0\1\31"+
    "\13\0\10\31\2\0\2\31\2\0\26\31\1\0\7\31"+
    "\1\0\2\31\1\0\5\31\3\0\1\31\36\0\2\31"+
    "\1\0\3\31\17\0\1\31\21\0\1\31\1\0\6\31"+
    "\3\0\3\31\1\0\4\31\3\0\2\31\1\0\1\31"+
    "\1\0\2\31\3\0\2\31\3\0\3\31\3\0\14\31"+
    "\26\0\1\31\64\0\10\31\1\0\3\31\1\0\27\31"+
    "\1\0\20\31\3\0\1\31\32\0\3\31\5\0\2\31"+
    "\36\0\1\31\4\0\10\31\1\0\3\31\1\0\27\31"+
    "\1\0\12\31\1\0\5\31\3\0\1\31\40\0\1\31"+
    "\1\0\2\31\17\0\2\31\22\0\10\31\1\0\3\31"+
    "\1\0\51\31\2\0\1\31\20\0\1\31\5\0\3\31"+
    "\10\0\3\31\30\0\6\31\5\0\22\31\3\0\30\31"+
    "\1\0\11\31\1\0\1\31\2\0\7\31\72\0\60\31"+
    "\1\0\2\31\14\0\7\31\72\0\2\31\1\0\1\31"+
    "\1\0\5\31\1\0\30\31\1\0\1\31\1\0\12\31"+
    "\1\0\2\31\11\0\1\31\2\0\5\31\1\0\1\31"+
    "\25\0\4\31\40\0\1\31\77\0\10\31\1\0\44\31"+
    "\33\0\5\31\163\0\53\31\24\0\1\31\20\0\6\31"+
    "\4\0\4\31\3\0\1\31\3\0\2\31\7\0\3\31"+
    "\4\0\15\31\14\0\1\31\21\0\46\31\1\0\1\31"+
    "\5\0\1\31\2\0\53\31\1\0\115\31\1\0\4\31"+
    "\2\0\7\31\1\0\1\31\1\0\4\31\2\0\51\31"+
    "\1\0\4\31\2\0\41\31\1\0\4\31\2\0\7\31"+
    "\1\0\1\31\1\0\4\31\2\0\17\31\1\0\71\31"+
    "\1\0\4\31\2\0\103\31\45\0\20\31\20\0\126\31"+
    "\2\0\6\31\3\0\u016c\31\2\0\21\31\1\0\32\31"+
    "\5\0\113\31\6\0\10\31\7\0\15\31\1\0\4\31"+
    "\16\0\22\31\16\0\22\31\16\0\15\31\1\0\3\31"+
    "\17\0\64\31\43\0\1\31\4\0\1\31\103\0\131\31"+
    "\7\0\5\31\2\0\42\31\1\0\1\31\5\0\106\31"+
    "\12\0\37\31\61\0\36\31\2\0\5\31\13\0\54\31"+
    "\4\0\32\31\66\0\27\31\11\0\65\31\122\0\1\31"+
    "\135\0\57\31\21\0\7\31\67\0\36\31\15\0\2\31"+
    "\12\0\54\31\32\0\44\31\51\0\3\31\12\0\44\31"+
    "\2\0\11\31\7\0\53\31\2\0\3\31\51\0\4\31"+
    "\1\0\6\31\1\0\2\31\3\0\1\31\5\0\300\31"+
    "\100\0\26\31\2\0\6\31\2\0\46\31\2\0\6\31"+
    "\2\0\10\31\1\0\1\31\1\0\1\31\1\0\1\31"+
    "\1\0\37\31\2\0\65\31\1\0\7\31\1\0\1\31"+
    "\3\0\3\31\1\0\7\31\3\0\4\31\2\0\6\31"+
    "\4\0\15\31\5\0\3\31\1\0\7\31\53\0\2\65"+
    "\107\0\1\31\15\0\1\31\20\0\15\31\145\0\1\31"+
    "\4\0\1\31\2\0\12\31\1\0\1\31\3\0\5\31"+
    "\6\0\1\31\1\0\1\31\1\0\1\31\1\0\4\31"+
    "\1\0\13\31\2\0\4\31\5\0\5\31\4\0\1\31"+
    "\64\0\2\31\u017b\0\57\31\1\0\57\31\1\0\205\31"+
    "\6\0\4\31\3\0\2\31\14\0\46\31\1\0\1\31"+
    "\5\0\1\31\2\0\70\31\7\0\1\31\20\0\27\31"+
    "\11\0\7\31\1\0\7\31\1\0\7\31\1\0\7\31"+
    "\1\0\7\31\1\0\7\31\1\0\7\31\1\0\7\31"+
    "\120\0\1\31\325\0\2\31\52\0\5\31\5\0\2\31"+
    "\4\0\126\31\6\0\3\31\1\0\132\31\1\0\4\31"+
    "\5\0\53\31\1\0\136\31\21\0\33\31\65\0\306\31"+
    "\112\0\360\31\20\0\215\31\103\0\56\31\2\0\15\31"+
    "\3\0\20\31\12\0\2\31\24\0\57\31\20\0\37\31"+
    "\2\0\106\31\61\0\11\31\2\0\147\31\2\0\65\31"+
    "\2\0\5\31\60\0\13\31\1\0\3\31\1\0\4\31"+
    "\1\0\27\31\35\0\64\31\16\0\62\31\76\0\6\31"+
    "\3\0\1\31\1\0\2\31\13\0\34\31\12\0\27\31"+
    "\31\0\35\31\7\0\57\31\34\0\1\31\20\0\5\31"+
    "\1\0\12\31\12\0\5\31\1\0\51\31\27\0\3\31"+
    "\1\0\10\31\24\0\27\31\3\0\1\31\3\0\62\31"+
    "\1\0\1\31\3\0\2\31\2\0\5\31\2\0\1\31"+
    "\1\0\1\31\30\0\3\31\2\0\13\31\7\0\3\31"+
    "\14\0\6\31\2\0\6\31\2\0\6\31\11\0\7\31"+
    "\1\0\7\31\1\0\53\31\1\0\14\31\10\0\163\31"+
    "\35\0\244\31\14\0\27\31\4\0\61\31\4\0\156\31"+
    "\2\0\152\31\46\0\7\31\14\0\5\31\5\0\1\31"+
    "\1\0\12\31\1\0\15\31\1\0\5\31\1\0\1\31"+
    "\1\0\2\31\1\0\2\31\1\0\154\31\41\0\153\31"+
    "\22\0\100\31\2\0\66\31\50\0\14\31\164\0\5\31"+
    "\1\0\207\31\44\0\32\31\6\0\32\31\13\0\131\31"+
    "\3\0\6\31\2\0\6\31\2\0\6\31\2\0\3\31"+
    "\43\0\14\31\1\0\32\31\1\0\23\31\1\0\2\31"+
    "\1\0\17\31\2\0\16\31\42\0\173\31\205\0\35\31"+
    "\3\0\61\31\57\0\40\31\15\0\24\31\1\0\10\31"+
    "\6\0\46\31\12\0\36\31\2\0\44\31\4\0\10\31"+
    "\60\0\236\31\22\0\44\31\4\0\44\31\4\0\50\31"+
    "\10\0\64\31\234\0\67\31\11\0\26\31\12\0\10\31"+
    "\230\0\6\31\2\0\1\31\1\0\54\31\1\0\2\31"+
    "\3\0\1\31\2\0\27\31\12\0\27\31\11\0\37\31"+
    "\101\0\23\31\1\0\2\31\12\0\26\31\12\0\32\31"+
    "\106\0\70\31\6\0\2\31\100\0\1\31\17\0\4\31"+
    "\1\0\3\31\1\0\35\31\52\0\35\31\3\0\35\31"+
    "\43\0\10\31\1\0\34\31\33\0\66\31\12\0\26\31"+
    "\12\0\23\31\15\0\22\31\156\0\111\31\67\0\63\31"+
    "\15\0\63\31\15\0\44\31\334\0\35\31\12\0\1\31"+
    "\10\0\26\31\232\0\27\31\14\0\65\31\113\0\55\31"+
    "\40\0\31\31\32\0\44\31\35\0\1\31\13\0\43\31"+
    "\3\0\1\31\14\0\60\31\16\0\4\31\25\0\1\31"+
    "\1\0\1\31\43\0\22\31\1\0\31\31\124\0\7\31"+
    "\1\0\1\31\1\0\4\31\1\0\17\31\1\0\12\31"+
    "\7\0\57\31\46\0\10\31\2\0\2\31\2\0\26\31"+
    "\1\0\7\31\1\0\2\31\1\0\5\31\3\0\1\31"+
    "\22\0\1\31\14\0\5\31\236\0\65\31\22\0\4\31"+
    "\24\0\1\31\40\0\60\31\24\0\2\31\1\0\1\31"+
    "\270\0\57\31\51\0\4\31\44\0\60\31\24\0\1\31"+
    "\73\0\53\31\15\0\1\31\107\0\33\31\345\0\54\31"+
    "\164\0\100\31\37\0\1\31\240\0\10\31\2\0\47\31"+
    "\20\0\1\31\1\0\1\31\34\0\1\31\12\0\50\31"+
    "\7\0\1\31\25\0\1\31\13\0\56\31\23\0\1\31"+
    "\42\0\71\31\7\0\11\31\1\0\45\31\21\0\1\31"+
    "\61\0\36\31\160\0\7\31\1\0\2\31\1\0\46\31"+
    "\25\0\1\31\31\0\6\31\1\0\2\31\1\0\40\31"+
    "\16\0\1\31\u0147\0\23\31\15\0\232\31\346\0\304\31"+
    "\274\0\57\31\321\0\107\31\271\0\71\31\7\0\37\31"+
    "\161\0\36\31\22\0\60\31\20\0\4\31\37\0\25\31"+
    "\5\0\23\31\260\0\100\31\200\0\113\31\5\0\1\31"+
    "\102\0\15\31\100\0\2\31\1\0\1\31\34\0\370\31"+
    "\10\0\363\31\15\0\37\31\61\0\3\31\21\0\4\31"+
    "\10\0\u018c\31\4\0\153\31\5\0\15\31\3\0\11\31"+
    "\7\0\12\31\146\0\125\31\1\0\107\31\1\0\2\31"+
    "\2\0\1\31\2\0\2\31\2\0\4\31\1\0\14\31"+
    "\1\0\1\31\1\0\7\31\1\0\101\31\1\0\4\31"+
    "\2\0\10\31\1\0\7\31\1\0\34\31\1\0\4\31"+
    "\1\0\5\31\1\0\1\31\3\0\7\31\1\0\u0154\31"+
    "\2\0\31\31\1\0\31\31\1\0\37\31\1\0\31\31"+
    "\1\0\37\31\1\0\31\31\1\0\37\31\1\0\31\31"+
    "\1\0\37\31\1\0\31\31\1\0\10\31\64\0\55\31"+
    "\12\0\7\31\20\0\1\31\u0171\0\54\31\24\0\305\31"+
    "\73\0\104\31\7\0\1\31\264\0\4\31\1\0\33\31"+
    "\1\0\2\31\1\0\1\31\2\0\1\31\1\0\12\31"+
    "\1\0\4\31\1\0\1\31\1\0\1\31\6\0\1\31"+
    "\4\0\1\31\1\0\1\31\1\0\1\31\1\0\3\31"+
    "\1\0\2\31\1\0\1\31\2\0\1\31\1\0\1\31"+
    "\1\0\1\31\1\0\1\31\1\0\1\31\1\0\2\31"+
    "\1\0\1\31\2\0\4\31\1\0\7\31\1\0\4\31"+
    "\1\0\4\31\1\0\1\31\1\0\12\31\1\0\21\31"+
    "\5\0\3\31\1\0\5\31\1\0\21\31\104\0\327\31"+
    "\51\0\65\31\13\0\336\31\2\0\u0182\31\16\0\u0131\31"+
    "\37\0\36\31\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\13\0\1\2\1\3\3\4\1\2\1\5"+
    "\1\6\3\5\1\7\2\5\4\10\1\11\1\12\2\13"+
    "\1\14\1\15\1\13\1\16\1\13\1\17\1\20\1\21"+
    "\1\6\1\22\1\23\1\24\1\22\1\6\1\25\1\26"+
    "\1\25\2\27\1\1\1\30\1\5\3\31\3\32\1\10"+
    "\1\32\1\33\1\34\1\35\1\36\2\37\1\40\1\41"+
    "\2\40\1\4\2\42\2\43\1\44\1\45\2\46\7\0"+
    "\1\47\1\50\1\51\1\0\1\52\5\0\1\47\1\53"+
    "\1\22\2\0\1\54\2\0\1\55\7\0\1\56\3\0"+
    "\1\57\1\0\1\60\1\61\2\0\1\62\1\0\1\20"+
    "\1\0\1\63\1\5\3\0\1\64\2\0\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da"+
    "\0\u04a4\0\u0510\0\u0546\0\u057c\0\u04a4\0\u05b2\0\u05e8\0\u0510"+
    "\0\u061e\0\u04a4\0\u0654\0\u068a\0\u04a4\0\u0510\0\u06c0\0\u06f6"+
    "\0\u04a4\0\u04a4\0\u04a4\0\u0510\0\u072c\0\u04a4\0\u0762\0\u0798"+
    "\0\u07ce\0\u04a4\0\u0804\0\u04a4\0\u083a\0\u0870\0\u04a4\0\u04a4"+
    "\0\u08a6\0\u08dc\0\u04a4\0\u04a4\0\u0510\0\u04a4\0\u0510\0\u0912"+
    "\0\u04a4\0\u0948\0\u04a4\0\u0510\0\u07ce\0\u04a4\0\u0510\0\u097e"+
    "\0\u09b4\0\u09ea\0\u04a4\0\u04a4\0\u04a4\0\u04a4\0\u04a4\0\u0510"+
    "\0\u04a4\0\u0a20\0\u0510\0\u0546\0\u0a56\0\u04a4\0\u0510\0\u04a4"+
    "\0\u0510\0\u04a4\0\u04a4\0\u04a4\0\u0510\0\u0a8c\0\u0ac2\0\u0af8"+
    "\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u04a4\0\u05e8"+
    "\0\u04a4\0\u061e\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u04a4\0\u04a4"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u04a4\0\u0dec\0\u0e22\0\u04a4\0\u0e58"+
    "\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u04a4\0\u10aa\0\u04a4\0\u04a4\0\u10e0\0\u1116"+
    "\0\u04a4\0\u114c\0\u04a4\0\u1182\0\u04a4\0\u11b8\0\u11ee\0\u1224"+
    "\0\u125a\0\u04a4\0\u1290\0\u12c6\0\u04a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\27\1\30\2\27\2\31\1\32\11\27\1\33\24\27"+
    "\1\34\17\27\1\30\1\35\1\36\1\35\1\37\2\35"+
    "\1\40\1\41\12\35\1\42\7\35\1\43\4\35\1\44"+
    "\16\35\1\44\6\35\1\36\6\45\1\46\3\45\1\47"+
    "\5\45\1\50\1\45\1\51\21\45\1\52\21\45\1\53"+
    "\1\36\4\53\1\54\7\53\1\55\1\53\1\56\3\53"+
    "\20\55\3\53\14\55\2\53\1\36\1\53\1\36\4\53"+
    "\1\54\7\53\1\55\1\53\1\57\3\53\20\55\3\53"+
    "\14\55\2\53\1\36\1\53\1\60\4\53\1\54\5\53"+
    "\1\61\5\53\1\62\42\53\1\60\1\63\1\36\1\63"+
    "\1\53\3\63\1\53\4\63\1\61\3\63\1\53\1\64"+
    "\1\62\42\63\1\65\1\66\1\36\1\66\1\67\3\66"+
    "\1\70\4\66\1\71\5\66\1\62\42\66\1\72\3\73"+
    "\1\74\2\73\1\75\57\73\6\76\1\77\1\74\56\76"+
    "\22\100\1\101\1\102\42\100\1\103\1\36\4\103\1\104"+
    "\5\103\1\105\3\103\1\56\1\103\1\62\42\103\1\36"+
    "\6\106\1\107\3\106\1\110\11\106\20\111\2\106\1\112"+
    "\14\111\11\106\1\107\3\106\1\110\11\106\20\111\2\106"+
    "\1\113\14\111\3\106\1\31\1\36\4\31\1\32\2\31"+
    "\1\114\51\31\1\115\1\116\1\36\6\117\1\120\57\117"+
    "\1\121\1\122\4\121\1\123\11\121\1\124\44\121\1\122"+
    "\1\31\1\30\4\31\1\32\11\31\1\33\24\31\1\125"+
    "\17\31\1\30\6\126\1\127\57\126\6\130\1\131\1\132"+
    "\61\130\1\133\2\130\1\131\57\130\6\134\1\135\57\134"+
    "\67\0\1\30\63\0\1\30\4\0\1\136\11\0\1\137"+
    "\5\0\20\137\3\0\1\140\1\137\2\141\1\137\1\142"+
    "\2\137\1\143\3\137\5\0\1\144\11\0\1\145\1\0"+
    "\1\146\4\0\1\147\20\146\3\0\14\146\7\0\1\27"+
    "\62\0\1\36\63\0\1\36\3\150\1\151\62\150\7\152"+
    "\1\151\56\152\40\0\1\153\20\0\1\153\45\0\1\154"+
    "\20\0\1\154\15\0\1\155\55\0\1\156\75\0\2\55"+
    "\1\0\2\55\5\0\20\55\3\0\14\55\17\0\1\157"+
    "\52\0\1\60\63\0\1\60\22\0\1\160\43\0\1\63"+
    "\1\0\1\63\1\0\3\63\1\0\4\63\1\0\3\63"+
    "\3\0\44\63\1\36\1\63\1\0\3\63\1\0\4\63"+
    "\1\0\3\63\3\0\42\63\1\65\1\66\1\0\12\66"+
    "\1\161\5\66\1\0\44\66\1\0\12\66\1\161\5\66"+
    "\1\160\44\66\1\36\12\66\1\161\5\66\1\0\42\66"+
    "\1\72\22\100\1\0\1\162\64\100\1\101\43\100\12\0"+
    "\1\163\54\0\2\111\3\0\1\111\1\0\1\111\2\0"+
    "\1\111\1\0\1\111\6\0\20\111\3\0\14\111\2\0"+
    "\1\111\22\0\1\164\44\0\1\122\63\0\1\122\4\0"+
    "\1\31\76\0\1\165\24\0\1\166\35\0\2\137\1\0"+
    "\2\137\1\167\4\0\20\137\3\0\14\137\15\0\2\137"+
    "\1\0\2\137\1\167\4\0\20\137\3\0\4\137\1\170"+
    "\2\137\1\171\4\137\15\0\2\137\1\0\2\137\1\167"+
    "\4\0\20\137\3\0\12\137\1\172\1\137\15\0\2\137"+
    "\1\0\2\137\1\167\4\0\20\137\3\0\1\137\1\173"+
    "\12\137\15\0\2\137\1\0\2\137\1\167\4\0\20\137"+
    "\3\0\13\137\1\174\15\0\1\175\14\0\1\176\54\0"+
    "\1\177\5\0\20\177\3\0\14\177\15\0\2\146\1\0"+
    "\2\146\5\0\20\146\3\0\14\146\40\0\1\200\15\0"+
    "\1\200\37\0\1\201\22\0\1\201\17\0\1\202\17\0"+
    "\1\203\55\0\1\204\31\0\1\205\21\0\14\66\1\161"+
    "\5\66\1\0\43\66\22\100\1\0\43\100\22\0\1\203"+
    "\60\0\1\165\1\0\1\206\63\0\1\207\6\0\5\207"+
    "\16\0\2\207\27\0\2\137\1\0\2\137\1\167\4\0"+
    "\20\137\3\0\7\137\1\172\4\137\15\0\2\137\1\0"+
    "\2\137\1\167\4\0\20\137\3\0\6\137\1\210\5\137"+
    "\15\0\2\137\1\0\2\137\1\206\4\0\20\137\3\0"+
    "\14\137\15\0\2\137\1\0\2\137\1\167\4\0\20\137"+
    "\3\0\11\137\1\170\2\137\15\0\2\137\1\0\2\137"+
    "\1\167\4\0\20\137\3\0\6\137\1\141\5\137\15\0"+
    "\1\211\111\0\1\212\16\0\1\212\22\0\2\177\1\0"+
    "\2\177\5\0\20\177\3\0\14\177\37\0\1\213\15\0"+
    "\1\213\47\0\1\214\15\0\1\214\35\0\1\215\55\0"+
    "\1\216\70\0\1\207\1\0\1\206\4\0\5\207\16\0"+
    "\2\207\27\0\2\137\1\0\2\137\1\167\4\0\20\137"+
    "\3\0\11\137\1\172\2\137\31\0\1\217\72\0\1\220"+
    "\44\0\1\202\7\0\1\203\103\0\1\221\20\0\1\221"+
    "\32\0\1\222\102\0\1\223\61\0\1\224\16\0\1\224"+
    "\37\0\1\225\35\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4860];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\1\13\0\1\11\1\1\1\11\3\1\1\11"+
    "\4\1\1\11\2\1\1\11\3\1\3\11\2\1\1\11"+
    "\3\1\1\11\1\1\1\11\2\1\2\11\2\1\2\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\2\1\1\11"+
    "\4\1\5\11\1\1\1\11\4\1\1\11\1\1\1\11"+
    "\1\1\3\11\1\1\7\0\2\1\1\11\1\0\1\11"+
    "\5\0\2\11\1\1\2\0\1\11\2\0\1\11\7\0"+
    "\1\1\3\0\1\11\1\0\2\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\1\3\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private String interpolationStart;
  private String interpolationEnd;
  private boolean tokenizeExpansionForms;

  private int expansionFormNestingLevel;
  private int interpolationStartPos;

  public _Angular2HtmlLexer(boolean tokenizeExpansionForms, @Nullable Pair<String, String> interpolationConfig) {
    this(null);
    if (interpolationConfig == null) {
      interpolationStart = "{{";
      interpolationEnd = "}}";
    } else {
      interpolationStart = interpolationConfig.first;
      interpolationEnd = interpolationConfig.second;
    }
    this.tokenizeExpansionForms = tokenizeExpansionForms;
  }

  private boolean tryConsumeInterpolationBoundary(String boundary) {
    if (inBuffer(boundary, 0)) {
      zzMarkedPos += boundary.length() - 1;
      interpolationStartPos = -1;
      return true;
    }
    return false;
  }

  private boolean inBuffer(String text, int offset) {
    int curPos = zzMarkedPos - 1 + offset;
    if (text.length() > zzBuffer.length() - curPos) {
      return false;
    }
    for (int i = 0; i < text.length(); i++) {
      if (zzBuffer.charAt(i + curPos) != text.charAt(i)) {
        return false;
      }
    }
    return true;
  }

  private boolean tryRollbackInterpolation() {
    if (yystate() == INTERPOLATION) {
      rollbackInterpolation();
      yybegin(UNTERMINATED_INTERPOLATION);
      return true;
    }
    return false;
  }

  private void rollbackInterpolation() {
    if (interpolationStartPos > 0) {
      zzStartRead = interpolationStartPos - 1;
      zzMarkedPos = interpolationStartPos - 1;
      interpolationStartPos = -1;
    } else {
      yypushback(yylength());
    }
  }

  private boolean isWithinInterpolation() {
    return zzLexicalState == INTERPOLATION
      || zzLexicalState == INTERPOLATION_DQ
      || zzLexicalState == INTERPOLATION_SQ;
  }

  public int getExpansionFormNestingLevel() {
    return expansionFormNestingLevel;
  }

  public void setExpansionFormNestingLevel(int level) {
    expansionFormNestingLevel = level;
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _Angular2HtmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return XmlTokenType.XML_PI_TARGET;
            }
          // fall through
          case 54: break;
          case 2:
            { if (tryConsumeInterpolationBoundary(interpolationStart)) {
    if (inBuffer(interpolationEnd, 1)) {
      yybegin(INTERPOLATION_END);
    } else {
      yybegin(INTERPOLATION);
    }
    return Angular2HtmlTokenTypes.INTERPOLATION_START;
  }
  switch (zzBuffer.charAt(zzStartRead)) {
    case '{':
      if (tokenizeExpansionForms) {
        yybegin(EXPANSION_FORM_CONTENT);
        return Angular2HtmlTokenTypes.EXPANSION_FORM_START;
      }
    case '}':
      if (expansionFormNestingLevel > 0) {
        yybegin(EXPANSION_FORM_CASE_END);
        return Angular2HtmlTokenTypes.EXPANSION_FORM_CASE_END;
      }
  }
  return XmlTokenType.XML_DATA_CHARACTERS;
            }
          // fall through
          case 55: break;
          case 3:
            { return XmlTokenType.XML_REAL_WHITE_SPACE;
            }
          // fall through
          case 56: break;
          case 4:
            { return XmlTokenType.XML_DATA_CHARACTERS;
            }
          // fall through
          case 57: break;
          case 5:
            { return XmlTokenType.XML_BAD_CHARACTER;
            }
          // fall through
          case 58: break;
          case 6:
            { return XmlTokenType.XML_WHITE_SPACE;
            }
          // fall through
          case 59: break;
          case 7:
            { yybegin(YYINITIAL); return XmlTokenType.XML_DOCTYPE_END;
            }
          // fall through
          case 60: break;
          case 8:
            { return XmlTokenType.XML_COMMENT_CHARACTERS;
            }
          // fall through
          case 61: break;
          case 9:
            { // according to HTML spec (http://www.w3.org/html/wg/drafts/html/master/syntax.html#comments)
  // comments should start with <!-- and end with -->. The comment <!--> is not valid, but should terminate
  // comment token. Please note that it's not true for XML (http://www.w3.org/TR/REC-xml/#sec-comments)
  int loc = getTokenStart();
  char prev = zzBuffer.charAt(loc - 1);
  char prevPrev = zzBuffer.charAt(loc - 2);
  if (prev == '-' && prevPrev == '-') {
    yybegin(YYINITIAL); return XmlTokenType.XML_BAD_CHARACTER;
  }
  return XmlTokenType.XML_COMMENT_CHARACTERS;
            }
          // fall through
          case 62: break;
          case 10:
            { yybegin(C_COMMENT_START); return XmlTokenType.XML_CONDITIONAL_COMMENT_START;
            }
          // fall through
          case 63: break;
          case 11:
            { yybegin(YYINITIAL); yypushback(1); break;
            }
          // fall through
          case 64: break;
          case 12:
            { yybegin(BEFORE_TAG_ATTRIBUTES); return XmlTokenType.XML_NAME;
            }
          // fall through
          case 65: break;
          case 13:
            { return XmlTokenType.XML_START_TAG_START;
            }
          // fall through
          case 66: break;
          case 14:
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_WHITE_SPACE;
            }
          // fall through
          case 67: break;
          case 15:
            { yybegin(YYINITIAL); return XmlTokenType.XML_TAG_END;
            }
          // fall through
          case 68: break;
          case 16:
            { return XmlTokenType.XML_NAME;
            }
          // fall through
          case 69: break;
          case 17:
            { yybegin(ATTRIBUTE_VALUE_START); return XmlTokenType.XML_EQ;
            }
          // fall through
          case 70: break;
          case 18:
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }
          // fall through
          case 71: break;
          case 19:
            { yybegin(ATTRIBUTE_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
          // fall through
          case 72: break;
          case 20:
            { yybegin(ATTRIBUTE_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
            }
          // fall through
          case 73: break;
          case 21:
            { if (yystate() == ATTRIBUTE_VALUE_DQ
      && tryConsumeInterpolationBoundary(interpolationStart)) {
    if (inBuffer(interpolationEnd, 1)) {
      yybegin(INTERPOLATION_END_DQ);
    } else {
      yybegin(INTERPOLATION_DQ);
    }
    return Angular2HtmlTokenTypes.INTERPOLATION_START;
  }
  return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }
          // fall through
          case 74: break;
          case 22:
            { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
            }
          // fall through
          case 75: break;
          case 23:
            { if (yystate() == ATTRIBUTE_VALUE_SQ
            && tryConsumeInterpolationBoundary(interpolationStart)) {
    if (inBuffer(interpolationEnd, 1)) {
      yybegin(INTERPOLATION_END_SQ);
    } else {
      yybegin(INTERPOLATION_SQ);
    }
    return Angular2HtmlTokenTypes.INTERPOLATION_START;
  }
  return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }
          // fall through
          case 76: break;
          case 24:
            { yybegin(YYINITIAL); return XmlTokenType.XML_PI_END;
            }
          // fall through
          case 77: break;
          case 25:
            { return XmlTokenType.XML_TAG_CHARACTERS;
            }
          // fall through
          case 78: break;
          case 26:
            { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_CHARACTERS;
            }
          // fall through
          case 79: break;
          case 27:
            { yybegin(COMMENT); return XmlTokenType.XML_CONDITIONAL_COMMENT_END;
            }
          // fall through
          case 80: break;
          case 28:
            { return XmlTokenType.XML_COMMA;
            }
          // fall through
          case 81: break;
          case 29:
            { expansionFormNestingLevel++;
  yybegin(YYINITIAL);
  return Angular2HtmlTokenTypes.EXPANSION_FORM_CASE_START;
            }
          // fall through
          case 82: break;
          case 30:
            { yybegin(YYINITIAL);
  return Angular2HtmlTokenTypes.EXPANSION_FORM_END;
            }
          // fall through
          case 83: break;
          case 31:
            { expansionFormNestingLevel--;
  yypushback(1);
  yybegin(EXPANSION_FORM_CONTENT);
            }
          // fall through
          case 84: break;
          case 32:
            { if (inBuffer(interpolationEnd, 0)) {
    yybegin(INTERPOLATION_END);
    yypushback(1);
    return Angular2EmbeddedExprTokenType.INTERPOLATION_EXPR;
  }
  if (interpolationStartPos <= 0) {
    interpolationStartPos = zzStartRead;
  }
            }
          // fall through
          case 85: break;
          case 33:
            { 
            }
          // fall through
          case 86: break;
          case 34:
            { yybegin(YYINITIAL);
  if (tryConsumeInterpolationBoundary(interpolationEnd)) {
    return Angular2HtmlTokenTypes.INTERPOLATION_END;
  }
  return XmlTokenType.XML_BAD_CHARACTER;
            }
          // fall through
          case 87: break;
          case 35:
            { if (inBuffer(interpolationEnd, 0)) {
    yybegin(yystate() == INTERPOLATION_DQ ? INTERPOLATION_END_DQ : INTERPOLATION_END_SQ);
    yypushback(1);
    return Angular2EmbeddedExprTokenType.INTERPOLATION_EXPR;
  }
  if (interpolationStartPos <= 0) {
    interpolationStartPos = zzStartRead;
  }
            }
          // fall through
          case 88: break;
          case 36:
            { rollbackInterpolation();
  yybegin(UNTERMINATED_INTERPOLATION_SQ);
            }
          // fall through
          case 89: break;
          case 37:
            { rollbackInterpolation();
  yybegin(UNTERMINATED_INTERPOLATION_DQ);
            }
          // fall through
          case 90: break;
          case 38:
            { yybegin(yystate() == INTERPOLATION_END_DQ ? ATTRIBUTE_VALUE_DQ : ATTRIBUTE_VALUE_SQ);
  if (tryConsumeInterpolationBoundary(interpolationEnd)) {
    return Angular2HtmlTokenTypes.INTERPOLATION_END;
  }
  return XmlTokenType.XML_BAD_CHARACTER;
            }
          // fall through
          case 91: break;
          case 39:
            { if (!tryRollbackInterpolation()) {
    return XmlTokenType.XML_END_TAG_START;
  }
            }
          // fall through
          case 92: break;
          case 40:
            { if (!tryRollbackInterpolation()) {
    yybegin(START_TAG_NAME);
    yypushback(yylength());
  }
            }
          // fall through
          case 93: break;
          case 41:
            { if (!tryRollbackInterpolation()) {
    yybegin(PROCESSING_INSTRUCTION);
    return XmlTokenType.XML_PI_START;
  }
            }
          // fall through
          case 94: break;
          case 42:
            { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
            }
          // fall through
          case 95: break;
          case 43:
            { yybegin(YYINITIAL); return XmlTokenType.XML_EMPTY_ELEMENT_END;
            }
          // fall through
          case 96: break;
          case 44:
            { yybegin(COMMENT); return XmlTokenType.XML_CONDITIONAL_COMMENT_START_END;
            }
          // fall through
          case 97: break;
          case 45:
            { if (!isWithinInterpolation()) return XmlTokenType.XML_ENTITY_REF_TOKEN;
            }
          // fall through
          case 98: break;
          case 46:
            { if (!tryRollbackInterpolation()) {
    yybegin(END_TAG_NAME); yypushback(yylength());
  }
            }
          // fall through
          case 99: break;
          case 47:
            { yybegin(YYINITIAL); return XmlTokenType.XML_COMMENT_END;
            }
          // fall through
          case 100: break;
          case 48:
            { yybegin(C_COMMENT_END); return XmlTokenType.XML_CONDITIONAL_COMMENT_END_START;
            }
          // fall through
          case 101: break;
          case 49:
            { if (!isWithinInterpolation()) return XmlTokenType.XML_CHAR_ENTITY_REF;
            }
          // fall through
          case 102: break;
          case 50:
            { if (!tryRollbackInterpolation()) {
    yybegin(COMMENT);
    return XmlTokenType.XML_COMMENT_START;
  }
            }
          // fall through
          case 103: break;
          case 51:
            { yybegin(YYINITIAL); return XmlTokenType.XML_BAD_CHARACTER;
            }
          // fall through
          case 104: break;
          case 52:
            { return XmlTokenType.XML_DOCTYPE_PUBLIC;
            }
          // fall through
          case 105: break;
          case 53:
            { if (!tryRollbackInterpolation()) {
    yybegin(DOC_TYPE);
    return XmlTokenType.XML_DOCTYPE_START;
  }
            }
          // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
