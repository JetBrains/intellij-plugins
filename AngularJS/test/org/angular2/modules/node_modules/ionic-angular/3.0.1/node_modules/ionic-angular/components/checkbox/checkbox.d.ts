import {AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, Renderer} from '@angular/core';
import {ControlValueAccessor} from '@angular/forms';
import {Config} from '../../config/config';
import {Form, IonicTapInput} from '../../util/form';
import {Ion} from '../ion';
import {Item} from '../item/item';

export declare const CHECKBOX_VALUE_ACCESSOR: any;
/**
 * @name Checkbox
 * @module ionic
 *
 * @description
 * The Checkbox is a simple component styled based on the mode. It can be
 * placed in an `ion-item` or used as a stand-alone checkbox.
 *
 * See the [Angular 2 Docs](https://angular.io/docs/ts/latest/guide/forms.html)
 * for more info on forms and inputs.
 *
 *
 * @usage
 * ```html
 *
 *  <ion-list>
 *
 *    <ion-item>
 *      <ion-label>Pepperoni</ion-label>
 *      <ion-checkbox [(ngModel)]="pepperoni"></ion-checkbox>
 *    </ion-item>
 *
 *    <ion-item>
 *      <ion-label>Sausage</ion-label>
 *      <ion-checkbox [(ngModel)]="sausage" disabled="true"></ion-checkbox>
 *    </ion-item>
 *
 *    <ion-item>
 *      <ion-label>Mushrooms</ion-label>
 *      <ion-checkbox [(ngModel)]="mushrooms"></ion-checkbox>
 *    </ion-item>
 *
 *  </ion-list>
 * ```
 *
 * @demo /docs/demos/src/checkbox/
 * @see {@link /docs/components#checkbox Checkbox Component Docs}
 */
export declare class Checkbox extends Ion implements IonicTapInput, AfterContentInit, ControlValueAccessor, OnDestroy {
    private _form;
    private _item;
    private _cd;
    /** @hidden */
    _checked: boolean;
    /** @hidden */
    _init: boolean;
    /** @hidden */
    _disabled: boolean;
    /** @hidden */
    _labelId: string;
    /** @hidden */
    _fn: Function;
    /** @hidden */
    id: string;
    /**
     * @output {Checkbox} Emitted when the checkbox value changes.
     */
    ionChange: EventEmitter<Checkbox>;
    constructor(config: Config, _form: Form, _item: Item, elementRef: ElementRef, renderer: Renderer, _cd: ChangeDetectorRef);
    /**
     * @hidden
     */
    _click(ev: UIEvent): void;
    /**
     * @input {boolean} If true, the element is selected.
     */
    checked: boolean;
    /**
     * @hidden
     */
    _setChecked(isChecked: boolean): void;
    /**
     * @hidden
     */
    writeValue(val: any): void;
    /**
     * @hidden
     */
    registerOnChange(fn: Function): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: any): void;
    /**
     * @input {boolean} If true, the user cannot interact with this element.
     */
    disabled: boolean;
    /**
     * @hidden
     */
    onChange(isChecked: boolean): void;
    /**
     * @hidden
     */
    initFocus(): void;
    /**
     * @hidden
     */
    onTouched(): void;
    /**
     * @hidden
     */
    ngAfterContentInit(): void;
    /**
     * @hidden
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
}
