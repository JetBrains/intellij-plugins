import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import { Components } from '@ionic/core';
import * as ɵngcc0 from '@angular/core';
export declare interface IonApp extends Components.IonApp {
}
export declare class IonApp {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonApp>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonApp, "ion-app", never, {}, {}, never>;
}
export declare interface IonAvatar extends Components.IonAvatar {
}
export declare class IonAvatar {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonAvatar>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonAvatar, "ion-avatar", never, {}, {}, never>;
}
export declare interface IonBackButton extends Components.IonBackButton {
}
export declare class IonBackButton {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonBackButton>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonBackButton, "ion-back-button", never, { 'color': "color", 'defaultHref': "defaultHref", 'disabled': "disabled", 'icon': "icon", 'mode': "mode", 'text': "text", 'type': "type" }, {}, never>;
}
export declare interface IonBackdrop extends Components.IonBackdrop {
}
export declare class IonBackdrop {
    protected z: NgZone;
    ionBackdropTap: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonBackdrop>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonBackdrop, "ion-backdrop", never, { 'stopPropagation': "stopPropagation", 'tappable': "tappable", 'visible': "visible" }, {}, never>;
}
export declare interface IonBadge extends Components.IonBadge {
}
export declare class IonBadge {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonBadge>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonBadge, "ion-badge", never, { 'color': "color", 'mode': "mode" }, {}, never>;
}
export declare interface IonButton extends Components.IonButton {
}
export declare class IonButton {
    protected z: NgZone;
    ionFocus: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonButton>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonButton, "ion-button", never, { 'buttonType': "buttonType", 'color': "color", 'disabled': "disabled", 'download': "download", 'expand': "expand", 'fill': "fill", 'href': "href", 'mode': "mode", 'rel': "rel", 'routerDirection': "routerDirection", 'shape': "shape", 'size': "size", 'strong': "strong", 'target': "target", 'type': "type" }, {}, never>;
}
export declare interface IonButtons extends Components.IonButtons {
}
export declare class IonButtons {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonButtons>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonButtons, "ion-buttons", never, { 'collapse': "collapse" }, {}, never>;
}
export declare interface IonCard extends Components.IonCard {
}
export declare class IonCard {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonCard>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonCard, "ion-card", never, { 'button': "button", 'color': "color", 'disabled': "disabled", 'download': "download", 'href': "href", 'mode': "mode", 'rel': "rel", 'routerDirection': "routerDirection", 'target': "target", 'type': "type" }, {}, never>;
}
export declare interface IonCardContent extends Components.IonCardContent {
}
export declare class IonCardContent {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonCardContent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonCardContent, "ion-card-content", never, { 'mode': "mode" }, {}, never>;
}
export declare interface IonCardHeader extends Components.IonCardHeader {
}
export declare class IonCardHeader {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonCardHeader>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonCardHeader, "ion-card-header", never, { 'color': "color", 'mode': "mode", 'translucent': "translucent" }, {}, never>;
}
export declare interface IonCardSubtitle extends Components.IonCardSubtitle {
}
export declare class IonCardSubtitle {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonCardSubtitle>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonCardSubtitle, "ion-card-subtitle", never, { 'color': "color", 'mode': "mode" }, {}, never>;
}
export declare interface IonCardTitle extends Components.IonCardTitle {
}
export declare class IonCardTitle {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonCardTitle>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonCardTitle, "ion-card-title", never, { 'color': "color", 'mode': "mode" }, {}, never>;
}
export declare interface IonCheckbox extends Components.IonCheckbox {
}
export declare class IonCheckbox {
    protected z: NgZone;
    ionChange: EventEmitter<CustomEvent>;
    ionFocus: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonCheckbox>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonCheckbox, "ion-checkbox", never, { 'checked': "checked", 'color': "color", 'disabled': "disabled", 'indeterminate': "indeterminate", 'mode': "mode", 'name': "name", 'value': "value" }, {}, never>;
}
export declare interface IonChip extends Components.IonChip {
}
export declare class IonChip {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonChip>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonChip, "ion-chip", never, { 'color': "color", 'mode': "mode", 'outline': "outline" }, {}, never>;
}
export declare interface IonCol extends Components.IonCol {
}
export declare class IonCol {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonCol>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonCol, "ion-col", never, { 'offset': "offset", 'offsetLg': "offsetLg", 'offsetMd': "offsetMd", 'offsetSm': "offsetSm", 'offsetXl': "offsetXl", 'offsetXs': "offsetXs", 'pull': "pull", 'pullLg': "pullLg", 'pullMd': "pullMd", 'pullSm': "pullSm", 'pullXl': "pullXl", 'pullXs': "pullXs", 'push': "push", 'pushLg': "pushLg", 'pushMd': "pushMd", 'pushSm': "pushSm", 'pushXl': "pushXl", 'pushXs': "pushXs", 'size': "size", 'sizeLg': "sizeLg", 'sizeMd': "sizeMd", 'sizeSm': "sizeSm", 'sizeXl': "sizeXl", 'sizeXs': "sizeXs" }, {}, never>;
}
export declare interface IonContent extends Components.IonContent {
}
export declare class IonContent {
    protected z: NgZone;
    ionScrollStart: EventEmitter<CustomEvent>;
    ionScroll: EventEmitter<CustomEvent>;
    ionScrollEnd: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonContent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonContent, "ion-content", never, { 'color': "color", 'forceOverscroll': "forceOverscroll", 'fullscreen': "fullscreen", 'scrollEvents': "scrollEvents", 'scrollX': "scrollX", 'scrollY': "scrollY" }, {}, never>;
}
export declare interface IonDatetime extends Components.IonDatetime {
}
export declare class IonDatetime {
    protected z: NgZone;
    ionCancel: EventEmitter<CustomEvent>;
    ionChange: EventEmitter<CustomEvent>;
    ionFocus: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonDatetime>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonDatetime, "ion-datetime", never, { 'cancelText': "cancelText", 'dayNames': "dayNames", 'dayShortNames': "dayShortNames", 'dayValues': "dayValues", 'disabled': "disabled", 'displayFormat': "displayFormat", 'doneText': "doneText", 'hourValues': "hourValues", 'max': "max", 'min': "min", 'minuteValues': "minuteValues", 'mode': "mode", 'monthNames': "monthNames", 'monthShortNames': "monthShortNames", 'monthValues': "monthValues", 'name': "name", 'pickerFormat': "pickerFormat", 'pickerOptions': "pickerOptions", 'placeholder': "placeholder", 'readonly': "readonly", 'value': "value", 'yearValues': "yearValues" }, {}, never>;
}
export declare interface IonFab extends Components.IonFab {
}
export declare class IonFab {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonFab>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonFab, "ion-fab", never, { 'activated': "activated", 'edge': "edge", 'horizontal': "horizontal", 'vertical': "vertical" }, {}, never>;
}
export declare interface IonFabButton extends Components.IonFabButton {
}
export declare class IonFabButton {
    protected z: NgZone;
    ionFocus: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonFabButton>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonFabButton, "ion-fab-button", never, { 'activated': "activated", 'color': "color", 'disabled': "disabled", 'download': "download", 'href': "href", 'mode': "mode", 'rel': "rel", 'routerDirection': "routerDirection", 'show': "show", 'size': "size", 'target': "target", 'translucent': "translucent", 'type': "type" }, {}, never>;
}
export declare interface IonFabList extends Components.IonFabList {
}
export declare class IonFabList {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonFabList>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonFabList, "ion-fab-list", never, { 'activated': "activated", 'side': "side" }, {}, never>;
}
export declare interface IonFooter extends Components.IonFooter {
}
export declare class IonFooter {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonFooter>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonFooter, "ion-footer", never, { 'mode': "mode", 'translucent': "translucent" }, {}, never>;
}
export declare interface IonGrid extends Components.IonGrid {
}
export declare class IonGrid {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonGrid>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonGrid, "ion-grid", never, { 'fixed': "fixed" }, {}, never>;
}
export declare interface IonHeader extends Components.IonHeader {
}
export declare class IonHeader {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonHeader>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonHeader, "ion-header", never, { 'collapse': "collapse", 'mode': "mode", 'translucent': "translucent" }, {}, never>;
}
export declare interface IonIcon extends Components.IonIcon {
}
export declare class IonIcon {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonIcon>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonIcon, "ion-icon", never, { 'ariaLabel': "ariaLabel", 'color': "color", 'flipRtl': "flipRtl", 'icon': "icon", 'ios': "ios", 'lazy': "lazy", 'md': "md", 'mode': "mode", 'name': "name", 'size': "size", 'src': "src" }, {}, never>;
}
export declare interface IonImg extends Components.IonImg {
}
export declare class IonImg {
    protected z: NgZone;
    ionImgWillLoad: EventEmitter<CustomEvent>;
    ionImgDidLoad: EventEmitter<CustomEvent>;
    ionError: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonImg>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonImg, "ion-img", never, { 'alt': "alt", 'src': "src" }, {}, never>;
}
export declare interface IonInfiniteScroll extends Components.IonInfiniteScroll {
}
export declare class IonInfiniteScroll {
    protected z: NgZone;
    ionInfinite: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonInfiniteScroll>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonInfiniteScroll, "ion-infinite-scroll", never, { 'disabled': "disabled", 'position': "position", 'threshold': "threshold" }, {}, never>;
}
export declare interface IonInfiniteScrollContent extends Components.IonInfiniteScrollContent {
}
export declare class IonInfiniteScrollContent {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonInfiniteScrollContent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonInfiniteScrollContent, "ion-infinite-scroll-content", never, { 'loadingSpinner': "loadingSpinner", 'loadingText': "loadingText" }, {}, never>;
}
export declare interface IonInput extends Components.IonInput {
}
export declare class IonInput {
    protected z: NgZone;
    ionInput: EventEmitter<CustomEvent>;
    ionChange: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    ionFocus: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonInput>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonInput, "ion-input", never, { 'accept': "accept", 'autocapitalize': "autocapitalize", 'autocomplete': "autocomplete", 'autocorrect': "autocorrect", 'autofocus': "autofocus", 'clearInput': "clearInput", 'clearOnEdit': "clearOnEdit", 'color': "color", 'debounce': "debounce", 'disabled': "disabled", 'inputmode': "inputmode", 'max': "max", 'maxlength': "maxlength", 'min': "min", 'minlength': "minlength", 'mode': "mode", 'multiple': "multiple", 'name': "name", 'pattern': "pattern", 'placeholder': "placeholder", 'readonly': "readonly", 'required': "required", 'size': "size", 'spellcheck': "spellcheck", 'step': "step", 'type': "type", 'value': "value" }, {}, never>;
}
export declare interface IonItem extends Components.IonItem {
}
export declare class IonItem {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonItem>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonItem, "ion-item", never, { 'button': "button", 'color': "color", 'detail': "detail", 'detailIcon': "detailIcon", 'disabled': "disabled", 'download': "download", 'href': "href", 'lines': "lines", 'mode': "mode", 'rel': "rel", 'routerDirection': "routerDirection", 'target': "target", 'type': "type" }, {}, never>;
}
export declare interface IonItemDivider extends Components.IonItemDivider {
}
export declare class IonItemDivider {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonItemDivider>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonItemDivider, "ion-item-divider", never, { 'color': "color", 'mode': "mode", 'sticky': "sticky" }, {}, never>;
}
export declare interface IonItemGroup extends Components.IonItemGroup {
}
export declare class IonItemGroup {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonItemGroup>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonItemGroup, "ion-item-group", never, {}, {}, never>;
}
export declare interface IonItemOption extends Components.IonItemOption {
}
export declare class IonItemOption {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonItemOption>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonItemOption, "ion-item-option", never, { 'color': "color", 'disabled': "disabled", 'download': "download", 'expandable': "expandable", 'href': "href", 'mode': "mode", 'rel': "rel", 'target': "target", 'type': "type" }, {}, never>;
}
export declare interface IonItemOptions extends Components.IonItemOptions {
}
export declare class IonItemOptions {
    protected z: NgZone;
    ionSwipe: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonItemOptions>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonItemOptions, "ion-item-options", never, { 'side': "side" }, {}, never>;
}
export declare interface IonItemSliding extends Components.IonItemSliding {
}
export declare class IonItemSliding {
    protected z: NgZone;
    ionDrag: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonItemSliding>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonItemSliding, "ion-item-sliding", never, { 'disabled': "disabled" }, {}, never>;
}
export declare interface IonLabel extends Components.IonLabel {
}
export declare class IonLabel {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonLabel>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonLabel, "ion-label", never, { 'color': "color", 'mode': "mode", 'position': "position" }, {}, never>;
}
export declare interface IonList extends Components.IonList {
}
export declare class IonList {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonList>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonList, "ion-list", never, { 'inset': "inset", 'lines': "lines", 'mode': "mode" }, {}, never>;
}
export declare interface IonListHeader extends Components.IonListHeader {
}
export declare class IonListHeader {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonListHeader>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonListHeader, "ion-list-header", never, { 'color': "color", 'mode': "mode" }, {}, never>;
}
export declare interface IonMenu extends Components.IonMenu {
}
export declare class IonMenu {
    protected z: NgZone;
    ionWillOpen: EventEmitter<CustomEvent>;
    ionWillClose: EventEmitter<CustomEvent>;
    ionDidOpen: EventEmitter<CustomEvent>;
    ionDidClose: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonMenu>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonMenu, "ion-menu", never, { 'contentId': "contentId", 'disabled': "disabled", 'maxEdgeStart': "maxEdgeStart", 'menuId': "menuId", 'side': "side", 'swipeGesture': "swipeGesture", 'type': "type" }, {}, never>;
}
export declare interface IonMenuButton extends Components.IonMenuButton {
}
export declare class IonMenuButton {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonMenuButton>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonMenuButton, "ion-menu-button", never, { 'autoHide': "autoHide", 'color': "color", 'disabled': "disabled", 'menu': "menu", 'type': "type" }, {}, never>;
}
export declare interface IonMenuToggle extends Components.IonMenuToggle {
}
export declare class IonMenuToggle {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonMenuToggle>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonMenuToggle, "ion-menu-toggle", never, { 'autoHide': "autoHide", 'menu': "menu" }, {}, never>;
}
export declare interface IonNav extends Components.IonNav {
}
export declare class IonNav {
    protected z: NgZone;
    ionNavWillChange: EventEmitter<CustomEvent>;
    ionNavDidChange: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonNav>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonNav, "ion-nav", never, { 'animated': "animated", 'animation': "animation", 'root': "root", 'rootParams': "rootParams", 'swipeGesture': "swipeGesture" }, {}, never>;
}
export declare interface IonNavLink extends Components.IonNavLink {
}
export declare class IonNavLink {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonNavLink>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonNavLink, "ion-nav-link", never, { 'component': "component", 'componentProps': "componentProps", 'routerDirection': "routerDirection" }, {}, never>;
}
export declare interface IonNavPop extends Components.IonNavPop {
}
export declare class IonNavPop {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonNavPop>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonNavPop, "ion-nav-pop", never, {}, {}, never>;
}
export declare interface IonNavPush extends Components.IonNavPush {
}
export declare class IonNavPush {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonNavPush>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonNavPush, "ion-nav-push", never, { 'component': "component", 'componentProps': "componentProps" }, {}, never>;
}
export declare interface IonNavSetRoot extends Components.IonNavSetRoot {
}
export declare class IonNavSetRoot {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonNavSetRoot>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonNavSetRoot, "ion-nav-set-root", never, { 'component': "component", 'componentProps': "componentProps" }, {}, never>;
}
export declare interface IonNote extends Components.IonNote {
}
export declare class IonNote {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonNote>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonNote, "ion-note", never, { 'color': "color", 'mode': "mode" }, {}, never>;
}
export declare interface IonProgressBar extends Components.IonProgressBar {
}
export declare class IonProgressBar {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonProgressBar>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonProgressBar, "ion-progress-bar", never, { 'buffer': "buffer", 'color': "color", 'mode': "mode", 'reversed': "reversed", 'type': "type", 'value': "value" }, {}, never>;
}
export declare interface IonRadio extends Components.IonRadio {
}
export declare class IonRadio {
    protected z: NgZone;
    ionSelect: EventEmitter<CustomEvent>;
    ionFocus: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonRadio>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonRadio, "ion-radio", never, { 'checked': "checked", 'color': "color", 'disabled': "disabled", 'mode': "mode", 'name': "name", 'value': "value" }, {}, never>;
}
export declare interface IonRadioGroup extends Components.IonRadioGroup {
}
export declare class IonRadioGroup {
    protected z: NgZone;
    ionChange: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonRadioGroup>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonRadioGroup, "ion-radio-group", never, { 'allowEmptySelection': "allowEmptySelection", 'name': "name", 'value': "value" }, {}, never>;
}
export declare interface IonRange extends Components.IonRange {
}
export declare class IonRange {
    protected z: NgZone;
    ionChange: EventEmitter<CustomEvent>;
    ionFocus: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonRange>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonRange, "ion-range", never, { 'color': "color", 'debounce': "debounce", 'disabled': "disabled", 'dualKnobs': "dualKnobs", 'max': "max", 'min': "min", 'mode': "mode", 'name': "name", 'pin': "pin", 'snaps': "snaps", 'step': "step", 'ticks': "ticks", 'value': "value" }, {}, never>;
}
export declare interface IonRefresher extends Components.IonRefresher {
}
export declare class IonRefresher {
    protected z: NgZone;
    ionRefresh: EventEmitter<CustomEvent>;
    ionPull: EventEmitter<CustomEvent>;
    ionStart: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonRefresher>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonRefresher, "ion-refresher", never, { 'closeDuration': "closeDuration", 'disabled': "disabled", 'pullFactor': "pullFactor", 'pullMax': "pullMax", 'pullMin': "pullMin", 'snapbackDuration': "snapbackDuration" }, {}, never>;
}
export declare interface IonRefresherContent extends Components.IonRefresherContent {
}
export declare class IonRefresherContent {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonRefresherContent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonRefresherContent, "ion-refresher-content", never, { 'pullingIcon': "pullingIcon", 'pullingText': "pullingText", 'refreshingSpinner': "refreshingSpinner", 'refreshingText': "refreshingText" }, {}, never>;
}
export declare interface IonReorder extends Components.IonReorder {
}
export declare class IonReorder {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonReorder>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonReorder, "ion-reorder", never, {}, {}, never>;
}
export declare interface IonReorderGroup extends Components.IonReorderGroup {
}
export declare class IonReorderGroup {
    protected z: NgZone;
    ionItemReorder: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonReorderGroup>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonReorderGroup, "ion-reorder-group", never, { 'disabled': "disabled" }, {}, never>;
}
export declare interface IonRippleEffect extends Components.IonRippleEffect {
}
export declare class IonRippleEffect {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonRippleEffect>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonRippleEffect, "ion-ripple-effect", never, { 'type': "type" }, {}, never>;
}
export declare interface IonRow extends Components.IonRow {
}
export declare class IonRow {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonRow>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonRow, "ion-row", never, {}, {}, never>;
}
export declare interface IonSearchbar extends Components.IonSearchbar {
}
export declare class IonSearchbar {
    protected z: NgZone;
    ionInput: EventEmitter<CustomEvent>;
    ionChange: EventEmitter<CustomEvent>;
    ionCancel: EventEmitter<CustomEvent>;
    ionClear: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    ionFocus: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonSearchbar>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonSearchbar, "ion-searchbar", never, { 'animated': "animated", 'autocomplete': "autocomplete", 'autocorrect': "autocorrect", 'cancelButtonIcon': "cancelButtonIcon", 'cancelButtonText': "cancelButtonText", 'clearIcon': "clearIcon", 'color': "color", 'debounce': "debounce", 'disabled': "disabled", 'inputmode': "inputmode", 'mode': "mode", 'placeholder': "placeholder", 'searchIcon': "searchIcon", 'showCancelButton': "showCancelButton", 'spellcheck': "spellcheck", 'type': "type", 'value': "value" }, {}, never>;
}
export declare interface IonSegment extends Components.IonSegment {
}
export declare class IonSegment {
    protected z: NgZone;
    ionChange: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonSegment>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonSegment, "ion-segment", never, { 'color': "color", 'disabled': "disabled", 'mode': "mode", 'scrollable': "scrollable", 'value': "value" }, {}, never>;
}
export declare interface IonSegmentButton extends Components.IonSegmentButton {
}
export declare class IonSegmentButton {
    protected z: NgZone;
    ionSelect: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonSegmentButton>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonSegmentButton, "ion-segment-button", never, { 'checked': "checked", 'disabled': "disabled", 'layout': "layout", 'mode': "mode", 'type': "type", 'value': "value" }, {}, never>;
}
export declare interface IonSelect extends Components.IonSelect {
}
export declare class IonSelect {
    protected z: NgZone;
    ionChange: EventEmitter<CustomEvent>;
    ionCancel: EventEmitter<CustomEvent>;
    ionFocus: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonSelect>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonSelect, "ion-select", never, { 'cancelText': "cancelText", 'compareWith': "compareWith", 'disabled': "disabled", 'interface': "interface", 'interfaceOptions': "interfaceOptions", 'mode': "mode", 'multiple': "multiple", 'name': "name", 'okText': "okText", 'placeholder': "placeholder", 'selectedText': "selectedText", 'value': "value" }, {}, never>;
}
export declare interface IonSelectOption extends Components.IonSelectOption {
}
export declare class IonSelectOption {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonSelectOption>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonSelectOption, "ion-select-option", never, { 'disabled': "disabled", 'selected': "selected", 'value': "value" }, {}, never>;
}
export declare interface IonSkeletonText extends Components.IonSkeletonText {
}
export declare class IonSkeletonText {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonSkeletonText>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonSkeletonText, "ion-skeleton-text", never, { 'animated': "animated", 'width': "width" }, {}, never>;
}
export declare interface IonSlide extends Components.IonSlide {
}
export declare class IonSlide {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonSlide>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonSlide, "ion-slide", never, {}, {}, never>;
}
export declare interface IonSlides extends Components.IonSlides {
}
export declare class IonSlides {
    protected z: NgZone;
    ionSlidesDidLoad: EventEmitter<CustomEvent>;
    ionSlideTap: EventEmitter<CustomEvent>;
    ionSlideDoubleTap: EventEmitter<CustomEvent>;
    ionSlideWillChange: EventEmitter<CustomEvent>;
    ionSlideDidChange: EventEmitter<CustomEvent>;
    ionSlideNextStart: EventEmitter<CustomEvent>;
    ionSlidePrevStart: EventEmitter<CustomEvent>;
    ionSlideNextEnd: EventEmitter<CustomEvent>;
    ionSlidePrevEnd: EventEmitter<CustomEvent>;
    ionSlideTransitionStart: EventEmitter<CustomEvent>;
    ionSlideTransitionEnd: EventEmitter<CustomEvent>;
    ionSlideDrag: EventEmitter<CustomEvent>;
    ionSlideReachStart: EventEmitter<CustomEvent>;
    ionSlideReachEnd: EventEmitter<CustomEvent>;
    ionSlideTouchStart: EventEmitter<CustomEvent>;
    ionSlideTouchEnd: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonSlides>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonSlides, "ion-slides", never, { 'mode': "mode", 'options': "options", 'pager': "pager", 'scrollbar': "scrollbar" }, {}, never>;
}
export declare interface IonSpinner extends Components.IonSpinner {
}
export declare class IonSpinner {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonSpinner>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonSpinner, "ion-spinner", never, { 'color': "color", 'duration': "duration", 'name': "name", 'paused': "paused" }, {}, never>;
}
export declare interface IonSplitPane extends Components.IonSplitPane {
}
export declare class IonSplitPane {
    protected z: NgZone;
    ionSplitPaneVisible: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonSplitPane>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonSplitPane, "ion-split-pane", never, { 'contentId': "contentId", 'disabled': "disabled", 'when': "when" }, {}, never>;
}
export declare interface IonTabBar extends Components.IonTabBar {
}
export declare class IonTabBar {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonTabBar>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonTabBar, "ion-tab-bar", never, { 'color': "color", 'mode': "mode", 'selectedTab': "selectedTab", 'translucent': "translucent" }, {}, never>;
}
export declare interface IonTabButton extends Components.IonTabButton {
}
export declare class IonTabButton {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonTabButton>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonTabButton, "ion-tab-button", never, { 'disabled': "disabled", 'download': "download", 'href': "href", 'layout': "layout", 'mode': "mode", 'rel': "rel", 'selected': "selected", 'tab': "tab", 'target': "target" }, {}, never>;
}
export declare interface IonText extends Components.IonText {
}
export declare class IonText {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonText>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonText, "ion-text", never, { 'color': "color", 'mode': "mode" }, {}, never>;
}
export declare interface IonTextarea extends Components.IonTextarea {
}
export declare class IonTextarea {
    protected z: NgZone;
    ionChange: EventEmitter<CustomEvent>;
    ionInput: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    ionFocus: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonTextarea>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonTextarea, "ion-textarea", never, { 'autoGrow': "autoGrow", 'autocapitalize': "autocapitalize", 'autofocus': "autofocus", 'clearOnEdit': "clearOnEdit", 'color': "color", 'cols': "cols", 'debounce': "debounce", 'disabled': "disabled", 'maxlength': "maxlength", 'minlength': "minlength", 'mode': "mode", 'name': "name", 'placeholder': "placeholder", 'readonly': "readonly", 'required': "required", 'rows': "rows", 'spellcheck': "spellcheck", 'value': "value", 'wrap': "wrap" }, {}, never>;
}
export declare interface IonThumbnail extends Components.IonThumbnail {
}
export declare class IonThumbnail {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonThumbnail>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonThumbnail, "ion-thumbnail", never, {}, {}, never>;
}
export declare interface IonTitle extends Components.IonTitle {
}
export declare class IonTitle {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonTitle>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonTitle, "ion-title", never, { 'color': "color", 'size': "size" }, {}, never>;
}
export declare interface IonToggle extends Components.IonToggle {
}
export declare class IonToggle {
    protected z: NgZone;
    ionChange: EventEmitter<CustomEvent>;
    ionFocus: EventEmitter<CustomEvent>;
    ionBlur: EventEmitter<CustomEvent>;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonToggle>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonToggle, "ion-toggle", never, { 'checked': "checked", 'color': "color", 'disabled': "disabled", 'mode': "mode", 'name': "name", 'value': "value" }, {}, never>;
}
export declare interface IonToolbar extends Components.IonToolbar {
}
export declare class IonToolbar {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IonToolbar>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<IonToolbar, "ion-toolbar", never, { 'color': "color", 'mode': "mode" }, {}, never>;
}

//# sourceMappingURL=proxies.d.ts.map