js.debugger.module.name={0} Debugger 101
js.debugger.module.description=Learn how to run a program step by step and identify problems in it without leaving the IDE.

js.debugger.before.title=Before Debugging: Run/Debug Configurations
js.debugger.before.intro.1=With <ide/>, you can run and debug all kinds of JavaScript apps right where you write your code.
js.debugger.before.intro.2=In this module, we\u2019ll go over some steps that will be helpful no matter what kind of code you debug. \
  In our case, it will be a very basic <a href=''{0}''>Node.js</a> app that should compare two numbers and return {1} or {2}. Make sure Node.js is \
  <a href=''{3}''>installed</a> on your machine before moving forward (for a fresh install, you\u2019ll need to restart <ide/>). \
  Press {4} if you\u2019re ready to continue.
js.debugger.before.describe.tool.window=Two things happened as we pressed {0}. First, we ran a file using Node.js and opened the {1} \
  tool window, which shows the results of running the code. Second, <ide/> created a temporary run/debug configuration, so we could run a file \
  like that. Let\u2019s hide the tool window with {2} for now and get to know run/debug configurations better.
js.debugger.before.save.1=So, these configurations serve as an entry point to running/debugging applications. They can be temporary or permanent. \
  The main difference is that temporary ones are automatically deleted if the default limit of 5 configurations is reached.
js.debugger.before.save.2=Let\u2019s see how you can turn a temporary configuration into a permanent one. \
  Open the {0} drop-down menu located in the top right-hand corner and select {1}.
js.debugger.before.edit=That\u2019s it! Now, what if you want to adjust the settings of this new run/debug configuration or use another one? \
  Open the {0} menu again and click {1}.
js.debugger.before.manage.1=This is a place for managing run/debug configurations. To add a new one, press {0}, select the desired \
  configuration type, and specify the settings based on your project/configuration type. To fine-tune an existing one, you can click its \
  name and update what\u2019s needed.
js.debugger.before.manage.2=Take some time to explore what can be found here and close the window once you\u2019re ready to move further.
js.debugger.before.next=That\u2019s it for this lesson. To start the next one, click the button below or use {0}.

js.debugger.part.1.title=Debugging Code. Part I
js.debugger.part.1.start.1=Now that we have a run/debug configuration in place, let\u2019s see how to work with the built-in debugger.
js.debugger.part.1.start.2=First, let\u2019s run our code one more time to examine what it returns as we didn''t focus on this in the previous lesson. \
  Click the {0} button located next to the drop-down list with configurations to run the currently selected one.
js.debugger.part.1.gutter=The numbers we\u2019re comparing, {0} and {1}, are not equal, so we should\u2019ve got {2} when running the code. \
  Let\u2019s find out why we got {3} instead. On line 1, click the gutter (empty space) between #1 and the code to put a breakpoint.
js.debugger.part.1.set.breakpoint=So, we can use breakpoints to pause the execution of the application. The red circle you see in \
 the gutter is what a breakpoint looks like in <ide/>. If you click it again, it will be removed. You can also right-click it \
 to customize its behavior, for example, set a condition for it. Let\u2019s hit the {0} button located in the top right-hand corner (or press {1}) to move forward.
js.debugger.part.1.tool.window.1=Meet the {0} tool window. On its left side, you can find icons for stopping/rerunning configurations and \
  managing breakpoints. At its top, you can see a few tabs and a group of icons for stepping through the code.
js.debugger.part.1.tool.window.2=The {0} tab we''re on is where most of the work is done. On the right, you can see all the {1} grouped by \
  scopes, along with their values. The {2} view shows the call stack. \
  If you go through it, you\u2019ll see the application state at every point of the execution path. Now switch to the {3} tab.
js.debugger.part.1.scripts.tab=The {0} tab shows the messages logged by an application, including errors. When debugging Node.js applications, <ide/> \
  also shows the {1} tab where you can run JavaScript code snippets and view the console messages. Switch to the {2} tab to continue.
js.debugger.part.1.next=The {0} tab lists all the files loaded into the currently running process. You can see the content of any file by \
  double-clicking it. To move to the second part of this lesson, click the button below or use {1}.

js.debugger.part.2.title=Debugging Code. Part II
js.debugger.part.2.step.into.1=<strong>Important</strong>: Please make sure that there\u2019s a breakpoint on line 1 and that the debugger is \
  launched ({0}) and opened on the {1} tab before moving forward.
js.debugger.part.2.step.into.2=Let''s continue with locating bugs in our code and learn a few more \
  things that might be useful when debugging in <ide/>. To better understand how our code is executed, we could put more breakpoints in it \
  and then move from one to another using {0} button ({1}), but there\u2019s a faster way. Let\u2019s step to the next executed line by pressing {2} \
  and using {3} ({4}).
js.debugger.part.2.buttons.1=To learn more about stepping through the program, check out <a href="{0}">our online help.</a>
js.debugger.part.2.buttons.2=Now, what if we want to check the value of an expression? <ide/> lets you do it quickly with the {0} popup. \
  Press {1} to call it.
js.debugger.part.2.evaluate.1=Let''s add {0} as an expression and press {1}. Look at the result: it equals {2}. This is where the problem lies. \
  In order for the function to catch different numbers, we need to slightly change the expression so that its result would equal {3}.
js.debugger.part.2.evaluate.2=Now let''s close the popup and fix the problem we''ve found in the code. Inside {0} on line 2, replace {1} with {2}.
js.debugger.part.2.stop=Finally, let\u2019s learn how to stop the debugger when you no longer need it. First, click the breakpoint we added to \
  remove it. Then, stop the debugger with {0} ({1}) and close its tool window by pressing {2}.
js.debugger.part.2.end=Congratulations! You\u2019ve made it to the end of {0} and learned some basic ways to debug all kinds of apps. If you\u2019d \
  like, you can run the code one more time to confirm that everything works fine now. To dive deeper into debugging specific types of apps, \
  take a look at our <a href=''{1}''>web help</a> and <a href=''{2}''>blog posts</a>. Click the button below to move to the next module.
