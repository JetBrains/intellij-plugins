<xml type="Scenario" name="Search" id="swift.navigation.search" lang="Swift">
    <CopyText><![CDATA[import Foundation

protocol Test {
    func test(containsTest test: Int, anotherContainingTest test1: String)
}

typealias TestAlias = AnotherTest

class AnotherTest: Test {
    func test(containsTest test: Int, anotherContainingTest testAnother: String) {
        print(test)

    }

    func tests() -> Test {
        let test = AnotherTest()
        test.test(containsTest: 1, anotherContainingTest: "test")
        return test
    }
}
]]></CopyText>
    <Text>Searching in AppCode is different. We have special features for searching text and others dedicated to searching code. This is because code is not mere text - it has a specific structure formed by the code constructs.</Text>
    <SetSelection start-position="16:13" end-position="16:17" />
    <Try trigger="Find">This sample file has lots of code constructs containing the word <code>test</code>. The caret is on the variable named <code>test</code>. Press <action>Find</action> to find all the text occurrences of the word <code>test</code>.</Try>
    <SetSelection start-position="16:14" end-position="16:14" />
    <Try trigger="FindUsages">This is not very helpful, is it? In real code, we probably want to search for the <code>test</code> variable, without including class names, method names, or any other code constructs. Try pressing <action>EditorEscape</action> and then <action>FindUsages</action>.</Try>
    <Text>Now, AppCode shows us only actual usages of the <code>test</code> variable.</Text>
    <MoveCaret  position="15:23" />
    <Try trigger="FindUsages">The same applies to any other code construct. Press <action>EditorEscape</action> → <action>FindUsages</action> to find all the usages of the <code>Test</code> protocol in the project.</Try>
    <MoveCaret  position="17:17" />
    <Try trigger="FindUsages">Now let's find all usages of the method <code>test(containsTest test: Int, anotherContainingTest test1: String)</code>. Press <action>EditorEscape</action> → <action>FindUsages</action> again.</Try>
    <Text>The simple rule is: think which symbol you need to find, instead of which piece of text you need to find. <strong>Find Usages</strong> works for any code construct in the project context, so you will find all the usages in the whole codebase.</Text>
    <Text>Of course, sometimes you don't know what exactly you're looking for, and you want to find as many matches as possible by searching for some text. In this case, use <action>Find</action> to search in the current file, or use <action>FindInPath</action> to search in the whole project.</Text>
    <Try triggers="SearchEverywhere">What if you want to search for some text in symbols, file names, or even IDE settings and menu items? Press <shortcut>Double⇧</shortcut> to open the <strong>Search Everywhere</strong> dialog.</Try>
    <Try trigger="GotoAction">Finally, try using <strong>Find Action</strong> (<action>GotoAction</action>) to quickly find an IDE action and execute it. For example, type 'plugins' to open <strong>Preferences | Plugins</strong>.</Try>
    <Win/>
</xml>