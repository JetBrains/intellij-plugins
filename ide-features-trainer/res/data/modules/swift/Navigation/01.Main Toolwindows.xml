<xml type="Scenario" name="Main windows &amp; views" id="swift.navigation.toolwindows" lang="Swift">
    <CopyText><![CDATA[import UIKit

class Navigation: UITableViewController {

    var detailViewController: DetailViewController? = nil
    var objects = [Any]()


    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        navigationItem.leftBarButtonItem = editButtonItem

        let addButton = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(insertNewObject(_:)))
        navigationItem.rightBarButtonItem = addButton
        if let split = splitViewController {
            let controllers = split.viewControllers
            detailViewController = (controllers[controllers.count-1] as! UINavigationController).topViewController as? DetailViewController
        }
    }

    override func viewWillAppear(_ animated: Bool) {
        clearsSelectionOnViewWillAppear = splitViewController!.isCollapsed
        super.viewWillAppear(animated)
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    @objc
    func insertNewObject(_ sender: Any) {
        objects.insert(NSDate(), at: 0)
        let indexPath = IndexPath(row: 0, section: 0)
        tableView.insertRows(at: [indexPath], with: .automatic)
    }

    // MARK: - Segues

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if segue.identifier == "showDetail" {
            if let indexPath = tableView.indexPathForSelectedRow {
                let object = objects[indexPath.row] as! NSDate
                let controller = (segue.destination as! UINavigationController).topViewController as! DetailViewController
                controller.detailItem = object
                controller.navigationItem.leftBarButtonItem = splitViewController?.displayModeButtonItem
                controller.navigationItem.leftItemsSupplementBackButton = true
            }
        }
    }

    // MARK: - Table View

    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return objects.count
    }

    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "Cell", for: indexPath)

        let object = objects[indexPath.row] as! NSDate
        cell.textLabel!.text = object.description
        return cell
    }

    override func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        // Return false if you do not want the specified item to be editable.
        return true
    }

    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        if editingStyle == .delete {
            objects.remove(at: indexPath.row)
            tableView.deleteRows(at: [indexPath], with: .fade)
        } else if editingStyle == .insert {
            // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.
        }
    }


}]]></CopyText>
    <Text>There are plenty of navigation views in <ide/>. Knowing which one to call in a given situation will help you use the IDE more efficiently.</Text>
    <Try trigger="ActivateProjectToolWindow">The <strong>Project</strong> view is similar to the Project navigator in Xcode. It shows all the projects included in a particular workspace, and all the files and groups inside them. Open the <strong>Project</strong> view by pressing (<action>ActivateProjectToolWindow</action>).</Try>
    <Text>By default, the <strong>Project</strong> view in <ide/> shows files and folders in the same order as they are stored on the filesystem.</Text>
    <Try trigger="ProjectView.ManualOrder">Click the <icon>AllIcons.General.GearPlain</icon> icon in the project view options menu, and then select <strong>Xcode order</strong> to set the same order of files as in Xcode (if you selected Xcode behavior when setting up <ide/>, this option will be enabled automatically).</Try>
    <Text>Other features include <strong>Open Files with Single Click</strong> and <strong>Always Select Opened File</strong>. The former allows you to automatically open the code of a file when selecting it, while the latter automatically sets the focus on the file name in the <strong>Project</strong> view when the editor area is in focus.</Text>
    <Text>The <strong>Files</strong> view is an additional helpful mode for <ide/>’s <strong>Project</strong> view. It shows all the files inside the directory where <code>.xcworkspace</code> or <code>.xcproject</code> is located. With this view, you can easily open any file not included in your project and view it.</Text>
    <Try triggers="com.intellij.ui.content.tabs.TabbedContentAction$MyNextTabAction">Activate the <strong>Files</strong> view by pressing <action>NextTab</action>.</Try>
    <MoveCaret position="1:1" />
    <Text>Press <action>EditorEscape</action> to return to the editor window.</Text>
    <Text>The <strong>Structure</strong> view and the <strong>Structure</strong> popup show you the structure of a particular file together with all the <code>//TODO</code>, <code>//FIXME</code> and <code>#pragma mark</code> or <code>//MARK</code> comments in your code. They work similarly to the <strong>Symbol</strong> navigator in Xcode.</Text>
    <Try trigger="ActivateStructureToolWindow">Activate the <strong>Structure</strong> view by pressing <action>ActivateStructureToolWindow</action>.</Try>
    <Text>By using ↑ and ↓ keys, you can select any code construct here and press <action>EditSource</action> to jump to some place in your code.</Text>
    <Try trigger="FileStructurePopup">Now activate the <strong>Structure</strong> popup by pressing <action>FileStructurePopup</action>.</Try>
    <Text>Dismiss this popup using <action>EditorEscape</action> or press ⏎ to jump to some place in your code.</Text>
    <Try trigger="FindInPath">The <strong>Find in Path</strong> (<action>FindInPath</action>) dialog provides the same functionality as <strong>Find</strong> navigator in Xcode. Try using it to run a full-text search now.</Try>
    <Try trigger="Build">Let's build our project by invoking <action>Build</action>.</Try>
    <Text>The <strong>Build messages</strong> tool window shows compiler output and allows you to filter build messages by their type (see the <strong>Filter messages</strong> button on the left-hand side). You can always activate this toolwindow by pressing <action>ActivateMessagesToolWindow</action>.</Text>
    <Try trigger="Run">Now let's run our project on the simulator to see the <strong>Run</strong> tool window. Press <action>Run</action>.</Try>
    <Text>This tool window shows the console, where you can view the output of your application (or <strong>Tests runner</strong> if you are running the <strong>Test</strong> Run Configuration). You can always activate it via (<action>ActivateRunToolWindow</action>).</Text>
    <Try triggers="Stop">Stop your application by pressing <action>Stop</action>.</Try>
    <Try triggers="GotoFile;MasterViewController.swift">Let's switch back from the emulator window to the IDE and navigate to <code>MasterViewController.swift</code> by pressing <action>GotoFile</action>.</Try>
    <MoveCaret position="11:9" />
    <Try triggers="ToggleLineBreakpoint;Debug">Toggle a breakpoint at line 11 using <action>ToggleLineBreakpoint</action> and then press <action>Debug</action>.</Try>
    <Text>The <strong>Debug</strong> tool window (<action>ActivateDebugToolWindow</action>) is similar to Xcode's <strong>Debug</strong> navigator. It shows all the watches, local variables on the right-hand side, and the list of threads on the left-hand side.</Text>
    <Try triggers="Stop">Stop your application by pressing <action>Stop</action>.</Try>
    <MoveCaret position="16:9" />
    <Try trigger="ViewBreakpoints">The <strong>Breakpoints</strong> dialog has the same functionality as <strong>Breakpoint</strong> navigator in Xcode - it shows the list of all breakpoints in your project. Activate it by using <action>ViewBreakpoints</action>.</Try>
    <Try trigger="ActivateVersionControlToolWindow">Init the GIT repository via <action>Vcs.QuickListPopupAction</action>→<strong>Create Git Repository</strong>. Now activate the <strong>VCS</strong> toolwindow with the <action>ActivateVersionControlToolWindow</action> shortcut.</Try>
    <Text>The <strong>VCS</strong> tool window provides everything you need to work with version control systems, including the <strong>Changes</strong> view, the <strong>VCS log</strong>, and more.</Text>
    <Win/>
</xml>