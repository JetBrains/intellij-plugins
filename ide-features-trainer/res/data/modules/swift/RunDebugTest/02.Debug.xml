<xml type="Scenario" name="Debug" id="swift.rdt.debug" lang="Swift">
    <CopyText><![CDATA[import UIKit

class DebugExample: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()

        let x = 0
        let y = 50

        let tableView = UITableView()

        let header = UILabel()
        header.text = "AppCode"
        header.sizeToFit()

        tableView.frame = CGRect(x: x, y: y, width: 320, height: 400)
        tableView.tableHeaderView = header
        self.view.addSubview(tableView)
    }
}]]></CopyText>
    <Text>Now let's learn some debug basics.</Text>
    <Try triggers="GotoFile;MasterViewController.swift">Navigate to <code>MasterViewController.swift</code> by pressing <action>GotoFile</action>.</Try>
    <MoveCaret position="11:9"/>
    <Try triggers="ToggleLineBreakpoint;Debug">Toggle a breakpoint at line 11 with <action>ToggleLineBreakpoint</action> and then press <action>Debug</action>.</Try>
    <Try triggers="StepInto;StepOver">Try to step into, by using <action>StepInto</action>, and then step over with <action>StepOver</action>.</Try>
    <Try triggers="RunToCursor">Now, set the caret to line 21 and execute <strong>Run to cursor</strong> - <action>RunToCursor</action>.</Try>
    <Try triggers="StepOver">Step over to the next line.</Try>
    <SetSelection start-string="controllers[" end-string="count-1]" />
    <Try triggers="EditorSelectWord;EditorSelectWord;EvaluateExpression">Select <code>controllers[controllers.count-1]</code> using <action>EditorSelectWord</action> and use <strong>Evaluate Expression</strong> (<action>EvaluateExpression</action> â†’ <action>EditorEnter</action>).</Try>
    <Try triggers="EditorChooseLookupItem">Enter the dot symbol, select some property, and then press <action>EditorEnter</action> to evaluate it without switching to LLDB console.</Try>
    <Try triggers="Stop">Press <action>Stop</action> to stop debugging the application.</Try>
    <Win/>
</xml>