js.readme.description=This interactive course will help you learn how to do some common tasks, like refactoring code or navigating through projects.\
  \n\nThe course will be most useful for those who are new to {0}. However, if you''re an experienced {0} user and feel like checking whether \
  you know all the basic shortcuts, we encourage you to try it out, too.
js.readme.usage.header=How to go through the course
js.readme.feedback.header=Share feedback


js.editor.basics.module.name=Editor Basics
js.editor.basics.module.description=Get the hang of the editor essentials \u2013 start writing better code and saving time on common tasks from day one.

js.editor.completion.title=Code Completion
js.editor.completion.choose.lookup=<ide/> is full of features that help you write better code and increase your productivity. \
  Let\u2019s start with code completion. It enables you to code faster by completing keywords and symbols from language APIs and project \
  dependencies. Type {0} and press {1} to autocomplete {2}.
js.editor.completion.choose.method=So, code completion shows context-aware suggestions as you type. \
  To add one of these suggestions, you can use {0} like we just did, or press {1} to replace an existing item. \
  Now add a {2} after {3}, then type {4} and autocomplete the {5} method with {0}.
js.editor.completion.parameter.info=The tooltip ({0}) we\u2019ve got after placing the caret inside {1} lets you quickly look up the names of \
  parameters in methods and functions. In some situations, you may want to review more detailed documentation. Let\u2019s do it now by pressing {2}.
js.editor.completion.add.parameter=This is how you can look up JavaScript documentation right in <ide/>. Now add {0} inside {1} to continue.
js.editor.completion.console.log.argument=Finally, let\u2019s complete the {0} statement. \
  Place the caret inside {1} on the line 8 and add {2} using code completion.
js.editor.completion.next=That\u2019s it for this lesson. To start the next one, click the button below or use {0}.

js.editor.code.editing.tips.and.tricks.title=Code Editing Tips and Tricks
js.editor.code.editing.reformat.start=Let''s go over some tips and tricks that can help you edit code a lot faster. \
  For starters, there''s no need to manually fix code formatting with <ide/>. Reformat the code with {0}.
js.editor.code.editing.select.word=That\u2019s it! Now let\u2019s see how to quickly select pieces of code in a file. \
  Press {0} a few times to fully select the second tr element (lines 14-18).
js.editor.code.editing.comment.delete.unselect.move.up.1=Now that you''ve selected the code, you can (un)comment it out ({0}), delete it \
  ({1}), or shrink the selection ({2}).
js.editor.code.editing.comment.delete.unselect.move.up.2=Another thing you can do is move this code up or down the file. Let\u2019s move it up with {0}.
js.editor.code.editing.multi.caret.1=Next up is multi-caret editing. Use it to save time as you modify code in several places at once. \
  Place the caret inside the first {0} tag (line 10). Then select all {1} tags inside the same tr element (lines 10-12): press {2} six \
  times until all the necessary tags are selected.
js.editor.code.editing.multi.caret.2=Let''s replace {0} with {1} and press {2} to exit the multi-caret mode.
js.editor.code.editing.duplicate.delete.comment=Finally, let\u2019s quickly try the most popular line actions, such as duplicate line, \
  delete line, or comment it out. Use {0} to duplicate the selected line now. Then press {1} and {2} to try the other line actions.
js.editor.code.editing.next=That''s it for this lesson. Click the button below to start the next one or use  {0}.

js.editor.code.inspection.title=The Power of Code Inspections
js.editor.code.inspection.intro=As you work in the editor, <ide/> constantly analyzes your code, detects various problems in it, and suggests \
  how it can be improved. The opened file has two highlighted problems on lines 4 and 5. Let\u2019s check what they are by pressing {0}.
js.editor.code.inspection.show.intentions.1=You can also use {0} to jump from one error to another. \
  Or, you can explore the found problems by hovering over them.
js.editor.code.inspection.show.intentions.2=In this file, the IDE has located an unresolved variable \u2013 one that wasn''t defined anywhere in the code. \
  It suggests creating a new one, {0}, as one of the possible fixes, but we need to add a parameter book instead. \
  Place the caret on {1} and press {2} to see the full list of fixes.
js.editor.code.inspection.run.intention=Let\u2019s select {0} and press {1}.
js.editor.code.inspection.checkmark=If you now look at the top right-hand corner of the editor, you\u2019ll see a green checkmark ({0}) \
  confirming the file has no more problems. However, there\u2019s still a minor detail that can be optimized to make the code shorter. \
  Place the caret on {1} (line 3) and press {2}.
js.editor.code.inspection.make.shorter=Now let\u2019s make our function expression shorter. Select the {0} quick-fix and press {1}.
js.editor.code.inspection.next=That\u2019s it for this lesson. Click the button below to start the next one or use  {0}.

js.editor.navigation.title=Efficient Navigation
js.editor.navigation.recent.files=Let\u2019s start with navigating around a project. Press {0} to call up the {1} popup.
js.editor.navigation.choose.structure=With this popup, you can quickly jump between recent files and IDE tool windows. One of those tool \
  windows can assist you with navigating around a smaller piece of a project, a single file. Click the {0} tab to learn more about it.
js.editor.navigation.activate.structure=So, the {0} tool window can help you examine a file faster. It provides an overview of its \
  structure and lets you jump to a specific item simply by typing its name. Start typing {1} anywhere in the tool window area, press {2}, \
  and then press {3} to close the panel and jump to the code.
js.editor.navigation.find.usages=As a result of our actions, the caret has moved to {0} (line 9). \
  Let\u2019s leave it there and press {1} to open another tool window that can help you quickly find usages of any item.
js.editor.navigation.hide.tool.window=Great! Now you can see the usages of giveTreat across the whole project and the libraries. \
  Let\u2019s close the tool window with {0}.
js.editor.navigation.search.everywhere=Now press {0} twice to meet another feature that can help you search faster.
js.editor.navigation.search.everywhere.tabs=This is the {0} popup. It lets you instantly find any action, file, class or symbol, and shows \
  all the matches in one place. If you want to run a more specific search, you can press {1} to switch from {2} to any other tab, such as \
  {3} or {4}. Or you can use a shortcut to open a specific tab that you need. Let\u2019s try the latter with {5}.
js.editor.navigation.search.action=Now that we\u2019re on the {0} tab, let\u2019s start typing {1} in the search bar to look up a shortcut for \
  another useful navigation feature.
js.editor.navigation.go.to.declaration=Notice the {0} next to <strong>Go to Declaration or Usages</strong> \u2013 it shows you usages for the \
  definition and vice versa. Let\u2019s close the popup, place the caret on {1} (line 16), and press {0} to look for its declaration.
js.editor.navigation.keymap.reference=Congratulations! You\u2019ve made it to the end of {0}. Print out the <a href="{1}">keymap reference</a> \
  to have all the shortcuts handy as you make yourself at home in <ide/>. Click the button below to move to the next module.

js.editor.refactorings.title=Refactorings in a Nutshell
js.editor.refactorings.this=<ide/> has a <a href=''{0}''>number of refactorings</a> that can automatically restructure existing code without \
  changing its behavior across the entire project. Let''s preview the list of refactorings available for the {1} parameter. \
  Press {2} or select {3} from the main menu.
js.editor.refactorings.rename=With {0}, you don''t need to memorize all the refactorings or their shortcuts. \
  Click {1} to see one of the most popular refactorings in action.
js.editor.refactorings.rename.apply=Rename the {0} parameter to {1} and press {2}. This action will apply the changes across all files in the project.
js.editor.refactorings.shortcut=Well done! Let''s try to refactor code by using a shortcut. \
  Place the caret at the {0} property (line 4) and press {1}.
js.editor.refactoring.replace=Now replace all two occurrences with the {0} variable named {1}.
js.editor.refactoring.select.expression=Let''s create a new variable, {0} that will contain {1}. \
  Select the {1} expression from the list and press {2}.
js.editor.refactorings.next=You''ve just explored two ways to refactor code in <ide/>. Print out the <a href="{0}">keymap reference</a> \
  if you prefer using shortcuts, or simply keep using the {1} menu. Click the button below to start the next lesson or use {2}.

js.getting.started.module.name=Getting Started with Testing
js.getting.started.module.description=Find out how to streamline unit testing in {0} by going through an example using Jest.

js.testing.jest.title=Fundamentals of Testing in {0}
js.testing.jest.prepare=With <ide/>, all testing workflows become easier. Let\u2019s see how. For this module, we\u2019ll use \
  <a href="{0}">Jest</a> and one of <a href="{1}">its sample projects</a> as an example, so please make sure you have Jest and npm/Yarn \
  installed on your machine (see <a href="{2}">this</a> webpage for more information). We\u2019ll start by creating a run/debug configuration, \
  which is going to be Jest-specific. On the main menu, select {3} > {4}. Then click {5}, add the {6} configuration with the default \
  parameters, and press {7} to save it.
js.testing.jest.run=So, now the new {0} configuration is selected by default. Let\u2019s click the {1} ({2}) button right next to it.
js.testing.jest.navigate.1=Now we can see the {0} tool window with the test results and a stack trace for the failed tests coming from a \
  test runner in it. Apart from simply tracking the test progress, you can do a lot of other things here. You can rerun all ({1}) or only \
  failed ({2}) tests, view passed tests ({3}), or enable the <a href="{4}">watch mode</a> to automatically rerun tests on changes.
js.testing.jest.navigate.2=You can also quickly find a specific test in {0}. Let\u2019s try it now: place the caret anywhere in the {0} area, \
  type {1}, and press {2} to jump to our test.
js.testing.jest.double.click=That\u2019s it! Use this feature whenever you need to quickly find your way through a lot of tests. \
  Let\u2019s now double-click {0} that we\u2019ve found.
js.testing.jest.fix.test.1=By double-clicking a test in {0}, we\u2019ve jumped straight to its location in the code. If you now hover over {1}, \
  you\u2019ll see a popup explaining why the test failed. From there, you can also debug a test if needed.
js.testing.jest.fix.test.2=Let\u2019s now replace the incorrect value used for {0}: on line 6, replace {1} with {2}.
js.testing.jest.re.run.test.1=Now that we have the right value for the expected result, we can rerun our test. Let\u2019s do it in a different \
  way this time. See the {0} icon on the left of the test in the editor? This icon not only shows you the test status for the tests you\u2019ve \
  run recently, but also lets you quickly run and debug a specific test.
js.testing.jest.re.run.test.2=Click it and select {0}.
js.testing.jest.success.run.coverage.1=Great job! Our test has successfully passed.
js.testing.jest.success.run.coverage.2=Let\u2019s take a look at another handy tool. Click the {0} icon located next to the run/debug configurations menu.
js.testing.jest.coverage.result=This is how you can quickly build a code coverage report showing how many files were covered with tests, \
  including the percentage of lines that were covered in those files. Now let\u2019s close the coverage report with {0}.
js.testing.jest.end=Congratulations! You\u2019ve made it to the end of this module. Most of what we\u2019ve learned also applies to the other test \
  runners that <ide/> supports (except for code coverage and the watch mode). For more tips and tricks about testing apps with Jest, please \
  take a look at <a href="{0}">this</a> blog post. If you use other test runners, you may want to explore our <a href="{1}">web help</a>.
