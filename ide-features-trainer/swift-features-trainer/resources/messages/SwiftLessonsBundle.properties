swift.editor.module.name=Editor
swift.editor.module.description=Learn how to select, comment, delete, duplicate, and move lines, format your code, and more.
swift.code.generations.module.name=Code Generation
swift.code.generations.module.description=Create from usage, override/implement, and apply quick-fixes.
swift.navigation.module.name=Navigation
swift.navigation.module.description=Windows, views, code navigation, jump to source, declaration/implementation, file structure, and more.
swift.refactorings.module.name=Refactorings
swift.refactorings.module.description=Rename, extract variable/method, and other refactorings.
swift.run.debug.test.module.name=Run, Debug, Test
swift.run.debug.test.module.description=Learn how to run, debug, and test your application.

swift.codegeneration.cfu.name=Create from Usage
swift.codegeneration.cfu.create.local=In <ide/>, you can create various code constructs from their usages just by pressing {0} on the unresolved entity. Press {1}, select <strong>Create local variable ''label''</strong>, and then press {2}.
swift.codegeneration.cfu.repeat=Repeat the same actions to create the {0} function.
swift.codegeneration.cfu.nice=Nice! Notice how parameters are generated together with their names.
swift.codegeneration.cfu.create.class=This time we can use the same approach to create a class declaration. Press {0}, select <strong>Create type ''IDE''</strong>, and then press {1}. Note that you can automatically create it to be nested in the current class or in a new file.
swift.codegeneration.cfu.create.init=Great! Let''s repeat the same actions to generate an initializer for our {0} class. Press {1}, select <strong>Create initializer</strong>, and then press {2}.
swift.codegeneration.cfu.create.empty.init=Finally, let's use the same actions to add an empty initializer.
swift.codegeneration.generate.name=Generate
swift.codegeneration.generate.intro=You can generate {0}, {1}, {2}, and {3} properties as well as initializers using the <strong>Generate</strong> action.
swift.codegeneration.generate.init=Press {0} and select <strong>Initializer</strong> in the <strong>Generate</strong> popup. Select properties to include into the initializer signature and press {1}.
swift.codegeneration.generate.hash=Generate {0} and {1} using {2} \u2192 <strong>equals and hash</strong>.
swift.codegeneration.generate.description=Finally, generate {0} using {1} \u2192 <strong>description</strong> action.
swift.codegeneration.overrideimplement.name=Override/Implement
swift.codegeneration.overrideimplement.intro=You can override any method of a parent class or implement any protocols using the <strong>Override/Implement</strong> actions ({0}/{1}).
swift.codegeneration.overrideimplement.implement=Press {0} \u2192 {1} and add stubs for all required methods from {2}.
swift.codegeneration.overrideimplement.override=Now let''s try overriding several methods at once. Press {0} and start typing {1}. The list of methods and properties you can override should be filtered down to just two methods. Press {2}\u2192 {3} to override them.
swift.codegeneration.quickfix.name=Quick-fixes and Intentions
swift.codegeneration.quickfix.intro=<ide/> shows the same {0} for your Swift code as Xcode does.
swift.codegeneration.quickfix.fixit=Press {0} and select <strong>Apply Fix-it</strong> to replace an unused variable with {1}.
swift.codegeneration.quickfix.sourcekit.inspection=AppCode also integrates SourceKit as a separate inspection. This means you can run it for the whole file and fix all the problems at once if several fix-its are available. Press {0}.
swift.codegeneration.quickfix.sourcekit.fixit=As you can see, we have several issues in this piece of code. Let's fix some of them. Select <strong>Swift \u2192 SourceKit inspections</strong> and click the <strong>Apply Fix-it</strong> button on the right. This should resolve all the problems in this group.
swift.codegeneration.quickfix.typo.in.var=Now press {0} to return to the editor window, place the caret at the incorrectly spelled variable name, and then press {1}. Select <strong>Typo: Rename to...</strong>, choose the correct option, and press {2}.
swift.codegeneration.quickfix.typo.in.string=Note that all variable usages were automatically renamed. Now, try using {0} to fix the {1} string.
swift.codegeneration.quickfix.go.next.error=Press {0} to go to the next error.
swift.codegeneration.quickfix.error.handling=Error handling intentions can help you add {0} where needed. Press {1}\u2192{2} and select one of the quick-fixes.
swift.codegeneration.quickfix.go.next.warning=Press {0} to go to the next warning.
swift.codegeneration.quickfix.redundant=You can also remove redundant {0} attributes. Press <shortcut>\u21E7\u2325\u23CE</shortcut>.
swift.codegeneration.quickfix.explicit.type=If you need to add or remove an explicit type for some variable, simply press {0} and select <strong>Add/Remove explicit type</strong>. Try it now with the {1} variable.
swift.editor.format.name=Code Formatting
swift.editor.format.reformat=<ide/> can help you correct code formatting with just one action. Try reformatting the selected code with {0}.
swift.editor.format.reformat.whole.file=To reformat the whole source file, use {0} when no lines are selected. Press {1} and then {2}.
swift.editor.comment=Comment
swift.editor.comment.intro=Comment out any line with {0}.
swift.editor.comment.uncomment=Uncomment the commented line with the same shortcut, {0}.
swift.editor.comment.several.lines=Select several lines with {0} and then comment them with {1}.
swift.editor.comment.block=Press {0} twice to select {1} and then comment it with a block comment by using {2}.
swift.editor.completion.name=Completion
swift.editor.completion.basic=By default, <ide/> completes your code instantly. Start typing {0} right where the caret is and press {1} to select the {2} function.
swift.editor.completion.basic.shortcut=You can activate Basic Completion at any time by pressing {0}.
swift.editor.completion.smart=Smart Type Completion filters the list of suggestions to include only those types that are applicable in the current context. Press {0} to see the list of matching suggestions. Choose the first one by pressing {1}.
swift.editor.completion.show=Now press {0} to show completion options.
swift.editor.completion.tab=Select the {0} item and press {1} (instead of {2}). This overwrites the word at the caret rather than simply inserting it.
swift.editor.completion.tab.method=Now invoke {0} and {1} to easily overwrite {2} with {3}.
swift.editor.completion.go.next=Awesome! Click the button below to start the next lesson or use {0}.
swift.editor.delete.name=Delete
swift.editor.delete.action=Delete the current line with {0}.
swift.editor.delete.undo=To restore the deleted line, press {0}.
swift.editor.duplicate.name=Duplicate
swift.editor.duplicate.line=Duplicate any line with {0}.
swift.editor.duplicate.several.lines=You can do the same with multiple lines. Simply select two or more lines and duplicate them with {0}.
swift.editor.folding.name=Folding
swift.editor.folding.collapse=Sometimes you need to collapse a piece of code for better readability. Try collapsing code with {0}.
swift.editor.folding.expand=To expand a code region, press {0}.
swift.editor.folding.collapse.all=If you want to collapse all regions in the file, use {0}.
swift.editor.folding.expand.all=Similarly, press {0} to expand all available regions.
swift.editor.folding.collapse.statement.any=In <ide/>, there''s a way to fold any sequence of statements or declarations. Try folding the selected region with {0}.
swift.editor.folding.expand.statement=Now press {0} to go the other way.
swift.editor.folding.block=And finally, use {0} to fold the control flow statements.
swift.editor.move.name=Move
swift.editor.move.line.down=Rearranging lines usually takes two actions: cut and paste. In <ide/>, you can do it with just one as pressing {0} will pull the current line down. Move the current line to the end of the {1} function.
swift.editor.move.line.up=Similarly, to pull a line up, use {0}. Move the {1} declaration so it precedes its setup.
swift.editor.selections.name=Multiple Selections
swift.editor.selections.next=Press {0} to select the symbol at the caret.
swift.editor.selections.next.again=Press {0} again to select the next occurrence of this symbol.
swift.editor.selections.unselect=Press {0} to deselect the last occurrence.
swift.editor.selections.select.all=Press {0} to select all occurrences in the file.
swift.editor.selections.replace=Type {0} to replace all occurrences of {1} with {2}, and then press {3}.
swift.editor.selections.column=Toggle Column Selection using {0} and place the carets at all the lines from {1} to {2} using the keyboard ({3}).
swift.editor.selections.select.sample=Now type {0} and select all case names with {1}.
swift.editor.selections.select.sample.toggle=Press {0} to toggle the case and then exit the Column Selection mode by pressing {1} again.
swift.editor.selections.reformat=Press {0}, reformat the code with {1}, and that''s it!
swift.editor.popups.name=Quick Popups
swift.editor.popups.param.info=Press {0} to see the initializer signature.
swift.editor.popups.close.param.info=Press {0} to close the popup.
swift.editor.popups.doc=Press {0} to see documentation for the symbol at the caret.
swift.editor.popups.impl=Press {0} to see the definition of the symbol at the caret.
swift.editor.selection.name=Selection
swift.editor.selection.word=Place the caret before any word. Press {0} to move the caret to the next word and select everything in between.
swift.editor.selection.expand=Press {0} to extend the selection to the next code block.
swift.editor.selection.expand.more=Try increasing your selection with {0} until your whole file is selected.
swift.editor.selection.shrink={0} shrinks the current selection. Try pressing it.
swift.editor.selection.all=Now select the whole file instantly with {0}.
swift.navigation.code.name=Code Navigation
swift.navigation.code.intro=When working on your project, you often need to open and edit a specific class, file, or symbol. The fastest way to do this is to use the main navigation triple: <strong>Go to Class/File/Symbol</strong>.
swift.navigation.code.class=Let''s navigate to the {0} class. Press {1}, type {2}, and then press {3}.
swift.navigation.code.fuzzy=Each of the <strong>Go to...</strong> dialogs allows using fuzzy matching, so you can type only a part of the name of a class, file, or symbol in order to find it.
swift.navigation.code.file=Nice! Now let''s open the {0} file: press {1}, type {2}, and press {3}.
swift.navigation.code.symbol=Let''s jump directly to the {0} declaration in the {1} class. Press {2}, type {3}, and then press {4}.
swift.navigation.code.non.project.files=If you also need to include standard libraries and other non-project files, symbols, or classes, just press the shortcut twice.
swift.navigation.code.declaration=Another important action from the <strong>Go to...</strong> family is <strong>Go to Declaration</strong>. Place the caret at {0} and press {1} to jump to its declaration.
swift.navigation.code.implementation=If a method or class has several implementations, {0} will get you to the first one. Try using {1} to see all the definitions of {2}.
swift.navigation.code.go.back=Let''s navigate back to {0} via {1}.
swift.navigation.code.super=<strong>Go to Super Definition</strong> navigates you to the parent class declaration. Press {0} to jump to the {1} class.
swift.navigation.code.super.again=Now press {0} again to jump to the {1} protocol declaration.
swift.navigation.code.recent=Finally, there are two very useful and frequently used navigation actions that can help you quickly switch between recent files and tool windows. First one is the <strong>Recent files</strong> popup. Open it via {0} and select what you need using the arrow keys on the keyboard.
swift.navigation.code.switcher=The second is <strong>Switcher</strong>, which looks the same but immediately disappears after you select something. Hold the <shortcut>\u2303</shortcut> key while pressing {0} and press it again to switch to  some file or tool window. Release the <shortcut>\u2303</shortcut> key after you''ve selected what you wanted.
swift.navigation.windows.name=Main windows \\& views
swift.navigation.windows.intro=There are plenty of navigation views in <ide/>. Knowing which one to call in a given situation will help you use the IDE more efficiently.
swift.navigation.windows.project=The <strong>Project</strong> view is similar to the Project navigator in Xcode. It shows all the projects included in a particular workspace, and all the files and groups inside them. Press {0} to open the <strong>Project</strong> view.
swift.navigation.windows.project2=By default, the <strong>Project</strong> view in <ide/> shows files and folders in the same order as they are stored on the file system.
swift.navigation.windows.project.settings=Click the {0} icon in the project view options menu and then select <strong>Tree Appearance | Xcode Order</strong> to set the same order of files as in Xcode (if you selected the Xcode behavior when setting up <ide/>, this option will be enabled automatically).
swift.navigation.windows.project.settings.more=Other features include <strong>Open Files with Single Click</strong> and <strong>Always Select Opened File</strong>. <strong>Open Files with Single Click</strong> allows you to automatically open the code of a file when selecting it. <strong>Always Select Opened File</strong> automatically sets the focus on the file name in the <strong>Project</strong> view when the editor area is in focus.
swift.navigation.windows.files=The <strong>Files</strong> view is an additional helpful mode for <ide/>\u2019s <strong>Project</strong> view. It shows all the files inside the directory where {0} or {1} is located. With this view, you can easily open any file not included in your project and view it.
swift.navigation.windows.files.activate=Press {0} to activate the <strong>Files</strong> view.
swift.navigation.windows.return.to.editor=Press {0} to return to the editor window.
swift.navigation.windows.structure=The <strong>Structure</strong> view and the <strong>Structure</strong> popup show the structure of a particular file together with all the {0}, {1} and {2} or {3} comments in your code. They work similarly to the <strong>Symbol</strong> navigator in Xcode.
swift.navigation.windows.structure.activate=Press {0} to activate the <strong>Structure</strong> view.
swift.navigation.windows.jump.to.source=Use the \u2191 and \u2193 keys to select any code construct here and press {0} to jump to some place in your code.
swift.navigation.windows.structure.popup=Now activate the <strong>Structure</strong> popup with {0}.
swift.navigation.windows.dismiss.structure.popup=Dismiss this popup using {0} or press \u23CE to jump to some place in your code.
swift.navigation.windows.find=The <strong>Find in Files</strong> ({0}) dialog provides the same functionality as the <strong>Find</strong> navigator in Xcode. Try using it to run a full-text search now.
swift.navigation.windows.build=Invoke {0} to build the project.
swift.navigation.windows.build.messages=The <strong>Build messages</strong> tool window shows compiler output and allows you to filter build messages by their type (see the <strong>Filter messages</strong>({0}) button on the left-hand side).
swift.navigation.windows.run=Now let''s run our project on the simulator to see the <strong>Run</strong> tool window. Press {0}.
swift.navigation.windows.run.window=This tool window shows the console where you can view the output of your application or <strong>Tests runner</strong> if you are running the <strong>Test</strong> Run Configuration. You can always activate it via ({0}).
swift.navigation.windows.stop=Press {0} to stop your application.
swift.navigation.windows.go.to.file=Let''s switch back from the emulator window to the IDE and navigate to {0} with {1}.
swift.navigation.windows.toggle.break=Place a breakpoint at line 11 using {0} and then press {1}.
swift.navigation.windows.debug=The <strong>Debug</strong> tool window ({0}) is similar to Xcode''s <strong>Debug</strong> navigator. It shows all the watches, local variables on the right-hand side, and the list of threads on the left-hand side.
swift.navigation.windows.stop.debug=Press {0} to stop your application.
swift.navigation.windows.breakpoints=The <strong>Breakpoints</strong> dialog provides the same functionality as Xcode''s <strong>Breakpoint</strong> navigator - it shows the list of all breakpoints in your project. Activate it by using {0}.
swift.navigation.windows.init.git=Init the GIT repository via {0}\u2192<strong>Create Git Repository</strong>. Now activate the <strong>VCS</strong> tool window with the {1} shortcut.
swift.navigation.windows.vcs.window=The <strong>VCS</strong> tool window provides everything you need to work with version control systems, including the <strong>Changes</strong> view, the <strong>VCS log</strong>, and more.
swift.navigation.precise.name=Precise Navigation
swift.navigation.precise.intro=Several shortcuts for navigating within a code file can make your development much more efficient. Let's take a quick look at these.
swift.navigation.precise.next.error=There are several warnings and an error in this file. Press {0} to navigate to the first error.
swift.navigation.precise.next.error.again=Now, jump to the next error by using the same shortcut.
swift.navigation.precise.first.error=Jump back to the first error with {0}.
swift.navigation.precise.comment.combo=Now comment each of these lines by pressing {0} - {1} - {2}.
swift.navigation.precise.first.warning=Now press {0} again - it should point you to the first warning in the file.
swift.navigation.precise.fix.warning=Press {0} and use {1} to fix the first warning.
swift.navigation.precise.next.method=Press {0} to quickly jump to the next method in the current file.
swift.navigation.precise.prev.method=Jump to the previous method with {0}.
swift.navigation.precise.jump.last.changes=Imagine you have a long file and you cannot quite remember what you''ve changed in it and where. {0} to jump to the most recent change in the file.
swift.navigation.precise.jump.line=Finally, when you need to jump to a specific line or column in your code, press {0}.
swift.navigation.search.name=Search
swift.navigation.search.intro=Searching in AppCode is different. We have special features for searching text and other features that are dedicated to searching code. This is because code is not mere text - it has a specific structure formed by the code constructs.
swift.navigation.search.var=This sample file has lots of code constructs containing the word {0}. The caret is at the variable named {1}. Press {2} to find all the text occurrences of the word {3}.
swift.navigation.search.find.usages.var=This is not very helpful, is it? In real code, we probably want to search for the {0} variable, without including class names, method names, or any other code constructs. Try pressing {1} and then {2}.
swift.navigation.search.find.usages.var.result=Now, AppCode shows only actual usages of the {0} variable.
swift.navigation.search.find.usages.proto=The same workflow applies to any other code construct. Press {0} \u2192 {1} to find all the usages of the {2} protocol in the project.
swift.navigation.search.find.usages.method=Now let''s find all usages of the method {0}. Press {1} \u2192 {2} again.
swift.navigation.search.rule=The simple rule is: identify the symbol you need to find, instead of which piece of text you need to find. <strong>Find Usages</strong> works for any code construct in the project context, so you will find all the usages in the whole codebase.
swift.navigation.search.text.search=Of course, sometimes you don''t know what exactly you''re looking for, and you want to find as many matches as possible by searching for some text. In this case, use {0} to search in the current file, or use {1} to search in the whole project.
swift.navigation.search.everything=What if you want to search for some text in symbols, file names, or even IDE settings and menu items? Press <shortcut>Double\u21E7</shortcut> to open the <strong>Search Everywhere</strong> dialog.
swift.navigation.search.action=Finally, try using <strong>Find Action</strong> ({0}) to quickly find an IDE action and execute it. For example, type ''plugins'' to open <strong>Preferences | Plugins</strong>.
swift.navigation.todo.name=TODOs \\& Bookmarks
swift.navigation.todo.activate=Have you ever wondered how many todos there are in your code? In <ide/>, there is the dedicated <strong>TODO</strong> tool window for them. Press {0} to activate it.
swift.navigation.todo.custom=You can define your own custom <strong>TODO</strong> filters. Open the TODO filters dialog with {0} \u2192 <strong>Edit Filters</strong> and then add your filters using RegExps.
swift.navigation.todo.go.back=Press {0} to return to the editor.
swift.navigation.todo.bookmark=Now press {0}. This shortcut sets a bookmark in your code. Bookmarks are saved in the project directory and are useful if you want to point your colleague to a specific place in your code.
swift.navigation.todo.all.bookmarks=View all the bookmarks with the {0} shortcut.
swift.navigation.todo.change.bookmark=You can change the name of a bookmark. Select it, press {0}, enter a new name for it, and press {1}.
swift.refactoring.change.signature.name=Change Signature
swift.refactoring.change.signature.intro=<strong>Change Signature</strong> is a refactoring that lets you change the names of methods and functions, edit internal and external parameter names, change their order, and change the visibility of methods and functions \u2013 all at once.
swift.refactoring.change.signature.exec=Press {0} to change the {1} name to {2}.
swift.refactoring.change.signature.exec.again=Press {0} again. Click the row with the {1} parameter and change it to {2}, or add an internal parameter name.
swift.refactoring.change.signature.final=Finally, invoke <strong>Change Signature</strong> again to change the parameter order using {0}/{1} buttons or <shortcut>\u2325\u2191</shortcut>/<shortcut>\u2325\u2193</shortcut> shortcuts.
swift.refactoring.extract.closure.name=Extract Closure
swift.refactoring.extract.closure.intro=<strong>Extract Closure</strong> allows you to encapsulate a code selection into a new closure, with customizable parameters and return type. It works similarly to the Extract Method refactoring.
swift.refactoring.extract.closure.exec=Press {0} and then select <strong>Extract Closure...</strong>.
swift.refactoring.extract.function.name=Extract Function
swift.refactoring.extract.function.intro=<strong>Extract Function</strong> is a refactoring that lets you encapsulate a code selection into a new function with customizable parameters and return type. Extract some lines of code into a new {0} function. Press {1} -> {2}.
swift.refactoring.extract.function.undo=Press {0} to undo the changes.
swift.refactoring.extract.function.change.params=When extracting a function in <ide/>, you can change its signature. Click one of the parameters in the <strong>Parameters</strong> section and use {0}/{1} icons to change the order of parameters. Change their names by clicking the parameter row.
swift.refactoring.extract.function.exec.again=Now press {0} and try to change the signature of the extracted function.
swift.refactoring.extract.variable.name=Extract Variable
swift.refactoring.extract.variable.exec=Press {0} to extract the constant {1} to a variable or field {2}.
swift.refactoring.extract.variable.description=<strong>Extract Variable</strong> does not require you to select the exact code fragment you want to extract. You can place the caret at the statement and select the needed expression.
swift.refactoring.extract.variable.exec.again=Now, press {0} and extract {1} to the variable {2}, by selecting it from the list.
swift.refactoring.rename.name=Rename
swift.refactoring.rename.any=You can rename anything by placing the caret at a symbol and using the <strong>Rename</strong> refactoring.
swift.refactoring.rename.go.to.file=Press {1} to navigate to {0}.
swift.refactoring.rename.var=Let''s start with something simple like renaming the {0} field to {1}. Press {2}, enter a new name, and press {3}.
swift.refactoring.rename.class=Repeat the same actions and rename the {0} type to some new value.
swift.refactoring.rename.check=Press {0}. As you can see, the <strong>Rename</strong> refactoring works globally, even renaming occurrences in .xib and .storyboard files.
swift.rdt.debug.name=Debug
swift.rdt.debug.intro=Now let's learn how to debug your code.
swift.rdt.debug.prepare=Press {1} to navigate to {0}.
swift.rdt.debug.toggle.break=Place a breakpoint at line 11 with {0} and then press {1}.
swift.rdt.debug.step.into=Press {0} to step into, and then {1} to step over.
swift.rdt.debug.run.cursor=Now set the caret at line 21 and execute <strong>Run to cursor</strong> with {0}.
swift.rdt.debug.step.over.next.line=Step over to the next line.
swift.rdt.debug.eval=Select {0} with {1} and use <strong>Evaluate Expression</strong> ({2} \u2192 {3}).
swift.rdt.debug.eval.again=Enter the dot symbol, select some property, and then press {0} to evaluate it without switching to the LLDB console.
swift.rdt.debug.stop=Press {0} to stop debugging the application.
swift.rdt.run.name=Run
swift.rdt.run.actions=<ide/> has two different actions for running the project and for debugging it (because in general, debugging is slower). Press {0} to run your application.
swift.rdt.run.stop=Stop your application with {0}.
swift.rdt.run.another=Great! To select another Run Configuration or simulator for the current run configuration and quickly run your application, press {0}, select a target Run Configuration or simulator, and then press {1}.
swift.rdt.run.final=Stop your application with {0}.
swift.rdt.test.name=Test
swift.rdt.test.prepare=Navigate to {0} by using {1}.
swift.rdt.test.intro=<ide/> supports many testing frameworks including XCTest, Quick, Kiwi, Catch, Boost.Test, and Google Test. Let's explore all the common features you can use when testing your application.
swift.rdt.test.intro.tests=<ide/> automatically identifies the test scope based on the caret position. When the caret is somewhere in the test file, all tests in this file can be executed. The same applies to a single test. To run a single test, place the caret inside the test method.
swift.rdt.test.suite=Press {0} to run all tests in the test suite.
swift.rdt.test.show=Now let''s show tests in the tree view. Click the {0} icon.
swift.rdt.test.single=Use the same {0} shortcut to run a single test.
swift.rdt.test.debug.single=Now let''s debug the test. Place a line breakpoint by using {0} and then debug the test with {1}.
swift.rdt.test.resume=Press {0} to continue execution.
swift.rdt.test.stop.debug=Press {0} to stop debugging.
swift.rdt.test.go.back=Navigate back to {0} by pressing {1}.
swift.rdt.test.failing=Let''s now have a failing test. Run all tests again with the {0} shortcut.
swift.rdt.test.filter.failed=Filter out only the failed tests by clicking the {0} icon.
swift.rdt.test.delete.failed=Delete {0} with {1}.
swift.rdt.test.rerun.failed=Now, rerun only failed tests by clicking {0}.
swift.rdt.test.additional= Specific icons in the <strong>Test Runner</strong> tool window allow you to sort tests by duration ({0}) or alphabetically ({1}). Run all the tests again by pressing {2} and then sort them by duration.
swift.rdt.test.history=The built-in test history automatically saves the results of several most recent test runs and can also load them in the test runner tool window. Load one of the previous test runs by clicking the {0} icon and selecting one of the items in the list.
swift.rdt.test.more=That's it! For some of the frameworks, such as <strong>Quick</strong>, <ide/> offers even more enhanced rendering of test results. For an overview of all test frameworks supported in <ide/>, watch <a href="https://www.youtube.com/watch?v=DXvx6xNG_jc">this video</a>.
